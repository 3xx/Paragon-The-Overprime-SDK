Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 1]
	GameStateBase* GameState;//[Offset: 0x120, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 1]
	Level*[] Levels;//[Offset: 0x138, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 1]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 1]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x5e0, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x678, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x3bb0910
	void HandleTimelineScrubbed();// 0x3bb08f0

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1f25360

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 1]
	float WorldToMeters;//[Offset: 0x240, Size: 1]
	float KillZ;//[Offset: 0x244, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 1]
	float WorldGravityZ;//[Offset: 0x250, Size: 1]
	float GlobalGravityZ;//[Offset: 0x254, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 1]
	float TimeDilation;//[Offset: 0x2e8, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 1]
	PlayerState* Pauser;//[Offset: 0x348, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 1]
	void OnRep_WorldGravityZ();// 0x1b88ed0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 1]
	float InitialLifeSpan;//[Offset: 0x94, Size: 1]
	float CustomTimeDilation;//[Offset: 0x98, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 1]
	Actor* Owner;//[Offset: 0xe0, Size: 1]
	FName NetDriverName;//[Offset: 0xe8, Size: 1]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 1]
	int NetTag;//[Offset: 0x104, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 1]
	float NetPriority;//[Offset: 0x110, Size: 1]
	Pawn* Instigator;//[Offset: 0x118, Size: 1]
	Actor*[] Children;//[Offset: 0x120, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 1]
	FName[] Layers;//[Offset: 0x150, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 1]
	FName[] Tags;//[Offset: 0x170, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 1]
	delegate OnClicked;//[Offset: 0x187, Size: 1]
	delegate OnReleased;//[Offset: 0x188, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3a35000
	void UserConstructionScript();// 0x1f25360
	void TearOff();// 0x2c2f6a0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x3a34f30
	void SetTickGroup(byte NewTickGroup);// 0x3a34e20
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3a34ea0
	void SetReplicates(bool bInReplicates);// 0x3a34d90
	void SetReplicateMovement(bool bInReplicateMovement);// 0x3a34d00
	void SetOwner(Actor* NewOwner);// 0x3a34c70
	void SetNetDormancy(byte NewDormancy);// 0x3a34bf0
	void SetLifeSpan(float InLifespan);// 0x3a34b60
	void SetAutoDestroyWhenFinished(bool bVal);// 0x3a34ad0
	void SetActorTickInterval(float TickInterval);// 0x3a34a50
	void SetActorTickEnabled(bool bEnabled);// 0x3a349c0
	void SetActorScale3D(Vector NewScale3D);// 0x3a34930
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x3a348a0
	void SetActorHiddenInGame(bool bNewHidden);// 0x3a34810
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x3a34780
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3a346f0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3a34660
	void ReceiveTick(float DeltaSeconds);// 0x1f25360
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1f25360
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1f25360
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1f25360
	void ReceiveEndPlay(byte EndPlayReason);// 0x1f25360
	void ReceiveDestroyed();// 0x1f25360
	void ReceiveBeginPlay();// 0x1f25360
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1f25360
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1f25360
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1f25360
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1f25360
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1f25360
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1f25360
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1f25360
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1f25360
	void ReceiveActorEndCursorOver();// 0x1f25360
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1f25360
	void ReceiveActorBeginCursorOver();// 0x1f25360
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x3a34540
	void OnRep_ReplicateMovement();// 0x2c2f680
	void OnRep_ReplicatedMovement();// 0x3a34520
	void OnRep_Owner();// 0x317f010
	void OnRep_Instigator();// 0x3a34500
	void OnRep_AttachmentReplication();// 0x2c2f2f0
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x3a34360
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x3a342c0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x3a341d0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33fc0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x3a33ed0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33cc0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33b10
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33960
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33750
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a33590
	void K2_OnReset();// 0x1f25360
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1f25360
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1f25360
	SceneComponent* K2_GetRootComponent();// 0x3a33570
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x3a33490
	Rotator K2_GetActorRotation();// 0x3a333d0
	Vector K2_GetActorLocation();// 0x3a33350
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3a33240
	void K2_DestroyComponent(ActorComponent* Component);// 0x3a331b0
	void K2_DestroyActor();// 0x3a33190
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3a32fc0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3a32df0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3a32c90
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3a32b30
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a32920
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a32710
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a32560
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a323b0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a321a0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a31ff0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3a31e40
	bool IsOverlappingActor(const Actor* Other);// 0x3a31da0
	bool IsChildActor();// 0x3a31d70
	bool IsActorTickEnabled();// 0x3a31d40
	bool IsActorBeingDestroyed();// 0x3a31d10
	bool HasAuthority();// 0x3a31ce0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x3a31c40
	Vector GetVelocity();// 0x3a31c00
	Transform GetTransform();// 0x3a31bb0
	bool GetTickableWhenPaused();// 0x3a31b80
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x3a31ae0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x3a31a40
	byte GetRemoteRole();// 0x3a31a20
	ChildActorComponent* GetParentComponent();// 0x3a319f0
	Actor* GetParentActor();// 0x3a319c0
	Actor* GetOwner();// 0x1b56880
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x3a31910
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3a31810
	byte GetLocalRole();// 0x3a317f0
	float GetLifeSpan();// 0x3a317b0
	Controller* GetInstigatorController();// 0x3a31780
	Pawn* GetInstigator();// 0x126c7a0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x3a31670
	float GetInputAxisValue(const FName InputAxisName);// 0x3a315d0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x3a314d0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x3a31430
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x3a31390
	float GetGameTimeSinceCreation();// 0x3a31360
	float GetDotProductTo(const Actor* OtherActor);// 0x3a312c0
	float GetDistanceTo(const Actor* OtherActor);// 0x3a31220
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x3a31110
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x3a31030
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x3a30f90
	FName GetAttachParentSocketName();// 0x3a30e50
	Actor* GetAttachParentActor();// 0x3a30e20
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x3a30e90
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x3a30d20
	Vector GetActorUpVector();// 0x3a30cb0
	float GetActorTimeDilation();// 0x3a30c80
	float GetActorTickInterval();// 0x3a30c50
	Vector GetActorScale3D();// 0x3a30c10
	Vector GetActorRightVector();// 0x3a30ba0
	Vector GetActorRelativeScale3D();// 0x3a30b60
	Vector GetActorForwardVector();// 0x3a30af0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x3a30a00
	bool GetActorEnableCollision();// 0x3a309d0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x3a30840
	void ForceNetUpdate();// 0x3a30820
	void FlushNetDormancy();// 0x3a30800
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x3a306a0
	void EnableInput(PlayerController* PlayerController);// 0x3a30610
	void DisableInput(PlayerController* PlayerController);// 0x1253940
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x3a30580
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3a304f0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3a30460
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x3a302a0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x3a30090
	bool ActorHasTag(FName Tag);// 0x3a2fff0

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0x317f010
	void SetTickGroup(byte NewTickGroup);// 0x3a384f0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3a38570
	void SetIsReplicated(bool ShouldReplicate);// 0x3a38460
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x3a383e0
	void SetComponentTickInterval(float TickInterval);// 0x3a38360
	void SetComponentTickEnabled(bool bEnabled);// 0x3a382d0
	void SetAutoActivate(bool bNewAutoActivate);// 0x3a34d00
	void SetActive(bool bNewActive, bool bReset);// 0x3a381f0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3a38160
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3a380d0
	void ReceiveTick(float DeltaSeconds);// 0x1f25360
	void ReceiveEndPlay(byte EndPlayReason);// 0x1f25360
	void ReceiveBeginPlay();// 0x1f25360
	void OnRep_IsActive();// 0x2c2f680
	void K2_DestroyComponent(Object* Object);// 0x3a37fc0
	bool IsComponentTickEnabled();// 0x3a37f90
	bool IsBeingDestroyed();// 0x3a37f60
	bool IsActive();// 0x3a37f30
	Actor* GetOwner();// 0x3a37f10
	float GetComponentTickInterval();// 0x3a37ee0
	void Deactivate();// 0x1a82c20
	bool ComponentHasTag(FName Tag);// 0x3a37ca0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3a37b40
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3a37ab0
	void Activate(bool bReset);// 0x317f2c0

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 1]
	float PenetrationDepth;//[Offset: 0x54, Size: 1]
	int Item;//[Offset: 0x58, Size: 1]
	byte ElementIndex;//[Offset: 0x5c, Size: 1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	float StaticFriction;//[Offset: 0x2c, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float Restitution;//[Offset: 0x34, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float Density;//[Offset: 0x3c, Size: 1]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 1]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 1]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 1]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 1]
	byte SurfaceType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 1]
	enum LightmapType;//[Offset: 0x20f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x250, Size: 1]
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 1]
	int VisibilityId;//[Offset: 0x258, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 1]
	float BoundsScale;//[Offset: 0x284, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 1]
	delegate OnComponentHit;//[Offset: 0x420, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x421, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x422, Size: 1]
	delegate OnComponentWake;//[Offset: 0x423, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x424, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x426, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x427, Size: 1]
	delegate OnClicked;//[Offset: 0x428, Size: 1]
	delegate OnReleased;//[Offset: 0x429, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x42a, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x42b, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x42c, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x42d, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x448, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3b6abf0
	void WakeRigidBody(FName BoneName);// 0x3b6ab60
	void WakeAllRigidBodies();// 0x1ac1880
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x3b6aab0
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x3b6aa20
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x3b6a950
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x3b6a8c0
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x3b6a840
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x3b6a7b0
	void SetSimulatePhysics(bool bSimulate);// 0x3b6a720
	void SetRenderInMainPass(bool bValue);// 0x3b6a690
	void SetRenderCustomDepth(bool bValue);// 0x3b6a600
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x3b6a570
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3b69ef0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3b6a450
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3b6a330
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3b6a330
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x3b6a200
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3b6a0d0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3b69f80
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3b69f80
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x3b69e60
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x3b69dd0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3b69d40
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x3b69c70
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x3b69ba0
	void SetMassScale(FName BoneName, float InMassScale);// 0x3b69ac0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x3b699b0
	void SetLinearDamping(float InDamping);// 0x1abb970
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3b69880
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x3b697f0
	void SetHiddenInSceneCapture(bool bValue);// 0x3b69760
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x3b696d0
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x3b69640
	void SetEnableGravity(bool bGravityEnabled);// 0x3b5a1d0
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3b69560
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3b69480
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3b693b0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3b692e0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3b69200
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3b69120
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3b69050
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3b68f80
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x3b68f00
	void SetCustomDepthStencilValue(int Value);// 0x3b68e70
	void SetCullDistance(float NewCullDistance);// 0x3b68df0
	void SetConstraintMode(byte ConstraintMode);// 0x3b68d70
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x3b68ca0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x3b68c20
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x3b68b50
	void SetCollisionObjectType(byte Channel);// 0x3b68ad0
	void SetCollisionEnabled(byte NewType);// 0x1be5bd0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x3b689f0
	void SetCastShadow(bool NewCastShadow);// 0x3b68960
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x3b688d0
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x3b68840
	void SetBoundsScale(float NewBoundsScale);// 0x3b687c0
	void SetAngularDamping(float InDamping);// 0x3b68730
	void SetAllUseCCD(bool InUseCCD);// 0x3b686a0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x3b685c0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x3b684d0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x3b683b0
	void SetAllMassScale(float InMassScale);// 0x3b68320
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x3b68220
	void PutRigidBodyToSleep(FName BoneName);// 0x3b68190
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3b67de0
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3b67a80
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3b67720
	bool K2_IsQueryCollisionEnabled();// 0x3b676e0
	bool K2_IsPhysicsCollisionEnabled();// 0x3b676a0
	bool K2_IsCollisionEnabled();// 0x3b67660
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3b672f0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x3b67250
	bool IsOverlappingActor(const Actor* Other);// 0x3b671b0
	bool IsGravityEnabled();// 0x3b67180
	bool IsAnyRigidBodyAwake();// 0x3b67150
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x3b67080
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x3b66fb0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x3b66f80
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x3b66e80
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x3b66dd0
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x3b66d20
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x3b66c50
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x3b66c50
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x3b66ba0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3b66aa0
	int GetNumMaterials();// 0x3b66a70
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x3b66990
	MaterialInterface* GetMaterial(int ElementIndex);// 0x3b668f0
	float GetMassScale(FName BoneName);// 0x3b66850
	float GetMass();// 0x3b66810
	float GetLinearDamping();// 0x3b667d0
	Vector GetInertiaTensor(FName BoneName);// 0x3b66720
	bool GetGenerateOverlapEvents();// 0x3b666f0
	byte GetCollisionResponseToChannel(byte Channel);// 0x3b66660
	FName GetCollisionProfileName();// 0x3b66620
	byte GetCollisionObjectType();// 0x3b665f0
	byte GetCollisionEnabled();// 0x3b665c0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x3b66480
	Vector GetCenterOfMass(FName BoneName);// 0x3b663d0
	float GetAngularDamping();// 0x3b66390
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x3b66270
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x3b661a0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x3b66100
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x3b66080
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x3b66000
	void ClearMoveIgnoreComponents();// 0x3b65fd0
	void ClearMoveIgnoreActors();// 0x3b65fb0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x3b65f10
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x3b65c90
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x3b65dc0
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x3b65c90
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x3b65ab0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x3b658d0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x3b65790
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3b65660
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x3b65520
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x3b653e0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x3b652b0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x3b65180
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x3b65030
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3b64f00

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x3b79270
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x3b791a0
	void SetWorldScale3D(Vector NewScale);// 0x3b78fb0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x3b78ee0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x3b78e50
	void SetRelativeScale3D(Vector NewScale3D);// 0x3b78dc0
	void SetMobility(byte NewMobility);// 0x3b78d40
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x3b78c70
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x3b78ab0
	void ResetRelativeTransform();// 0x3b78a90
	void OnRep_Visibility(bool OldValue);// 0x3b78770
	void OnRep_Transform();// 0x3b78750
	void OnRep_AttachSocketName();// 0x3b78730
	void OnRep_AttachParent();// 0x3b78730
	void OnRep_AttachChildren();// 0x3b78710
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b78500
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b78350
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b78150
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b77fa0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b77d90
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b77be0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b779e0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b77830
	Transform K2_GetComponentToWorld();// 0x3b777d0
	Vector K2_GetComponentScale();// 0x3b77790
	Rotator K2_GetComponentRotation();// 0x3b77750
	Vector K2_GetComponentLocation();// 0x3b77710
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x3b775b0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3b773e0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x3b77280
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b77070
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76e60
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76cb0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76b00
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76950
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b767a0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76590
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b763e0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b76230
	bool IsVisible();// 0x3b76200
	bool IsSimulatingPhysics(FName BoneName);// 0x3b76160
	bool IsAnySimulatingPhysics();// 0x3b76130
	Vector GetUpVector();// 0x3b75f90
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x3b75e80
	Rotator GetSocketRotation(FName InSocketName);// 0x3b75dd0
	Quat GetSocketQuaternion(FName InSocketName);// 0x3b75d20
	Vector GetSocketLocation(FName InSocketName);// 0x3b75c70
	bool GetShouldUpdatePhysicsVolume();// 0x3b75c40
	Vector GetRightVector();// 0x3b75c00
	Transform GetRelativeTransform();// 0x3b75ba0
	PhysicsVolume* GetPhysicsVolume();// 0x3b75b70
	void GetParentComponents(out SceneComponent*[] Parents);// 0x3b75ac0
	int GetNumChildrenComponents();// 0x3b75a90
	Vector GetForwardVector();// 0x3b50c30
	Vector GetComponentVelocity();// 0x3b75a50
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x3b75950
	SceneComponent* GetChildComponent(int ChildIndex);// 0x3b758b0
	FName GetAttachSocketName();// 0x32df710
	SceneComponent* GetAttachParent();// 0x3b75890
	FName[] GetAllSocketNames();// 0x3b75810
	bool DoesSocketExist(FName InSocketName);// 0x3b75770
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x3b75690

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 1]
	int TileSize;//[Offset: 0x2c, Size: 1]
	int TileBorderSize;//[Offset: 0x30, Size: 1]
	enum MaterialType;//[Offset: 0x34, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 1]
	byte LODGroup;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x44, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	int GetTileSize();// 0x3b70d10
	int GetTileCount();// 0x3b70cb0
	int GetTileBorderSize();// 0x3b70c70
	int GetSize();// 0x3b70be0
	int GetPageTableSize();// 0x3b70bb0

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 1]
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	byte AddressX;//[Offset: 0x181, Size: 1]
	byte AddressY;//[Offset: 0x182, Size: 1]
	IntPoint ImportedSize;//[Offset: 0x184, Size: 1]
	int Blueprint_GetSizeY();// 0x3ba4c70
	int Blueprint_GetSizeX();// 0x3ba4c40

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 1]
	int LODBias;//[Offset: 0x78, Size: 1]
	byte CompressionSettings;//[Offset: 0x7c, Size: 1]
	byte Filter;//[Offset: 0x7d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 1]
	byte LODGroup;//[Offset: 0x7f, Size: 1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 1]
	enum DownscaleOptions;//[Offset: 0x84, Size: 1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 1]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 1]
	int StreamingIndex;//[Offset: 0x4c, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1e, Size: 1]
	byte CollisionEnabled;//[Offset: 0x20, Size: 1]
	enum SleepFamily;//[Offset: 0x59, Size: 1]
	byte DOFMode;//[Offset: 0x5a, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	FName CollisionProfileName;//[Offset: 0x6c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x74, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x75, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x78, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0xa8, Size: 1]
	float MassInKgOverride;//[Offset: 0xac, Size: 1]
	float LinearDamping;//[Offset: 0xb8, Size: 1]
	float AngularDamping;//[Offset: 0xbc, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0xc0, Size: 1]
	Vector COMNudge;//[Offset: 0xcc, Size: 1]
	float MassScale;//[Offset: 0xd8, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0xdc, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x108, Size: 1]
	float MaxAngularVelocity;//[Offset: 0x110, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0x114, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0x118, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x11c, Size: 1]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x3b30830
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x3b30220
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x3b30180
	PhysicalMaterial* GetPhysicalMaterial();// 0x317ea40
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x3b30060
	Material* GetBaseMaterial();// 0x3b30030

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x209, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20a, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20a, Size: 1]
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20a, Size: 1]
	byte ShadingRate;//[Offset: 0x20b, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 1]
	byte BlendableLocation;//[Offset: 0x20e, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20f, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20f, Size: 1]
	byte StencilCompare;//[Offset: 0x210, Size: 1]
	byte StencilRefValue;//[Offset: 0x211, Size: 1]
	byte RefractionMode;//[Offset: 0x212, Size: 1]
	int BlendablePriority;//[Offset: 0x214, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x21c, Size: 1]
	float RefractionDepthBias;//[Offset: 0x220, Size: 1]
	Guid StateId;//[Offset: 0x224, Size: 1]
	float MaxDisplacement;//[Offset: 0x234, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x268, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0xf0, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x110, Size: 1]
	Font*[] FontValues;//[Offset: 0x120, Size: 1]
	int[] FontPageValues;//[Offset: 0x130, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float PlacementJitter;//[Offset: 0x20, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 1]
	int MinLOD;//[Offset: 0x2c, Size: 1]
	enum Scaling;//[Offset: 0x30, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 1]
	float LightmapUVDensity;//[Offset: 0x98, Size: 1]
	int LightMapResolution;//[Offset: 0x9c, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 1]
	int LODForCollision;//[Offset: 0xb0, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 1]
	Object* EditableMesh;//[Offset: 0x140, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 1]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x3b9e6c0
	void RemoveSocket(StaticMeshSocket* Socket);// 0x3b9d660
	StaticMaterial[] GetStaticMaterials();// 0x3b9d580
	int GetNumSections(int InLOD);// 0x3b9d370
	int GetNumLODs();// 0x3b9d340
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x3b9d210
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x3b9d190
	int GetMaterialIndex(FName MaterialSlotName);// 0x3b9d0f0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x3b9d050
	BoxSphereBounds GetBounds();// 0x3b9cea0
	Box GetBoundingBox();// 0x3b9ce50
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x3b9cd50
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x3b9ccc0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x3b9cbc0
	void AddSocket(StaticMeshSocket* Socket);// 0x3b9cb30
	FName AddMaterial(MaterialInterface* Material);// 0x3b9caa0

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 1]
	Vector BuildScale3D;//[Offset: 0x288, Size: 1]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 1]
	byte PhysicsType;//[Offset: 0x30, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 1]
	byte CollisionReponse;//[Offset: 0x32, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x32931f0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x3293110
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x3293030
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x3292cf0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector position);// 0x328aab0
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x328a990
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x328a8c0
	void ReversePolygonFacing(PolygonID PolygonID);// 0x328a840
	void ReserveNewVertices(int NumberOfNewVertices);// 0x328a7b0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x328a570
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x328a720
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x328a690
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x328a600
	void ReserveNewEdges(int NumberOfNewEdges);// 0x328a570
	bool IsVertexValid(VertexID VertexID);// 0x328a4e0
	bool IsVertexOrphaned(VertexID VertexID);// 0x328a450
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x328a3c0
	bool IsTriangleValid(const TriangleID TriangleID);// 0x328a330
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x328a2a0
	bool IsPolygonValid(PolygonID PolygonID);// 0x328a210
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x328a180
	bool IsEmpty();// 0x328a150
	bool IsEdgeValid(EdgeID EdgeID);// 0x328a0c0
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x3289fe0
	bool IsEdgeInternal(EdgeID EdgeID);// 0x3289f50
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3289e60
	Vector GetVertexPosition(VertexID VertexID);// 0x3289dc0
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x3289ce0
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x3289c40
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x3289b60
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x3289a80
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x32899a0
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x32898b0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x32897c0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x32896d0
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x32895e0
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x32894f0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x3289400
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x3289310
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3289220
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x3289140
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x32890a0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x3289000
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x3288f10
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x3288e20
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x3288d30
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3288c40
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x3288b50
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x3288ab0
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x32889c0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x32888d0
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x32887e0
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x32886f0
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x3288660
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x32885d0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x3288540
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x32884b0
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x3288420
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x3288390
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x3288300
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x3288270
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x32881e0
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x3288150
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x32880c0
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x3288030
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x3287f40
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x3287e60
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x3287d70
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x3287c80
	void Empty();// 0x3287c60
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x3287b70
	void DeleteVertex(VertexID VertexID);// 0x3287af0
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x3287930
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x32878b0
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x32876f0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x3287600
	void CreateVertexWithID(VertexID VertexID);// 0x3287580
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x32874b0
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x3287410
	VertexID CreateVertex();// 0x32873d0
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3287220
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x32870b0
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3286f00
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x3286e80
	PolygonGroupID CreatePolygonGroup();// 0x3286e40
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3286cd0
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x3286bb0
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x3286ad0
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x3286a50

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 1]
	int Priority;//[Offset: 0x25c, Size: 1]
	float FluidFriction;//[Offset: 0x260, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 1]
	int PolyFlags;//[Offset: 0x228, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x450, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x458, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x3b30f20
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x3b30e50
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x3b30d60
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x3b30c90
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x3b30ba0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x3b30ad0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x3b30710
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3b30660
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x3b305c0
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3b30510
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x3b30470
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3b303c0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x3b30320
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x3b30250
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x3b2fe70
	void CopyInterpParameters(MaterialInstance* Source);// 0x3b2fde0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 1]
	Controller* LastHitBy;//[Offset: 0x250, Size: 1]
	Controller* Controller;//[Offset: 0x258, Size: 1]
	Vector ControlInputVector;//[Offset: 0x264, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 1]
	void SpawnDefaultController();// 0x3b4e760
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x3b4d660
	void ReceiveUnpossessed(Controller* OldController);// 0x1f25360
	void ReceivePossessed(Controller* NewController);// 0x1f25360
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x3b4cb00
	void OnRep_PlayerState();// 0xeba2b0
	void OnRep_Controller();// 0x3b4cae0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3b4c8a0
	Vector K2_GetMovementInputVector();// 0x3b4c740
	bool IsPlayerControlled();// 0x3a78250
	bool IsPawnControlled();// 0x3b4c870
	bool IsMoveInputIgnored();// 0x3b4c810
	bool IsLocallyControlled();// 0x3b4c7e0
	bool IsControlled();// 0x3b4c7b0
	bool IsBotControlled();// 0x3a9b0f0
	Vector GetPendingMovementInputVector();// 0x3b4c740
	Vector GetNavAgentLocation();// 0x3b4c680
	PawnMovementComponent* GetMovementComponent();// 0x3a80e00
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x3b4c5f0
	Vector GetLastMovementInputVector();// 0x3b4c5b0
	Rotator GetControlRotation();// 0x3b4c480
	Controller* GetController();// 0x3b4c4c0
	Rotator GetBaseAimRotation();// 0x3b4c2a0
	void DetachFromControllerPendingDestroy();// 0x3b4c280
	Vector ConsumeMovementInputVector();// 0x3b4c240
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x3b4bd20
	void AddControllerYawInput(float Val);// 0x3b4bbb0
	void AddControllerRollInput(float Val);// 0x3b4bb20
	void AddControllerPitchInput(float Val);// 0x3b4ba90

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x248, Size: 1]
	Pawn* Pawn;//[Offset: 0x250, Size: 1]
	Character* Character;//[Offset: 0x260, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 1]
	Rotator ControlRotation;//[Offset: 0x288, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0x3a78870
	void StopMovement();// 0x3a78850
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x3a78760
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x3a786d0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x3a78640
	void SetControlRotation(out const Rotator NewRotation);// 0x3a785b0
	void ResetIgnoreMoveInput();// 0x3a78590
	void ResetIgnoreLookInput();// 0x1ac21b0
	void ResetIgnoreInputFlags();// 0x3a78570
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1f25360
	void ReceivePossess(Pawn* PossessedPawn);// 0x1f25360
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1f25360
	void Possess(Pawn* InPawn);// 0x3a784e0
	void OnRep_PlayerState();// 0x1bd9c50
	void OnRep_Pawn();// 0x3a784c0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x3a78390
	Pawn* K2_GetPawn();// 0x3a78360
	bool IsPlayerController();// 0x3a78330
	bool IsMoveInputIgnored();// 0x3a78300
	bool IsLookInputIgnored();// 0x3a782d0
	bool IsLocalPlayerController();// 0x3a78280
	bool IsLocalController();// 0x3a78250
	Actor* GetViewTarget();// 0x3a78220
	Rotator GetDesiredRotation();// 0x3a78020
	Rotator GetControlRotation();// 0x1b874b0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x3a77ef0
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x3a77db0
	PlayerController* CastToPlayerController();// 0x3a77d80

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 1]
	int PlayerId;//[Offset: 0x224, Size: 1]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1f25360
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1f25360
	void OnRep_UniqueId();// 0xeba170
	void OnRep_Score();// 0x1b88ed0
	void OnRep_PlayerName();// 0xe0e4e0
	void OnRep_PlayerId();// 0x1b35f90
	void OnRep_bIsInactive();// 0x1b366f0
	bool IsOnlyASpectator();// 0x3b61ff0
	FString GetPlayerName();// 0x3b61e00

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x1ac3120
	void StopJumping();// 0x1ab70e0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x3a6fe00
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x3a6fa30
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x3a6f8c0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3a6f620
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3a6f220
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3a6ed90
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3a6e900
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3a6e5c0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x3a6e520
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x3a6e400
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x3a6e260
	void OnRep_RootMotion();// 0x3a6e240
	void OnRep_ReplicatedBasedMovement();// 0x1b26270
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x3a6e220
	void OnRep_IsCrouched();// 0x3a6e200
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f25360
	void OnLanded(out const HitResult Hit);// 0x1f25360
	void OnJumped();// 0x3a6e1e0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3a6e0b0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1f25360
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f25360
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1f25360
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f25360
	void Jump();// 0x3a6e090
	bool IsPlayingRootMotion();// 0x3a6e060
	bool IsPlayingNetworkedRootMotionMontage();// 0x3a6e030
	bool IsJumpProvidingForce();// 0x3a6e000
	bool HasAnyRootMotion();// 0x3a6dfd0
	AnimMontage* GetCurrentMontage();// 0x3a6d940
	Vector GetBaseTranslationOffset();// 0x3a6d910
	Rotator GetBaseRotationOffsetRotator();// 0x3a6d8c0
	float GetAnimRootMotionTranslationScale();// 0x3a6d890
	void Crouch(bool bClientSimulation);// 0x3a6d800
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3a6d480
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x3a6d390
	void ClientCheatWalk();// 0x3a6d370
	void ClientCheatGhost();// 0x3a6d350
	void ClientCheatFly();// 0x3a6d330
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3a6ce50
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3a6cb20
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3a6c890
	void ClientAckGoodMove(float Timestamp);// 0x3a6c810
	bool CanJumpInternal();// 0x3a6c7e0
	bool CanJump();// 0x3a6c7b0
	bool CanCrouch();// 0x3a6c780
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x3a6c690

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 1]
	byte AnimationMode;//[Offset: 0x8b7, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 1]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3b82cc0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3b82c30
	void ToggleDisablePostProcessBlueprint();// 0x3b82c10
	void TermBodiesBelow(FName ParentBoneName);// 0x3b82b80
	void SuspendClothingSimulation();// 0x3b82b60
	void Stop();// 0x3b82b40
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3b82a70
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x1b3b440
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1b3b440
	void SetTeleportRotationThreshold(float Threshold);// 0x3b829f0
	void SetTeleportDistanceThreshold(float Threshold);// 0x3b82970
	void SetPosition(float InPos, bool bFireNotifies);// 0x3b82890
	void SetPlayRate(float Rate);// 0x3b82810
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3b82790
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3b82670
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3b82550
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3b824c0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3b823b0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3b822e0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3b82250
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3b821c0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3b820f0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3b81fe0
	void SetClothMaxDistanceScale(float Scale);// 0x3b81f60
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3b81e90
	void SetAnimClass(class Object NewClass);// 0x1aa2730
	void SetAnimationMode(byte InAnimationMode);// 0x3b81e10
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3b81d80
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3b81c20
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3b81a50
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3b81b20
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x3b819c0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3b81890
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3b81760
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3b815f0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3b81560
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3b81480
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3b81350
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3b811d0
	void ResumeClothingSimulation();// 0x3b811b0
	void ResetClothTeleportMode();// 0x3b81190
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3b81110
	void ResetAllowedAnimCurveEvaluation();// 0x3b810f0
	void ResetAllBodiesSimulatePhysics();// 0x3b810d0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3b81000
	void Play(bool bLooping);// 0x3b80f70
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);// 0x3b80db0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3b80ce0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3b80c50
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x3b80a50
	bool IsPlaying();// 0x3b80a20
	bool IsClothingSimulationSuspended();// 0x3b809f0
	bool IsBodyGravityEnabled(FName BoneName);// 0x3b80950
	bool HasValidAnimationInstance();// 0x3b80920
	float GetTeleportRotationThreshold();// 0x3b808f0
	float GetTeleportDistanceThreshold();// 0x3b808f0
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x3b80730
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x3b80500
	Vector GetSkeletalCenterOfMass();// 0x3b804c0
	AnimInstance* GetPostProcessInstance();// 0x3b80490
	float GetPosition();// 0x3b80460
	float GetPlayRate();// 0x3b80430
	float GetMorphTarget(FName MorphTargetName);// 0x3b80390
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3b802f0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3b80250
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3b80160
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3b800c0
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x3b7ff20
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x3b7fd30
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x3b7fb80
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x3b7f990
	bool GetDisablePostProcessBlueprint();// 0x3b7f960
	bool GetDisableAnimCurves();// 0x3b7f930
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3b7f7b0
	float GetClothMaxDistanceScale();// 0x3b7f750
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3b7f780
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3b7f680
	AnimInstance* GetAnimInstance();// 0x3b7f620
	class Object GetAnimClass();// 0x3b7f5f0
	byte GetAnimationMode();// 0x3b7f650
	bool GetAllowRigidBodyAnimNode();// 0x3b7f590
	bool GetAllowedAnimCurveEvaluate();// 0x3b7f5c0
	void ForceClothNextUpdateTeleportAndReset();// 0x3b7f570
	void ForceClothNextUpdateTeleport();// 0x3b7f550
	FName FindConstraintBoneName(int ConstraintIndex);// 0x3b7f4c0
	void ClearMorphTargets();// 0x3b7f4a0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3b7f370
	void BindClothToMasterPoseComponent();// 0x3b7f350
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3b7f280
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3b7f100
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3b7ef80
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3b7ee60

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x480, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x488, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x490, Size: 1]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x4a0, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a8, Size: 1]
	int ForcedLodModel;//[Offset: 0x5b0, Size: 1]
	int MinLodModel;//[Offset: 0x5b4, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x5c0, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5d0, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x604, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x606, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x606, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x606, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x606, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x606, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x607, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x607, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x607, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x607, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x607, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x607, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x607, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x607, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x608, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x608, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x608, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x609, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x609, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x60c, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x620, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3b88670
	void UnHideBoneByName(FName BoneName);// 0x3b885e0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3b88410
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3b88240
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3b880f0
	void ShowAllMaterialSections(int LODIndex);// 0x3b88060
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x3b87f90
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x3b87ea0
	bool SetSkinWeightProfile(FName InProfileName);// 0x3b87e00
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3b87d10
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x3b87c40
	void SetRenderStatic(bool bNewValue);// 0x3b87bb0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3b87a80
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3b87950
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3b87880
	void SetMinLOD(int InNewMinLOD);// 0x3b877f0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3b87720
	void SetForcedLOD(int InNewForcedLOD);// 0x3b87690
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3b87600
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3b87570
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3b874f0
	bool IsUsingSkinWeightProfile();// 0x3b874c0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3b873f0
	bool IsBoneHiddenByName(FName BoneName);// 0x3b87350
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3b87150
	int GetVertexOffsetUsage(int LODIndex);// 0x3b870b0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3b86f90
	FName GetSocketBoneName(FName InSocketName);// 0x3b86e50
	Vector GetRefPosePosition(int BoneIndex);// 0x3b86da0
	FName GetParentBone(FName BoneName);// 0x3b86d10
	int GetNumLODs();// 0x3b86ce0
	int GetNumBones();// 0x3b86cb0
	int GetForcedLOD();// 0x3b86c80
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3b86b80
	FName GetCurrentSkinWeightProfileName();// 0x3b86b60
	FName GetBoneName(int BoneIndex);// 0x3b86ad0
	int GetBoneIndex(FName BoneName);// 0x3b86a30
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x3b86890
	void ClearVertexColorOverride(int LODIndex);// 0x3b86800
	void ClearSkinWeightProfile();// 0x3b867e0
	void ClearSkinWeightOverride(int LODIndex);// 0x3b86750
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3b86680

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x450, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x3b348a0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x3b34740
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x3b34280
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x3b33be0
	FName[] GetMaterialSlotNames();// 0x3b33930
	MaterialInterface*[] GetMaterials();// 0x3b339b0
	int GetMaterialIndex(FName MaterialSlotName);// 0x3b33890

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 1]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x3b7d090
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x3b7cfe0
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x3b7cf30
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x1261ce0
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x3b7ce20
	int NumSockets();// 0x3b7cdf0
	FString[] K2_GetAllMorphTargetNames();// 0x3b7cd10
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x3b7cc40
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x3b7cba0
	Skeleton* GetSkeleton();// 0x3b7cb80
	PhysicsAsset* GetShadowPhysicsAsset();// 0x3b7cb60
	PhysicsAsset* GetPhysicsAsset();// 0x3b7cb40
	NodeMappingContainer*[] GetNodeMappingData();// 0x3b7cab0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x3b7ca10
	MorphTarget*[] GetMorphTargets();// 0x3b7c9e0
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x3b7c9b0
	SkeletalMaterial[] GetMaterials();// 0x3b7c980
	SkeletalMeshLODSettings* GetLODSettings();// 0x3acd700
	BoxSphereBounds GetImportedBounds();// 0x3b7c930
	Object* GetDefaultAnimatingRig();// 0x3b7c8d0
	BoxSphereBounds GetBounds();// 0x3b7c880
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x3b7c6b0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x3b7c5d0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x3b7c530

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x3b87220
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x3b86ee0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 1]
	enum Interpolation;//[Offset: 0x180, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 1]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x3a49220

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1f25360
	FString GetNotifyName();// 0x32dff00

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1f25360
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1f25360
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1f25360
	FString GetNotifyName();// 0x32dff00

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0x1bc3060

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x3a7dc40

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x3a78140
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x3a78060

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 1]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 1]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	StringCurve StringCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 1]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	FString Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 1]
	int DefaultValue;//[Offset: 0x78, Size: 1]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x70, Size: 1]
	SimpleCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	enum SolverType;//[Offset: 0x7c, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 1]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 1]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 1]
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 1]
	float AngularBreakThreshold;//[Offset: 0x18, Size: 1]
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x114, Size: 1]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 1]
	int SolverIterations;//[Offset: 0x4, Size: 1]
	int JointIterations;//[Offset: 0x8, Size: 1]
	int CollisionIterations;//[Offset: 0xc, Size: 1]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 1]
	int JointPushOutIterations;//[Offset: 0x14, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3a3f700
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3a40de0
	Pawn* TryGetPawnOwner();// 0x3a40db0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x3a40ce0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3a40c10
	void SetRootMotionMode(byte Value);// 0x3a34e20
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3a40b80
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3a40af0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3a40a20
	void SavePoseSnapshot(FName SnapshotName);// 0x3a40990
	void ResetDynamics(enum InTeleportType);// 0x3a40910
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3a406b0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3a404e0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3a40410
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3a40340
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3a40270
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3a401a0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3a40090
	void Montage_Resume(const AnimMontage* Montage);// 0x3a40000
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x3a3fe50
	void Montage_Pause(const AnimMontage* Montage);// 0x3a3fdc0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3a3fcf0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3a3fc20
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3a3fb80
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3a3fae0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3a3fa40
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3a3f9a0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3a3f900
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3a3f870
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3a3f7d0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3a3f700
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3a3f630
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3a3f5a0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3a3f440
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3a3f370
	bool IsAnyMontagePlaying();// 0x3a3f340
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3a3f270
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3a3f150
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3a3f0a0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3a3efd0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3a3ef00
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3a3ee30
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3a3ed60
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3a3ec90
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3a3ec60
	bool GetPropagateNotifiesToLinkedInstances();// 0x3a3ec30
	SkeletalMeshComponent* GetOwningComponent();// 0x3a3ec00
	Actor* GetOwningActor();// 0x3a3ebd0
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x3a3eae0
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x3a3ea10
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3a3e970
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3a3e8d0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3a3e7e0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3a3e740
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3a3e670
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3a3e5a0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3a3e4d0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3a3e400
	float GetInstanceMachineWeight(int MachineIndex);// 0x3a3e360
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3a3e2c0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3a3e220
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3a3e180
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3a3e0e0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3a3e040
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3a3dfa0
	float GetCurveValue(FName CurveName);// 0x3a3df00
	FName GetCurrentStateName(int MachineIndex);// 0x3a3de70
	AnimMontage* GetCurrentActiveMontage();// 0x3a3de40
	void GetAllCurveNames(out FName[] OutNames);// 0x3a3dd90
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3a3dca0
	void ClearMorphTargets();// 0x3a3dc80
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3a3db80
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1f25360
	void BlueprintPostEvaluateAnimation();// 0x1f25360
	void BlueprintLinkedAnimationLayersInitialized();// 0x1f25360
	void BlueprintInitializeAnimation();// 0x1f25360
	void BlueprintBeginPlay();// 0x1f25360

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 1]
	FName VariableName;//[Offset: 0x94, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x3a7de50

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x3a7ddb0
	LinearColor GetLinearColorValue(float InTime);// 0x3a7dce0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x3a7d3a0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 1]
	void SetNumSubsteps(int NumSubsteps);// 0x32bc9a0
	void SetNumIterations(int NumIterations);// 0x32bc910
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x32bc880
	void PhysicsAssetUpdated();// 0x1a82c20
	float GetSimulationTime();// 0x32bc860
	int GetNumSubsteps();// 0x32bc840
	int GetNumKinematicParticles();// 0x32bc820
	int GetNumIterations();// 0x32bc800
	int GetNumDynamicParticles();// 0x32bc7e0
	int GetNumCloths();// 0x32bc7c0
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x32bc710
	void EnableGravityOverride(out const Vector InVector);// 0x32bc680
	void DisableGravityOverride();// 0x2c2f2f0
	void ClothConfigUpdated();// 0xd9d270

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 1]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 1]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 1]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 1]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3a71c40
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3a71bc0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3a71af0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1477640
	void SetGroupsToIgnore(int GroupFlags);// 0x14775b0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1477520
	void SetGroupsToAvoid(int GroupFlags);// 0x1477490
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x14770c0
	void SetAvoidanceGroup(int GroupFlags);// 0x1477030
	void SetAvoidanceEnabled(bool bEnable);// 0x3a71a60
	float K2_GetWalkableFloorZ();// 0x3a71a30
	float K2_GetWalkableFloorAngle();// 0x3a71a00
	float K2_GetModifiedMaxAcceleration();// 0x3a719c0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3a71870
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3a71650
	bool IsWalking();// 0x3a71620
	bool IsWalkable(out const HitResult Hit);// 0x3a71530
	float GetValidPerchRadius();// 0x3a71500
	float GetPerchRadiusThreshold();// 0x3a714d0
	PrimitiveComponent* GetMovementBase();// 0x3a714a0
	float GetMinAnalogSpeed();// 0x3a71460
	float GetMaxJumpHeightWithJumpTime();// 0x3a71420
	float GetMaxJumpHeight();// 0x3a713e0
	float GetMaxBrakingDeceleration();// 0x3a713a0
	float GetMaxAcceleration();// 0x3a71360
	Vector GetLastUpdateVelocity();// 0x3a71330
	Rotator GetLastUpdateRotation();// 0x3a712e0
	Vector GetLastUpdateLocation();// 0x3a712b0
	Vector GetImpartedMovementBaseVelocity();// 0x3a71270
	Vector GetCurrentAcceleration();// 0x3a71230
	Character* GetCharacterOwner();// 0x1ad3af0
	float GetAnalogInputModifier();// 0x3a71200
	void DisableMovement();// 0x3a711e0
	void ClearAccumulatedForces();// 0x3a711c0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a70fa0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3a70e30
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x3a70d50
	void AddForce(Vector Force);// 0x3a70cc0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x3b4c700
	bool IsMoveInputIgnored();// 0x3b4c840
	Vector GetPendingInputVector();// 0x3b4c700
	Pawn* GetPawnOwner();// 0x3b4c6d0
	Vector GetLastInputVector();// 0x3b4c570
	Vector ConsumeInputVector();// 0x3b4c200
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3b4bc40

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x3b37480
	void StopActiveMovement();// 0x3b37460
	bool IsSwimming();// 0x3b37430
	bool IsMovingOnGround();// 0x3a71620
	bool IsFlying();// 0x3b37400
	bool IsFalling();// 0x3a51d90
	bool IsCrouching();// 0x3b373d0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x3b349a0
	void SnapUpdatedComponentToPlane();// 0x3b34980
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x3b34810
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x3b346b0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x3b34620
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x3b34530
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x3b344a0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x3b34420
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3b341f0
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x3b33d00
	float K2_GetModifiedMaxSpeed();// 0x3b33cc0
	float K2_GetMaxSpeedModifier();// 0x3b33c80
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x3b33b40
	Vector GetPlaneConstraintOrigin();// 0x3b33b00
	Vector GetPlaneConstraintNormal();// 0x3b33ac0
	enum GetPlaneConstraintAxisSetting();// 0x3b33aa0
	PhysicsVolume* GetPhysicsVolume();// 0x3b33a70
	float GetMaxSpeed();// 0x3b33a30
	float GetGravityZ();// 0x3b33850
	Vector ConstrainNormalToPlane(Vector Normal);// 0x3b337a0
	Vector ConstrainLocationToPlane(Vector Location);// 0x3b336f0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x3b33640

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x468, Size: 1]
	float CapsuleRadius;//[Offset: 0x46c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3a6fce0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3a6fc00
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3a6fb20
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3a6dee0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3a6ddf0
	float GetUnscaledCapsuleRadius();// 0x3a6ddd0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3a6dda0
	float GetUnscaledCapsuleHalfHeight();// 0x3a6dd80
	float GetShapeScale();// 0x3a6dc60
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3a6db40
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3a6da30
	float GetScaledCapsuleRadius();// 0x3a6d9f0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3a6d9a0
	float GetScaledCapsuleHalfHeight();// 0x3a6d970

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x450, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x458, Size: 1]
	Color ShapeColor;//[Offset: 0x460, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 1]
	HUD* MyHUD;//[Offset: 0x2b0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 1]
	int ClientCap;//[Offset: 0x330, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3d4, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x418, Size: 1]
	float InputYawScale;//[Offset: 0x42c, Size: 1]
	float InputPitchScale;//[Offset: 0x430, Size: 1]
	float InputRollScale;//[Offset: 0x434, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x454, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	Vector SpawnLocation;//[Offset: 0x558, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x3b5d9b0
	bool WasInputKeyJustPressed(Key Key);// 0x3b5d8c0
	void ToggleSpeaking(bool bInSpeaking);// 0x3b5d830
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x3b5d760
	void SwitchLevel(FString URL);// 0x3b5d6c0
	void StopHapticEffect(enum Hand);// 0x3b5d620
	void StartFire(byte FireModeNum);// 0x3b5cf40
	void SetVirtualJoystickVisibility(bool bVisible);// 0x3b5c950
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x3b5c7b0
	void SetName(FString S);// 0x3b5c710
	void SetMouseLocation(const int X, const int Y);// 0x3b5c640
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x3b5c570
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x3b5c330
	void SetDisableHaptics(bool bNewDisabled);// 0x3b5c280
	void SetControllerLightColor(Color Color);// 0x3b5c200
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3b5c020
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x3b5bef0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x3b5be10
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x3b5bd20
	void ServerViewPrevPlayer();// 0x3b5bcd0
	void ServerViewNextPlayer();// 0x3b5bc80
	void ServerVerifyViewTarget();// 0x3b5bc30
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x3b5bb70
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x3b5bab0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x3b5b980
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3b5b820
	void ServerToggleAILogging();// 0x3b5b7d0
	void ServerShortTimeout();// 0x3b5b780
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x3b5b6c0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x3b5b580
	void ServerRestartPlayer();// 0x3b5b530
	void ServerPause();// 0x3b5b4e0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x3b5b420
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x3b5b2c0
	void ServerExecRPC(FString Msg);// 0x3b5b200
	void ServerExec(FString Msg);// 0x3b5b160
	void ServerCheckClientPossessionReliable();// 0x3b5b110
	void ServerCheckClientPossession();// 0x3b5b0c0
	void ServerChangeName(FString S);// 0x3b5b000
	void ServerCamera(FName NewMode);// 0x3b5af40
	void ServerAcknowledgePossession(Pawn* P);// 0x3b5ae80
	void SendToConsole(FString Command);// 0x3b5ade0
	void RestartLevel();// 0x3b5adc0
	void ResetControllerLightColor();// 0x3b5ada0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x3b5ab30
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x3b5a9d0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x3b5a720
	void Pause();// 0x3b5a260
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x3b5a1d0
	void LocalTravel(FString URL);// 0x3b5a130
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x3b59f70
	bool IsInputKeyDown(Key Key);// 0x3b59e80
	void GetViewportSize(out int SizeX, out int SizeY);// 0x3b59da0
	SpectatorPawn* GetSpectatorPawn();// 0x3b59d80
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x3b59c60
	Vector GetInputVectorKeyState(Key Key);// 0x3b59b50
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3b599c0
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x3b598e0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x3b59750
	float GetInputKeyTimeDown(Key Key);// 0x3b59650
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3b59520
	float GetInputAnalogKeyState(Key Key);// 0x3b59420
	HUD* GetHUD();// 0x3b58a10
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3b59250
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3b590a0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3b58ef0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3b58d60
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3b58bd0
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3b58a40
	Vector GetFocalLocation();// 0x3b589d0
	void FOV(float NewFOV);// 0x3b58820
	void EnableCheats();// 0x3b58800
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x3b58670
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x3b58570
	void ConsoleKey(Key Key);// 0x3b58480
	void ClientWasKicked(const FText KickReason);// 0x3b583c0
	void ClientVoiceHandshakeComplete();// 0x3b583a0
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x3b58300
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x3b58140
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3b58020
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3b57ea0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3b57d20
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x3b57bb0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x3b57ae0
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3b57a10
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3b57940
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3b578b0
	void ClientStartOnlineSession();// 0x3b57890
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x3b577c0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3b57650
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3186ec0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x3b57550
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x3b574c0
	void ClientSetHUD(class HUD NewHUDClass);// 0x3b57430
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x3b57320
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x3b571a0
	void ClientSetCameraMode(FName NewCamMode);// 0x3b57110
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x3b56f00
	void ClientSetBlockOnAsyncLoading();// 0x3b56ee0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x3b56e20
	void ClientReturnToMainMenu(FString ReturnReason);// 0x3b56d80
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xf87d10
	void ClientRestart(Pawn* NewPawn);// 0x3b56cf0
	void ClientReset();// 0x3b56cd0
	void ClientRepObjRef(Object* Object);// 0x3b56c40
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x3b56aa0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x3b56940
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x3b56820
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x3b566b0
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x3b565a0
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x3b564b0
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x3b561e0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x3b560c0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x3b55f90
	void ClientIgnoreMoveInput(bool bIgnore);// 0x3b55f00
	void ClientIgnoreLookInput(bool bIgnore);// 0x3b55e70
	void ClientGotoState(FName NewState);// 0x1bd5330
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x3b55da0
	void ClientForceGarbageCollection();// 0x3b55d80
	void ClientFlushLevelStreaming();// 0x3b55d60
	void ClientEndOnlineSession();// 0x3b55d40
	void ClientEnableNetworkVoice(bool bEnable);// 0x3b55cb0
	void ClientCommitMapChange();// 0x1aa2290
	void ClientClearCameraLensEffects();// 0x3b55c90
	void ClientCapBandwidth(int Cap);// 0x3b55c00
	void ClientCancelPendingMapChange();// 0x1aa2710
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x3b55ad0
	void ClearAudioListenerOverride();// 0x3b55ab0
	void ClearAudioListenerAttenuationOverride();// 0x3b55a90
	bool CanRestartPlayer();// 0x3b55a60
	void Camera(FName NewMode);// 0x3b559d0
	void AddYawInput(float Val);// 0x3b55940
	void AddRollInput(float Val);// 0x3b558b0
	void AddPitchInput(float Val);// 0x3b55820
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x3b55650

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChanged;//[Size: 1]
	Margin Padding;//[Offset: 0x190, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 1]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 1]
	int Priority;//[Offset: 0x1e0, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 1]
	void UnregisterInputComponent();// 0x317c810
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x317c730
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x317c650
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x317c5c0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x317c530
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1f25360
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x317c460
	void StopListeningForAllInputActions();// 0x317c440
	void StopAnimationsAndLatentActions();// 0x317c420
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x317c390
	void StopAllAnimations();// 0x317c370
	void SetPositionInViewport(Vector2D position, bool bRemoveDPIScale);// 0x317c070
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x317bfa0
	void SetPadding(Margin InPadding);// 0x317bf10
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x317be80
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x317bdb0
	void SetInputActionPriority(int NewPriority);// 0x317bb50
	void SetInputActionBlocking(bool bShouldBlock);// 0x317bac0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x317b950
	void SetDesiredSizeInViewport(Vector2D Size);// 0x317b8d0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x317b7b0
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x317b6e0
	void SetAnchorsInViewport(Anchors Anchors);// 0x317b650
	void SetAlignmentInViewport(Vector2D Alignment);// 0x317b5d0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x317b540
	void RemoveFromViewport();// 0x1a7da90
	void RegisterInputComponent();// 0x317b520
	void PreConstruct(bool IsDesignTime);// 0x1f25360
	void PlaySound(SoundBase* SoundToPlay);// 0x317b490
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x317b270
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x317b150
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x317b030
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x317ae60
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x317adc0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1f25360
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1f25360
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1f25360
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1f25360
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1f25360
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1f25360
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1f25360
	void OnPaint(out PaintContext Context);// 0x1f25360
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1f25360
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	void OnMouseCaptureLost();// 0x1f25360
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1f25360
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1f25360
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1f25360
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1f25360
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1f25360
	void OnInitialized();// 0x1f25360
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1f25360
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1f25360
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1f25360
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1f25360
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1f25360
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1f25360
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1f25360
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1f25360
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x317ad30
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x317aca0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1f25360
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1f25360
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x317ab10
	bool IsPlayingAnimation();// 0x317aae0
	bool IsListeningForInputAction(FName ActionName);// 0x317aa40
	bool IsInViewport();// 0x317a820
	bool IsInteractable();// 0x1f25360
	bool IsAnyAnimationPlaying();// 0x317aa10
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x317a970
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x317a8d0
	Pawn* GetOwningPlayerPawn();// 0x317a880
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x317a850
	bool GetIsVisible();// 0x317a820
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x317a780
	Anchors GetAnchorsInViewport();// 0x317a740
	Vector2D GetAlignmentInViewport();// 0x317a700
	void FlushAnimations();// 0x317a6e0
	void Destruct();// 0x1f25360
	void Construct();// 0x1f25360
	void CancelLatentActions();// 0x317a680
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x317a5a0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x317a4c0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x317a340
	void AddToViewport(int ZOrder);// 0x317a2b0
	bool AddToPlayerScreen(int ZOrder);// 0x317a210

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte Cursor;//[Offset: 0xc1, Size: 1]
	enum Clipping;//[Offset: 0xc2, Size: 1]
	enum Visibility;//[Offset: 0xc3, Size: 1]
	float RenderOpacity;//[Offset: 0xc4, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 1]
	void SetVisibility(enum InVisibility);// 0x3180090
	void SetUserFocus(PlayerController* PlayerController);// 0x317fe60
	void SetToolTipText(out const FText InToolTipText);// 0x317fd90
	void SetToolTip(Widget* Widget);// 0x317fd00
	void SetRenderTranslation(Vector2D Translation);// 0x317fbf0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x317fb70
	void SetRenderTransformAngle(float Angle);// 0x317faf0
	void SetRenderTransform(WidgetTransform InTransform);// 0x317fa10
	void SetRenderShear(Vector2D Shear);// 0x317f990
	void SetRenderScale(Vector2D Scale);// 0x317f910
	void SetRenderOpacity(float InOpacity);// 0x317f890
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x317f730
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x317f640
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x317f550
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x317f480
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x317f370
	void SetKeyboardFocus();// 0x317f350
	void SetIsEnabled(bool bInIsEnabled);// 0x317f2c0
	void SetFocus();// 0x317f220
	void SetCursor(byte InCursor);// 0x317f1a0
	void SetClipping(enum InClipping);// 0x317f120
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x317f050
	void ResetCursor();// 0x317f030
	void RemoveFromParent();// 0x317f010
	EventReply OnReply__DelegateSignature();// 0x1f25360
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	bool IsVisible();// 0x317efe0
	bool IsHovered();// 0x2c2f4a0
	void InvalidateLayoutAndVolatility();// 0x317efc0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x317ef20
	bool HasUserFocus(PlayerController* PlayerController);// 0x317ee80
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x317edb0
	bool HasMouseCapture();// 0x317ed80
	bool HasKeyboardFocus();// 0x317ed50
	bool HasFocusedDescendants();// 0x317ed20
	bool HasAnyUserFocus();// 0x317ecf0
	Widget* GetWidget__DelegateSignature();// 0x1f25360
	enum GetVisibility();// 0x317ecc0
	Geometry GetTickSpaceGeometry();// 0x317eba0
	FText GetText__DelegateSignature();// 0x1f25360
	enum GetSlateVisibility__DelegateSignature();// 0x1f25360
	SlateColor GetSlateColor__DelegateSignature();// 0x1f25360
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1f25360
	float GetRenderTransformAngle();// 0x317eb40
	float GetRenderOpacity();// 0x317eb10
	PanelWidget* GetParent();// 0x317eae0
	Geometry GetPaintSpaceGeometry();// 0x317eaa0
	PlayerController* GetOwningPlayer();// 0x317ea70
	LocalPlayer* GetOwningLocalPlayer();// 0x317ea40
	byte GetMouseCursor__DelegateSignature();// 0x1f25360
	LinearColor GetLinearColor__DelegateSignature();// 0x1f25360
	bool GetIsEnabled();// 0x317ea10
	int GetInt32__DelegateSignature();// 0x1f25360
	GameInstance* GetGameInstance();// 0x317e9e0
	float GetFloat__DelegateSignature();// 0x1f25360
	Vector2D GetDesiredSize();// 0x317e970
	enum GetClipping();// 0x317e940
	enum GetCheckBoxState__DelegateSignature();// 0x1f25360
	Geometry GetCachedGeometry();// 0x317e900
	bool GetBool__DelegateSignature();// 0x1f25360
	FText GetAccessibleText();// 0x317e860
	FText GetAccessibleSummaryText();// 0x317e7c0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1f25360
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1f25360
	void ForceVolatile(bool bForce);// 0x317e730
	void ForceLayoutPrepass();// 0x317e710

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 1]
	bool RemoveChildAt(int Index);// 0x316b970
	bool RemoveChild(Widget* Content);// 0x316b8d0
	bool HasChild(Widget* Content);// 0x316b740
	bool HasAnyChildren();// 0x316b710
	int GetChildrenCount();// 0x316b3c0
	int GetChildIndex(const Widget* Content);// 0x316b320
	Widget* GetChildAt(int Index);// 0x316b280
	Widget*[] GetAllChildren();// 0x316b200
	void ClearChildren();// 0x316b130
	PanelSlot* AddChild(Widget* Content);// 0x316aff0

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString DisplayLabel;//[Offset: 0x80, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x31803b0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x31802d0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3180240
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x31801b0
	float GetStartTime();// 0x317eb70
	float GetEndTime();// 0x317e9b0
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x317e630
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x317e550

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x2f64eb0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x2f64e00

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 1]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 1]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 1]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 1]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 1]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 1]
	FName EvaluationGroup;//[Offset: 0x68, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 1]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 1]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 1]
	FrameNumberRange Range;//[Offset: 0x8, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 1]
	enum Flags;//[Offset: 0x1c, Size: 1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 1]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 1]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 1]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 1]
	int RowIndex;//[Offset: 0xa8, Size: 1]
	int OverlapPriority;//[Offset: 0xac, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	float StartTime;//[Offset: 0xb4, Size: 1]
	float EndTime;//[Offset: 0xb8, Size: 1]
	float PrerollTime;//[Offset: 0xbc, Size: 1]
	float PostrollTime;//[Offset: 0xc0, Size: 1]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc9, Size: 1]
	void SetRowIndex(int NewRowIndex);// 0x2f66820
	void SetPreRollFrames(int InPreRollFrames);// 0x2f66790
	void SetPostRollFrames(int InPostRollFrames);// 0x2f66700
	void SetOverlapPriority(int NewPriority);// 0x2f664d0
	void SetIsLocked(bool bInIsLocked);// 0x2f66440
	void SetIsActive(bool bInIsActive);// 0x2f66390
	void SetCompletionMode(enum InCompletionMode);// 0x2f660e0
	void SetBlendType(enum InBlendType);// 0x2f66060
	bool IsLocked();// 0x2f65480
	bool IsActive();// 0x2f65450
	int GetRowIndex();// 0x14b2e60
	int GetPreRollFrames();// 0x2f653a0
	int GetPostRollFrames();// 0x2f65380
	int GetOverlapPriority();// 0x2f65330
	enum GetCompletionMode();// 0x2f650d0
	OptionalMovieSceneBlendType GetBlendType();// 0x2f64f90

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CompletionMode;//[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 1]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 1]
	interface class None* EaseIn;//[Offset: 0x8, Size: 1]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 1]
	interface class None* EaseOut;//[Offset: 0x20, Size: 1]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	FrameNumber Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 1]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 1]
	FrameRate TickResolution;//[Offset: 0x58, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 1]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 1]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 1]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 1]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 1]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 1]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 1]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 1]
	FrameNumber End;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 1]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 1]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 1]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 1]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 1]
	uint32 EntityID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 1]
	enum Flags;//[Offset: 0x18, Size: 1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 1]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 1]
	int NumEvalPtrs;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 1]
	uint16 NumChildren;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 1]
	enum Flags;//[Offset: 0x2, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 1]
	int SequenceID;//[Offset: 0x10, Size: 1]
	int ResolveParentIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Geometry

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	Margin Margin;//[Offset: 0x10, Size: 1]
	SlateColor TintColor;//[Offset: 0x20, Size: 1]
	Object* ResourceObject;//[Offset: 0x48, Size: 1]
	FName ResourceName;//[Offset: 0x50, Size: 1]
	Box2D UVRegion;//[Offset: 0x58, Size: 1]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x2c2f680
	void ShowTitleSafeArea();// 0x2c2f6a0
	void SetConsoleTarget(int PlayerIndex);// 0x3aaa7e0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	MulticastInlineDelegateProperty OnPawnControllerChangedDelegates;//[Size: 1]
	void ReceiveShutdown();// 0x1f25360
	void ReceiveInit();// 0x1f25360
	void HandleTravelError(byte FailureType);// 0x1f25360
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1f25360
	void DebugRemovePlayer(int ControllerId);// 0x3a915c0
	void DebugCreatePlayer(int ControllerId);// 0x3a91530

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 1]
	void SetUserTag(FName InUserTag);// 0x317c260
	FName GetUserTag();// 0x317a8b0

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 1]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 1]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 1]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 1]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 1]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 1]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 1]
	float Duration;//[Offset: 0x108, Size: 1]
	float MaxDistance;//[Offset: 0x10c, Size: 1]
	float TotalSamples;//[Offset: 0x110, Size: 1]
	float Priority;//[Offset: 0x114, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float LFEBleed;//[Offset: 0x10, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 1]
	float RadioFilterVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 1]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 1]
	byte OutputTarget;//[Offset: 0x68, Size: 1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 1]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 1]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 1]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 1]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	enum GainMode;//[Offset: 0x68, Size: 1]
	float OutputVolume;//[Offset: 0x6c, Size: 1]
	float WetLevel;//[Offset: 0x70, Size: 1]
	float DryLevel;//[Offset: 0x74, Size: 1]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 1]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 1]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x3b92870
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x3b92670
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x3b925e0
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x3b92400
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x3b92330
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x3b922a0
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x3b921d0
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x3b920e0
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x3b91de0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x3b91cf0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 1]
	int StreamingPriority;//[Offset: 0x174, Size: 1]
	enum SampleRateQuality;//[Offset: 0x178, Size: 1]
	byte SoundGroup;//[Offset: 0x17a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 1]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 1]
	FString SpokenText;//[Offset: 0x240, Size: 1]
	float SubtitlePriority;//[Offset: 0x250, Size: 1]
	float Volume;//[Offset: 0x254, Size: 1]
	float Pitch;//[Offset: 0x258, Size: 1]
	int NumChannels;//[Offset: 0x25c, Size: 1]
	int SampleRate;//[Offset: 0x260, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 1]
	CurveTable* Curves;//[Offset: 0x280, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 1]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 1]
	enum PitchRouting;//[Offset: 0x41, Size: 1]
	enum HighpassRouting;//[Offset: 0x42, Size: 1]
	enum LowpassRouting;//[Offset: 0x43, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 1]
	int AttackTimeMsec;//[Offset: 0x4, Size: 1]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 1]
	float QFactor;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float RetriggerTime;//[Offset: 0xc, Size: 1]
	float VolumeScale;//[Offset: 0x10, Size: 1]
	enum VolumeScaleMode;//[Offset: 0x14, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x18, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x20, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	enum SendStage;//[Offset: 0x1, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 1]
	float SendLevel;//[Offset: 0x18, Size: 1]
	float MinSendLevel;//[Offset: 0x1c, Size: 1]
	float MaxSendLevel;//[Offset: 0x20, Size: 1]
	float MinSendDistance;//[Offset: 0x24, Size: 1]
	float MaxSendDistance;//[Offset: 0x28, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x370, Size: 1]
	float SourceBusDuration;//[Offset: 0x374, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x3162f00
	void Dragged(out const PointerEvent PointerEvent);// 0x3162dd0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3162ca0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 1]
	float DefaultFOV;//[Offset: 0x238, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x14a0, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ae0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20e0, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x26e0, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26f0, Size: 1]
	float FreeCamDistance;//[Offset: 0x2700, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x2704, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x2710, Size: 1]
	MulticastInlineDelegateProperty OnAudioFadeChangeEvent;//[Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2740, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2750, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2758, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2798, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x27b8, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27c8, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x27d8, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e0, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e0, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e0, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e0, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e1, Size: 1]
	float ViewPitchMin;//[Offset: 0x27e4, Size: 1]
	float ViewPitchMax;//[Offset: 0x27e8, Size: 1]
	float ViewYawMin;//[Offset: 0x27ec, Size: 1]
	float ViewYawMax;//[Offset: 0x27f0, Size: 1]
	float ViewRollMin;//[Offset: 0x27f4, Size: 1]
	float ViewRollMax;//[Offset: 0x27f8, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2800, Size: 1]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x3b5d6a0
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x3b5d550
	void StopCameraFade();// 0x3b5d530
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3b5d460
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3b5d350
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3b5d280
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3b5d1b0
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3b5d0e0
	void StopAllCameraShakes(bool bImmediately);// 0x3b5d050
	void StopAllCameraAnims(bool bImmediate);// 0x3b5cfc0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3b5cd50
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3b5cbd0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x3b5c9e0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3b5c440
	void SetGameCameraCutThisFrame();// 0x3b5c310
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3b5ad00
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3b5ac70
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3b5a410
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3b5a280
	void OnPhotographySessionStart();// 0x1b35f90
	void OnPhotographySessionEnd();// 0x1b366f0
	void OnPhotographyMultiPartCaptureStart();// 0xe0e4e0
	void OnPhotographyMultiPartCaptureEnd();// 0x1b88ed0
	PlayerController* GetOwningPlayerController();// 0x3b59d50
	float GetFOVAngle();// 0x3a71420
	Rotator GetCameraRotation();// 0x3b58990
	Vector GetCameraLocation();// 0x3b58950
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3b588b0
	void ClearCameraLensEffects();// 0x3a6e200
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x1f25360
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3b55780
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3b556e0

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ShakeScale;//[Offset: 0x2c, Size: 1]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 1]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 1]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x3a692c0
	CameraShakePattern* GetRootShakePattern();// 0x2c583b0

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	enum PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x3a69600
	void SetScale(float NewDuration);// 0x3a69350
	void SetDuration(float NewDuration);// 0x3a68fc0

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	byte TemperatureType;//[Offset: 0x23, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 1]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 1]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 1]
	Vector4 ColorGain;//[Offset: 0x60, Size: 1]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 1]
	float BlueCorrection;//[Offset: 0x178, Size: 1]
	float ExpandGamut;//[Offset: 0x17c, Size: 1]
	float ToneCurveAmount;//[Offset: 0x180, Size: 1]
	float FilmSlope;//[Offset: 0x184, Size: 1]
	float FilmToe;//[Offset: 0x188, Size: 1]
	float FilmShoulder;//[Offset: 0x18c, Size: 1]
	float FilmBlackClip;//[Offset: 0x190, Size: 1]
	float FilmWhiteClip;//[Offset: 0x194, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 1]
	float FilmSaturation;//[Offset: 0x1c0, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 1]
	float FilmContrast;//[Offset: 0x1f4, Size: 1]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 1]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 1]
	float FilmDynamicRange;//[Offset: 0x200, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 1]
	float BloomIntensity;//[Offset: 0x21c, Size: 1]
	float BloomThreshold;//[Offset: 0x220, Size: 1]
	float BloomSizeScale;//[Offset: 0x224, Size: 1]
	float Bloom1Size;//[Offset: 0x228, Size: 1]
	float Bloom2Size;//[Offset: 0x22c, Size: 1]
	float Bloom3Size;//[Offset: 0x230, Size: 1]
	float Bloom4Size;//[Offset: 0x234, Size: 1]
	float Bloom5Size;//[Offset: 0x238, Size: 1]
	float Bloom6Size;//[Offset: 0x23c, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 1]
	float CameraISO;//[Offset: 0x304, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 1]
	float AutoExposureBias;//[Offset: 0x314, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x328, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x330, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x338, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x33c, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x340, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x344, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x348, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x34c, Size: 1]
	float HistogramLogMin;//[Offset: 0x350, Size: 1]
	float HistogramLogMax;//[Offset: 0x354, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x358, Size: 1]
	float LensFlareIntensity;//[Offset: 0x35c, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x360, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x370, Size: 1]
	float LensFlareThreshold;//[Offset: 0x374, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x378, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x380, Size: 8]
	float VignetteIntensity;//[Offset: 0x400, Size: 1]
	float GrainJitter;//[Offset: 0x404, Size: 1]
	float GrainIntensity;//[Offset: 0x408, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x40c, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x410, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x414, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x41c, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x420, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x424, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x428, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x42c, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x430, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x434, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x438, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x43c, Size: 1]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x440, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x448, Size: 1]
	float RayTracingAOIntensity;//[Offset: 0x44c, Size: 1]
	float RayTracingAORadius;//[Offset: 0x450, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x454, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x464, Size: 1]
	enum RayTracingGIType;//[Offset: 0x468, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x46c, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x470, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 1]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 1]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 1]
	float LPVIntensity;//[Offset: 0x4c4, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 1]
	float LPVSize;//[Offset: 0x4cc, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 1]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 1]
	enum TranslucencyType;//[Offset: 0x516, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 1]
	float PathTracingFilterWidth;//[Offset: 0x530, Size: 1]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 1]
	float PathTracingMaxPathExposure;//[Offset: 0x538, Size: 1]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 1]
	float LPVFadeRange;//[Offset: 0x540, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x544, Size: 1]
	float ScreenPercentage;//[Offset: 0x548, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x550, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f8, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x1fc, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x200, Size: 1]
	class CameraShakeBase* CameraShake;//[Offset: 0x208, Size: 1]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x3a69720
	void StopAllCameraShakes(bool bImmediately);// 0x3a69690
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3a69480
	void Start();// 0x3a69460
	float GetAttenuationFactor(out const Vector Location);// 0x3a67330

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0x2c4f640
	Actor* GetViewTarget();// 0x317ea40
	void EnableModifier();// 0x3a67310
	void DisableModifier(bool bImmediate);// 0x3a67280
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x1f25360
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x1f25360

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x3a85c70
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3a85b90
	void SetTemplate(ParticleSystem* NewTemplate);// 0xe0e500
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3a85ac0
	void SetFloatParameter(FName ParameterName, float Param);// 0x3a859f0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3a85920
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3a85850
	void OnRep_bCurrentlyActive();// 0xe0e4e0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x3a857c0
	bool IsActive();// 0x3a85790
	void Deactivate();// 0x3a85770
	void Activate();// 0x3a85750

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x450, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x458, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x468, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x479, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47a, Size: 1]
	byte LODMethod;//[Offset: 0x485, Size: 1]
	enum RequiredSignificance;//[Offset: 0x486, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x488, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	Vector OldPosition;//[Offset: 0x4dc, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x4e8, Size: 1]
	float WarmupTime;//[Offset: 0x4f4, Size: 1]
	float WarmupTickRate;//[Offset: 0x4f8, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x500, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x508, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x528, Size: 1]
	float CustomTimeDilation;//[Offset: 0x540, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x598, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x5a0, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x5a8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x5a9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x5aa, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3b489a0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3b48910
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3b48840
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3b482f0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3b481e0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3b480c0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3b47fa0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3b47e90
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3b47d70
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3b47c90
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3b479c0
	int GetNumActiveParticles();// 0x3b478a0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3b47800
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3b476b0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3b47590
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3b47470
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3b47350
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3b47230
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3b47110
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3b47020
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3b46e60
	void EndTrails();// 0x3b46e40
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3b46d70
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3b46b70

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3b48b90
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3b48b00
	void SetIntParameter(FName ParameterName, int Param);// 0x3b48770
	void SetFloatParameter(FName ParameterName, float Param);// 0x3b48690
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3b485c0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3b484e0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3b48410
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3b47af0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3b478f0
	void ReleaseToPool();// 0x3b478d0
	FXSystemAsset* GetFXSystemAsset();// 0x3b477d0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x3b46cd0

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	byte ProjectionMode;//[Offset: 0x34, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x600, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 1]
	float FOVAngle;//[Offset: 0x248, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x3a673d0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f8, Size: 1]
	float OrthoWidth;//[Offset: 0x1fc, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x200, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x204, Size: 1]
	float AspectRatio;//[Offset: 0x208, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	byte ProjectionMode;//[Offset: 0x20d, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3a693d0
	void SetProjectionMode(byte InProjectionMode);// 0x3a69240
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3a691c0
	void SetOrthoWidth(float InOrthoWidth);// 0x3a69140
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3a690c0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x3a69040
	void SetFieldOfView(float InFieldOfView);// 0x3207ee0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x3a68f30
	void SetAspectRatio(float InAspectRatio);// 0x3a68eb0
	void RemoveBlendable(interface classNone InBlendableObject);// 0x3a68d80
	void OnCameraMeshHiddenChanged();// 0xd9d3e0
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3a67400
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3a67130

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x3aafb10
	bool WasControllerKeyJustPressed(Key Key);// 0x3aafb10
	bool IsControllerKeyDown(Key Key);// 0x3aafb10
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3aaf990
	Vector GetControllerVectorKeyState(Key Key);// 0x3aaf410
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3aaf330
	float GetControllerKeyTimeDown(Key Key);// 0x3aaf100
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3aaf200
	float GetControllerAnalogKeyState(Key Key);// 0x3aaf100

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x3b62750
	void SetBind(FName BindName, FString Command);// 0x3b620b0
	void InvertAxisKey(const Key AxisKey);// 0x3b61f10
	void InvertAxis(const FName AxisName);// 0x3b61e80
	void ClearSmoothing();// 0x3b619a0

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 1]
	Canvas* Canvas;//[Offset: 0x270, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 1]
	void ShowHUD();// 0x1b88ed0
	void ShowDebugToggleSubCategory(FName Category);// 0x3aaa990
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x3aaa900
	void ShowDebug(FName DebugType);// 0x3aaa870
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x3aaa650
	void RemoveAllDebugStrings();// 0x3aaa630
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1f25360
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1f25360
	void ReceiveHitBoxClick(const FName BoxName);// 0x1f25360
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1f25360
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1f25360
	Vector Project(Vector Location);// 0x3aaa180
	void PreviousDebugTarget();// 0x3aaa160
	void NextDebugTarget();// 0x1bd9c70
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x3aa9640
	PlayerController* GetOwningPlayerController();// 0xdd09c0
	Pawn* GetOwningPawn();// 0x3aa9610
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x3aa93f0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x3aa9240
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3aa8de0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x3aa8ba0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x3aa89e0
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x3aa86f0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x3aa84d0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3aa8100
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x3aa7f00
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x3aa7d80
	void AddHitBox(Vector2D position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x3aa7a60
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x3aa76a0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x3a68c50
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x3a68b60
	Vector K2_Project(Vector WorldLocation);// 0x3a68ab0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x3a68980
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x3a686d0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x3a68310
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x3a68160
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x3a68030
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x3a67df0
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x3a67c90
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x3a67b30
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x3a676a0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x3a67580

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 1]
	void Walk();// 0x2c2f2f0
	void ViewSelf();// 0x3a76150
	void ViewPlayer(FString S);// 0x3a760b0
	void ViewClass(class Actor DesiredClass);// 0x3a76020
	void ViewActor(FName ActorName);// 0x3a75f90
	void UpdateSafeArea();// 0x3a75f70
	void ToggleServerStatReplicatorUpdateStatNet();// 0x3a75f50
	void ToggleServerStatReplicatorClientOverwrite();// 0x3a75f30
	void ToggleDebugCamera();// 0x3a75f10
	void ToggleAILogging();// 0x3a75ef0
	void TestCollisionDistance();// 0x3a75ed0
	void Teleport();// 0xd9d270
	void Summon(FString ClassName);// 0x3a75e30
	void StreamLevelOut(FName PackageName);// 0x1a9d800
	void StreamLevelIn(FName PackageName);// 0x3a75da0
	void SpawnServerStatReplicator();// 0x3a75d80
	void Slomo(float NewTimeDilation);// 0x3a75cf0
	void SetWorldOrigin();// 0x3a75cd0
	void SetMouseSensitivityToDefault();// 0x3a75cb0
	void ServerToggleAILogging();// 0x3a75bd0
	void ReceiveInitCheatManager();// 0x1f25360
	void ReceiveEndPlay();// 0x1f25360
	void PlayersOnly();// 0x3a75bb0
	void OnlyLoadLevel(FName PackageName);// 0x3a75b20
	void LogLoc();// 0x3a75b00
	void InvertMouse();// 0x3a75ae0
	void God();// 0x3a67310
	void Ghost();// 0x3a75ac0
	void FreezeFrame(float Delay);// 0x3a75a30
	void Fly();// 0x3a75a10
	void FlushLog();// 0x3a759f0
	void EnableDebugCamera();// 0x1be6c60
	void DumpVoiceMutingState();// 0x3a759d0
	void DumpPartyState();// 0x3a759b0
	void DumpOnlineSessionState();// 0x3a75990
	void DumpChatState();// 0x3a75970
	void DisableDebugCamera();// 0x3a75950
	void DestroyTarget();// 0x3a75930
	void DestroyServerStatReplicator();// 0x3a75910
	void DestroyPawns(class Pawn aClass);// 0x317ad30
	void DestroyAllPawnsExceptTarget();// 0x3a758f0
	void DestroyAll(class Actor aClass);// 0x3a75860
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x3a75790
	void DebugCapsuleSweepPawn();// 0x3a75770
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x3a756e0
	void DebugCapsuleSweepClear();// 0x3a756c0
	void DebugCapsuleSweepChannel(byte Channel);// 0x3a75640
	void DebugCapsuleSweepCapture();// 0x3a75620
	void DebugCapsuleSweep();// 0x3a75600
	void DamageTarget(float DamageAmount);// 0x3a75570
	void CheatScript(FString ScriptName);// 0x3a75480
	void ChangeSize(float F);// 0x32bc880
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x3a752c0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x3a750d0
	void BugIt(FString ScreenShotDescription);// 0x3a75030

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x570, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x570, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x570, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x570, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x570, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x578, Size: 1]
	Actor* SelectedActor;//[Offset: 0x580, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x588, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x590, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x618, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x620, Size: 1]
	float SpeedScale;//[Offset: 0x628, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x62c, Size: 1]
	float InitialAccel;//[Offset: 0x630, Size: 1]
	float InitialDecel;//[Offset: 0x634, Size: 1]
	void ToggleDisplay();// 0x3a7df90
	void ShowDebugSelectedInfo();// 0x3a7df70
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x3a7def0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1f25360
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x1f25360
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1f25360
	Actor* GetSelectedActor();// 0x3a7dd80

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x450, Size: 1]
	float FrustumAngle;//[Offset: 0x454, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x458, Size: 1]
	float FrustumStartDist;//[Offset: 0x45c, Size: 1]
	float FrustumEndDist;//[Offset: 0x460, Size: 1]
	Texture* Texture;//[Offset: 0x468, Size: 1]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 1]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1ba8, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 1]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 1]
	World* World;//[Offset: 0x140, Size: 1]
	Package* WorldPackage;//[Offset: 0x148, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 1]
	FName NetDriverName;//[Offset: 0x190, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 1]
	float Time;//[Offset: 0x210, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x280, Size: 1]
	float BaseLookUpRate;//[Offset: 0x284, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0x3a81c30
	void MoveUp_World(float Val);// 0x3a81130
	void MoveRight(float Val);// 0x3a810a0
	void MoveForward(float Val);// 0x3a81010
	void LookUpAtRate(float Rate);// 0x3a80f80

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x468, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x3b9a0a0
	float GetUnscaledSphereRadius();// 0x3a6dd80
	float GetShapeScale();// 0x3b98200
	float GetScaledSphereRadius();// 0x3b981b0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x478, Size: 1]
	int PreviousLODLevel;//[Offset: 0x47c, Size: 1]
	int MinLOD;//[Offset: 0x480, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x484, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x488, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x490, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x495, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x498, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x49c, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4a0, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x4a4, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x128eaf0
	void SetReverseCulling(bool ReverseCulling);// 0x3ba24a0
	void SetForcedLodModel(int NewForcedLodModel);// 0x3ba2060
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x3ba1fd0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3ba1d50
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3ba1cc0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3ba1b20

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 1]
	class HUD* HUDClass;//[Offset: 0x250, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 1]
	GameSession* GameSession;//[Offset: 0x278, Size: 1]
	GameStateBase* GameState;//[Offset: 0x280, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0xeba290
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x3a9f2f0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3a9f1d0
	bool ShouldReset(Actor* ActorToReset);// 0x3a9eca0
	void ReturnToMainMenuHost();// 0x3a9dbc0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3a9daa0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3a9d9d0
	void RestartPlayer(Controller* NewPlayer);// 0x1ab7050
	void ResetLevel();// 0x3a9d990
	bool PlayerCanRestart(PlayerController* Player);// 0x3a9d240
	bool MustSpectate(PlayerController* NewPlayerController);// 0x3a9bff0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1f25360
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1f25360
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1f25360
	void K2_OnLogout(Controller* ExitingController);// 0x1f25360
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1f25360
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x3a9b480
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x3a9b260
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x3a857c0
	bool HasMatchStarted();// 0x3a78250
	bool HasMatchEnded();// 0x3a9b0f0
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3a9afc0
	int GetNumSpectators();// 0x3a9a050
	int GetNumPlayers();// 0x3a9a020
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x3a99960
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x3a98a00
	Actor* ChoosePlayerStart(Controller* Player);// 0x3a97c30
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3a97b00
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x3a97a10

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 1]
	int MaxPlayers;//[Offset: 0x224, Size: 1]
	int MaxPartySize;//[Offset: 0x228, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 1]
	void OnRep_SpectatorClass();// 0x1bd9c50
	void OnRep_ReplicatedWorldTimeSeconds();// 0xeba290
	void OnRep_ReplicatedHasBegunPlay();// 0x1bd9c70
	void OnRep_GameModeClass();// 0x3a784c0
	bool HasMatchStarted();// 0xf8ebc0
	bool HasMatchEnded();// 0x1bd5d20
	bool HasBegunPlay();// 0x3aa4320
	float GetServerWorldTimeSeconds();// 0x3aa41c0
	float GetPlayerStartTime(Controller* Controller);// 0x3aa3cd0
	float GetPlayerRespawnDelay(Controller* Controller);// 0x3aa3c30

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 1]
	uint32 InRate;//[Offset: 0x228, Size: 1]
	uint32 OutRate;//[Offset: 0x22c, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 1]
	uint32 NetNumClients;//[Offset: 0x268, Size: 1]
	uint32 InPackets;//[Offset: 0x26c, Size: 1]
	uint32 OutPackets;//[Offset: 0x270, Size: 1]
	uint32 InBunches;//[Offset: 0x274, Size: 1]
	uint32 OutBunches;//[Offset: 0x278, Size: 1]
	uint32 OutLoss;//[Offset: 0x27c, Size: 1]
	uint32 InLoss;//[Offset: 0x280, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumActors;//[Offset: 0x2b8, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 1]
	int BadPingThreshold;//[Offset: 0x228, Size: 1]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 1]
	float PercentForBadPing;//[Offset: 0x258, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 1]
	float MoveRepSize;//[Offset: 0x260, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 1]
	Actor* ChildActor;//[Offset: 0x200, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x3a75c20

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 1]
	FName MatineeControllerName;//[Offset: 0x228, Size: 1]
	float PlayRate;//[Offset: 0x230, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x1b366f0
	void SetPosition(float NewPosition, bool bJump);// 0x3b309f0
	void SetLoopingState(bool bNewLooping);// 0xf8ed80
	void Reverse();// 0x1b35f90
	void Play();// 0xe0e4e0
	void Pause();// 0xeba170
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x3b2ff00
	void ChangePlaybackDirection();// 0x1bd4230

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 1]
	float GainHF;//[Offset: 0x30, Size: 1]
	float ReflectionsGain;//[Offset: 0x34, Size: 1]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float LateDelay;//[Offset: 0x3c, Size: 1]
	float DecayTime;//[Offset: 0x40, Size: 1]
	float Density;//[Offset: 0x44, Size: 1]
	float Diffusion;//[Offset: 0x48, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 1]
	float DecayHFRatio;//[Offset: 0x50, Size: 1]
	float LateGain;//[Offset: 0x54, Size: 1]
	float Gain;//[Offset: 0x58, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 1]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x468, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1f25360
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3b17d70
	bool RemoteEvent(FName EventName);// 0x3b174b0
	void LevelReset();// 0x1f25360

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x450, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	float ScreenSize;//[Offset: 0x45c, Size: 1]
	float U;//[Offset: 0x460, Size: 1]
	float UL;//[Offset: 0x464, Size: 1]
	float V;//[Offset: 0x468, Size: 1]
	float VL;//[Offset: 0x46c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x3a56f00
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x3a56bd0
	void SetSprite(Texture2D* NewSprite);// 0xf87c80

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb0, Size: 1]
	int StreamingPriority;//[Offset: 0xb4, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x128, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 1]
	bool ShouldBeLoaded();// 0x32e2400
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x3b18cb0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x3aa37e0
	void SetPriority(int NewPriority);// 0x3b18a90
	void SetLevelLODIndex(int LODIndex);// 0x3b183a0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x3b18310
	bool IsStreamingStatePending();// 0x3b16fa0
	bool IsLevelVisible();// 0x3b16f70
	bool IsLevelLoaded();// 0x3b16f40
	FName GetWorldAssetPackageFName();// 0x3b16ed0
	Level* GetLoadedLevel();// 0x2c589d0
	LevelScriptActor* GetLevelScriptActor();// 0x3b16e20
	bool GetIsRequestingUnloadAndRemoval();// 0x3b16df0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x3b16d10

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x26c, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Level* Level;//[Offset: 0x38, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x3a568a0
	int GetObjectCount();// 0x1b15d80
	int GetNewAvoidanceUID();// 0x3a567a0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x3a566f0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LoginGameMode_C.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c0, Size: 1]

--------------------------------
Class: login_C.OPLevelScriptActor_Login.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 1]
	void ReceiveBeginPlay();// 0x1f25360
	void ExecuteUbergraph_login(int EntryPoint, UserSettingManager* CallFunc_GetUserSettingManager_ReturnValue, LoginMenu_C* CallFunc_Create_ReturnValue, Actor* CallFunc_GenerateTCPHandler_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1f25360

--------------------------------
Class: OPLevelScriptActor_Login.LevelScriptActor.Actor.Object

--------------------------------
Class: UserSettingManager.Object
	MulticastInlineDelegateProperty OnUserSettingSaved;//[Size: 1]
	MulticastInlineDelegateProperty OnUserSettingChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnControlHovered;//[Size: 1]
	bool AutoSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool AutoItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float MouseSensivity;//[Offset: 0x64, Size: 1]
	float MouseSensivityY;//[Offset: 0x68, Size: 1]
	float CamShakeScale;//[Offset: 0x6c, Size: 1]
	float SoundVolumes_Music;//[Offset: 0x70, Size: 1]
	float SoundVolumes_Effect;//[Offset: 0x74, Size: 1]
	float SoundVolumes_UI;//[Offset: 0x78, Size: 1]
	float SoundVolumes_Voice;//[Offset: 0x7c, Size: 1]
	float SoundVolumes_AnnounceVoice;//[Offset: 0x80, Size: 1]
	float SoundVolumes_Main;//[Offset: 0x84, Size: 1]
	FString Localization;//[Offset: 0x88, Size: 1]
	bool HideLocalCharacterHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableMeleeCharacterAutoTargetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bUseDistanceDisplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bUseMeter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	bool bUseAimGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	FString DNS_IP;//[Offset: 0xa0, Size: 1]
	int DNS_Port;//[Offset: 0xb0, Size: 1]
	bool DNS_Use;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool Access_Test_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool Access_Tournament_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool Access_FQA_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	bool LoginID_Remember;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool EditorOverrideVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	FString EditorOverrideVersionString;//[Offset: 0xc0, Size: 1]
	FString LoginID_Saved;//[Offset: 0xd0, Size: 1]
	bool UsePopupAlert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int ResolutionQuality;//[Offset: 0xe4, Size: 1]
	int ViewDistanceQuality;//[Offset: 0xe8, Size: 1]
	int AntiAliasingQuality;//[Offset: 0xec, Size: 1]
	int ShadowQuality;//[Offset: 0xf0, Size: 1]
	int PostProcessQuality;//[Offset: 0xf4, Size: 1]
	int TextureQuality;//[Offset: 0xf8, Size: 1]
	int EffectsQuality;//[Offset: 0xfc, Size: 1]
	int FoliageQuality;//[Offset: 0x100, Size: 1]
	int ShadingQuality;//[Offset: 0x104, Size: 1]
	bool IsLoadedConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	FString[] CultureTagList;//[Offset: 0x140, Size: 1]
	FString[] SoundCultureTagList;//[Offset: 0x150, Size: 1]
	<enum,OPGameSettingsTableRow> GameSettingsTableData;//[Offset: 0x160, Size: 1]
	<enum,FString> SavedDefaultSettings;//[Offset: 0x1b0, Size: 1]
	DefaultSettingInfos DefaultSettings;//[Offset: 0x200, Size: 1]
	<enum,UserSettingValue> SavedSettings;//[Offset: 0x390, Size: 1]
	void SwitchControlType(enum InType, out enum Result);// 0x1bef160
	void SaveSettingByDetailType(enum InType, UserSettingValue InValue);// 0x1beefb0
	void SaveLoginIDRememberOption(bool NewState, FString IDToSave);// 0x1beee60
	void SaveDNSSettings();// 0xd9d3e0
	void SaveAndApplyConfigs(enum InType);// 0x1beede0
	void LoadConfigsFirst(Object* InWorldContextObject);// 0x1beecb0
	byte GetValue_ScreenMode();// 0x1beec60
	float GetValue_Scale(enum InType);// 0x1beebd0
	IntPoint GetValue_Resolution();// 0x1beeb90
	enum GetValue_Quality(enum InType);// 0x1beeb00
	float GetValue_MouseSensivity();// 0x1beead0
	int GetValue_Int(enum InType);// 0x1beea40
	float GetValue_FrameRate();// 0x1beea10
	bool GetValue_Bool(enum InType);// 0x1bee980
	static UserSettingManager* GetUserSettingManager(const Object* InWorldContextObject);// 0x1bee8f0
	LinearColor GetTeamColor(enum InType);// 0x1bee850
	FString GetKeyText(enum InType);// 0x1bee770
	static FString GetCurrentOPCultureSetting(Object* InWorldContextObject);// 0x1bee6a0

--------------------------------
Class: UserSettingValue
	FString PropertyName;//[Offset: 0x0, Size: 1]
	int IntegerValue;//[Offset: 0x10, Size: 1]
	FString StringValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPGameSettingsTableRow.TableRowBase
	enum MainType;//[Offset: 0x8, Size: 1]
	enum SubType;//[Offset: 0x9, Size: 1]
	enum DetailType;//[Offset: 0xa, Size: 1]
	FString DetailTypeText;//[Offset: 0x10, Size: 1]
	FString TooltipDescription;//[Offset: 0x20, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x30, Size: 1]
	bool IgnoreTextTransformPolicy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsDevelopmentOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ResetKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: DefaultSettingInfos
	<enum,OPGameSettingsSelectorTableRow> Selector;//[Offset: 0x0, Size: 1]
	<enum,OPGameSettingsSliderTableRow> Slider;//[Offset: 0x50, Size: 1]
	<enum,OPGameSettingsKeyBindingTableRow> KeyBinding;//[Offset: 0xa0, Size: 1]
	<enum,OPGameSettingsGamepadBindingTableRow> GamepadBinding;//[Offset: 0xf0, Size: 1]
	<enum,OPGameSettingsSelectorTableRow> Dropdown;//[Offset: 0x140, Size: 1]

--------------------------------
Class: OPGameSettingsSelectorTableRow.TableRowBase
	enum DetailType;//[Offset: 0x8, Size: 1]
	int DefaultValue;//[Offset: 0xc, Size: 1]
	FString[] DisplayTexts;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPGameSettingsSliderTableRow.TableRowBase
	enum DetailType;//[Offset: 0x8, Size: 1]
	int DefaultValue;//[Offset: 0xc, Size: 1]
	int MinValue;//[Offset: 0x10, Size: 1]
	int MaxValue;//[Offset: 0x14, Size: 1]
	float Step;//[Offset: 0x18, Size: 1]
	bool UseRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: OPGameSettingsKeyBindingTableRow.TableRowBase
	enum DetailType;//[Offset: 0x8, Size: 1]
	int DefaultAxis;//[Offset: 0xc, Size: 1]
	FString DefaultKey_QWERTY;//[Offset: 0x10, Size: 1]
	FString DefaultKey_AZERTY;//[Offset: 0x20, Size: 1]
	FString DefaultKey_QWERTZ;//[Offset: 0x30, Size: 1]
	FString DefaultKey_QWERTZ_CS;//[Offset: 0x40, Size: 1]
	FString PropertyName;//[Offset: 0x50, Size: 1]
	bool IsAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsSmartKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	byte KeyGroup;//[Offset: 0x62, Size: 1]
	byte KeySwitchGroup;//[Offset: 0x63, Size: 1]

--------------------------------
Class: OPGameSettingsGamepadBindingTableRow.TableRowBase
	byte LayoutType;//[Offset: 0x8, Size: 1]
	enum DetailType;//[Offset: 0x9, Size: 1]
	FString DefaultKey;//[Offset: 0x10, Size: 1]
	FString PropertyName;//[Offset: 0x20, Size: 1]
	bool Function1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool Function2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool Function3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool Function4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool IsSmartKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	byte KeyGroup;//[Offset: 0x35, Size: 1]
	byte KeySwitchGroup;//[Offset: 0x36, Size: 1]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: LoginMenu_C.OP_LoginMenuComponent.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 1]
	WidgetAnimation* Click;//[Offset: 0x378, Size: 1]
	WidgetAnimation* Loading;//[Offset: 0x380, Size: 1]
	WidgetAnimation* Login_Close;//[Offset: 0x388, Size: 1]
	WidgetAnimation* login;//[Offset: 0x390, Size: 1]
	WidgetAnimation* ShowGameGrade;//[Offset: 0x398, Size: 1]
	WidgetAnimation* wrongcharacter;//[Offset: 0x3a0, Size: 1]
	WidgetAnimation* ShowServerResult;//[Offset: 0x3a8, Size: 1]
	WidgetAnimation* Refresh;//[Offset: 0x3b0, Size: 1]
	WidgetAnimation* End;//[Offset: 0x3b8, Size: 1]
	WidgetAnimation* Begin;//[Offset: 0x3c0, Size: 1]
	Button* Bind_BTN_OutsideArea_Close;//[Offset: 0x3c8, Size: 1]
	TextButton_Positive_new_C* BPBind_Button_Login;//[Offset: 0x3d0, Size: 1]
	Button* BPBind_Button_RefreshSocket;//[Offset: 0x3d8, Size: 1]
	Button* BPBind_Button_TrySteam;//[Offset: 0x3e0, Size: 1]
	TextBlock* BPBind_ConnectionState;//[Offset: 0x3e8, Size: 1]
	OPHorizontalBox* BPBind_Offline_Handler;//[Offset: 0x3f0, Size: 1]
	VerticalBox* BPBind_ServerDownNotice;//[Offset: 0x3f8, Size: 1]
	TextBlock* BPBind_ServerState_Offline;//[Offset: 0x400, Size: 1]
	TextBlock* BPBind_ServerState_Online;//[Offset: 0x408, Size: 1]
	TextBlock* BPBind_Text_CapsLocked;//[Offset: 0x410, Size: 1]
	TextBlock* BPBind_Text_version;//[Offset: 0x418, Size: 1]
	Button* Button;//[Offset: 0x420, Size: 1]
	Button* Button;//[Offset: 0x428, Size: 1]
	Button* Button;//[Offset: 0x430, Size: 1]
	Button* Button;//[Offset: 0x438, Size: 1]
	Button* Button;//[Offset: 0x440, Size: 1]
	Button* Button;//[Offset: 0x448, Size: 1]
	Button* Button_Login;//[Offset: 0x450, Size: 1]
	Button* Button_Register;//[Offset: 0x458, Size: 1]
	Button* Button_Setting;//[Offset: 0x460, Size: 1]
	Common_GameGrade_C* Common_GameGrade;//[Offset: 0x468, Size: 1]
	CanvasPanel* CP_FirstUserMovie;//[Offset: 0x470, Size: 1]
	HorizontalBox* HorizontalBox_StaySignedIn;//[Offset: 0x478, Size: 1]
	CanvasPanel* IDPanel;//[Offset: 0x480, Size: 1]
	Image* Image;//[Offset: 0x488, Size: 1]
	Image* Image;//[Offset: 0x490, Size: 1]
	Image* Image_Art;//[Offset: 0x498, Size: 1]
	Image* Image_Art_Add;//[Offset: 0x4a0, Size: 1]
	Image* Image_B;//[Offset: 0x4a8, Size: 1]
	Image* Image_Back;//[Offset: 0x4b0, Size: 1]
	Image* Image_Back_Id;//[Offset: 0x4b8, Size: 1]
	Image* Image_Back_Pw;//[Offset: 0x4c0, Size: 1]
	Image* Image_Bi;//[Offset: 0x4c8, Size: 1]
	Image* Image_Black;//[Offset: 0x4d0, Size: 1]
	Image* Image_Cover_B;//[Offset: 0x4d8, Size: 1]
	Image* Image_Cover_id;//[Offset: 0x4e0, Size: 1]
	Image* Image_Cover_Pw;//[Offset: 0x4e8, Size: 1]
	Image* Image_Cover_T;//[Offset: 0x4f0, Size: 1]
	Image* Image_Etc_B;//[Offset: 0x4f8, Size: 1]
	Image* Image_Etc_T;//[Offset: 0x500, Size: 1]
	Image* Image_Fx_Center;//[Offset: 0x508, Size: 1]
	Image* Image_Fx_Eye;//[Offset: 0x510, Size: 1]
	Image* Image_Fx_Eye;//[Offset: 0x518, Size: 1]
	Image* Image_Fx_Eye;//[Offset: 0x520, Size: 1]
	Image* Image_Fx_Eye;//[Offset: 0x528, Size: 1]
	Image* Image_Fx_Eye;//[Offset: 0x530, Size: 1]
	Image* Image_Gradient_B;//[Offset: 0x538, Size: 1]
	Image* Image_Gradient_T;//[Offset: 0x540, Size: 1]
	Image* Image_id_icon;//[Offset: 0x548, Size: 1]
	Image* Image_Invalid_Character;//[Offset: 0x550, Size: 1]
	Image* Image_Pattern;//[Offset: 0x558, Size: 1]
	Image* Image_Pattern_B;//[Offset: 0x560, Size: 1]
	Image* Image_Pw_icon;//[Offset: 0x568, Size: 1]
	Image* Image_Refresh;//[Offset: 0x570, Size: 1]
	Image* Image_Shadow;//[Offset: 0x578, Size: 1]
	Image* Image_T;//[Offset: 0x580, Size: 1]
	Image* Image_White;//[Offset: 0x588, Size: 1]
	Image* Img_Logo_Letter;//[Offset: 0x590, Size: 1]
	LiveAnnouncementBox_C* LiveAnnouncementBox;//[Offset: 0x598, Size: 1]
	CanvasPanel* Login_Popup;//[Offset: 0x5a0, Size: 1]
	CanvasPanel* PWPanel;//[Offset: 0x5a8, Size: 1]
	Server_Type_C* Server_Type;//[Offset: 0x5b0, Size: 1]
	SignUpMenu_C* SignUpMenu;//[Offset: 0x5b8, Size: 1]
	SizeBox* SizeBox_Steam;//[Offset: 0x5c0, Size: 1]
	TextBlock* SteamLoginNotifier;//[Offset: 0x5c8, Size: 1]
	OPTextBlock* TextBlock_Touch_The_Screen;//[Offset: 0x5d0, Size: 1]
	UI_Common_Effect_C* UI_Common_Effect_C;//[Offset: 0x5d8, Size: 1]
	UI_Common_Effect_C* UI_Common_Effect_C;//[Offset: 0x5e0, Size: 1]
	UMG_Click_Effect_C* UMG_Click_Effect;//[Offset: 0x5e8, Size: 1]
	TextBlock* VersionName;//[Offset: 0x5f0, Size: 1]
	WB_LoadingFinishedWidget_C* WB_LoadingFinishedWidget;//[Offset: 0x5f8, Size: 1]
	WB_LoadingMovie_C* WB_LoadingMovie;//[Offset: 0x600, Size: 1]
	WB_Shutter_ServerResponseWait_C* WB_Shutter_ServerResponseWait;//[Offset: 0x608, Size: 1]
	MulticastInlineDelegateProperty RequestStart;//[Size: 1]
	AudioComponent* NewVar;//[Offset: 0x620, Size: 1]
	MediaPlayer* MediaPlayer_Login;//[Offset: 0x628, Size: 1]
	FText LastPW;//[Offset: 0x630, Size: 1]
	FString PWAllowList;//[Offset: 0x648, Size: 1]
	bool HadLoginTrial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool BypassEAC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	FString Platform;//[Offset: 0x660, Size: 1]
	bool NewVar_time;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool EOSResultAuthTokenIsBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 1]
	bool bIsStartLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 1]
	void Finished_AB48CE68477934B7974D7A93BAE28098();// 0x1f25360
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1f25360
	void BndEvt__Entry_PW_K2Node_ComponentBoundEvent_1_OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1f25360
	void PreConstruct(bool IsDesignTime);// 0x1f25360
	void OnHandleErrorClickedYes();// 0x1f25360
	void InitFocus();// 0x1f25360
	void ShowPlatformLoginFailureError(FString Reason);// 0x1f25360
	void BndEvt__Button_429_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void OnSelectedSettingContextMenuDelegate_Event(enum InContextMenuType);// 0x1f25360
	void CheckSteamLoginButton();// 0x1f25360
	void OnTextChanged_Event(out const FText Text);// 0x1f25360
	void HandleWrongPWCharacterInserted();// 0x1f25360
	void BndEvt__LoginMenu_Button_0_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void PlayStartAnimation();// 0x1f25360
	void BndEvt__LoginMenu_BPBind_Button_RefreshSocket_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void Construct();// 0x1f25360
	void BackToStartmapWithReason(FString Reason);// 0x1f25360
	void OnVisibilityChanged_Event(enum InVisibility);// 0x1f25360
	void OnClickNo_Event();// 0x1f25360
	void ShowWaitShowButtons();// 0x1f25360
	void AssignPWValidator();// 0x1f25360
	void PrintStringResultCode(FString Name, FString Result);// 0x1f25360
	void EndGameWithReason(FString Reason);// 0x1f25360
	void SetLoginMenuAndRegisterButtonVisibility();// 0x1f25360
	void RegisterGameSettingButtonClicked();// 0x1f25360
	void SetDevStng_BPNE();// 0x1f25360
	void BndEvt__LoginMenu_BPBind_Button_TrySteam_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void LoginMenuDisplayMessageCenter_BPNE(FString InMessage);// 0x1f25360
	void OnMasterServerConnectionChanged_BPNE(bool InNewConnectionState);// 0x1f25360
	void BndEvt__LoginMenu_Bind_BTN_Yes_K2Node_ComponentBoundEvent_7_Delegate_OnOPButtonClicked__DelegateSignature();// 0x1f25360
	void BndEvt__LoginMenu_Button_Login_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void BndEvt__LoginMenu_Bind_BTN_OutsideArea_Close_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void ShowLoginTrialEvent();// 0x1f25360
	void BlockLoginTrialEffect();// 0x1f25360
	void AllowLoginTrialEffect();// 0x1f25360
	void PlayFailSound_BPNE();// 0x1f25360
	void PlayShowGameGradeAnimation_BPNE();// 0x1f25360
	void PlayMoveToLobbySoundAndAnimation_BPNE();// 0x1f25360
	void MoveToLobby_Dev_BPNE();// 0x1f25360
	void Shutter_Override_Development_Event();// 0x1f25360
	void Shipping_Log(FText NewParam);// 0x1f25360
	void OnInitialized();// 0x1f25360
	void OnGamepadInputKeyDown_BP(Key InKey);// 0x1f25360
	void HandleShowFirstUserMovie_BPNE(bool InShow, FString MoviePath);// 0x1f25360
	void FirstUserMovieFinished();// 0x1f25360
	void BndEvt__LoginMenu_Button_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x1f25360
	void HandleShowFirstUserMovieCE(bool ShowMovie, FString MoviePath);// 0x1f25360
	void ExecuteUbergraph_LoginMenu(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, OPSDKHandler* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool ___bool_Variable, bool CallFunc_IsSteam_ReturnValue, enum ___byte_Variable, enum ___byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_AreCapsLocked_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_Event_IsDesignTime, FString CallFunc_GetGameVersionCode_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString K2Node_CustomEvent_Reason, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, enum K2Node_CustomEvent_InContextMenuType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const FText K2Node_CustomEvent_Text, FString CallFunc_Conv_TextToString_ReturnValue, bool ___bool_Has_Been_Initd_Variable, FString CallFunc_Right_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, int CallFunc_FindSubstring_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsEditorMode_ReturnValue, OP_SocketManager* CallFunc_GetSocketManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetMasterServerConnectionState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FString K2Node_CustomEvent_Reason, FText CallFunc_GetTextFromStringTable_ReturnValue, enum K2Node_CustomEvent_InVisibility, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_GetTextFromStringTable_ReturnValue, FText CallFunc_GetTextFromStringTable_ReturnValue, FText CallFunc_GetTextFromStringTable_ReturnValue, OP_InteractionPopup_AlertAsker* CallFunc_BuildPopup_AlertAsker_WithTimer_ButtonNameChange_BP_ReturnValue, enum ___byte_Variable, FString CallFunc_GetCommandLine_ReturnValue, bool CallFunc_ParseParam_ReturnValue, bool ___bool_IsClosed_Variable, FString K2Node_CustomEvent_Name, FString K2Node_CustomEvent_Result, FString K2Node_CustomEvent_Reason, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Has_Been_Initd_Variable, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsEditorMode_ReturnValue, FString K2Node_Event_InMessage, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_Event_InNewConnectionState, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsShippingBuild_ReturnValue, bool CallFunc_IsShippingBuild_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool ___bool_IsClosed_Variable, enum ___byte_Variable, UMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result, WidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsValid_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsShippingBuild_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, AudioComponent* CallFunc_CreateSound2D_ReturnValue, float CallFunc_GetEndTime_ReturnValue, bool ___bool_Variable, enum K2Node_Select_Default, FText K2Node_CustomEvent_NewParam, bool ___bool_Has_Been_Initd_Variable, OP_GameInstance* CallFunc_GetStaticGameInstance_ReturnValue, bool ___bool_IsClosed_Variable, bool CallFunc_IsValid_ReturnValue, OP_GameInstance* CallFunc_GetStaticGameInstance_ReturnValue, Key K2Node_Event_InKey, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool K2Node_Event_InShow, FString K2Node_Event_MoviePath, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_ShowMovie, FString K2Node_CustomEvent_MoviePath, enum K2Node_Select_Default, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate);// 0x1f25360
	void RequestStart__DelegateSignature();// 0x1f25360

--------------------------------
Class: OP_LoginMenuComponent.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	CheckBox* Bind_CheckBox_RememberID;//[Offset: 0x310, Size: 1]
	EditableText* Bind_EditText_ID;//[Offset: 0x318, Size: 1]
	EditableText* Bind_EditText_PW;//[Offset: 0x320, Size: 1]
	OP_RegisterMenuComponent* Bind_View_RegisterPopup;//[Offset: 0x328, Size: 1]
	OP_SelectLoginServerWidget* Bind_View_SelectLoginServer;//[Offset: 0x330, Size: 1]
	OPSettingContextMenuWidget* Bind_OPSettingContextMenuWidget_SettingMenu;//[Offset: 0x338, Size: 1]
	bool HasValidPlatformCredential;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	enum LoginMenuStatus;//[Offset: 0x345, Size: 1]
	bool bHasLoginTrial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool bIsTestShipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	bool bIsSkipSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bIsTestSDKGuestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bIsSteamLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool bIsTestSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	bool bIsTestTOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bIsTestAuth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bIsTestCOPPA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool bIsPS5TokenValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	float LoginBlockTime;//[Offset: 0x354, Size: 1]
	FString PlatformName;//[Offset: 0x358, Size: 1]
	void TrySignIn(FString InLoginID, FString InLoginPassword);// 0x1b51450
	void TrySDKLoginShippingClient();// 0x1b51430
	void TryPlatformLogin(FString InToken, FString InPlatformName);// 0x1b51290
	void TryLogin_CPP();// 0x1b51270
	void TryLogin(FString InToken, FString InPreviousLoginID, FString InPlatformName);// 0x1b51030
	void TryConnectToFrontServer();// 0x1b51010
	void StartEOSLogin_BPNE();// 0x1ad3c50
	void ShowSimplePopup(FString InStringKey);// 0x1b50f60
	void ShowSettingMenu(bool bIsShow);// 0x1b50ed0
	void SetDevStng_BPNE();// 0x1acdab0
	void SendResetPacket(FString InPreviousID, FString InNewID, FString InNewNickName, FString Inpassword);// 0x1b50be0
	void SendRegisterPacket();// 0xd9d3e0
	void RecoveryMouse();// 0x1b50980
	void PS5_AutoLoginToGetNewToken();// 0xd9d3e0
	void PlayShowGameGradeAnimation_BPNE();// 0x1f25360
	void PlayMoveToLobbySoundAndAnimation_BPNE();// 0x1f25360
	void PlayFailSound_BPNE();// 0x1f25360
	void OP_Delay(Object* CallbackTarget, FName excutionFunction, float Duration, int Linkage);// 0x1b50240
	void OnSignInResult_BPNE(enum InResult, FString InToken);// 0x1b50720
	void OnRetryLogin(FString InID, FString InPW);// 0x1b50580
	void OnMasterServerStateChanged(bool InNewState);// 0x1b504f0
	void OnMasterServerConnectionChanged_BPNE(bool InNewConnectionState);// 0x1a7f330
	void OnLoginResult_BPNE(enum InResult);// 0x1ace1a0
	void OnConnectionLost();// 0x1b504d0
	void OnAccountResetResult_BPNE(enum InResult);// 0x1ace1a0
	void MoveToLobby_Step2();// 0x1b50220
	void MoveToLobby_Step1();// 0x1b50200
	void MoveToLobby_Dev_BPNE();// 0x1f25360
	void MoveToLobby();// 0x1b50200
	void LoginMenuDisplayMessageCenter_BPNE(FString InMessage);// 0x1b500e0
	void LoginFailEndGame(FString InType, int InErrorCode, int InDetailCode, int InTotalCode);// 0x1b4ff20
	void HandleShowWebview();// 0x1b4ff00
	void HandleShowGameGrade();// 0x1b4fee0
	void HandleShowFirstUserMovie_BPNE(bool InShow, FString MoviePath);// 0x1b4fe10
	void HandleSDKTOSResultProcess(int InTotalCode, int InErrorCode, int InDetailCode, int InCustomCode);// 0x1b4fcc0
	void HandleSDKSignupProcess(int InErrorCode, int InDetailCode);// 0x1b4fbf0
	void HandleSDKSigninProcess(int InErrorCode, int InDetailCode);// 0x1b4fb20
	void HandleSDKIndividualAuthResultProcess(int InErrorCode, int InDetailCode);// 0x1b4f470
	void HandleSDKIndividualAuthCheckProcess(int InErrorCode, int InDetailCode);// 0x1b4fa50
	void HandlePersonalAuthProcess();// 0x1b4fa30
	void HandleMaintenanceWebViewResult(int InErrorCode, int InDetailCode, FString StringParam, FString InOrderID);// 0x1b4f810
	void HandleFetchResultProcess(int InErrorCode, int InDetailCode);// 0x1b4f610
	void HandleCreatePlatformResultProcess(int InErrorCode, int InDetailCode);// 0x1b4f540
	void HandleCOPPAResultProcess(int InErrorCode, int InDetailCode);// 0x1b4f470
	void HandleCOPPACheckProcess(int InErrorCode, int InDetailCode);// 0x1b4f3a0
	void Dev_AutoLoginWithCommandLineOption();// 0xd9d3e0
	void ContinueHandlePlayFirstUserMovie();// 0x1b4f1d0
	void CheckSDKLoginShippingClient();// 0xd9d3e0
	void CheckGameInfoDisplay();// 0x1b4f090
	bool AreCapsLocked();// 0x1b4f060

--------------------------------
Class: OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	UserWidget* OwnerWidget;//[Offset: 0x280, Size: 1]
	bool bProcessForEscKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bIsControlledByWidgetManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FName OPWM_WidgetName;//[Offset: 0x28c, Size: 1]
	bool OPWM_bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	enum OPWM_eMouseFocusType;//[Offset: 0x295, Size: 1]
	bool bHideCursorOnUsingGamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	FName GetOPUserData();// 0x1bc5710

--------------------------------
Class: OPUserWidgetBase.UserWidget.Widget.Visual.Object
	void SynchronizeProperties_BP();// 0x1f25360
	void OnGamepadInputKeyUp_BP(Key InKey);// 0x1f25360
	void OnGamepadInputKeyDown_BP(Key InKey);// 0x1f25360
	void OnChangeInputDevice_BP(enum InputDevice, enum GamepadType);// 0x1f25360
	void OnChangeInputDevice(enum InInputDevice, enum InGamepadType);// 0x1bcb330

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x120, Size: 1]
	delegate CheckedStateDelegate;//[Offset: 0x124, Size: 1]
	CheckBoxStyle WidgetStyle;//[Offset: 0x138, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b8, Size: 1]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6c0, Size: 1]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c8, Size: 1]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6d0, Size: 1]
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d8, Size: 1]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6e0, Size: 1]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e8, Size: 1]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6f0, Size: 1]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f8, Size: 1]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x700, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x708, Size: 1]
	Margin Padding;//[Offset: 0x70c, Size: 1]
	SlateColor BorderBackgroundColor;//[Offset: 0x720, Size: 1]
	byte ClickMethod;//[Offset: 0x748, Size: 1]
	byte TouchMethod;//[Offset: 0x749, Size: 1]
	byte PressMethod;//[Offset: 0x74a, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74b, Size: 1]
	MulticastInlineDelegateProperty OnCheckStateChanged;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3160730
	void SetPressMethod(byte InPressMethod);// 0x3160450
	void SetIsChecked(bool InIsChecked);// 0x315fb80
	void SetClickMethod(byte InClickMethod);// 0x315f6e0
	void SetCheckedState(enum InCheckedState);// 0x315f5e0
	bool IsPressed();// 0x315ef10
	bool IsChecked();// 0x315eeb0
	enum GetCheckedState();// 0x315ea70

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x3163880
	PanelSlot* GetContentSlot();// 0x31631a0
	Widget* GetContent();// 0x3163170

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 1]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 1]
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 1]
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 1]
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 1]
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 1]
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 1]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 1]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 1]
	Margin Padding;//[Offset: 0x4d8, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 1]
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 1]
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 1]
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 1]
	delegate TextDelegate;//[Offset: 0x120, Size: 1]
	FText HintText;//[Offset: 0x130, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x148, Size: 1]
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 1]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 1]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 1]
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 1]
	SlateFontInfo Font;//[Offset: 0x398, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	byte KeyboardType;//[Offset: 0x426, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 1]
	byte Justification;//[Offset: 0x42a, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x31643b0
	void SetJustification(byte InJustification);// 0x3163fb0
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x3163e90
	void SetIsPassword(bool InbIsPassword);// 0x3163d70
	void SetHintText(FText InHintText);// 0x3163a90
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1f25360
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1f25360
	FText GetText();// 0x31633f0

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 1]
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 1]
	SlateBrush CaretImage;//[Offset: 0x198, Size: 1]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x48, Size: 1]
	int LetterSpacing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: OP_RegisterMenuComponent.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	EditableText* Bind_EditText_NickName;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_ValidationResult;//[Offset: 0x280, Size: 1]
	FString Token;//[Offset: 0x288, Size: 1]
	FString PlatformName;//[Offset: 0x298, Size: 1]
	FString PreviousLoginID;//[Offset: 0x2a8, Size: 1]
	OP_LoginMenuComponent* Mother;//[Offset: 0x2b8, Size: 1]
	void SetRegisterInfo_BPNE();// 0x1a7d3a0
	void Register(FString InToken, FText InNickname, FString InPlatformName);// 0x1b509a0
	void OnRegisterResult_BPNE(enum InResult);// 0x1ace1a0
	void HandleReaction_Yes_BP();// 0x1f25360
	void HandleReaction_No_BP();// 0x1f25360

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	delegate TextDelegate;//[Offset: 0x140, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 1]
	SlateFontInfo Font;//[Offset: 0x188, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 1]
	float MinDesiredWidth;//[Offset: 0x290, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x296, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x31758c0
	void SetText(FText InText);// 0x31757d0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x31756d0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x3175430
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x31753a0
	void SetOpacity(float InOpacity);// 0x3175320
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3175000
	void SetFont(SlateFontInfo InFontInfo);// 0x3174a40
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x31747d0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3174740
	FText GetText();// 0x3174360
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x3174120
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x31740f0

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 1]
	byte Justification;//[Offset: 0x10b, Size: 1]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 1]
	float WrapTextAt;//[Offset: 0x110, Size: 1]
	Margin Margin;//[Offset: 0x114, Size: 1]
	float LineHeightPercentage;//[Offset: 0x124, Size: 1]
	void SetJustification(byte InJustification);// 0x3174ce0

--------------------------------
Class: OP_SelectLoginServerWidget.UserWidget.Widget.Visual.Object
	FString SavedToken;//[Offset: 0x260, Size: 1]
	void HandleLoginServerSelected(int InIndex, FString InToken);// 0x1b4f6e0
	void HandleAddButtons_BPNE(out const int[] Indexes, out const FString[] ServerDescriptions, FString InToken);// 0x1b4f1f0

--------------------------------
Class: OPSettingContextMenuWidget.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* RelatedMenuButton;//[Offset: 0x2b8, Size: 1]
	enum SettingMenuType;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_BTN_BugReport;//[Offset: 0x2c8, Size: 1]
	OPButtonBase* Bind_BTN_Tutorial;//[Offset: 0x2d0, Size: 1]
	OPButtonBase* Bind_BTN_Options;//[Offset: 0x2d8, Size: 1]
	OPButtonBase* Bind_BTN_Social;//[Offset: 0x2e0, Size: 1]
	OPButtonBase* Bind_BTN_VisitHomepage;//[Offset: 0x2e8, Size: 1]
	OPButtonBase* Bind_BTN_Account;//[Offset: 0x2f0, Size: 1]
	OPButtonBase* Bind_BTN_LogOut;//[Offset: 0x2f8, Size: 1]
	OPButtonBase* Bind_BTN_ExitGame;//[Offset: 0x300, Size: 1]
	MulticastInlineDelegateProperty OnSelectedSettingContextMenuDelegate;//[Size: 1]
	void OpenSocialWidget_BP();// 0x1f25360
	void OnChangedSettingMenuType(enum InMenuType);// 0x1f25360

--------------------------------
Class: OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnRemovedByModalessInputProcessor;//[Size: 1]
	enum ModalessWidgetRemovalType;//[Offset: 0x2b0, Size: 1]
	bool bAddModalessOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	void RemoveModalessWidget();// 0x1b2cbd0
	void OnShow(bool InIsShow);// 0x1f25360
	void AddModalessWidget();// 0x1b2a230

--------------------------------
Class: OPButtonBase.UserWidget.Widget.Visual.Object
	enum ButtonState;//[Offset: 0x260, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	OPButtonBaseSlotChild* MotherSlotChild;//[Offset: 0x268, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnClickedWithIndex;//[Size: 1]
	int ClickIndex;//[Offset: 0x290, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x308, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x310, Size: 1]
	ButtonStateImages ButtonStateImages;//[Offset: 0x318, Size: 1]
	ButtonStateColors FButtonStateColors;//[Offset: 0x758, Size: 1]
	float ReclickDelay;//[Offset: 0x7d8, Size: 1]
	bool bSelectOnParentPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 1]
	bool bClickOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dd, Size: 1]
	bool bToggleSelectionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7de, Size: 1]
	bool bIsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7df, Size: 1]
	enum DefaultButtonState;//[Offset: 0x7e0, Size: 1]
	Widget* Bind_View_PressShrinker;//[Offset: 0x7e8, Size: 1]
	Image* Bind_Image_Background;//[Offset: 0x7f0, Size: 1]
	Widget* Bind_View_SelectedOverlay;//[Offset: 0x7f8, Size: 1]
	Widget* Bind_View_HoverOverlay;//[Offset: 0x800, Size: 1]
	Widget* Bind_View_SelectedHoverOverlay;//[Offset: 0x808, Size: 1]
	Widget* Bind_View_PressOverlay;//[Offset: 0x810, Size: 1]
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x818, Size: 1]
	UserWidget* ButtonTooltip;//[Offset: 0x820, Size: 1]
	bool bHideTooltipOnDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	byte TooltipPlacement;//[Offset: 0x829, Size: 1]
	Margin TooltipOffset;//[Offset: 0x82c, Size: 1]
	void SetButtonState(enum InNewState);// 0x1ae1150
	void SetButtonSelectedState(bool InIsSelected);// 0x1ae10c0
	void SetButtonEnabled(bool InIsEnabled);// 0x1ae0f10
	void PlayUnhoverAnimation_BP();// 0x1f25360
	void PlayUnhoverAnimation();// 0x1ae09f0
	void PlayHoverAnimation_BP();// 0x1f25360
	void PlayHoverAnimation();// 0x1ae09d0
	void PlayClickedSound();// 0x1ae09b0
	void OnNativeClicked_BPNE();// 0x1a8ac30
	void OnClicked_forSelectOnParentPanel_Buttons(bool InIsSelected);// 0x1ae07e0
	void OnButtonUnselected_BP();// 0x1f25360
	void OnButtonStateChanged_BPNE(bool InSelectedState, enum InNewButtonState);// 0x1ae0730
	void OnButtonSelected_BP();// 0x1f25360
	void OnButtonChildOrderNotify_BPNE(int InOrder);// 0x1ace2a0
	bool IsButtonSelected();// 0x1ae0710
	bool IsButtonEnabled();// 0x1ae06f0
	SoundBase* GetSound_forHover();// 0x1ae06d0
	SoundBase* GetSound_forClickUp();// 0x1ae06b0
	UserWidget* GetButtonTooltipWidget();// 0x1ae04f0
	SlateBrush GetButtonStateImage();// 0x1ae0440
	LinearColor GetButtonStateColor();// 0x1ae0400
	void DoClick();// 0x1ae0110

--------------------------------
Class: OPButtonBaseSlotChild.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_View_ButtonBase;//[Offset: 0x260, Size: 1]

--------------------------------
Class: ButtonStateImages
	SlateBrush Normal_UnSelected;//[Offset: 0x0, Size: 1]
	SlateBrush Hover_UnSelected;//[Offset: 0x88, Size: 1]
	SlateBrush Press_UnSelected;//[Offset: 0x110, Size: 1]
	SlateBrush Disable_UnSelected;//[Offset: 0x198, Size: 1]
	SlateBrush Normal_Selected;//[Offset: 0x220, Size: 1]
	SlateBrush Hover_Selected;//[Offset: 0x2a8, Size: 1]
	SlateBrush Press_Selected;//[Offset: 0x330, Size: 1]
	SlateBrush Disable_Selected;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: ButtonStateColors
	LinearColor Normal_UnSelected;//[Offset: 0x0, Size: 1]
	LinearColor Hover_UnSelected;//[Offset: 0x10, Size: 1]
	LinearColor Press_UnSelected;//[Offset: 0x20, Size: 1]
	LinearColor Disable_UnSelected;//[Offset: 0x30, Size: 1]
	LinearColor Normal_Selected;//[Offset: 0x40, Size: 1]
	LinearColor Hover_Selected;//[Offset: 0x50, Size: 1]
	LinearColor Press_Selected;//[Offset: 0x60, Size: 1]
	LinearColor Disable_Selected;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 1]
	delegate BrushDelegate;//[Offset: 0x190, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 1]
	void SetOpacity(float InOpacity);// 0x3168010
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x31679a0
	void SetBrushTintColor(SlateColor TintColor);// 0x3167820
	void SetBrushSize(Vector2D DesiredSize);// 0x31677a0
	void SetBrushResourceObject(Object* ResourceObject);// 0x3167710
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x1253d00
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x1253c30
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x1253ae0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x12539d0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x1253940
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x1253850
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x12537c0
	void SetBrush(out const SlateBrush InBrush);// 0x12536b0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3166ee0

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 1]

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 1]
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 1]
	delegate OnGetUserMenuContentEvent;//[Offset: 0x138, Size: 1]
	byte Placement;//[Offset: 0x148, Size: 1]
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 1]
	MulticastInlineDelegateProperty OnMenuOpenChanged;//[Size: 1]
	void ToggleOpen(bool bFocusOnOpen);// 0x316c770
	bool ShouldOpenDueToClick();// 0x316c740
	void SetPlacement(byte InPlacement);// 0x316c130
	void Open(bool bFocusMenu);// 0x316b840
	bool IsOpen();// 0x316b810
	bool HasOpenSubMenus();// 0x316b7e0
	UserWidget* GetUserWidget__DelegateSignature();// 0x1f25360
	Vector2D GetMenuPosition();// 0x316b560
	void FitInWindow(bool bFit);// 0x316b170
	void Close();// 0x316b150

--------------------------------
Class: OPSDKHandler.GameInstanceSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty Delegate_SDK_InitResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_SignupResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_SigninResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_TOS_Result;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_Individual_Auth_Result;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_Individual_Auth_Check;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_COPPA_Check;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_COPPA_Result;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_Product_Get_Result;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_PurchaseResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_JPPurchaseLawCheckResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_JPPurchaseLawResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_WebViewResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_WithdrawlResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_WithdrawlRevokeResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_WithdrawInfoResult;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_KRHourlyWarn;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_Fetch_Result;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_SDK_CreateCredential_Result;//[Size: 1]
	bool bGameInfoDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	void OnKRHourlyWarn();// 0x125d100
	static bool IsSteam();// 0x125d0d0
	static bool IsEpic();// 0x125d0a0
	bool GetPlatformAuthToken(out FString OutToken);// 0x125cb60

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 1]
	byte ArgumentValueType;//[Offset: 0x10, Size: 1]
	FText ArgumentValue;//[Offset: 0x18, Size: 1]
	int ArgumentValueInt;//[Offset: 0x30, Size: 1]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 1]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OP_InteractionPopup_Alert.OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnClickYes;//[Size: 1]
	OPTextButtonBase* Bind_BTN_Yes;//[Offset: 0x340, Size: 1]
	void HandleReaction_Yes();// 0x1b2c220
	static OP_InteractionPopup_Alert* BuildPopup_Alert_ButtonNameChange_BP(Object* InWorldContextObject, FText InButtonText, FText InMessage, Widget* InParentWidget, FName InOpKey);// 0x1b2b700
	static OP_InteractionPopup_Alert* BuildPopup_Alert_BP(Object* InWorldContextObject, FText InMessage, Widget* InParentWidget, FName InOpKey);// 0x1b2b550

--------------------------------
Class: OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Text;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_TXT_Title;//[Offset: 0x2b0, Size: 1]
	bool IsOutsideAreaEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bProessNoButtonClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	Button* Bind_BTN_OutsideArea_Close;//[Offset: 0x2c0, Size: 1]
	bool bConsumeESCInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bRecoverFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	void SetTitleText(FText InText);// 0x1b2d570
	void SetTextArray_BPNE(out const FText[] InTextArray);// 0x1b2d460
	void SetText(FText InText);// 0x1b2d380
	void SetOutsideAreaClickable(bool InIsEnabled);// 0x1b2d050
	void SetConsumeESCInput(bool InConsume);// 0x1b2cd90
	void OnOutsideAreaPressed();// 0x1b2c8e0
	void IgnoreESCPressed(bool bIgnore);// 0x1b2c2a0
	void HandleButtonPressed_BPNE(bool bIsYes);// 0x1a93080
	Widget* GetOwingWidget();// 0x1b2c110
	bool GetIgnoreESCPressed();// 0x1b2c0e0
	void DoRemovePopupProcedure();// 0x1b2c0c0

--------------------------------
Class: OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	bool bShowMouseOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	enum MouseFocusType;//[Offset: 0x299, Size: 1]
	void RequestRemoveMouseFocus();// 0x1b73d30
	void RequestMouseFocus();// 0x1b73d10

--------------------------------
Class: OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Text;//[Offset: 0x840, Size: 1]
	FText ButtonText;//[Offset: 0x848, Size: 1]
	SlateFontInfo Font;//[Offset: 0x860, Size: 1]
	bool bUseButtonColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	SlateColor Normal_UnSelected;//[Offset: 0x8c0, Size: 1]
	SlateColor Hover_UnSelected;//[Offset: 0x8e8, Size: 1]
	SlateColor Press_UnSelected;//[Offset: 0x910, Size: 1]
	SlateColor Disable_UnSelected;//[Offset: 0x938, Size: 1]
	SlateColor Normal_Selected;//[Offset: 0x960, Size: 1]
	SlateColor Hover_Selected;//[Offset: 0x988, Size: 1]
	SlateColor Press_Selected;//[Offset: 0x9b0, Size: 1]
	SlateColor Disable_Selected;//[Offset: 0x9d8, Size: 1]
	void SetButtonText(FText InNewButtonText);// 0x1ae11d0
	void SetButtonFont(SlateFontInfo InNewFont);// 0x1ae0fa0
	void SetButtonColor(SlateColor InColor);// 0x1ae0e20
	void PlayReverseHoverAnimation();// 0x1a7d3a0
	void OnButtonStateDisabled_BPNE(bool InIsDisabled);// 0x1a7f330

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 1]
	byte ClickMethod;//[Offset: 0x3c0, Size: 1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 1]
	byte PressMethod;//[Offset: 0x3c2, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnHovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x31606b0
	void SetStyle(out const ButtonStyle InStyle);// 0x31605d0
	void SetPressMethod(byte InPressMethod);// 0x31603d0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x315f760
	void SetClickMethod(byte InClickMethod);// 0x315f660
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x315f170
	bool IsPressed();// 0x315eee0

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0x90, Size: 1]
	SlateBrush Pressed;//[Offset: 0x118, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 1]
	Margin NormalPadding;//[Offset: 0x228, Size: 1]
	Margin PressedPadding;//[Offset: 0x238, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 1]

--------------------------------
Class: OP_SocketManager.Object
	OPCryptoManager* CryptoManager;//[Offset: 0x30, Size: 1]
	bool bForceConnectToLiveServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40131, Size: 1]
	MulticastInlineDelegateProperty OnConnectionStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnConnectionLost;//[Size: 1]
	MulticastInlineDelegateProperty OnWelcomePacket;//[Size: 1]
	TcpSocketConnection* SocketCustom;//[Offset: 0x40188, Size: 1]
	void TryReestablishTCPConnection_TimerCalled();// 0x1ba0990
	void TryReestablishTCPConnection();// 0x1ba0970
	void SetAnnonymousMode(bool InNewState);// 0x1b9f640
	void RestartTCPSocket();// 0x1b9f620
	void OnMessageReceived(int ConId, out byte[] Message);// 0x1b9e500
	void OnDisconnected(int ConId);// 0x1b9ded0
	void OnConnected(int ConId);// 0x1b9de40
	static OP_SocketManager* GetSocketManager(Object* InWorldContextObject);// 0x1b9d790
	enum GetMasterServerConnectionState();// 0x1b9d5c0
	bool GetIsAnnonymouseMode();// 0x1b9d590
	void BeginConnectToMasterServer_BP();// 0x1b9cfc0

--------------------------------
Class: OPCryptoManager.Object

--------------------------------
Class: TcpSocketConnection.Object
	int SendBufferSize;//[Offset: 0x28, Size: 1]
	int ReceiveBufferSize;//[Offset: 0x2c, Size: 1]
	float TimeBetweenTicks;//[Offset: 0x30, Size: 1]
	bool SendData(int ConnectionId, byte[] DataToSend);// 0x1267d60
	static FString Message_ReadString(out byte[] Message, int StringLength);// 0x1267c20
	static int Message_ReadInt(out byte[] Message);// 0x1267b70
	static float Message_ReadFloat(out byte[] Message);// 0x1267ac0
	static bool Message_ReadBytes(int NumBytes, out byte[] Message, out byte[] ReturnArray);// 0x1267960
	static byte Message_ReadByte(out byte[] Message);// 0x12678b0
	bool isConnected(int ConnectionId);// 0x1267e90
	void Disconnect(int ConnectionId, bool IgnoreDisconnectedDelegate);// 0x12677e0
	static byte[] Conv_StringToBytes(FString InStr);// 0x1267700
	static byte[] Conv_IntToBytes(int inInt);// 0x1267630
	static byte[] Conv_FloatToBytes(float InFloat);// 0x1267560
	static byte[] Conv_ByteToBytes(byte InByte);// 0x1267490
	void Connect(FString IPAddress, int Port, out const delegate OnDisconnected, out const delegate OnConnected, out const delegate OnMessageReceived, out int ConnectionId, int InSuggestedThreadPriority);// 0x12671e0
	static byte[] Concat_BytesBytes(byte[] A, byte[] B);// 0x1267030

--------------------------------
Class: OP_InteractionPopup_AlertAsker.OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnClickOptionalThirdButton;//[Size: 1]
	MulticastInlineDelegateProperty OnClickYes;//[Size: 1]
	MulticastInlineDelegateProperty OnClickNo;//[Size: 1]
	Button* Bind_BTN_OptionalThird;//[Offset: 0x360, Size: 1]
	TextBlock* Bind_TXT_OptionalThird;//[Offset: 0x368, Size: 1]
	OPTextButtonBase* Bind_BTN_Yes;//[Offset: 0x370, Size: 1]
	OPTextButtonBase* Bind_BTN_No;//[Offset: 0x378, Size: 1]
	bool IsOutsideAreaClickPressYes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	void SetOutsideAreaClickPressYes(bool InIsYes);// 0x1b2cfc0
	void HandleTimeout();// 0x1b2c280
	void HandleReaction_Yes();// 0x1b2c240
	void HandleReaction_OptionalThirdButton();// 0x1b2c1e0
	void HandleReaction_No();// 0x1b2c1a0
	static OP_InteractionPopup_AlertAsker* BuildPopup_AlertAsker_ButtonNameChange_BP(Object* InWorldContextObject, FText InYesText, FText InNoText, FText InMessage, Widget* InParentWidget, FName InOpKey);// 0x1b2a570
	static OP_InteractionPopup_AlertAsker* BuildPopup_AlertAsker_BP(Object* InWorldContextObject, FText InMessage, Widget* InParentWidget, FName InOpKey);// 0x1b2a3c0

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	MulticastInlineDelegateProperty Finished;//[Size: 1]
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3183290
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3183070

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 1]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 1]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 1]
	float PitchModulationMin;//[Offset: 0x228, Size: 1]
	float PitchModulationMax;//[Offset: 0x22c, Size: 1]
	float VolumeModulationMin;//[Offset: 0x230, Size: 1]
	float VolumeModulationMax;//[Offset: 0x234, Size: 1]
	float VolumeMultiplier;//[Offset: 0x238, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 1]
	float Priority;//[Offset: 0x244, Size: 1]
	float SubtitlePriority;//[Offset: 0x248, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 1]
	float PitchMultiplier;//[Offset: 0x258, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 1]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 1]
	MulticastInlineDelegateProperty OnAudioPlayStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioVirtualizationChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioPlaybackPercent;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioSingleEnvelopeValue;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioMultiEnvelopeValue;//[Size: 1]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 1]
	void StopDelayed(float DelayTime);// 0x3a53330
	void Stop();// 0x3a53310
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x3a53240
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x3a531c0
	void SetUISound(bool bInUISound);// 0x3a53130
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x3a52fe0
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x3a52e90
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x3a52dc0
	void SetSound(SoundBase* NewSound);// 0x3a52d30
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x3a52b90
	void SetPaused(bool bPause);// 0x3a52b00
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x3a52a70
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x3a529f0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x3a52960
	void SetIntParameter(FName InName, int inInt);// 0x3a52890
	void SetFloatParameter(FName InName, float InFloat);// 0x3a52740
	void SetBoolParameter(FName InName, bool InBool);// 0x3a52360
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x3a52290
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x3a521c0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x3a51e80
	void Play(float StartTime);// 0x3a51df0
	bool IsVirtualized();// 0x3a51dc0
	bool IsPlaying();// 0x3a51d90
	bool HasCookedFFTData();// 0x3a51d60
	bool HasCookedAmplitudeEnvelopeData();// 0x3a51d30
	enum GetPlayState();// 0x3a51d00
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x3a51c20
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x3a51b00
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x3a51a40
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x3a51990
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x3a51870
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x3a51710
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x3a51520
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x3a50930
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x3a50860

--------------------------------
Class: QuartzClockHandle.Object
	QuartzSubsystem* QuartzSubsystem;//[Offset: 0x168, Size: 1]
	World* WorldPtr;//[Offset: 0x188, Size: 1]
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x3209cc0
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3209be0
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x32099b0
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x3209870
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x3209520
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x32090e0
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3207850
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x3208b70
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x3208980
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x32081f0
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x3207f70
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x3207a80
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3207850
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x32076b0
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x32075c0
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3206db0
	bool IsClockRunning(const Object* WorldContextObject);// 0x3206690
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x3206520
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x3206480
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x32063e0
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x3205f00
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x3205ac0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x3205740
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x32056a0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x3205520

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x1020290
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x3206730
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x3206340
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x32062a0
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x3206200
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x3205ca0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x3205c00
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x3205c00
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x3205b60
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x32059e0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x3205860
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x32055c0
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x32054f0
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x32054c0
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x3205490
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x32053c0
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x32052f0
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x3205210
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x3205040

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 1]
	int Beat;//[Offset: 0x4, Size: 1]
	float BeatFraction;//[Offset: 0x8, Size: 1]
	float Seconds;//[Offset: 0xc, Size: 1]

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 1]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 1]
	enum BeatType;//[Offset: 0x4, Size: 1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 1]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 1]
	enum PulseDuration;//[Offset: 0x4, Size: 1]

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x4, Size: 1]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 1]
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 1]
	float FloatParam;//[Offset: 0x8, Size: 1]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int IntParam;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 1]
	float Magnitude;//[Offset: 0x4, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x4, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OP_GameInstance.GameInstance.Object
	OP_SocketManager* SocketManager;//[Offset: 0x1a8, Size: 1]
	class OP_DataManager* DataManagerClass;//[Offset: 0x1b0, Size: 1]
	class OP_CurveManager* CurveManagerClass;//[Offset: 0x1b8, Size: 1]
	class OPTutorialManager* TutorialManagerClass;//[Offset: 0x1c0, Size: 1]
	class OPUserCheckPointManager* UserCheckPointManagerClass;//[Offset: 0x1c8, Size: 1]
	OP_DataManager* DataManager;//[Offset: 0x1d0, Size: 1]
	OP_CurveManager* CurveManager;//[Offset: 0x1d8, Size: 1]
	OPTagManager* OPTagManager;//[Offset: 0x1e0, Size: 1]
	OPGlobalDelegateManager* OPGlobalDelegateManager;//[Offset: 0x1e8, Size: 1]
	OPChatCommandManager* ChatCommandManager;//[Offset: 0x1f0, Size: 1]
	OP_ConstantTableManager* ConstantTableManager;//[Offset: 0x1f8, Size: 1]
	OPTutorialManager* TutorialManager;//[Offset: 0x200, Size: 1]
	OPUserCheckPointManager* UserCheckPointManager;//[Offset: 0x208, Size: 1]
	OPSkillEffectLibrary* SkillEffectLibraryInstance;//[Offset: 0x210, Size: 1]
	OP_ItemClientData* ItemClientData;//[Offset: 0x218, Size: 1]
	OP_UserProfileClientData* UserProfileClientData;//[Offset: 0x220, Size: 1]
	OP_MasterServerClientData* MasterServerClientData;//[Offset: 0x228, Size: 1]
	OP_LobbyBrowserClientData* LobbyBrowserClientData;//[Offset: 0x230, Size: 1]
	OP_MatchClientData* MatchClientData;//[Offset: 0x238, Size: 1]
	OP_DedicatedServerClientData* DedicatedServerClientData;//[Offset: 0x240, Size: 1]
	OP_BattleClientData* BattleClientData;//[Offset: 0x248, Size: 1]
	OP_SkillClientData* SkillClientData;//[Offset: 0x250, Size: 1]
	OP_BattleHistoryClientData* BattleHistoryClientData;//[Offset: 0x258, Size: 1]
	OP_ShopClientData* ShopClientData;//[Offset: 0x260, Size: 1]
	OP_HeroClientData* HeroClientData;//[Offset: 0x268, Size: 1]
	OPHackClientData* HackClientData;//[Offset: 0x270, Size: 1]
	OP_PartyClientData* PartyClientData;//[Offset: 0x278, Size: 1]
	OPChatClientData* ChatClientData;//[Offset: 0x280, Size: 1]
	OP_PopupClientData* PopupClientData;//[Offset: 0x288, Size: 1]
	OP_InventoryClientData* InventoryClientData;//[Offset: 0x290, Size: 1]
	OP_MailClientData* MailClientData;//[Offset: 0x298, Size: 1]
	OPNewsClientData* NewsClientData;//[Offset: 0x2a0, Size: 1]
	OPMissionClientData* MissionClientData;//[Offset: 0x2a8, Size: 1]
	OP_FriendClientData* FriendClientData;//[Offset: 0x2b0, Size: 1]
	OP_StatClientData* StatClientData;//[Offset: 0x2b8, Size: 1]
	UserSettingManager* UserSettingManager;//[Offset: 0x2c0, Size: 1]
	OP_CheatClientData* CheatClientData;//[Offset: 0x2c8, Size: 1]
	class OP_SoundClientData* SoundClientDataClass;//[Offset: 0x2d0, Size: 1]
	OP_SoundClientData* SoundClientData;//[Offset: 0x2d8, Size: 1]
	OP_SkinClientData* SkinClientData;//[Offset: 0x2e0, Size: 1]
	OP_ProductClientData* ProductClientData;//[Offset: 0x2e8, Size: 1]
	OP_GambleClientData* GambleClientData;//[Offset: 0x2f0, Size: 1]
	OP_CustomMatchClientData* CustomMatchClientData;//[Offset: 0x2f8, Size: 1]
	OP_FocusingBrowser* FocusingBrowser;//[Offset: 0x300, Size: 1]
	SlateBrush NotificationIcon;//[Offset: 0x318, Size: 1]
	class OPGameSettingWidget* GameSettingWidgetClass;//[Offset: 0x3f8, Size: 1]
	OPGameSettingWidget* GameSettingWidget;//[Offset: 0x400, Size: 1]
	class OPProfilePopupWidget* ProfilePopupWidgetClass;//[Offset: 0x408, Size: 1]
	OPProfilePopupWidget* ProfilePopupWidget;//[Offset: 0x410, Size: 1]
	class OPLobbyPopupFlowComponentBase* LegacySettingWidgetClass;//[Offset: 0x418, Size: 1]
	OPLobbyPopupFlowComponentBase* LegacySettingWidget;//[Offset: 0x420, Size: 1]
	class OPMatchResultFlowWidget* MatchResultFlowWidgetClass;//[Offset: 0x428, Size: 1]
	class MatchBrowserMainComponent* MatchResultWidgetClass;//[Offset: 0x430, Size: 1]
	class MatchBrowserMainComponent* MatchResultReplayWidgetClass;//[Offset: 0x438, Size: 1]
	OPMatchResultFlowWidget* MatchResultFlowWidget;//[Offset: 0x440, Size: 1]
	MatchBrowserMainComponent* MatchResultWidget;//[Offset: 0x448, Size: 1]
	class OPMouseCursor* MouseCursorClass;//[Offset: 0x4a8, Size: 1]
	OPMouseCursor* MouseCursor;//[Offset: 0x4b0, Size: 1]
	bool bSetMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	void UpdateMouseCursor();// 0x1b20c10
	void ShowProfilePopupWidget(FString InUserID, FString InRegion);// 0x1b20740
	void ShowMatchResultWidget_Dev(int InMatchID, FString InUserName);// 0x1b20610
	void ShowMatchResultWidget(int InMatchID, bool InIsReplay);// 0x1b20540
	void ShowMatchResultFlowWidget();// 0x1b20520
	void ShowLegacySettingWidget();// 0x1b20500
	void ShowGameSettingWidget(bool bShow, Widget* InParentWidget);// 0x1b20430
	void RemoveProfilePopupWidget();// 0x1b20020
	void RemoveGameSettingWidget();// 0x1b20000
	void OnWindowFocusChanged(bool bIsFocused);// 0x1b1ff70
	void OnInit_BPNE();// 0x1a7d3a0
	bool HandleWindowsCloseRequest();// 0x1b1f620
	static OP_GameInstance* GetStaticGameInstance();// 0x1b1f540
	static Actor* GenerateTCPHandler(Object* InWorldContextObject);// 0x1b1f470
	void ChangeInputDevice(bool InIsGamePad);// 0x1b1f3e0

--------------------------------
Class: OP_DataManager.Object
	Object*[] ObjectHolder;//[Offset: 0x28, Size: 1]
	class Object[] ClassHolder;//[Offset: 0x38, Size: 1]
	DataTable* ExpGainedDataTable;//[Offset: 0x48, Size: 1]
	DataTable* GoldGainedDataTable;//[Offset: 0x50, Size: 1]
	DataTable* ExpByLevelDataTable;//[Offset: 0x58, Size: 1]
	DataTable* ExpRateByLevelIntervalDataTable;//[Offset: 0xb0, Size: 1]
	DataTable* HeroKillGainedGoldDataTable;//[Offset: 0xc8, Size: 1]
	DataTable* BountyDataTable;//[Offset: 0x1c8, Size: 1]
	DataTable* BountyReductionDataTable;//[Offset: 0x220, Size: 1]
	DataTable* ShopListDataTable;//[Offset: 0x2c8, Size: 1]
	DataTable* RecommendItemDataTable;//[Offset: 0x320, Size: 1]
	DataTable*[] SkillDataTable;//[Offset: 0x3c8, Size: 1]
	DataTable*[] SkillConditionDataTable;//[Offset: 0x3d8, Size: 1]
	DataTable*[] SkillEffectDataTable;//[Offset: 0x3e8, Size: 1]
	DataTable*[] SkillColliderDataTable;//[Offset: 0x3f8, Size: 1]
	DataTable* GimmickDataTable;//[Offset: 0x408, Size: 1]
	DataTable* SpellDataTable;//[Offset: 0x410, Size: 1]
	DataTable* SkillDescriptionDataTable;//[Offset: 0x418, Size: 1]
	DataTable* ItemDataTable;//[Offset: 0x420, Size: 1]
	DataTable* ItemCombinationDataTable;//[Offset: 0x428, Size: 1]
	DataTable* StatDataTable;//[Offset: 0x430, Size: 1]
	DataTable* HeroStatusDataTable;//[Offset: 0x438, Size: 1]
	DataTable* HeroSknDataTable;//[Offset: 0x440, Size: 1]
	DataTable* HeroOverviewDataTable;//[Offset: 0x448, Size: 1]
	DataTable* ServerErrorCodeDataTable;//[Offset: 0x450, Size: 1]
	DataTable* OPUICommonSoundDataTable;//[Offset: 0x458, Size: 1]
	DataTable* HeroEventDataTable;//[Offset: 0x4b0, Size: 1]
	DataTable* GlobalEventDataTableTable;//[Offset: 0x4b8, Size: 1]
	DataTable* SystemVoiceDataTable;//[Offset: 0x4c0, Size: 1]
	DataTable* DirectionDataTable;//[Offset: 0x4c8, Size: 1]
	DataTable* FootStepDirectionDataTable;//[Offset: 0x4d0, Size: 1]
	DataTable* EffectKeywordSoundDirectionDataTable;//[Offset: 0x4d8, Size: 1]
	DataTable* SkillEventDataTable;//[Offset: 0x4e0, Size: 1]
	DataTable* SkillDirectionDataTable;//[Offset: 0x4e8, Size: 1]
	DataTable* DirectionPackageCameraDataTable;//[Offset: 0x4f0, Size: 1]
	DataTable* DirectionPackageDecalDataTable;//[Offset: 0x4f8, Size: 1]
	DataTable* StateKeywordDataTable;//[Offset: 0x500, Size: 1]
	DataTable* HeroMotionDataTable;//[Offset: 0x508, Size: 1]
	DataTable* KeywordDirectionDataTable;//[Offset: 0x510, Size: 1]
	DataTable* SkillColliderDirectionDataTable;//[Offset: 0x518, Size: 1]
	DataTable* InGameObjectPopupDataTable;//[Offset: 0x520, Size: 1]
	DataTable* SystemVoiceAnnounceDataTable;//[Offset: 0x528, Size: 1]
	DataTable* SkillSlotDataTable;//[Offset: 0x530, Size: 1]
	DataTable* SkillMaxLvDataTable;//[Offset: 0x538, Size: 1]
	DataTable* ProductDataTable;//[Offset: 0x540, Size: 1]
	DataTable* ProductSDKDataTable;//[Offset: 0x548, Size: 1]
	DataTable* MissionDataTable;//[Offset: 0x550, Size: 1]
	DataTable* NewUserDayLoginRewardDataTable;//[Offset: 0x558, Size: 1]
	DataTable* RewardDataTable;//[Offset: 0x560, Size: 1]
	DataTable* NewsParentMenuSeqDataTable;//[Offset: 0x568, Size: 1]
	DataTable* NewsMenuSeqDataTable;//[Offset: 0x570, Size: 1]
	DataTable* GambleActionDataTable;//[Offset: 0x578, Size: 1]
	DataTable* GambleGroupDataTable;//[Offset: 0x580, Size: 1]
	DataTable* GambleRatingPerDataTable;//[Offset: 0x588, Size: 1]
	DataTable* GambleDisplayDataTable;//[Offset: 0x590, Size: 1]
	DataTable* CurrencyDataTable;//[Offset: 0x598, Size: 1]
	DataTable* EffectDataTable;//[Offset: 0x5a0, Size: 1]
	DataTable* SpawnerLaneTable;//[Offset: 0x5a8, Size: 1]
	DataTable* SpawnerJungleTable;//[Offset: 0x5b0, Size: 1]
	DataTable* MapTable;//[Offset: 0x5b8, Size: 1]
	DataTable* MinimapTable;//[Offset: 0x5c0, Size: 1]
	DataTable* RealmListTable;//[Offset: 0x5c8, Size: 1]
	DataTable* DamageTypeTable;//[Offset: 0x5d0, Size: 1]
	DataTable* TutorialSceneTable;//[Offset: 0x5d8, Size: 1]
	DataTable* TutorialScenePSTable;//[Offset: 0x5e0, Size: 1]
	DataTable* TrainingCheatTable;//[Offset: 0x5e8, Size: 1]
	DataTable* TutorialPageTable;//[Offset: 0x5f0, Size: 1]
	DataTable* SkillMontageNotifyTable;//[Offset: 0x5f8, Size: 1]
	DataTable* SkillMontageTable;//[Offset: 0x600, Size: 1]
	DataTable* SkillMontageSkinTable;//[Offset: 0x608, Size: 1]
	DataTable* BGMTable;//[Offset: 0x610, Size: 1]
	DataTable* CustomOptionTable;//[Offset: 0x618, Size: 1]
	DataTable* ProfileEmblemTable;//[Offset: 0x620, Size: 1]
	DataTable* HonorGradeTable;//[Offset: 0x628, Size: 1]
	DataTable* ReportPenaltyTable;//[Offset: 0x630, Size: 1]
	DataTable* ItemOutgameTable;//[Offset: 0x638, Size: 1]
	DataTable* MessageTemplateTable;//[Offset: 0x640, Size: 1]
	DataTable* MessageTemplateMailTable;//[Offset: 0x648, Size: 1]
	DataTable* MessageTemplateKeyValueTable;//[Offset: 0x650, Size: 1]
	DataTable* LocalLinkTable;//[Offset: 0x658, Size: 1]
	DataTable* MailLinkTable;//[Offset: 0x660, Size: 1]
	DataTable* TierTable;//[Offset: 0x668, Size: 1]
	DataTable* RankSeasonTable;//[Offset: 0x670, Size: 1]
	DataTable* RankSeasonSplitTable;//[Offset: 0x678, Size: 1]
	DataTable* MonsterAITable;//[Offset: 0x680, Size: 1]
	DataTable* SummonsTable;//[Offset: 0x688, Size: 1]
	DataTable* LobbyMenuDataTable;//[Offset: 0x690, Size: 1]
	DataTable* MvpPointDataTable;//[Offset: 0x698, Size: 1]
	DataTable* MasteryDataTable;//[Offset: 0x6a0, Size: 1]
	DataTable* MasteryHiddenStoryDataTable;//[Offset: 0x6a8, Size: 1]
	DataTable* MasteryStatusDataTable;//[Offset: 0x6b0, Size: 1]
	DataTable*[] SoundDataTables;//[Offset: 0x6b8, Size: 1]
	DataTable* TableValidation_ActionKeyword;//[Offset: 0x6c8, Size: 1]
	<FName,OPHeroEventDataTableRow> HeroEventDataMap;//[Offset: 0x6d0, Size: 1]
	<FName,OPGlobalEventDataTableRow> GlobalEventDataMap;//[Offset: 0x720, Size: 1]
	<FName,OPSystemVoiceDataTableRow> SystemVoiceDataMap;//[Offset: 0x770, Size: 1]
	<FName,OPDirectionPackageDataTableRow> DirectionPackageDataMap;//[Offset: 0x7c0, Size: 1]
	<FName,OPFootStepDirectionTableRow> FootStepDirectionDataMap;//[Offset: 0x810, Size: 1]
	<FName,OPEffectKeywordSoundDirectionTableRow> EffectKeywordSoundDirectionDataMap;//[Offset: 0x860, Size: 1]
	<FName,OPSkillEventDataTableRow> SkillEventDataMap;//[Offset: 0x8b0, Size: 1]
	<FName,OPDirectionPackageSkillTableRow> DirectionPackageSkillDataMap;//[Offset: 0x900, Size: 1]
	<FName,OPDirectionPackageCameraDataTableRow> DirectionPackageCameraDataMap;//[Offset: 0x950, Size: 1]
	<FName,OPDirectionPackageDecalDataTableRow> DirectionPackageDecalDataMap;//[Offset: 0x9a0, Size: 1]
	<FName,OPIngameObjectivePopupDataTableRow> IngameObjectivePopupDataMap;//[Offset: 0x9f0, Size: 1]
	<FName,OPSystemVoiceAnnounceDataTableRow> SystemVoiceAnnounceDataMap;//[Offset: 0xa40, Size: 1]
	<FName,OPEffectKeywordTableRow> EffectKeywordDataMap;//[Offset: 0xa90, Size: 1]
	<FName,OPMvpPointDataTableRow> MvpPointDataMap;//[Offset: 0xae0, Size: 1]
	<FName,MotionUnitStateData> HeroMotionDataMap;//[Offset: 0xb30, Size: 1]
	<FName,OPKeywordDirectionTableRow> KeywordDirectionDataMap;//[Offset: 0xb80, Size: 1]
	<FName,HeroStatusTableRow> HeroStatusDataMap;//[Offset: 0xbd0, Size: 1]
	<FName,HeroSkinTableRow> HeroSkinDataMap;//[Offset: 0xc20, Size: 1]
	<FName,UnitSkinBindData> UnitSkinBindDataMap;//[Offset: 0xc70, Size: 1]
	<FName,HeroOverviewTableRow> HeroOverviewDataMap;//[Offset: 0xcc0, Size: 1]
	<FName,SkillTableData> SkillDataMap;//[Offset: 0xd10, Size: 1]
	<FName,FText> SkillDescriptionDataMap;//[Offset: 0xd60, Size: 1]
	<FName,GimmickDataTableRow> GimmickDataMap;//[Offset: 0xdb0, Size: 1]
	<FName,SpellDataTableRow> SpellDataMap;//[Offset: 0xe00, Size: 1]
	<FName,ItemDataTableRow> ItemDataMap;//[Offset: 0xe50, Size: 1]
	<enum,StatTableData> StatDataMap;//[Offset: 0xea0, Size: 1]
	<FName,OPSkillEffectTableRow> SkillEffectDataMap;//[Offset: 0xef0, Size: 1]
	<FName,OPSkillConditionTableRow> SkillConditionDataMap;//[Offset: 0xf40, Size: 1]
	<FName,OPSkillColliderTableRow> SkillColliderDataMap;//[Offset: 0xf90, Size: 1]
	<FName,OPSkillColliderDirectionTableRow> SkillColliderDirectionDataMap;//[Offset: 0xfe0, Size: 1]
	<FName,OPSkillSlotTableRow> SkillSlotDataMap;//[Offset: 0x1030, Size: 1]
	<FName,SkillMaxLvTableRow> SkillMaxLvDataMap;//[Offset: 0x1080, Size: 1]
	<FName,OPProductTableRow> ProductDataMap;//[Offset: 0x10d0, Size: 1]
	<int,OPGambleActionTableRow> GambleActionDataMap;//[Offset: 0x1120, Size: 1]
	<int,OPGambleDisplayTableRow> GambleDisplayDataMap;//[Offset: 0x1170, Size: 1]
	<int,OPGambleGroupTableRow> GambleGroupDataMap;//[Offset: 0x11c0, Size: 1]
	<int,OPGambleRatingPerTableRow> GambleRatingPerDataMap;//[Offset: 0x1210, Size: 1]
	<FName,OPMissionTableRow> MissionDataMap;//[Offset: 0x1260, Size: 1]
	<FName,OPSummonsTableRow> SummonsDataMap;//[Offset: 0x12c0, Size: 1]
	<FName,OPEffectTableRow> EffectDataMap;//[Offset: 0x1310, Size: 1]
	<FName,OPLaneSpawnerTableRow> SpawnerLaneDataMap;//[Offset: 0x1360, Size: 1]
	<FName,OPJungleSpawnerTableRow> SpawnerJungleDataMap;//[Offset: 0x13b0, Size: 1]
	<enum,OPMapTableRow> MapTableDataMap;//[Offset: 0x1400, Size: 1]
	<FName,OPMinimapTableRow> MinimapTableDataMap;//[Offset: 0x1450, Size: 1]
	<FName,OPDamageTypeTableRow> DamageTypeDataMp;//[Offset: 0x14a0, Size: 1]
	<FName,TutorialSceneRow> TutorialSceneDataMap;//[Offset: 0x14f0, Size: 1]
	<FName,OPSkillMontageNotifyTableRow> SkillMontageNotifyDataMap;//[Offset: 0x1540, Size: 1]
	<FName,SkillMontageTableRow> SkillMontageSkinDataMap;//[Offset: 0x1590, Size: 1]
	<FName,OPBGMTableRow> BGMDataMap;//[Offset: 0x15e0, Size: 1]
	<FName,CustomOptionRow> CustomOptionTableMap;//[Offset: 0x1630, Size: 1]
	<FName,OPEmblemTableRow> ProfileEmblemTableMap;//[Offset: 0x1680, Size: 1]
	<FName,ItemOutgameTableRow> ItemOutgameTableMap;//[Offset: 0x16d0, Size: 1]
	<FName,HonorGradeTableRow> HonorGradeTableMap;//[Offset: 0x1720, Size: 1]
	<FName,BattlePassLevelRow> BattlePassLevelTableMap;//[Offset: 0x1770, Size: 1]
	<FName,BattlePassMissionRow> BattlePassMissionTableMap;//[Offset: 0x17c0, Size: 1]
	<FName,RewardTableRow> RewardTableMap;//[Offset: 0x1810, Size: 1]
	<FName,OPCurrencyTableRow> CurrencyDataMap;//[Offset: 0x1860, Size: 1]
	<FName,OPMasteryDataTableRow> MasteryDataMap;//[Offset: 0x18b0, Size: 1]
	<FName,OPMasteryHiddenStoryDataTableRow> MasteryHiddenStoryDataMap;//[Offset: 0x1900, Size: 1]
	<FName,OPMasteryStatusDataTableRow> MasteryStatusDataMap;//[Offset: 0x1950, Size: 1]
	<FName,OPTableValidation_ActionKeyword_TableRow> TableValidation_ActionKeyword_DataMap;//[Offset: 0x19a0, Size: 1]
	<FName,OPServerErrorCodeTableRow> ServerErrorCodeMap;//[Offset: 0x19f0, Size: 1]
	DataTable* PositionGuideDataTable;//[Offset: 0x1a40, Size: 1]
	PositionGuideTableRow[] PositionGuideList;//[Offset: 0x1a48, Size: 1]
	Texture2D* DefaultPortrait;//[Offset: 0x1a68, Size: 1]
	Texture2D* DefaultAvatarPortrait;//[Offset: 0x1a70, Size: 1]
	DataTable* GameSettingDataTable;//[Offset: 0x1a78, Size: 1]
	DataTable* GameSettingSelectorDataTable;//[Offset: 0x1a80, Size: 1]
	DataTable* GameSettingSliderDataTable;//[Offset: 0x1a88, Size: 1]
	DataTable* GameSettingKeyBindingDataTable;//[Offset: 0x1a90, Size: 1]
	DataTable* GameSettingGamepadBindingDataTable;//[Offset: 0x1a98, Size: 1]
	DataTable* GameSettingListDataTable;//[Offset: 0x1aa0, Size: 1]
	DataTable* CommunityLevelDataTable;//[Offset: 0x1aa8, Size: 1]
	DataTable* KeyDisplayNameTable;//[Offset: 0x1b08, Size: 1]
	DataTable* GamepadKeyTextureTable;//[Offset: 0x1b10, Size: 1]
	FString[] ProhibitedWordList_forChat_LogicA;//[Offset: 0x1c58, Size: 1]
	FString[] ProhibitedWordList_forNickName_LogicA;//[Offset: 0x1c68, Size: 1]
	FString[] ProhibitedWordList_forChat_LogicB;//[Offset: 0x1c78, Size: 1]
	FString[] ProhibitedWordList_forNickName_LogicB;//[Offset: 0x1c88, Size: 1]
	DataTable* ProhibtedWordDataTable_forChat_LogicA;//[Offset: 0x1c98, Size: 1]
	DataTable* ProhibtedWordDataTable_forChat_LogicB;//[Offset: 0x1ca0, Size: 1]
	DataTable* ProhibtedWordDataTable_forNickName_LogicA;//[Offset: 0x1ca8, Size: 1]
	DataTable* ProhibtedWordDataTable_forNickName_LogicB;//[Offset: 0x1cb0, Size: 1]
	DataTable* BattlePass_LevelDataTable;//[Offset: 0x1cb8, Size: 1]
	DataTable* BattlePass_MissionDataTable;//[Offset: 0x1cc0, Size: 1]
	DataTable* SkillStatIconDataTable;//[Offset: 0x1cd8, Size: 1]
	DataTable* RichTextMarkupSetDataTable;//[Offset: 0x1ce0, Size: 1]
	DataTable* SkillLocaleDataTable;//[Offset: 0x1ce8, Size: 1]
	DataTable* SkillLocaleArgDataTable;//[Offset: 0x1cf0, Size: 1]
	DataTable* PlayerBotDataTable;//[Offset: 0x1e40, Size: 1]
	DataTable* UserCheckPointTable;//[Offset: 0x1e50, Size: 1]
	<FName,UserCheckPointRow> UserCheckPointDataMap;//[Offset: 0x1e58, Size: 1]
	DataTable* SpellPositionDataTable;//[Offset: 0x1ea8, Size: 1]
	void GetUserCheckPointRewardInfoList(FString RewardGroupId, out RewardTableRow[] OutRewardInfoList);// 0x1af2e20
	static void GetSkillStatIconInfo(Object* InWorldContextObject, FName InRowName, out FText OutStatName, out Texture2D* OutTexture);// 0x1af2ba0
	bool GetRichTextMarkupSet(FName InRowName, out FString[] OutMarkupSet);// 0x1af2a80
	Texture2D* GetProfileEmblemTextureByType(FName InKey);// 0x1af29e0
	static OP_DataManager* GetOPDataManager(Object* InWorldContextObject);// 0x1af26e0
	bool GetObtainedRewardInfo_forNewUserDayLogin(int InDayIndex, out int OutRewardItemID, out int OutRewardItemAmount, out FString OutItemNameKey, out FString OutHeroSkinGradeNameKey, out FString OutHeroNameKey);// 0x1af2770
	int GetNewUserDayLoginRewardInfoList(int InDayIndex, out NewUserDayLoginRewardInfo[] OutRewardInfoList);// 0x1af2580
	NewUserDayLoginRewardInfo GetNewUserDayLoginRewardInfo(int InDayIndex);// 0x1af2360
	NewUserDayLoginRewardTableRow GetNewUserDayLoginReward(int InDayIndex);// 0x1af2150
	bool GetLobbyMenuTableRowBP(enum InTopMenu, enum InSubMenu, out OPLobbyMenuDataTableRow OutRowData);// 0x1af1fd0
	void GetKeyDisplayName(FString InKeyType, out FText OutText, out Texture2D* OutTexture);// 0x1af1e00
	FString GetItemNameKey(int InItemID);// 0x1af1d20
	Texture2D* GetHonorGradeTextureByType(enum InType);// 0x1af1c90
	FString GetHeroNameStringKey(FName InKey);// 0x1af1bb0
	Texture2D* GetHeroIconTextureByType(enum InType, FName InKey);// 0x1af1ae0
	Texture2D* GetGamepadKeyTexture(FString InKeyType, enum InGamepadType);// 0x1af1990

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: RewardTableRow.TableRowBase
	FString Group_ID;//[Offset: 0x8, Size: 1]
	int Seq;//[Offset: 0x18, Size: 1]
	int Reward_Item_ID;//[Offset: 0x1c, Size: 1]
	int Reward_Item_Amount;//[Offset: 0x20, Size: 1]

--------------------------------
Class: OPHeroEventDataTableRow.TableRowBase
	FName FootStepMovement;//[Offset: 0x8, Size: 1]
	FName FootStepLanding;//[Offset: 0x10, Size: 1]
	FName FootStepFlyLanding;//[Offset: 0x18, Size: 1]
	FName HeroGroupID;//[Offset: 0x20, Size: 1]
	FName HeroSkinID;//[Offset: 0x28, Size: 1]
	FName OnKillEnemyHero;//[Offset: 0x30, Size: 1]
	FName OnDeath;//[Offset: 0x38, Size: 1]
	FName OnJump;//[Offset: 0x40, Size: 1]
	FName OnHitPain;//[Offset: 0x48, Size: 1]
	FName OnCoolDown;//[Offset: 0x50, Size: 1]
	FName OnLevelUp;//[Offset: 0x58, Size: 1]
	FName OnJumpCloth;//[Offset: 0x60, Size: 1]
	FName OnLanding;//[Offset: 0x68, Size: 1]
	FName OnSpawn;//[Offset: 0x70, Size: 1]
	FName OnDeathEvent;//[Offset: 0x78, Size: 1]
	FName OnHeroPick;//[Offset: 0x80, Size: 1]

--------------------------------
Class: OPGlobalEventDataTableRow.TableRowBase
	FName DirectionTableIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPSystemVoiceDataTableRow.TableRowBase
	FName SoundTableIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPDirectionPackageDataTableRow.TableRowBase
	FName[] Sound;//[Offset: 0x8, Size: 1]
	FName[] LocalSound;//[Offset: 0x18, Size: 1]
	bool StopSpawnSoundOnDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FXSystemAsset* Particle;//[Offset: 0x30, Size: 1]
	FXSystemAsset* AttachedParticle;//[Offset: 0x38, Size: 1]
	FXSystemAsset* ScreenParticle;//[Offset: 0x40, Size: 1]
	float CameraShakeScale;//[Offset: 0x48, Size: 1]
	class CameraShakeBase* CameraShake;//[Offset: 0x50, Size: 1]
	class CameraShakeBase* LocalCameraShake;//[Offset: 0x58, Size: 1]
	AnimMontage* AnimationMontage;//[Offset: 0x60, Size: 1]

--------------------------------
Class: OPFootStepDirectionTableRow.TableRowBase
	FName HeroSkinID;//[Offset: 0x8, Size: 1]
	FName Material_Grass;//[Offset: 0x10, Size: 1]
	FName Material_Solid;//[Offset: 0x18, Size: 1]
	FName Material_Water;//[Offset: 0x20, Size: 1]
	FName Material_Snow;//[Offset: 0x28, Size: 1]
	FName Material_Ice;//[Offset: 0x30, Size: 1]
	FName Material_Metal;//[Offset: 0x38, Size: 1]
	FName Material_Stone;//[Offset: 0x40, Size: 1]
	FName Material_Dirt;//[Offset: 0x48, Size: 1]
	FName Material_Wood;//[Offset: 0x50, Size: 1]
	FName Flying;//[Offset: 0x58, Size: 1]

--------------------------------
Class: OPEffectKeywordSoundDirectionTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName ExpansionEffectKeyword;//[Offset: 0x10, Size: 1]
	FName SoundGroupID;//[Offset: 0x18, Size: 1]
	enum SuperpositionType;//[Offset: 0x20, Size: 1]
	float SuperpositionValue;//[Offset: 0x24, Size: 1]
	FName[] EffectStartSound;//[Offset: 0x28, Size: 1]
	FName[] EffectStartSoundLocal;//[Offset: 0x38, Size: 1]
	bool StopOngoingSoundOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	FName[] EffectOngoingSound;//[Offset: 0x50, Size: 1]
	FName[] EffectOngoingSoundLocal;//[Offset: 0x60, Size: 1]
	FName[] EffectEndSound;//[Offset: 0x70, Size: 1]
	FName[] EffectEndSoundLocal;//[Offset: 0x80, Size: 1]
	enum EffectSoundLocalRule;//[Offset: 0x90, Size: 1]

--------------------------------
Class: OPSkillEventDataTableRow.TableRowBase
	FName SkillID;//[Offset: 0x8, Size: 1]
	FName SkillGroupID;//[Offset: 0x10, Size: 1]
	FName AirShotLocal;//[Offset: 0x18, Size: 1]
	FName HeroSkinID;//[Offset: 0x20, Size: 1]
	FName AttackHitLocal;//[Offset: 0x28, Size: 1]
	FName PowerAttackHitLocal;//[Offset: 0x30, Size: 1]
	FName CriticalAttackHitLocal;//[Offset: 0x38, Size: 1]
	FName TakeHitLocal;//[Offset: 0x40, Size: 1]
	FName TakeCriticalHitLocal;//[Offset: 0x48, Size: 1]
	FName ReadySound;//[Offset: 0x50, Size: 1]
	bool ReadySoundHearable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FName PrepareCamera;//[Offset: 0x5c, Size: 1]
	FName CastCamera;//[Offset: 0x64, Size: 1]
	FName ActionCamera;//[Offset: 0x6c, Size: 1]
	FName PreviewDecalActor;//[Offset: 0x74, Size: 1]
	FName PreviewDecalActor2;//[Offset: 0x7c, Size: 1]
	FName SkillProcessingCrosshair;//[Offset: 0x84, Size: 1]
	FName PreparationSoundStart;//[Offset: 0x8c, Size: 1]
	FName PreparationSoundLoop;//[Offset: 0x94, Size: 1]
	FName PreparationSoundFinish;//[Offset: 0x9c, Size: 1]
	FName PreparationAimSound;//[Offset: 0xa4, Size: 1]
	FName CastStartVoice;//[Offset: 0xac, Size: 1]
	FName CastStartSound;//[Offset: 0xb4, Size: 1]
	FName CastStartSoundLocal;//[Offset: 0xbc, Size: 1]
	FName CastCancelSound;//[Offset: 0xc4, Size: 1]
	FName CastCancelSoundLocal;//[Offset: 0xcc, Size: 1]
	FName ActionStartSound;//[Offset: 0xd4, Size: 1]
	FName ActionStartSoundLocal;//[Offset: 0xdc, Size: 1]
	FName ActionLoopSound;//[Offset: 0xe4, Size: 1]
	FName ActionLoopSoundLocal;//[Offset: 0xec, Size: 1]
	FName ActionFinishSound;//[Offset: 0xf4, Size: 1]
	FName ActionFinishSoundLocal;//[Offset: 0xfc, Size: 1]
	class UserWidget* CrosshairBP;//[Offset: 0x108, Size: 1]

--------------------------------
Class: OPDirectionPackageSkillTableRow.TableRowBase
	FName[] Sound;//[Offset: 0x8, Size: 1]
	FName[] LocalSound;//[Offset: 0x18, Size: 1]
	bool HideSoundOnHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool StopSoundOnStateFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool StopSpawnSoundOnDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool StopSoundOnLinkedAnimationCCStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	ParticleSystem* Particle;//[Offset: 0x30, Size: 1]
	ParticleSystem* AttachedParticle;//[Offset: 0x38, Size: 1]
	ParticleSystem* ScreenParticle;//[Offset: 0x40, Size: 1]
	float CameraShakeScale;//[Offset: 0x48, Size: 1]
	class CameraShakeBase* CameraShake;//[Offset: 0x50, Size: 1]
	class CameraShakeBase* LocalCameraShake;//[Offset: 0x58, Size: 1]

--------------------------------
Class: OPDirectionPackageCameraDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	float FOV;//[Offset: 0x10, Size: 1]
	float ForwardBack;//[Offset: 0x14, Size: 1]
	float LeftRight;//[Offset: 0x18, Size: 1]
	float UpDown;//[Offset: 0x1c, Size: 1]
	float FixedCameraAngle;//[Offset: 0x20, Size: 1]
	float FixedCameraAngleValueStart;//[Offset: 0x24, Size: 1]
	float FixedCameraAngleValueEnd;//[Offset: 0x28, Size: 1]
	float FOVLerpSpeed;//[Offset: 0x2c, Size: 1]
	enum CameraMode;//[Offset: 0x30, Size: 1]
	float CameraModeValue;//[Offset: 0x34, Size: 1]
	float CameraModeValue2;//[Offset: 0x38, Size: 1]
	float CameraModeValue3;//[Offset: 0x3c, Size: 1]
	enum CameraAimingRuleType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: OPDirectionPackageDecalDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName DecalActor;//[Offset: 0x10, Size: 1]
	FName HeroSkinID;//[Offset: 0x18, Size: 1]
	bool DefaultCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: OPIngameObjectivePopupDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName HeroID;//[Offset: 0x10, Size: 1]
	int StackNum;//[Offset: 0x18, Size: 1]
	enum ShowType;//[Offset: 0x1c, Size: 1]
	float BonusGold;//[Offset: 0x20, Size: 1]
	FString Title;//[Offset: 0x28, Size: 1]
	FString Description;//[Offset: 0x38, Size: 1]
	MaterialInstance* Icon;//[Offset: 0x48, Size: 1]
	MaterialInstance* IconGlowing;//[Offset: 0x50, Size: 1]
	FName AllySound;//[Offset: 0x58, Size: 1]
	FName EnemySound;//[Offset: 0x60, Size: 1]
	FName[] BGM;//[Offset: 0x68, Size: 1]

--------------------------------
Class: OPSystemVoiceAnnounceDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	enum ActorType;//[Offset: 0x10, Size: 1]
	FName ActorId;//[Offset: 0x14, Size: 1]
	enum[] MapCode;//[Offset: 0x20, Size: 1]
	enum ShowType;//[Offset: 0x30, Size: 1]
	int ShowTypeValue1;//[Offset: 0x34, Size: 1]
	int ShowTypeValue2;//[Offset: 0x38, Size: 1]
	bool HiddenUiUseEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	FName AllyTitle;//[Offset: 0x40, Size: 1]
	FName EnemyTitle;//[Offset: 0x48, Size: 1]
	FName AllyDescription_Main;//[Offset: 0x50, Size: 1]
	FName AllyDescription_Sub;//[Offset: 0x58, Size: 1]
	FName EnemyDescription_Main;//[Offset: 0x60, Size: 1]
	FName EnemyDescription_Sub;//[Offset: 0x68, Size: 1]
	MaterialInstance* Icon;//[Offset: 0x70, Size: 1]
	MaterialInstance* IconGlowing;//[Offset: 0x78, Size: 1]
	Object* Icon_Sub;//[Offset: 0x80, Size: 1]
	enum WidgetType;//[Offset: 0x88, Size: 1]
	enum PlayRule;//[Offset: 0x89, Size: 1]
	int SoundGroupID;//[Offset: 0x8c, Size: 1]
	int SoundIntervalTime;//[Offset: 0x90, Size: 1]
	FName AllySound;//[Offset: 0x94, Size: 1]
	FName EnemySound;//[Offset: 0x9c, Size: 1]
	FName SelfSound;//[Offset: 0xa4, Size: 1]
	FName[] BGM;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: OPEffectKeywordTableRow.TableRowBase
	enum EffectType;//[Offset: 0x8, Size: 1]
	FName BaseEffectKeyword;//[Offset: 0xc, Size: 1]
	FName ExpansionEffectKeyword;//[Offset: 0x14, Size: 1]
	FName EffectCamera;//[Offset: 0x1c, Size: 1]
	enum EffectCameraPriority;//[Offset: 0x24, Size: 1]
	bool FillUpCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool CanLockMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool CanLockSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool CanLockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool CanCancelCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool CanCancelDash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool CanCancelChanneling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool InputCastCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum[] ArrBanMoveType;//[Offset: 0x30, Size: 1]
	enum[] CanCancelBeHit;//[Offset: 0x40, Size: 1]
	FName[] BlockableEffectKeyword;//[Offset: 0x50, Size: 1]
	bool CCResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool CanLockMultipleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool CanLockDash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool CanRemoveByRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	bool CanInherit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int UIGaugeCheck;//[Offset: 0x68, Size: 1]
	bool ShowUsedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	FName leftUIIcon;//[Offset: 0x70, Size: 1]
	FName headUIIcon;//[Offset: 0x78, Size: 1]
	FName UIText;//[Offset: 0x80, Size: 1]
	FName UILocal;//[Offset: 0x88, Size: 1]
	FName UIDesc;//[Offset: 0x90, Size: 1]
	FName UINotice;//[Offset: 0x98, Size: 1]
	FName EffectActor;//[Offset: 0xa0, Size: 1]
	FName ScreenParticle;//[Offset: 0xa8, Size: 1]
	FName Motion;//[Offset: 0xb0, Size: 1]
	FName SoundGroupID;//[Offset: 0xb8, Size: 1]
	enum HideDirectionInStealth;//[Offset: 0xc0, Size: 1]
	enum ReplicationType;//[Offset: 0xc1, Size: 1]
	enum NetworkReliablePriority;//[Offset: 0xc2, Size: 1]
	float NetCullDistance;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: OPMvpPointDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	enum MapType;//[Offset: 0x10, Size: 1]
	enum[] GameModeType;//[Offset: 0x18, Size: 1]
	enum EventType;//[Offset: 0x28, Size: 1]
	enum ActorType_Sub;//[Offset: 0x29, Size: 1]
	float MvpPoint;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: MotionUnitStateData
	<FName,OPHeroMotionTableRow> UnitStateByType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPHeroMotionTableRow.TableRowBase
	FName UnitState;//[Offset: 0x8, Size: 1]
	FName HeroID;//[Offset: 0x10, Size: 1]
	FName HeroSkinID;//[Offset: 0x18, Size: 1]
	AnimMontage* Stun;//[Offset: 0x20, Size: 1]
	AnimMontage* Airbone;//[Offset: 0x28, Size: 1]
	AnimMontage* Knockback;//[Offset: 0x30, Size: 1]
	AnimMontage* Sleep;//[Offset: 0x38, Size: 1]
	AnimMontage* HitReactLeft;//[Offset: 0x40, Size: 1]
	AnimMontage* HitReactRight;//[Offset: 0x48, Size: 1]
	AnimMontage* HitReactForward;//[Offset: 0x50, Size: 1]
	AnimMontage* HitReactBackward;//[Offset: 0x58, Size: 1]
	AnimMontage* JumpPadActivation;//[Offset: 0x60, Size: 1]
	AnimSequence* DeathSequence;//[Offset: 0x68, Size: 1]
	AnimMontage* Respawn;//[Offset: 0x70, Size: 1]
	AnimMontage* DeathMontage;//[Offset: 0x78, Size: 1]

--------------------------------
Class: OPKeywordDirectionTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName FXGroupID;//[Offset: 0x10, Size: 1]
	FName HeroID;//[Offset: 0x18, Size: 1]
	FName HeroSkinID;//[Offset: 0x20, Size: 1]
	bool DefaultCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FName RefPath;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: HeroStatusTableRow.TableRowBase
	FName HeroTableID;//[Offset: 0x8, Size: 1]
	FString HeroName;//[Offset: 0x10, Size: 1]
	enum MapCode;//[Offset: 0x20, Size: 1]
	enum AttackCategory;//[Offset: 0x21, Size: 1]
	enum DifficultyType;//[Offset: 0x22, Size: 1]
	enum ActorType_Main;//[Offset: 0x23, Size: 1]
	enum ActorType_Sub;//[Offset: 0x24, Size: 1]
	enum MonsterType;//[Offset: 0x25, Size: 1]
	enum MainPosition;//[Offset: 0x26, Size: 1]
	enum SubPosition1;//[Offset: 0x27, Size: 1]
	enum SubPosition2;//[Offset: 0x28, Size: 1]
	enum MainRole;//[Offset: 0x29, Size: 1]
	enum SubRole1;//[Offset: 0x2a, Size: 1]
	enum SubRole2;//[Offset: 0x2b, Size: 1]
	float SightRange;//[Offset: 0x2c, Size: 1]
	enum[] ArrTransitUnit;//[Offset: 0x30, Size: 1]
	float MovementSpeed;//[Offset: 0x40, Size: 1]
	float MovementSpeed_Travel;//[Offset: 0x44, Size: 1]
	float JumpZVelocity;//[Offset: 0x48, Size: 1]
	float AttackSpeed;//[Offset: 0x4c, Size: 1]
	float AttackSpeedGrowth;//[Offset: 0x50, Size: 1]
	float Health;//[Offset: 0x54, Size: 1]
	float HealthGrowth;//[Offset: 0x58, Size: 1]
	float HealthRegen;//[Offset: 0x5c, Size: 1]
	float HealthRegenGrowth;//[Offset: 0x60, Size: 1]
	float Mana;//[Offset: 0x64, Size: 1]
	float ManaGrowth;//[Offset: 0x68, Size: 1]
	float ManaRegen;//[Offset: 0x6c, Size: 1]
	float ManaRegenGrowth;//[Offset: 0x70, Size: 1]
	float PhysicalPower;//[Offset: 0x74, Size: 1]
	float PhysicalPowerGrowth;//[Offset: 0x78, Size: 1]
	float MagicalPower;//[Offset: 0x7c, Size: 1]
	float MagicalPowerGrowth;//[Offset: 0x80, Size: 1]
	float CriticalDamage;//[Offset: 0x84, Size: 1]
	FName SkillMaxLv;//[Offset: 0x88, Size: 1]
	float PhysicalProtection;//[Offset: 0x90, Size: 1]
	float PhysicalProtectionGrowth;//[Offset: 0x94, Size: 1]
	float MagicalProtection;//[Offset: 0x98, Size: 1]
	float MagicalProtectionGrowth;//[Offset: 0x9c, Size: 1]
	FName AutoSkillID;//[Offset: 0xa0, Size: 1]
	FName AutoItemID;//[Offset: 0xa8, Size: 1]
	enum NetworkReliablePriority;//[Offset: 0xb0, Size: 1]
	enum HPBarType;//[Offset: 0xb1, Size: 1]
	enum ExposeTopHPBar;//[Offset: 0xb2, Size: 1]
	enum HeadbarStackType;//[Offset: 0xb3, Size: 1]
	FName HeadbarStackEffectGroupID;//[Offset: 0xb4, Size: 1]
	bool IncludeSummonLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]

--------------------------------
Class: HeroSkinTableRow.TableRowBase
	FName SkinID;//[Offset: 0x8, Size: 1]
	FName HeroGroupID;//[Offset: 0x10, Size: 1]
	enum UnitType;//[Offset: 0x18, Size: 1]
	bool EditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	enum SkinGrade;//[Offset: 0x1a, Size: 1]
	FName SkinName;//[Offset: 0x1c, Size: 1]
	FName SkinDescription;//[Offset: 0x24, Size: 1]
	FName SkinIcon;//[Offset: 0x2c, Size: 1]
	FName HeroBP;//[Offset: 0x34, Size: 1]
	class Actor* AssetReference;//[Offset: 0x40, Size: 1]
	Texture2D* SkinKillStreak;//[Offset: 0x68, Size: 1]
	Texture2D* SkinKillStreakEnemy;//[Offset: 0x90, Size: 1]
	Texture2D* AvartarPortrait;//[Offset: 0xb8, Size: 1]
	Texture2D* DraftBanpick;//[Offset: 0xe0, Size: 1]
	Texture2D* PortraitDraft;//[Offset: 0x108, Size: 1]
	Texture2D* PortraitDraftHeroSlot;//[Offset: 0x130, Size: 1]
	Texture2D* PortraitLarge;//[Offset: 0x158, Size: 1]
	Texture2D* Normal_Skin_210x210;//[Offset: 0x180, Size: 1]
	Texture2D* Collection_270x292;//[Offset: 0x1a8, Size: 1]
	Texture2D* ResultWindow_150x80;//[Offset: 0x1d0, Size: 1]
	Texture2D* Max_Play_ScoreBoard_220x80;//[Offset: 0x1f8, Size: 1]
	Texture2D* Max_Play_323x484;//[Offset: 0x220, Size: 1]
	Texture2D* Shop_450x500;//[Offset: 0x248, Size: 1]
	Texture2D* PurchasePopup_1100x480;//[Offset: 0x270, Size: 1]
	Texture2D* Shop_Featured_812x1010;//[Offset: 0x298, Size: 1]
	Texture2D* ResultWindow_1860;//[Offset: 0x2c0, Size: 1]
	Texture2D* Featured_Heroes_550x876;//[Offset: 0x2e8, Size: 1]
	Texture2D* SkinKillStreakAlpha;//[Offset: 0x310, Size: 1]
	Texture2D* SkinKillStreakEnemyAlpha;//[Offset: 0x338, Size: 1]
	Texture2D* PortraitLargeAlpha;//[Offset: 0x360, Size: 1]
	Texture2D* PingLargeAlpha;//[Offset: 0x388, Size: 1]
	FName[] IndicatorCoordinate;//[Offset: 0x3b0, Size: 1]
	FName[] IndicatorCoordinateAdd;//[Offset: 0x3c0, Size: 1]
	FName[] IndicatorCoordinateDot;//[Offset: 0x3d0, Size: 1]
	FName[] IndicatorCoordinateGold;//[Offset: 0x3e0, Size: 1]

--------------------------------
Class: UnitSkinBindData.TableRowBase
	FName SkinName;//[Offset: 0x8, Size: 1]
	class Actor* HeroClass;//[Offset: 0x10, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: HeroOverviewTableRow.TableRowBase
	FString HeroName;//[Offset: 0x8, Size: 1]
	FString HeroSubName;//[Offset: 0x18, Size: 1]
	FString HeroDescription;//[Offset: 0x28, Size: 1]
	float Health;//[Offset: 0x38, Size: 1]
	float PhysicalPower;//[Offset: 0x3c, Size: 1]
	float MagicalPower;//[Offset: 0x40, Size: 1]
	float AttackSpeed;//[Offset: 0x44, Size: 1]
	float PhysicalProtection;//[Offset: 0x48, Size: 1]
	float MagicalProtection;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: SkillTableData.SkillDataTableRow.TableRowBase

--------------------------------
Class: SkillDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName GroupID;//[Offset: 0x10, Size: 1]
	enum SkillCategory;//[Offset: 0x18, Size: 1]
	FName SkillCategoryValue;//[Offset: 0x1c, Size: 1]
	FName ActionKeyword;//[Offset: 0x24, Size: 1]
	FName[] ActionKeywordValue;//[Offset: 0x30, Size: 1]
	FString PrintName;//[Offset: 0x40, Size: 1]
	FString Description;//[Offset: 0x50, Size: 1]
	Texture2D* Icon;//[Offset: 0x60, Size: 1]
	enum MoveType;//[Offset: 0x68, Size: 1]
	float GlobalCoolTime;//[Offset: 0x6c, Size: 1]
	float CoolTime;//[Offset: 0x70, Size: 1]
	FString UINotiCoolTime;//[Offset: 0x78, Size: 1]
	FName[] ArrSkillEffect;//[Offset: 0x88, Size: 1]
	enum SkillActivationType;//[Offset: 0x98, Size: 1]
	enum SkillSmartActivationType;//[Offset: 0x99, Size: 1]
	FName[] SkillActivationValue;//[Offset: 0xa0, Size: 1]
	bool CanCastInHardCC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool CanCastInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool ShouldUnHideWhenUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	bool UseGlobalCoolTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 1]
	float SkillActivation_CastRange;//[Offset: 0xb4, Size: 1]
	float SkillActivation_AreaRadius;//[Offset: 0xb8, Size: 1]
	enum TargetSelectionMode;//[Offset: 0xbc, Size: 1]
	bool SkillTargetSelection_CanSelectMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	FName MainColliderID;//[Offset: 0xc0, Size: 1]
	enum TargetScanType;//[Offset: 0xc8, Size: 1]
	float CrosshairTraceRadius;//[Offset: 0xcc, Size: 1]
	enum NeedResourceType;//[Offset: 0xd0, Size: 1]
	enum NeedResourceValueType;//[Offset: 0xd1, Size: 1]
	float NeedResourceValue;//[Offset: 0xd4, Size: 1]
	bool OrbDropCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	FName SkillDamageType;//[Offset: 0xdc, Size: 1]
	byte SkillLevel;//[Offset: 0xe4, Size: 1]
	enum NextSkillCheckTimeGauge;//[Offset: 0xe5, Size: 1]
	enum ShowCastCastBar;//[Offset: 0xe6, Size: 1]
	enum ShowActionCastBar;//[Offset: 0xe7, Size: 1]
	float BaseDamage;//[Offset: 0xe8, Size: 1]
	byte StatFactorCheckTarget;//[Offset: 0xec, Size: 1]
	enum StatFactorType;//[Offset: 0xed, Size: 1]
	float[] StatFactorValue;//[Offset: 0xf0, Size: 1]
	byte StatFactorCheckTarget;//[Offset: 0x100, Size: 1]
	enum StatFactorType;//[Offset: 0x101, Size: 1]
	float[] StatFactorValue;//[Offset: 0x108, Size: 1]
	bool UseableCheckMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool InputBanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool CastBanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	bool CastBanAnotherSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 1]
	bool CastBanCameraMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	bool ActionBanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	bool ActionBanAnotherSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 1]
	bool ActionBanCameraMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 1]
	bool CanUseAnotherSkillOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool CastStartInertiaStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	FName CastCondition;//[Offset: 0x124, Size: 1]
	FName[] CastConditionError;//[Offset: 0x130, Size: 1]
	bool CastCancelMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool CastCancelBeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	bool CastCancelAnotherCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 1]
	bool ActionCancelAnotherCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	bool ActionCancelMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool ActionCancelBeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool DoYouCancelAnotherSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	enum SkillType;//[Offset: 0x147, Size: 1]
	enum NextSkillType;//[Offset: 0x148, Size: 1]
	FName NextSkillTypeValue;//[Offset: 0x14c, Size: 1]
	FName NextSkillID;//[Offset: 0x154, Size: 1]
	float NextSkillCheckTime;//[Offset: 0x15c, Size: 1]
	bool CanUseAnotherMoveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	enum TimeConsumeResource;//[Offset: 0x161, Size: 1]
	enum TimeStartCoolTime;//[Offset: 0x162, Size: 1]
	FName SkillEffectStackNoti;//[Offset: 0x164, Size: 1]
	AnimMontage* SkillReadyAnimation;//[Offset: 0x170, Size: 1]
	AnimMontage* SkillAnimation;//[Offset: 0x178, Size: 1]
	AnimMontage* SkillPreparationAnimation;//[Offset: 0x180, Size: 1]
	AnimMontage* SkillPreparationCancelAnimation;//[Offset: 0x188, Size: 1]
	AnimMontage* SkillFinishAnimation;//[Offset: 0x190, Size: 1]
	bool ChannelingInputRepeatCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	enum SkillStateReplicationType;//[Offset: 0x199, Size: 1]
	enum NetworkReliablePriority;//[Offset: 0x19a, Size: 1]
	float NetCullDistance;//[Offset: 0x19c, Size: 1]
	enum SkillCastSynchronizationType;//[Offset: 0x1a0, Size: 1]
	float MontageRenderBoundScale;//[Offset: 0x1a4, Size: 1]

--------------------------------
Class: GimmickDataTableRow.TableRowBase
	FName GimmickID;//[Offset: 0x8, Size: 1]
	FName GimmickColliderID;//[Offset: 0x10, Size: 1]
	enum SpawnLocationType;//[Offset: 0x18, Size: 1]
	FName SpawnLocationValue;//[Offset: 0x1c, Size: 1]
	float FirstSpawnTime;//[Offset: 0x24, Size: 1]
	enum RespawnTriggerType1;//[Offset: 0x28, Size: 1]
	FName RespawnTriggerValue1;//[Offset: 0x2c, Size: 1]
	enum RespawnTriggerType2;//[Offset: 0x34, Size: 1]
	FName RespawnTriggerValue2;//[Offset: 0x38, Size: 1]
	FName[] GimmikArrSkillEffect;//[Offset: 0x40, Size: 1]
	enum GimmickRespawnType;//[Offset: 0x50, Size: 1]
	FName GimmickRespawnValue;//[Offset: 0x54, Size: 1]
	enum NextGimmickType;//[Offset: 0x5c, Size: 1]
	FName NextGimmickValue;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SpellDataTableRow.TableRowBase
	enum MapType;//[Offset: 0x8, Size: 1]
	enum[] GameModeType;//[Offset: 0x10, Size: 1]
	FName SpellID;//[Offset: 0x20, Size: 1]
	FName SkillID;//[Offset: 0x28, Size: 1]
	byte CommunityLv;//[Offset: 0x30, Size: 1]
	Texture2D* IconOut;//[Offset: 0x38, Size: 1]
	Texture2D* IconIn;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ItemDataTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName GroupID;//[Offset: 0x10, Size: 1]
	FName SkillID;//[Offset: 0x18, Size: 1]
	FString PrintName;//[Offset: 0x20, Size: 1]
	FString Description;//[Offset: 0x30, Size: 1]
	Texture2D* Icon;//[Offset: 0x40, Size: 1]
	enum ItemGrade;//[Offset: 0x48, Size: 1]
	bool DestroyItemWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool UnSellable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	enum[] CanBuyPosition;//[Offset: 0x50, Size: 1]
	float SellBlockTime;//[Offset: 0x60, Size: 1]
	int ItemPrice;//[Offset: 0x64, Size: 1]
	byte MaxItemAmount;//[Offset: 0x68, Size: 1]
	int Refillable;//[Offset: 0x6c, Size: 1]
	bool IsStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int CategoryNumber;//[Offset: 0x74, Size: 1]
	FString QuickBuyKeyword;//[Offset: 0x78, Size: 1]
	bool UseHiddenSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: StatTableData.StatDataTableRow.TableRowBase

--------------------------------
Class: StatDataTableRow.TableRowBase
	enum StatType;//[Offset: 0x8, Size: 1]
	FString PrintName;//[Offset: 0x10, Size: 1]
	FString Description;//[Offset: 0x20, Size: 1]
	float MinValue;//[Offset: 0x30, Size: 1]
	float MaxValue;//[Offset: 0x34, Size: 1]
	float StatBaseFactor;//[Offset: 0x38, Size: 1]
	enum BaseUnitType;//[Offset: 0x3c, Size: 1]
	Texture2D* StatIcon;//[Offset: 0x40, Size: 1]
	int Order;//[Offset: 0x48, Size: 1]
	enum StatCategory;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: OPSkillEffectTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName EffectGroupSTR;//[Offset: 0x10, Size: 1]
	FName CaseGroupID;//[Offset: 0x18, Size: 1]
	enum EffectStartTime;//[Offset: 0x20, Size: 1]
	FName EffectStartTimeValue;//[Offset: 0x24, Size: 1]
	int EffectStartOrder;//[Offset: 0x2c, Size: 1]
	enum EffectStartTime2;//[Offset: 0x30, Size: 1]
	FName EffectStartTimeValue2;//[Offset: 0x34, Size: 1]
	int EffectStartOrder2;//[Offset: 0x3c, Size: 1]
	enum ClientSide;//[Offset: 0x40, Size: 1]
	bool StatusDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool CanApplyInDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	enum EffectTarget;//[Offset: 0x43, Size: 1]
	FName EffectTargetValue;//[Offset: 0x44, Size: 1]
	FName CheckGroupID;//[Offset: 0x4c, Size: 1]
	FName EffectKeyword;//[Offset: 0x54, Size: 1]
	enum EffectValueType1;//[Offset: 0x5c, Size: 1]
	FName EffectValue1;//[Offset: 0x60, Size: 1]
	enum EffectValueType2;//[Offset: 0x68, Size: 1]
	FName EffectValue2;//[Offset: 0x6c, Size: 1]
	enum EffectValueType3;//[Offset: 0x74, Size: 1]
	FName EffectValue3;//[Offset: 0x78, Size: 1]
	enum EffectValueType4;//[Offset: 0x80, Size: 1]
	FName EffectValue4;//[Offset: 0x84, Size: 1]
	enum HoldingType;//[Offset: 0x8c, Size: 1]
	FName HoldingValue;//[Offset: 0x90, Size: 1]
	bool StopWhenCasterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool SimultaneityOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	enum SuperpositionType;//[Offset: 0x9a, Size: 1]
	int SuperpositionCount;//[Offset: 0x9c, Size: 1]
	enum RenewalPriority;//[Offset: 0xa0, Size: 1]
	enum SuperpositionResetType;//[Offset: 0xa1, Size: 1]
	byte AssistCheck;//[Offset: 0xa2, Size: 1]
	bool DimensionShiftCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	enum ExcludingSkillGuard;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: OPSkillConditionTableRow.TableRowBase
	FName CheckGroupID;//[Offset: 0x8, Size: 1]
	byte CheckTarget;//[Offset: 0x10, Size: 1]
	FName CheckKeyword;//[Offset: 0x14, Size: 1]
	FName CheckValue1;//[Offset: 0x1c, Size: 1]
	FName CheckValue2;//[Offset: 0x24, Size: 1]
	bool NotCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: OPSkillColliderTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	FName GroupID;//[Offset: 0x10, Size: 1]
	enum ColliderType;//[Offset: 0x18, Size: 1]
	enum ColliderShape;//[Offset: 0x19, Size: 1]
	float ColliderShapeValue;//[Offset: 0x1c, Size: 1]
	enum SkillColliderCategory;//[Offset: 0x20, Size: 1]
	float[] TraceStartPoint;//[Offset: 0x28, Size: 1]
	float Behit_ShapeX;//[Offset: 0x38, Size: 1]
	float Behit_ShapeY;//[Offset: 0x3c, Size: 1]
	float Behit_ShapeZ;//[Offset: 0x40, Size: 1]
	float Behit_ShapeZm;//[Offset: 0x44, Size: 1]
	float World_ShapeX;//[Offset: 0x48, Size: 1]
	float World_ShapeY;//[Offset: 0x4c, Size: 1]
	float World_ShapeZ;//[Offset: 0x50, Size: 1]
	float World_ShapeZm;//[Offset: 0x54, Size: 1]
	enum GenerateType;//[Offset: 0x58, Size: 1]
	FName GenerateValue;//[Offset: 0x5c, Size: 1]
	enum ColliderMoveType;//[Offset: 0x64, Size: 1]
	float ColliderMoveValue;//[Offset: 0x68, Size: 1]
	float ColliderMoveValue;//[Offset: 0x6c, Size: 1]
	float ColliderMoveValue;//[Offset: 0x70, Size: 1]
	bool TransDimensionSyncCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool PenetrationStruct_Enemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool PenetrationHero_Enemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool PenetrationMinion_Enemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	bool PenetrationBuilding_Enemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool PenetrationStruct_Ally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool PenetrationHero_Ally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool PenetrationMinion_Ally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool PenetrationBuilding_Ally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool PenetrationStruct_Neutrality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool HideColliderInStealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	enum[] ArrBlockTarget;//[Offset: 0x80, Size: 1]
	enum ColliderCrashTarget;//[Offset: 0x90, Size: 1]
	FName ColliderCrashTargetValue;//[Offset: 0x94, Size: 1]
	enum CrashCheckType;//[Offset: 0x9c, Size: 1]
	float CrashCheckValue;//[Offset: 0xa0, Size: 1]
	FName[] ArrSkillEffect;//[Offset: 0xa8, Size: 1]
	FName DamageType;//[Offset: 0xb8, Size: 1]
	float BaseDamage;//[Offset: 0xc0, Size: 1]
	byte StatFactorCheckTarget;//[Offset: 0xc4, Size: 1]
	enum StatFactorType;//[Offset: 0xc5, Size: 1]
	float[] StatFactorValue;//[Offset: 0xc8, Size: 1]
	byte StatFactorCheckTarget;//[Offset: 0xd8, Size: 1]
	enum StatFactorType;//[Offset: 0xd9, Size: 1]
	float[] StatFactorValue;//[Offset: 0xe0, Size: 1]
	enum DestroyType1;//[Offset: 0xf0, Size: 1]
	FName DestroyValue1;//[Offset: 0xf4, Size: 1]
	enum DestroyType2;//[Offset: 0xfc, Size: 1]
	FName DestroyValue2;//[Offset: 0x100, Size: 1]
	enum DestroyType3;//[Offset: 0x108, Size: 1]
	FName DestroyValue3;//[Offset: 0x10c, Size: 1]
	enum[] ArrNextColliderTiming1;//[Offset: 0x118, Size: 1]
	FName NextColliderID1;//[Offset: 0x128, Size: 1]
	enum[] ArrNextColliderTiming2;//[Offset: 0x130, Size: 1]
	FName NextColliderID2;//[Offset: 0x140, Size: 1]
	enum NetworkReliablePriority;//[Offset: 0x148, Size: 1]
	float NetCullDistance;//[Offset: 0x14c, Size: 1]
	bool ShowUsedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	enum NeedColliderCollision;//[Offset: 0x151, Size: 1]
	enum ReplicationType;//[Offset: 0x152, Size: 1]
	enum ExcludingSkillGuard;//[Offset: 0x153, Size: 1]

--------------------------------
Class: OPSkillColliderDirectionTableRow.TableRowBase
	FName ColliderID;//[Offset: 0x8, Size: 1]
	FName HeroSkinID;//[Offset: 0x10, Size: 1]
	FName EffectActorAlly;//[Offset: 0x18, Size: 1]
	FName EffectActorEnemy;//[Offset: 0x20, Size: 1]
	bool EffectActorServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FName[] OriginSound;//[Offset: 0x30, Size: 1]
	FName[] OriginSoundLocal;//[Offset: 0x40, Size: 1]
	FName[] SpawnSound;//[Offset: 0x50, Size: 1]
	FName[] SpawnSoundLocal;//[Offset: 0x60, Size: 1]
	FName[] LoopSound;//[Offset: 0x70, Size: 1]
	FName[] LoopSoundLocal;//[Offset: 0x80, Size: 1]
	FName[] DestroySound;//[Offset: 0x90, Size: 1]
	FName[] DestroySoundLocal;//[Offset: 0xa0, Size: 1]
	FName[] PassingSound;//[Offset: 0xb0, Size: 1]
	bool StopSpawnSoundOnDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName DecalActorAlly;//[Offset: 0xc4, Size: 1]
	FName DecalActorEnemy;//[Offset: 0xcc, Size: 1]

--------------------------------
Class: OPSkillSlotTableRow.TableRowBase
	FName HeroID;//[Offset: 0x8, Size: 1]
	bool DefaultSlotCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FName SkillSlotGroupID;//[Offset: 0x14, Size: 1]
	bool DefaultSkillSlotGroupCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	FName SkillSlotID;//[Offset: 0x20, Size: 1]
	FName LMBSlot;//[Offset: 0x28, Size: 1]
	FName RMBSlot;//[Offset: 0x30, Size: 1]
	FName QSlot;//[Offset: 0x38, Size: 1]
	FName ESlot;//[Offset: 0x40, Size: 1]
	FName RSlot;//[Offset: 0x48, Size: 1]
	FName PassiveSlot;//[Offset: 0x50, Size: 1]
	FName TravelMode;//[Offset: 0x58, Size: 1]
	FName TravelModeCancel;//[Offset: 0x60, Size: 1]
	FName Recall;//[Offset: 0x68, Size: 1]
	FName Taunt;//[Offset: 0x70, Size: 1]
	FName OrbDropSkill;//[Offset: 0x78, Size: 1]
	FName BlueBuffSkill;//[Offset: 0x80, Size: 1]
	FName RedBuffSkill;//[Offset: 0x88, Size: 1]
	FName SpiritSkill;//[Offset: 0x90, Size: 1]
	FName RiverBuffSkill;//[Offset: 0x98, Size: 1]
	FName GreenBuffSkill;//[Offset: 0xa0, Size: 1]
	FName PurpleBuffSkill;//[Offset: 0xa8, Size: 1]
	FName JumpPadSkill;//[Offset: 0xb0, Size: 1]
	FName ManaStackItem;//[Offset: 0xb8, Size: 1]
	FName GuardianSkill;//[Offset: 0xc0, Size: 1]
	FName GuardianShockWave;//[Offset: 0xc8, Size: 1]
	FName ElixirSkill;//[Offset: 0xd0, Size: 1]
	FName MapSkinSkill;//[Offset: 0xd8, Size: 1]
	FName WardSkill;//[Offset: 0xe0, Size: 1]
	FName GameModeSkill;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: SkillMaxLvTableRow.TableRowBase
	FName SlotLvGroupID;//[Offset: 0x8, Size: 1]
	enum SkillSlot;//[Offset: 0x10, Size: 1]
	enum[] MapCode;//[Offset: 0x18, Size: 1]
	int Starting_Lv;//[Offset: 0x28, Size: 1]
	int Max_Lv;//[Offset: 0x2c, Size: 1]
	int Max_Lv;//[Offset: 0x30, Size: 1]
	int Max_Lv;//[Offset: 0x34, Size: 1]
	int Max_Lv;//[Offset: 0x38, Size: 1]
	int Max_Lv;//[Offset: 0x3c, Size: 1]
	int Max_Lv;//[Offset: 0x40, Size: 1]
	int Max_Lv;//[Offset: 0x44, Size: 1]
	int Max_Lv;//[Offset: 0x48, Size: 1]
	int Max_Lv;//[Offset: 0x4c, Size: 1]
	int Max_Lv;//[Offset: 0x50, Size: 1]
	int Max_Lv;//[Offset: 0x54, Size: 1]
	int Max_Lv;//[Offset: 0x58, Size: 1]
	int Max_Lv;//[Offset: 0x5c, Size: 1]
	int Max_Lv;//[Offset: 0x60, Size: 1]
	int Max_Lv;//[Offset: 0x64, Size: 1]
	int Max_Lv;//[Offset: 0x68, Size: 1]
	int Max_Lv;//[Offset: 0x6c, Size: 1]
	int Max_Lv;//[Offset: 0x70, Size: 1]

--------------------------------
Class: OPProductTableRow.TableRowBase
	FName ProductId;//[Offset: 0x8, Size: 1]
	enum Category;//[Offset: 0x10, Size: 1]
	enum Shop_Display;//[Offset: 0x11, Size: 1]
	bool IsCashProduct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int ItemId;//[Offset: 0x14, Size: 1]
	int ItemAmount;//[Offset: 0x18, Size: 1]
	int Sale;//[Offset: 0x1c, Size: 1]
	int Price_Gold;//[Offset: 0x20, Size: 1]
	int Price_Diamond;//[Offset: 0x24, Size: 1]
	int Price_krw;//[Offset: 0x28, Size: 1]
	int Price_jpy;//[Offset: 0x2c, Size: 1]
	float Price_usd;//[Offset: 0x30, Size: 1]
	int Grade;//[Offset: 0x34, Size: 1]
	FName HeroID;//[Offset: 0x38, Size: 1]
	int MaxItemAmount;//[Offset: 0x40, Size: 1]
	int DueDate;//[Offset: 0x44, Size: 1]
	int Refund_Gold;//[Offset: 0x48, Size: 1]
	bool UnSellable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	FString Shop_RecommandIcon;//[Offset: 0x50, Size: 1]
	FString Shop_ItemIcon;//[Offset: 0x60, Size: 1]
	FString Shop_TagIcon;//[Offset: 0x70, Size: 1]
	FString PurchasePopupIcon;//[Offset: 0x80, Size: 1]
	FString PurchasePopupTextDate;//[Offset: 0x90, Size: 1]
	FString PurchasePopupStartDate;//[Offset: 0xa0, Size: 1]
	FString PurchasePopupEndDate;//[Offset: 0xb0, Size: 1]
	FString PurchasePopupTextDesc;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: OPGambleActionTableRow.TableRowBase
	int GambleResult;//[Offset: 0x8, Size: 1]
	FString Action;//[Offset: 0x10, Size: 1]
	FString Action;//[Offset: 0x20, Size: 1]
	FString Action;//[Offset: 0x30, Size: 1]
	FString Action;//[Offset: 0x40, Size: 1]
	FString Action;//[Offset: 0x50, Size: 1]
	FString Action;//[Offset: 0x60, Size: 1]
	FString ChestBGName;//[Offset: 0x70, Size: 1]
	FString ChestResource;//[Offset: 0x80, Size: 1]
	FString CardResource;//[Offset: 0x90, Size: 1]

--------------------------------
Class: OPGambleDisplayTableRow.TableRowBase
	int GambleGroup;//[Offset: 0x8, Size: 1]
	int GambleLimitCount;//[Offset: 0xc, Size: 1]
	int Price_Gold;//[Offset: 0x10, Size: 1]
	int Price_Gold;//[Offset: 0x14, Size: 1]
	FName GambleName;//[Offset: 0x18, Size: 1]
	FName GambleDescription;//[Offset: 0x20, Size: 1]

--------------------------------
Class: OPGambleGroupTableRow.TableRowBase
	int GambleGroup;//[Offset: 0x8, Size: 1]
	int Grade;//[Offset: 0xc, Size: 1]
	int ProductId;//[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 1]
	int Rating;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPGambleRatingPerTableRow.TableRowBase
	int GambleGroup;//[Offset: 0x8, Size: 1]
	int Rating;//[Offset: 0xc, Size: 1]
	int Rating;//[Offset: 0x10, Size: 1]
	int Rating;//[Offset: 0x14, Size: 1]
	int Rating;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPMissionTableRow.TableRowBase
	enum MissionType;//[Offset: 0x8, Size: 1]
	int MissionGroup;//[Offset: 0xc, Size: 1]
	int MaxAccountLevel;//[Offset: 0x10, Size: 1]
	enum CompleteType;//[Offset: 0x14, Size: 1]
	int CompleteCount;//[Offset: 0x18, Size: 1]
	int CompleteReward;//[Offset: 0x1c, Size: 1]
	int RewardAmount;//[Offset: 0x20, Size: 1]
	FString MissionNameKey;//[Offset: 0x28, Size: 1]
	FString MissionDescKey;//[Offset: 0x38, Size: 1]
	MaterialInstance* MissionImgResource;//[Offset: 0x48, Size: 1]
	bool MissionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: OPSummonsTableRow.TableRowBase
	FName CharacterSkinID;//[Offset: 0x8, Size: 1]
	enum SummonsGenType;//[Offset: 0x10, Size: 1]
	bool DefaultSlotCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	FName SummonsGroupID;//[Offset: 0x14, Size: 1]
	FName SummonsSkinID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: OPEffectTableRow.TableRowBase
	FName FXID;//[Offset: 0x8, Size: 1]
	FName HeroID;//[Offset: 0x10, Size: 1]
	FName SkinID;//[Offset: 0x18, Size: 1]
	enum HideOnStealth;//[Offset: 0x20, Size: 1]
	bool HideOnInvisibleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	FXSystemAsset* ParticlePath;//[Offset: 0x28, Size: 1]
	MaterialInterface* MaterialPath;//[Offset: 0x30, Size: 1]
	class OPPostProcessEffect* PostProcessPath;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPPostProcessEffect.Object
	FName Slot;//[Offset: 0x30, Size: 1]
	FName Token;//[Offset: 0x38, Size: 1]
	float LifeTime;//[Offset: 0x40, Size: 1]
	float Age;//[Offset: 0x44, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float LifeTime_Deativate;//[Offset: 0x4c, Size: 1]
	float Age_Deactivate;//[Offset: 0x50, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	MaterialInterface* PostProcessMaterial;//[Offset: 0x58, Size: 1]
	MaterialInstanceDynamic* PostProcessMID;//[Offset: 0x60, Size: 1]
	static OPPostProcessEffect* SpawnPostProcessEffect_FromPawn(Pawn* OP_PlayerControllerContext, class OPPostProcessEffect SpawnClass, Object* InHost);// 0x1b74410
	static OPPostProcessEffect* SpawnPostProcessEffect_FromMesh(SkeletalMeshComponent* OP_PlayerControllerContext, class OPPostProcessEffect SpawnClass);// 0x1b74340
	static OPPostProcessEffect* SpawnPostProcessEffect(OP_PlayerController* InOP_PlayerController, class OPPostProcessEffect SpawnClass, Object* InHost);// 0x1b74240
	void OnUpdatePostProcess(MaterialInstanceDynamic* Mid, out PostProcessSettings OutPostProcessSettings);// 0x1b73b60
	void OnHostDestroyed();// 0x1b73b40
	void OnDestroyed_OPAbnormalStateEffectObject(OPAbnormalStateEffectObject* FinishedOPAbnormalStateEffectObject);// 0x1b73ac0
	void OnDestroyed_Actor(Actor* DestroyedActor);// 0x1b73ac0
	void OnBeginPostProcess(PostProcessComponent* OutPostProcessComponent);// 0x1b739b0
	PostProcessComponent* GetPostProcessComponent();// 0x1b73380
	OP_PlayerController* GetOP_PlayerController();// 0x1b73220
	float GetNormalizedAge_Deactive();// 0x1b731f0
	float GetNormalizedAge();// 0x1b731c0
	Vector4 GetCurveValue_LerpV4(out const RuntimeFloatCurve InCurve, LinearColor LerpA, LinearColor LerpB);// 0x1b72f10
	float GetCurveValue_LerpFloat(out const RuntimeFloatCurve InCurve, float LerpA, float LerpB);// 0x1b72d50
	float GetCurveValue_Fit_NormalizedInput(out const RuntimeFloatCurve InCurve, float Output_Min, float Output_Max);// 0x1b72b90
	float GetCurveValue(out const RuntimeFloatCurve InCurve, float X);// 0x1b72a20
	float Fit(out const float InVal, float Input_Min, float Input_Max, float Output_Min, float Output_Max);// 0x1b72850
	void Destroy();// 0x1b72830
	void BeginPostProcess(PostProcessComponent* InPostProcessComponent, Object* InHost);// 0x1b726d0

--------------------------------
Class: OP_PlayerController.PlayerController.Controller.Actor.Object
	float DeadTime;//[Offset: 0x5a4, Size: 1]
	OP_CameraManager* CurrentCameraManager;//[Offset: 0x5b0, Size: 1]
	<FName,AudioComponent*> ToggleableSurfaceSounds;//[Offset: 0x5b8, Size: 1]
	enum RejoinStatus;//[Offset: 0x678, Size: 1]
	OPUnitRadar* UnitRadar;//[Offset: 0x688, Size: 1]
	OP_CheatTerminalComponent* CheatTerimal;//[Offset: 0x690, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x698, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0x6a0, Size: 1]
	OPSkillCrosshairManager* SkillCrosshairManager;//[Offset: 0x6a8, Size: 1]
	OPLoadingManagerComponent* LoadingManagerComponent;//[Offset: 0x6b0, Size: 1]
	float AutoAttackDelay;//[Offset: 0x6b8, Size: 1]
	class OverprimeObserverPawn* ObserverPawnClass;//[Offset: 0x6c0, Size: 1]
	class OPBattleDraftMenuComponent* DraftMenuClass;//[Offset: 0x6c8, Size: 1]
	class MainBattleUIElement_RoundEndResultComponent* RoundEndWidgetClass;//[Offset: 0x6d0, Size: 1]
	class MainBattleUIElement_RoundEndResultComponent* RoundEndDefeatWidgetClass;//[Offset: 0x6d8, Size: 1]
	class OPESCMenuComponent* ESCMenuClass;//[Offset: 0x6e0, Size: 1]
	OPBattleDraftMenuComponent* BattleDraftMenu;//[Offset: 0x6e8, Size: 1]
	OPESCMenuComponent* ESCMenu;//[Offset: 0x6f0, Size: 1]
	class LaserPointer* RangeMeterClass;//[Offset: 0x6f8, Size: 1]
	class RangeMeter* RangeMeter_LegacyClass;//[Offset: 0x700, Size: 1]
	MaterialParameterCollection* GlobalMPC;//[Offset: 0x708, Size: 1]
	LaserPointer* RangeMeter;//[Offset: 0x730, Size: 1]
	RangeMeter* RangeMeter_Legacy;//[Offset: 0x738, Size: 1]
	OPSkillDecalActor* PreviewBaseAttackDecalActor;//[Offset: 0x740, Size: 1]
	Actor* AimingEnemyTarget;//[Offset: 0x750, Size: 1]
	MainBattleUIComponent* MyBattleUI;//[Offset: 0x760, Size: 1]
	AudioComponent* TravelModeStartSound;//[Offset: 0x768, Size: 1]
	AudioComponent* TravelModeFinishSound;//[Offset: 0x770, Size: 1]
	AudioComponent* TravelModeStopSound;//[Offset: 0x778, Size: 1]
	AudioComponent* TravelModeLoopSound;//[Offset: 0x780, Size: 1]
	OPPingSystemComponent* PingSystemComponent;//[Offset: 0x788, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x790, Size: 1]
	FString[] ChatBanList;//[Offset: 0x798, Size: 1]
	MulticastInlineDelegateProperty OnCharacterHit_Delegate;//[Size: 1]
	UserWidget* QMenuUMG;//[Offset: 0x818, Size: 1]
	UserWidget* ObserverHUD;//[Offset: 0x820, Size: 1]
	class UserWidget* FadeoutWidget;//[Offset: 0x828, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x830, Size: 1]
	bool bIgnoreAxisUnitButCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool bIsQuickChatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x842, Size: 1]
	float GamepadMouseSpeed;//[Offset: 0x844, Size: 1]
	float CameraShakeWeight;//[Offset: 0x850, Size: 1]
	bool EnableAutoattackCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	bool bHandledPlayerLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	SkillFunction SkillFunction_SelectionData;//[Offset: 0x860, Size: 1]
	MulticastInlineDelegateProperty OnAddItemHistory;//[Size: 1]
	MulticastInlineDelegateProperty OnAddItemUpdateUI;//[Size: 1]
	class OP_Character* LastPlayerHeroClass;//[Offset: 0x950, Size: 1]
	class Point_LaneGuide* PositionLaneGuideClass;//[Offset: 0x960, Size: 1]
	OPAutoPilotComponent* AutoPilotSystem;//[Offset: 0x9d0, Size: 1]
	int DraftPhase;//[Offset: 0x9d8, Size: 1]
	bool IsWaitingHeroTrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dc, Size: 1]
	OverprimeObserverPawn* PureObserver;//[Offset: 0x9e0, Size: 1]
	OPSkillInfoWidget* SkillInfoWidget;//[Offset: 0x9e8, Size: 1]
	bool[] GamepadFunctionKeyState;//[Offset: 0x9f8, Size: 1]
	void UseARAMDice();// 0x1abdb70
	void UpdateVirtualCursor_BPNE(bool IsShow);// 0x1a7f330
	void UpdateViewDirection(Rotator InNewDirection);// 0x1abdae0
	void UpdateRangeBaseAttackDecal();// 0x1abdac0
	void UpdateRangeAimEffect(NiagaraComponent* InNiagaraComponent);// 0x1abda30
	void UpdateMotionBlurSetting();// 0x1abda10
	void UnLockMoveForward_S2OC();// 0x1abd9b0
	void UnbindKeysForObserver();// 0x1abd9d0
	void TryGetTargetStatInfos_C2S(Actor* InTargetPlayerBase);// 0x1abd8f0
	void TryClientTravel(FString URL);// 0x1abd7e0
	void ToggleRangeAimEffect();// 0x1abd7c0
	void SyncSurrenderStatus_forEarlySurrender_S2C(enum Status, byte TeamNum, byte NumPlayersAll, byte NumAccepted, byte NumDenied, OP_PlayerState* RequestedBy, bool InCanVote);// 0x1abd510
	void SyncSelectedGameModeType_S2C(enum InModeType);// 0x1abd490
	void SyncRoundStartedTime(float InSinceStarted);// 0x1abd400
	void SurrenderResult_S2C(enum ResultCode, int TimeLeft);// 0x1abd330
	void StopFreeAxisCameraState();// 0x1abd310
	void StartFreeAxisCameraState();// 0x1abd2f0
	void SpawnOPSpectatorPawn();// 0x1abd2d0
	void ShowTextIndicator_S20C(Vector_NetQuantize Pos, FString InText, Actor* InActor);// 0x1abd190
	void ShowSkillInfo();// 0x1abd170
	void ShowScreenSpaceEffect(bool Activation, class ScreenSpaceEffect Type, float Duration);// 0x1abd050
	void ShowScreenAlert_S2C(const FText Text, const FText Title);// 0x1abcf00
	void ShowScoreboard_BP(bool bShow);// 0x1f25360
	void ShowScoreboard();// 0x1abcee0
	void ShowRangeBaseAttackDecal();// 0x1abcec0
	bool ShowRangeAimEffect();// 0x1abce90
	void ShowMouseCursorForWidget_BP(UserWidget* InTargetWidget, bool bUseGamepadRightAnalogStick);// 0x1abcda0
	void ShowInGameObjectivePopup_S2C(FName InCausedBy, FString InUserNickName, byte InArgument1, byte InArgument2, FName InTargetID, FName InInGameObjectPopupTableIndex);// 0x1abcba0
	void ShowHealIndicator_S2OC_Unreliable(float InAmount, enum InHealType);// 0x1abcad0
	void ShowGoldIndicator_S2C_Unreliable(Vector_NetQuantize Pos, float InGold, bool InIsNotice);// 0x1abc9a0
	void ShowGoldIndicator_S2C_Reliable(Vector_NetQuantize Pos, float InGold, bool InIsNotice);// 0x1abc870
	void ShowESCMenu(UserWidget* InPrevWidget);// 0x1abc720
	void ShowErrorMessage_S2C(const FText Message);// 0x1abc7b0
	void ShowDamageIndicator_S20C_Unreliable(Vector_NetQuantize Pos, byte InDamageIndicatorUniqueID, int InDamageTableUniqueIndex, int InDamage, Actor* HitTarget, Actor* InAttacker, int InAttackSkillTableUniqueID, float InAttackerStiffTime, float InVictimStiffTime);// 0x1abc460
	void ShowDamageIndicator_S20C(Vector_NetQuantize Pos, byte InDamageIndicatorUniqueID, int InDamageTableUniqueIndex, int InDamage, Actor* HitTarget, Actor* InAttacker, int InAttackSkillTableUniqueID, float InAttackerStiffTime, float InVictimStiffTime);// 0x1abc1a0
	void ShowDamageEventIndicator_S20C(Vector_NetQuantize Pos, enum InEventType, int InNumberValue, Actor* HitTarget, Actor* InAttacker);// 0x1abbfd0
	void ShowBattleSystemChatMessage(FText InMessage, enum InSysMsgLevel);// 0x1abbea0
	void ShowAlertNotify_BP_S2C(const FText InGMMessage);// 0x1abbde0
	void ShopItemUndo();// 0x1abbd90
	void SetShowDamageFiguresReplicated(bool InbNewValue);// 0x1abbd00
	void SetRotationInput(Rotator InRotation);// 0x1abbc70
	void SetReJoinSmartShop_S2C();// 0x1abbc50
	void SetRangeBaseAttackDecal();// 0x1abbc30
	void SetMotionBlur(CameraComponent* InCamera, bool bIsActive, float InAmount);// 0x1abba00
	void SetLowPassFilterToken(bool InActivation, FName InToken);// 0x1abb8a0
	void SetIgnoreQuickSlotInput(bool boo);// 0x1abb810
	void SetClientTravelDelayTime(float InFloat);// 0x1abb760
	void ServerTravelCommandBP(FString CommandLine);// 0x1abaa10
	void Server_SendWhisperChat(FString Message, FString InSenderID, FString InReceiverName, FString InLangCode);// 0x1abb590
	void Server_SendReport(FString InReporterLoginID, FString InTargetNickname, enum InReportType, FString InReportReason);// 0x1abb3b0
	void Server_SendChat_StringKeys_WithCombineArg(enum InChatType, FString InSenderID, const FString[] InStringKeys, const FString[] CombineArgs, bool InIsChatMacro, bool InIgnoreTeam);// 0x1abb140
	void Server_SendChat_StringKeys_WithArg(enum InChatType, FString InSenderID, const FString[] InStringKeys, const FString[] Args, bool InIsChatMacro, bool InIgnoreTeam);// 0x1abaed0
	void Server_SendChat_StringKey(enum InChatType, FString InSenderID, FString InStringKey, bool InIsChatMacro, bool InIgnoreTeam);// 0x1abad00
	void Server_SendChat(enum InChatType, FString InSenderID, FString InMessage, FString InLangCode, int64 InPartyUID);// 0x1abab10
	void SendTradeHeroList_C2S(const FName[] InHeroIDs);// 0x1aba970
	void SendSystemChat_S2C(const FText Message, LinearColor ChatColor, bool ShowOnLobbyMenu);// 0x1aba810
	void SendSurrenderSignal_S2C(enum SignalType);// 0x1aba760
	void SendSTCMessage(const byte[] InData);// 0x1aba620
	void SendSpellID(const FName[] InSelectedSpells);// 0x1aba6c0
	void SendRoundEndResult_S2C(byte InWinTeam, bool InIsWin, Vector InLookAtPos, bool InShouldLookAtPos, float InTimeLapsed);// 0x1aba440
	void SendResourceLog_C2S(OPResourceLogHistory InResourceLog);// 0x1aba330
	void SendRecommendResult_C2S(PlayerState* InRecommendUser, const ClientRecommendResult[] InResults);// 0x1aba240
	void SendPointHUDMessage_S2C(const FText InText, int InPoint, const OPPointHudArgument[] InArguments);// 0x1aba0b0
	void SendNotifySignal_S2C(enum Signal, int Value);// 0x1ab9fe0
	void SendFountainInfo_S2C(OP_Character* InCharacter, bool InFountain);// 0x1ab9f10
	void SendEndClient();// 0x1ab9ef0
	void SendCTSTombstone(FString InReason);// 0x1ab9d00
	void SendCTSMessage(const byte[] InData);// 0x1ab9c60
	void SendCSNotify(Vector_NetQuantize Pos, enum Type);// 0x1ab9b80
	void SendChatMessage_S2C(PlayerState* Sender, FString Message, bool IsTeamChat);// 0x1ab9db0
	void SendBotNames_S2OC(const PlayerState*[] InPlayerStates, const FString[] InBotNames);// 0x1ab9a60
	void SellItem(enum OriginSlot);// 0x1ab99b0
	void SelectPlayerSpell(byte InSpellSlotIndex, const FName InSpellID);// 0x1ab98a0
	void SelectHeroSkin(FName HeroSkinID);// 0x1ab9810
	void SelectHero(FName HeroID, bool IsLockIn);// 0x1ab9740
	void SelectARAMSelectableHero(FName InHeroName);// 0x1ab9680
	void ResponseTargetStatInfo_S2OC(Actor* InTargetPlayerBase, const enum[] InStatMap_Key, const float[] InStatMap_Value);// 0x1ab9540
	void RequestSwapItem(enum OriginSlot, enum TargetSlot);// 0x1ab9440
	void RequestShowGotOrbPing(int InPlayerID, FString InClientLoginID);// 0x1ab9350
	void RequestShowDroppedOrbPing(const Vector InPosition);// 0x1ab92d0
	void RequestSendPingSystemMessage(int InPlayerID, FString InClientLoginID, byte InTeamNum, byte InOrder, const Vector2D InPosByMinimap, const Vector InPosByWorld, bool InUseLimitTime, byte InPingSystemMsg);// 0x1ab9050
	void RequestRemovePing(int InPlayerID, FString InClientLoginID, byte InTeamNum, byte InOrder);// 0x1ab8ee0
	void RequestMoveToTeam(int NewTeam);// 0x1ab8e20
	void RequestHideGotOrbPing();// 0x1ab8e00
	void RequestHideDroppedOrbPing();// 0x1ab8de0
	void RequestForceRoundStart(enum InModeType);// 0x1ab8d30
	void RequestForceChangeRoundState(enum InStatus, int InTime);// 0x1ab8c60
	void RequestDunkPing(bool InIsShow);// 0x1ab8bd0
	void RequestChangeTeam();// 0x1ab8b80
	void RequestBanHero(FName InHeroID);// 0x1ab8ac0
	void RequestAdjustWaitingTime(int InAdjust);// 0x1ab8a30
	void RemovePostprocessEffect(FName Slot, FName InToken);// 0x1ab8960
	void RemoveLocalPing(byte OrderType);// 0x1ab88e0
	void RefreshStatInfo_S2C();// 0x1ab88c0
	void RefreshRespawnInfo_S2C(DateTime InNextRespawnTime, DateTime InLastDeathTime);// 0x1ab8800
	void RefreshPreNotificationInfo_S2C(Point_JungleMinionSpawn* InJungleSpawnerActor, float InTimeRemain, enum InSpiritType);// 0x1ab86f0
	void RefreshJungleSpawnStatInfo_S2C(Point_JungleMinionSpawn* InJungleSpawnerActor, float InRemaining);// 0x1ab8610
	void RefreshInhibitorInfo_S2C(Point_InhibitorSpawn* InInhibitorSpawner, float InRemaining);// 0x1ab8530
	void RefreshDisconnected_S2C(OP_PlayerState* InPlayerState, bool InDisconnected);// 0x1ab8460
	void RecallCameraUpdate(float InPitch, float Yaw);// 0x1f25360
	void PressAttack();// 0x1ab8440
	void PossessToMyCharacter_Internal();// 0x1ab83f0
	void PossessToMyCharacter();// 0x1ab83d0
	void PlayToggleableSurfaceSound(FName Slot, bool Activation, FName SoundPath, float Pitch, float Volume);// 0x1ab8220
	void PlaySurfaceSound(FName SoundPath, float Volume, float Pitch);// 0x1ab8110
	void PingSystem_PingWorldGood_BP(bool IsPressed);// 0x1f25360
	void PingSystem_PingWorldBad_BP(bool IsPressed);// 0x1f25360
	void PingSystem_Escape_BP();// 0x1f25360
	void PingSystem_Emotion_BP(bool IsPressed);// 0x1f25360
	void OpenShopAnywhere_Cheat();// 0xd9d3e0
	void OnTakingDamage_BPNE(Actor* InAttacker);// 0x1ab8080
	void OnStartedRecallCamera();// 0x1f25360
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x1ab7f40
	void OnShowShopMenu();// 0xd9d3e0
	void OnSelectPositionOnDraft_S2OC(bool EnableSelect);// 0x1ab7eb0
	void OnRecieveNotifySignal_BP(enum Signal, int Value);// 0x1ab7de0
	void OnRecieveCSNotify_BP(Vector Pos, enum Type);// 0x1ab7d00
	void OnQuickSlotKeyPressed_BPHelper(enum InSkillSlot);// 0x1ab7c80
	void OnLearnSkill_Client(enum InSkillSlot, int InLevel);// 0x1ab7b70
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x1ab7ae0
	void OnHideShopMenu();// 0x1ab7ac0
	void OnGetRangeAttackTraceHitResult(out HitResult OutHitResult);// 0x1ab79e0
	void OnFinishedRecallCamera();// 0x1f25360
	void OnControllingCharacterStatChanged();// 0x1ab76f0
	void OnControllingCharacterSkillSlotChanged();// 0x1ab76d0
	void OnControllingCharacterDestroyed(Actor* DestroyedActor);// 0x1ab7640
	void OnControllingCharacter_AbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1ab7710
	void OnClientSideAttack(float NextAttack);// 0x1ab75b0
	void OnAggroFromNPC_S2C(Actor* InNPCActor);// 0x1ab7520
	void OnActiveRecall_Server(bool InFinished);// 0x1ab7490
	void LearnSkill(enum InSkillSlot);// 0x1ab73e0
	void JoinBattle(bool FromRespawn, bool InReConnected);// 0x1ab72d0
	bool IsUseableBattlePopup();// 0x1ab72a0
	bool IsSpectator();// 0x1ab7270
	bool IsShowSkillInfo();// 0x1ab7240
	bool IsShowScoreBoard();// 0x1ab7210
	bool IsShowPing();// 0x1ab71e0
	bool IsShowBattleShop();// 0x1ab71b0
	bool IsShowAnyPing();// 0x1ab7180
	bool IsFreeAxisCameraState();// 0x1ab7150
	bool IsESCMenuVisible();// 0x1ab7120
	void InitSkillInfoWidget();// 0x1ab7100
	void HideSkillInfo();// 0x1ab7030
	void HideScoreboard();// 0x1ab7010
	void HideRangeBaseAttackDecal();// 0x1ab6ff0
	void HideRangeAimEffect();// 0x1ab6fd0
	void HideMouseCursorForWidget_BP(UserWidget* InTargetWidget, bool InbForceHideMouse);// 0x1ab6f00
	void HideESCMenu();// 0x1ab6ee0
	void HarvesterInfo_S2C(Actor* InHarvester, float InRemainTime, enum InOccupyState);// 0x1ab6dd0
	void HandleRequestGetPlayerInfo(float InValue);// 0x1ab6d40
	void HandleRequestDraftTrade_S2OC(OP_PlayerState* Sender);// 0x1ab6cb0
	void HandleRequestDraftTrade_C2S(OP_PlayerState* Sender, OP_PlayerState* Reciever);// 0x1ab6be0
	void HandleRequestDisconnect_S2OC();// 0x1ab6bc0
	void HandleRequestBanHero(FName InHeroID);// 0x1ab6b30
	void HandleRejoinLocal_S2OC();// 0x1ab6b10
	void HandleDraftTrade_C2S(OP_PlayerState* Sender, OP_PlayerState* Reciever, bool IsSuccess);// 0x1ab6a00
	void HandleDodgeUser(FString InContextData);// 0x1ab6950
	void HandleDeathScreen_S2C_Reliable(float RespawnDelay, const DamageHistorySync[] DamageHistorys, bool bIsDeathByCheat);// 0x1ab67f0
	void HadServerRevisionCheck(FString InServerRevision, enum InServerRoundStatus, const ResponseClientHello InServerData);// 0x1ab6600
	void HadServerRegionCheck(FString InRegionCode);// 0x1ab6550
	OPSkillInfoWidget* GetSkillInfoWidget();// 0x1ab64f0
	OPSkillSystemReplicationTerminal* GetPSSkillReplicationTerminal();// 0x1ab6300
	PostProcessComponent* GetPostprocessEffect(FName Slot);// 0x1ab63f0
	float GetPlayerMouseSensivityBP();// 0x1ab63c0
	float GetPlayerMouseSensivity();// 0x1ab63c0
	void GetPlayerInfo(OP_PlayerState* InTargetPS);// 0x1ab6330
	OP_Character* GetCurrentCharacter();// 0x1ab6200
	void GetBotNames_C2S();// 0x1ab6180
	Vector GetAttackDirection_BPNE(Vector InVector);// 0x1ab6100
	void EnableShopping();// 0x1ab60c0
	void EditorReqAddAIToAllEmptySlot_C2S(bool bRandomSet);// 0x1ab6030
	void DrawDebugPoint_S2OC(const World* InWorld, const Vector position, float Size, const Color PointColor, bool bPersistentLines, float LifeTime, byte DepthPriority);// 0x1ab5e20
	void DrawDebugLine_S2OC(const World* InWorld, const Vector LineStart, const Vector LineEnd, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1ab5bc0
	void DrawDebugCone_S2OC(const World* InWorld, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1ab5850
	void DrawDebugBox_S2OC(const World* InWorld, const Vector Center, const Vector Extent, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1ab55b0
	void DestroyDestructibleItems();// 0x1ab5590
	void DeathEventByScoreBoard_BPNE();// 0x1ab5570
	OPSkillInfoWidget* CreateSkillInfoWidget_BP();// 0x1f25360
	void CombineItem(FName InTopItemName, enum InToInventorySlot);// 0x1ab53d0
	void ClientTravel_WithLoadingScreen_Test_BP(FString InMapName, enum LoadingType);// 0x1ab4240
	void ClientSyncID(FString LoginID, FString ClientName);// 0x1ab4100
	void ClientHello(FString ClientVersion, FString ClientName, FString LoginID, int ClientToken, bool IsAnonymousMode, FString MachineID, enum InCurrentBuildConfig, int MyMMR, int MyRankTier, int PrevSeasonTier, int CommunityLevel, FString InClientRevision);// 0x1ab3c90
	void Client_SendWhisperChat(FString Message, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, int InSenderPlayerId, FString InLangCode);// 0x1ab5160
	void Client_SendChat_StringKeys_WithCombineArg(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, const FString[] InStringKeys, const FString[] CombineArgs, int InSenderTeamNum, int InSenderPlayerId, bool InIsChatMacro);// 0x1ab4df0
	void Client_SendChat_StringKeys_WithArg(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, const FString[] InStringKeys, const FString[] Args, int InSenderTeamNum, int InSenderPlayerId, bool InIsChatMacro);// 0x1ab4a80
	void Client_SendChat_StringKey_SystemMessage(FString InStringKey, enum InSystemLevel);// 0x1ab4990
	void Client_SendChat_StringKey(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, FString InStringKey, int InSenderTeamNum, int InSenderPlayerId, bool InIsChatMacro);// 0x1ab46b0
	void Client_SendChat(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, FString InMessage, int InSenderTeamNum, int InSenderPlayerId, FString InLangCode, int64 InPartyUID);// 0x1ab4370
	bool CheckGamepadActionBinding(enum InType);// 0x1ab3c00
	void Cheat_SpawnUnit(FName InUnitSkinID, int InTeamNum, int InUnitLevel);// 0x1ab3ac0
	void ChangeDesiredPosition(enum InPosition, bool IsFixed);// 0x1ab39c0
	void CaptureTargetForInfo();// 0x1ab39a0
	void BuyItems(<enum,FName> InBulkInfo, bool InSilent, bool InAddOnHistory, bool bReplicateNow);// 0x1ab3720
	void BuyItem(FName ItemName, enum InToInventory);// 0x1ab3610
	void BP_ToggleShowUI();// 0x1ab35f0
	void BP_ToggleShowHUD();// 0x1ab35d0
	void AppliedSpellSlotKeyPressed(enum InSpellSlot);// 0x1ab3550
	void AppliedItemSlotKeyPressed(enum InItemSlot);// 0x1ab34d0
	PostProcessComponent* AddPostprocessEffect(FName Slot, FName InToken);// 0x1ab3400
	void AddLocalPing(byte OrderType, const Vector InPosByWorld);// 0x1ab3340
	void AddItemUpdateUI_S2OC(enum SlotIndex);// 0x1ab32c0
	void AddItemHistory_S2OC(FName ItemName, enum HistoryType);// 0x1ab31f0

--------------------------------
Class: OP_CameraManager.PlayerCameraManager.Actor.Object
	CurveFloat* SpeedCurve;//[Offset: 0x2818, Size: 1]
	CameraComponent* CurrentActiveCameraComponent;//[Offset: 0x2828, Size: 1]
	static void PlayWorldCameraShake_Internal(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float InShakeScale);// 0x1aa22b0
	HitResult GetEyeTraceToDirectionWithStructureCollider(Vector InDirection, float Distance, bool IgnorePawn);// 0x1aa12c0
	HitResult GetEyeTraceToDirection(Vector InDirection, float Distance, bool IgnorePawn);// 0x1aa0f80
	HitResult GetEyeTrace(float Distance, bool IgnorePawn);// 0x1aa0a50
	Vector GetEyeForwardPosByPivotCharacter(OP_Character* InMyCharacter, float InDistance);// 0x1aa0970
	Vector GetEyeForwardPos(float Distance);// 0x1aa08d0
	HitResult GetCircleEdgePosition(Vector CenterPos, float Radius, Vector PointAiming, float ZUP, bool IgnorePawn);// 0x1aa06b0

--------------------------------
Class: OP_Character.PlayerBase.Character.Pawn.Actor.Object
	Vector SpawnedLocation;//[Offset: 0x938, Size: 1]
	enum LaneAtSpawnedByEditorOnly;//[Offset: 0x958, Size: 1]
	OPSpringArmComponent* SpringArmCameraBoom;//[Offset: 0x978, Size: 1]
	SpringArmComponent* ViewPivotSpringArmComponent;//[Offset: 0x980, Size: 1]
	CameraComponent* FollowCamera;//[Offset: 0x988, Size: 1]
	DecalComponent* Decal_RangedDistance;//[Offset: 0x990, Size: 1]
	class OPEnemyNotifyActorComponent* NearbyEnemyNotifyActorComponentClass;//[Offset: 0x998, Size: 1]
	NPCBase*[] AggroCheck_NPC;//[Offset: 0x9b8, Size: 1]
	TowerBaseCPP*[] AggroCheck_Tower;//[Offset: 0x9c8, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0x9d8, Size: 1]
	bool IsUseNotifyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	bool EnableDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool CantJumpKeyFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	MulticastInlineDelegateProperty OnStackBonusChanged;//[Size: 1]
	HeroHealthbar* HUDHeadbarComponent;//[Offset: 0xa08, Size: 1]
	BillboardComponent* ExposedSign;//[Offset: 0xa10, Size: 1]
	PointLightComponent* CharacterLightComponent;//[Offset: 0xa18, Size: 1]
	bool bUse2xPitchResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	Material* Material_RangedAttackIndicator;//[Offset: 0xa38, Size: 1]
	LocationSnapshotComponent* LocationSnapshotManagerComponent;//[Offset: 0xa40, Size: 1]
	AnimMontage* WinCeremonyAnimation;//[Offset: 0xa48, Size: 1]
	float RangedAttackTraceSpeed;//[Offset: 0xa50, Size: 1]
	bool bIsNotifyCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	float CardPointWhenKill;//[Offset: 0xa5c, Size: 1]
	float BaseTurnRate;//[Offset: 0xa60, Size: 1]
	float BaseLookUpRate;//[Offset: 0xa64, Size: 1]
	bool AttackMontageHitDetectionStartTimeInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	float LengthFromCenterToShoulder;//[Offset: 0xae8, Size: 1]
	float MeleeAttackCapsuleIncludeRatio;//[Offset: 0xaec, Size: 1]
	class CameraShakeBase* CameraShakeWhenHit;//[Offset: 0xaf0, Size: 1]
	float CameraShakeScaleWhenHit;//[Offset: 0xaf8, Size: 1]
	bool InFountainGuard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	OP_PlayerController* CachedControllerForDunk;//[Offset: 0xb00, Size: 1]
	Vector SoundListenerOffset;//[Offset: 0xb08, Size: 1]
	bool bIsDummyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	bool bIsAICharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 1]
	OverprimeObserverPawn*[] Observers;//[Offset: 0xb28, Size: 1]
	void UpdateSettingValues();// 0x1aa2ca0
	void UpdateAttackMontageStartTime(float InAttackMontagePlayRate);// 0x1aa2ba0
	bool UpdateAttackMontageHitDetectionTimeInfo(float InAttackMontageHitDetectionPlayTime);// 0x1aa2b10
	void SetObserver(OverprimeObserverPawn* InObserver, bool bIsAdd);// 0x1aa28b0
	void SetIsUser_S2AC(OP_PlayerState* InPlayerState);// 0x1aa2730
	void SetIsBot_S2AC();// 0x1aa2710
	void SetInFountainGuard(bool InInFountainGuard);// 0x1aa2680
	void SetCameraLag(float LagValue, float Duration);// 0x1aa25b0
	void PlaySequenceGerystoneUltimate_S2C();// 0x1aa2290
	void PlaySequenceGerystoneUltimate_BPNE();// 0x1a7d3a0
	void PlayLevelupEffect();// 0x1aa2270
	void PlayerCharacterUpdateValue(float InValue);// 0x1aa2520
	void PlayDefaultCameraShake_BP(bool bIgnoreUserSettings);// 0x1aa21e0
	void PlayCameraShake(class CameraShakeBase InCameraShakeClass, float InScale, bool bIgnoreUserSettings);// 0x1aa20c0
	void OnUpdateLocalOtherPlayerItems(int OtherPlayerID);// 0x1aa2030
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1aa1fa0
	void OnSomethingEndOverlappedInVision(Actor* Target);// 0x1aa1f10
	void OnSetScarecrow();// 0x1aa1ef0
	void OnPossessedByClient();// 0x1aa1ed0
	void OnPlayerUsePortal(bool Activation);// 0x1aa1e40
	void OnPlayerHiddenStateChangedBP(bool IsTeam, bool IsExposed, bool IsHiding);// 0x1aa1d20
	void OnBattleStateChanged(enum InNewBattleState);// 0x1aa1890
	bool IsEnemyAndInvincible(Actor* Target, bool DoHidingCheck, bool IgnoreInvincibleCheck, bool IgnoreUntouchedCheck);// 0x1aa1700
	SkillStatInfo[] GetSkillStatInfo_RMB(Object* InWorldContextObject);// 0x1f25360
	SkillStatInfo[] GetSkillStatInfo_R(Object* InWorldContextObject);// 0x1f25360
	SkillStatInfo[] GetSkillStatInfo_Q(Object* InWorldContextObject);// 0x1f25360
	SkillStatInfo[] GetSkillStatInfo_LMB(Object* InWorldContextObject);// 0x1f25360
	SkillStatInfo[] GetSkillStatInfo_E(Object* InWorldContextObject);// 0x1f25360
	OP_PlayerState* GetOP_PlayerState();// 0x1aa1520
	OP_PlayerController* GetOP_PlayerController();// 0x1aa14f0
	static OP_Character* GetLocalOPCharacter(Object* InWorldContextObject);// 0x1aa1460
	Vector GetEyeTraceHitPos(float Distance);// 0x1aa0ee0
	HitResult GetEyeTrace(float Distance);// 0x1aa0cf0
	static OP_Character* GetCharacterDefaultObject(class OP_Character Class, out enum Out);// 0x1aa05d0
	float GetAttackRange();// 0x1aa05a0
	void EndOverlapWithUnitComponentTarget(Actor* InOtherActor);// 0x1aa0510
	bool CanPlayerAttackBP();// 0x1aa04e0
	void BeginOverlapWithUnitComponentTarget(Actor* InOtherActor);// 0x1aa0450
	void AddCameraBoomLength(float InAddLength);// 0x1aa03d0

--------------------------------
Class: PlayerBase.Character.Pawn.Actor.Object
	bool BeginPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	float FoliageRenderTargetDrawSize;//[Offset: 0x544, Size: 1]
	MulticastInlineDelegateProperty OnNetworkValueChanged;//[Size: 1]
	byte TeamNum;//[Offset: 0x570, Size: 1]
	bool IsSkillActivationPreparationRooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	float ReplicatedAirControl;//[Offset: 0x678, Size: 1]
	float ReplicatedMovespeed;//[Offset: 0x67c, Size: 1]
	float ReplicatedJumpZVelocity;//[Offset: 0x680, Size: 1]
	float ReplicatedGravity;//[Offset: 0x684, Size: 1]
	enum AttackCategory;//[Offset: 0x689, Size: 1]
	enum DifficultyType;//[Offset: 0x68a, Size: 1]
	enum ActorType_Main;//[Offset: 0x68b, Size: 1]
	enum ActorType_Sub;//[Offset: 0x68c, Size: 1]
	<FName,bool> NWBools;//[Offset: 0x690, Size: 1]
	FXSystemAsset* SpawnEffect;//[Offset: 0x730, Size: 1]
	SoundBase* SpawnSound;//[Offset: 0x738, Size: 1]
	bool ActivateWallDepthRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool IgnoreDeathEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	AnimMontage* DeathAnimation;//[Offset: 0x750, Size: 1]
	float DeathAnimRateCorrectionValue;//[Offset: 0x758, Size: 1]
	MaterialInterface*[] OriginalMaterials;//[Offset: 0x760, Size: 1]
	bool AttackTypeIsMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	int NumAttackPatterns;//[Offset: 0x774, Size: 1]
	UnitStatComponent* UnitStatComponent;//[Offset: 0x780, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x788, Size: 1]
	OPOptimizationComponent* OptimizationComponent;//[Offset: 0x790, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x798, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x7a0, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x7a8, Size: 1]
	OPRewardComponent* OPRewardComponent;//[Offset: 0x7b0, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x7b8, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x7c0, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x7c8, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x7d0, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x7d8, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x7e0, Size: 1]
	AnimMontage* CurrentHitAnimation;//[Offset: 0x7e8, Size: 1]
	float HitStopVectorForce;//[Offset: 0x850, Size: 1]
	Actor* LastAttacker;//[Offset: 0x8f0, Size: 1]
	void ZeroGravityPlayerNonReplicating(bool boo, FName ID);// 0x1bd5fc0
	void ZeroGravityPlayer(bool boo, FName ID);// 0x1bd5ef0
	void UpdateLastAttacker_BeforeDestroy_S2OC(Actor* InLastAttacker);// 0xf87bf0
	static PlayerBase* TryGetPlayerUnit(Actor* InActor);// 0x1bd5e40
	void SyncNWBool(FName Index, bool boo);// 0x1bd5d50
	float SetupDeathEffect();// 0x1bd5cf0
	void SetReplicatedMovement_BP(Vector InNewVector);// 0x1bd5c60
	void SetNWBool(FName Index, bool boo, bool IgnoreSync);// 0x1bd5b50
	void SetHexSkinID(FName InSkinTableID, bool InIsReplicatedCall);// 0x1bd5a80
	void SetHexMesh(class Actor InClassToChange);// 0x1bd59f0
	void SetFallingLateralFriction_UntilLand(bool boo, float InValue, FName ID);// 0x1bd58d0
	void SetCanMoveInAir_S2C(bool InValue);// 0x1bd5840
	void SetActorLocationWithNoAccelerationWithReplicationSV(Vector InNewLocation);// 0x1bd57b0
	void SendC2BMode(int Mode, bool Bool, int Integer, float Float, Vector Vector, Actor* Actor, FName Name);// 0x1bd5580
	void RecoverHitStopReaction_BP();// 0x1bd5560
	void PrepareDestroyActor_S2OC();// 0x1bd5540
	void OnUnitLevelChanged(byte InNewLevel);// 0x1bd54c0
	void OnStatCalculated();// 0x1bd54a0
	void OnRespawnEvent_MultiCast();// 0x1bd5480
	void OnRespawnEvent_BPNE();// 0x1bd5460
	void OnRespawnEvent();// 0x1bd5440
	void OnRep_MoveSpeed();// 0x1bd5420
	void OnRep_JumpSpeed();// 0x1bd5400
	void OnRep_GravityScale();// 0x1bd53e0
	void OnRep_AirControl();// 0x1bd53c0
	void OnReceivePlayerBaseNotify(FName NotifyName);// 0x1bd5330
	void OnPlayerDeath(Actor* Attacker);// 0x1bd52a0
	void OnNetworkValueChanged_BPNE(FName InName);// 0x1bd5210
	void OnNativeHidingStateChanged();// 0x1bd51f0
	void OnDimensionChanged();// 0xd9d3e0
	void OnDeathEvent_MultiCast();// 0x1bd51d0
	void OnDeathEvent_BPNE();// 0x1bd51b0
	void OnDeathEvent(Actor* InLastAffectedAttacker);// 0x1bd5120
	void OnCharacterHit(Vector InHitDirection, float InTimeHitStop);// 0x1bd5040
	void OnCapsuleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, out const HitResult Hit);// 0x1bd4e60
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1bd4ba0
	void LaunchCharacterWithReplicationSV(Vector Speed, bool OverrideXY, bool OverrideZ);// 0x1bd47c0
	void LaunchCharacterBroadcast(Vector Speed, bool OverrideXY, bool OverrideZ);// 0x1bd4690
	bool IsGroundHeightIsInRange(float InMaxDetectionHeight);// 0x1bd4600
	bool IsEnemy(Actor* Target, bool IgnoreSelfDead, bool DoHidingCheck);// 0x1bd44e0
	void HexSkinIDBroadcast(FName InHexSkinID);// 0x1bd4380
	bool HasGravityPlayer(FName ID);// 0x1bd42e0
	AnimMontage* GetStunAnimation_BPNE();// 0x1bd4170
	float GetStat(enum StatType);// 0x1bd40e0
	Transform GetShootPosTransform();// 0x1bd4070
	Vector GetShootPos();// 0x1bd4030
	Transform GetRootSphereGroundTransform();// 0x1bd3fc0
	Vector GetReplicatedMovement_BP();// 0x1bd3f10
	bool GetNWBool(FName Index);// 0x1bd3e70
	OP_PlayerState* GetLastPlayerState();// 0x1bd3e40
	OP_PlayerController* GetLastPlayerController();// 0x1bd3e10
	Transform GetGroundTransform();// 0x1bd3d80
	Vector GetGroundLocation();// 0x1bd3cd0
	bool GetGroundHeight(out float OutGroundHeight, float InMaxDetectionHeight);// 0x1bd3be0
	float GetDamage();// 0x1bd3a80
	FName GetCharacterSkinID(Object* InWorldContextObject);// 0x1bd39f0
	FName GetCharacterID();// 0x1bd39b0
	Vector GetC2BVector(int Mode);// 0x1bd38c0
	bool GetC2BBool(int Mode);// 0x1bd3820
	Actor* GetC2BActor(int Mode);// 0x1bd3780
	Vector GetActorLocationRandomBounds(float tolerence);// 0x1bd36e0
	void GatherCurrentMovement_BP();// 0x1bd3620
	void EmitSound_CL(SoundBase* Sound, float Radius, float Volume, float Pitch, float InStartTime, SoundClass* InSoundClassOverrride);// 0x1bd3440
	void DoHitStopReaction_BP(float InTime);// 0x1bd33c0
	bool DoHitStopReaction(float InTime, bool bAllowLocalPlayerOnly, bool bMontageStop);// 0x1bd32a0
	void CleanUpDeathEffect(int DissolveIndex);// 0x1bd3210

--------------------------------
Class: OverprimeObserverPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x2a8, Size: 1]
	OP_Character* TargetCharacter;//[Offset: 0x2b0, Size: 1]
	OP_PlayerController* OPC;//[Offset: 0x2b8, Size: 1]
	OP_PlayerState* OPS;//[Offset: 0x2c0, Size: 1]
	bool bIsPureObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float ObserverMovementTolerance;//[Offset: 0x2cc, Size: 1]
	float ObserverCameraZHeight;//[Offset: 0x2d0, Size: 1]
	float ObserverSpringArmDoCollisionTestDist;//[Offset: 0x2d4, Size: 1]
	CameraComponent* FollowCameraComponent;//[Offset: 0x2e8, Size: 1]
	CineCameraComponent* FollowCineCameraComponent;//[Offset: 0x2f0, Size: 1]
	SpringArmComponent* SpringArmComponent;//[Offset: 0x2f8, Size: 1]
	Actor* Killer;//[Offset: 0x340, Size: 1]
	bool bShowNPCHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	bool bShowTowerHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 1]
	float ZoomInOutSpeed;//[Offset: 0x364, Size: 1]
	float FlyingSpeed;//[Offset: 0x368, Size: 1]
	float FastFlyingRatio;//[Offset: 0x36c, Size: 1]
	float SlowFlyingRatio;//[Offset: 0x370, Size: 1]
	bool bFreeViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bPersonalViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool bHeroFocusFreeRotationViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]
	float RotationInterpSpeed;//[Offset: 0x378, Size: 1]
	float MoveInterpSpeed;//[Offset: 0x37c, Size: 1]
	bool bShowWorldMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	Actor* AllyCore;//[Offset: 0x398, Size: 1]
	Actor* EnemyCore;//[Offset: 0x3a0, Size: 1]
	Actor* CoreActor;//[Offset: 0x3a8, Size: 1]
	float CameraEventMoveTime;//[Offset: 0x3b0, Size: 1]
	float MoveUpCameraRate;//[Offset: 0x3b4, Size: 1]
	void UpdateGameSettingByObserver();// 0x1abd9f0
	void TargetDeathEvent(Actor* InLastAffectedAttacker);// 0x1abd730
	void ShowPlayerInfoUI();// 0x1abce70
	void SetPlayerControllerInObserver_C2S(OP_Character* InCharacter, OverprimeObserverPawn* InObserver, bool bInAdd);// 0x1abbb20
	void SetMaxFlySpeed_C2S(float InNewRatio);// 0x1abb970
	void Observer_ShowHelpMenu_BPNE(bool IsShow);// 0x1a7f330
	void InitPureObserver();// 0x1ab70e0
	void InitDeathObserver(Actor* InAttacker);// 0x1ab7050
	OP_Character* GetNearCharacterFromPureObserver(Vector InLocation);// 0x1ab6260
	void DeathCamEvent(Actor* InLastAffectedAttacker);// 0x1ab54e0

--------------------------------
Class: UnitVisionComponent.ActorComponent.Object
	UnitVisionRange VisionRange;//[Offset: 0xc0, Size: 1]
	float OwnerRadius;//[Offset: 0xcc, Size: 1]
	enum VisionShape;//[Offset: 0xd0, Size: 1]
	bool bPassTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bIgnoreWallCheckFromMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bIsHeimdall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bDebugVisionTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	float VisionStartTraceHeightCorrectionValue;//[Offset: 0xd8, Size: 1]
	float VisionEndTraceHeightCorrectionValue;//[Offset: 0xdc, Size: 1]
	MulticastInlineDelegateProperty OnOPActorBeginOverlap;//[Size: 1]
	MulticastInlineDelegateProperty OnOPActorEndOverlap;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitExposedStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHidingFlagChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBeginOverlapedByOther;//[Size: 1]
	MulticastInlineDelegateProperty OnEndOverlapedByOther;//[Size: 1]
	bool IsHidingFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	byte ExposedFlag;//[Offset: 0x141, Size: 1]
	bool bGenerateOverlapEventByOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 1]
	<UnitVisionComponent*> LastOverlaps;//[Offset: 0x158, Size: 1]
	<UnitVisionComponent*> NewOverlaps;//[Offset: 0x1a8, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x208, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x210, Size: 1]
	bool bIgnoreVisionCalculationOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool bIgnoreTeamMateOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	float BlockingCheckHeight;//[Offset: 0x21c, Size: 1]
	bool SimulateActorIsInVision(Actor* InTarget);// 0x1bec200
	void SetVisionSphereRange_BP(float InSphereRadius);// 0x1bec180
	void SetVisionCylinderRange_BP(float InCylinderRadius, float InCylinderHeight);// 0x1bec0b0
	void RemoveMeshHideRequest(FName InRequestID);// 0x1bebea0
	void RemoveHiddenToken(FName InTokenName);// 0x1bebe10
	void OnRep_Hiding();// 0x1bebdd0
	void OnRep_Exposed();// 0x1bebdb0
	void OnAppearEnemyBP();// 0x1f25360
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1bebac0
	bool IsUnitVisionComponentInVision(UnitVisionComponent* InTarget);// 0x1beb9f0
	bool IsHidingAndNotExposedOnLocal();// 0x1beb9c0
	bool IsHiding();// 0x1beb990
	bool IsExposedByAnyone();// 0x1beb960
	bool IsExposedBy(byte InUnitTeamNum);// 0x1beb8d0
	bool IsBlockedByStaticObjects(Actor* InTarget, Vector InOwnerLocation);// 0x1beb7e0
	bool IsActorInVision(Actor* InTarget);// 0x1beb740
	bool HasEnemyTeamNPCsInSight(byte MyTeamNum);// 0x1beb6b0
	enum GetVisionShape();// 0x1beb690
	float GetVisionRange();// 0x14b2e80
	float GetVisionHeight();// 0x1beb670
	Actor* GetNearstUnitInRangeWithTag(Actor* InMyTowerActor, float InRangeOverride, bool InbAllowDifferentDimensions, Vector InRangeCenter, bool bIncludeAlly, bool bIncludeEnemy, FName InActorTag);// 0x1beb2c0
	Actor* GetNearestEnemyInSightByTower(bool bForceIgnoreSummonsNPCCanAttack);// 0x1beb190
	Actor* GetNearestEnemyInSight_IgnoreInvincibleAndUntouched();// 0x1beb290
	Actor* GetNearestEnemyInSight_EnemyPlaceable();// 0x1beb260
	Actor* GetNearestEnemyInSight_EnemyMinion();// 0x1beb230
	Actor* GetInSightByTutorialTower();// 0x1beb110
	void GetHerosInSight(out Actor*[] Out, bool bIncludeMyTeam, bool bIncludeEnemyTeam);// 0x1beafc0
	Actor* GetFirstEnemyInSight();// 0x1beaf50
	UnitVisionComponent*[] GetAllUnitVisionsInRange();// 0x1beabe0
	Actor*[] GetAllEnemysInSight();// 0x1beab60
	enum CheckExposedRenderState(bool IsTeam, bool IsTargetExposed, bool IsTargetHiding);// 0x1bea9b0
	void AddMeshHideRequest(FName InRequestID);// 0x1bea920
	void AddHiddenToken(FName InTokenName);// 0x1bea890

--------------------------------
Class: AbnormalStateChangedEventPayload
	int SkillEffectTableFrom;//[Offset: 0x0, Size: 1]
	SlotData SlotFrom;//[Offset: 0x4, Size: 1]
	bool bQueuedStackAboutToApplyAgain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FName ServerTag;//[Offset: 0x30, Size: 1]
	byte KeyNameUniqueIndex;//[Offset: 0x38, Size: 1]
	float Duration;//[Offset: 0x3c, Size: 1]
	float DisplayDuration;//[Offset: 0x40, Size: 1]
	enum RemovalReason;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SlotData
	int ItemTableTableUniqueIndex;//[Offset: 0x0, Size: 1]
	int SkillTableTableUniqueIndex;//[Offset: 0x4, Size: 1]
	int SpellTableTableUniqueIndex;//[Offset: 0x8, Size: 1]
	enum Slot;//[Offset: 0x24, Size: 1]

--------------------------------
Class: UnitVisionRange
	float VisionRange;//[Offset: 0x0, Size: 1]
	float VisionHeight;//[Offset: 0x4, Size: 1]
	enum VisionShape;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UnitBase.ActorComponent.Object
	MulticastInlineDelegateProperty OnMaxHealthChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHealthChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnManaChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectExpChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDeathEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitDeathAsUnitBase;//[Size: 1]
	Actor* MySummonOwner;//[Offset: 0x1b0, Size: 1]
	FString MySummonOwnerClientID;//[Offset: 0x1b8, Size: 1]
	FName CharacterEventDirectionID;//[Offset: 0x1c8, Size: 1]
	FName CharacterEventDirectionSkinID;//[Offset: 0x1d0, Size: 1]
	FName CharacterID;//[Offset: 0x1d8, Size: 1]
	FName CharacterSkinID;//[Offset: 0x1e0, Size: 1]
	bool bIsWorldUnit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool IsSummon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bIsPendingDeadFlagSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bIsDeadFlagSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	uint16 ReplicatedHealth;//[Offset: 0x232, Size: 1]
	uint16 ReplicatedMaxHealth;//[Offset: 0x234, Size: 1]
	uint16 ReplicatedMana;//[Offset: 0x236, Size: 1]
	uint16 ReplicatedMaxMana;//[Offset: 0x238, Size: 1]
	uint16 ReplicatedShield;//[Offset: 0x23a, Size: 1]
	uint16 ReplicatedMaxShield;//[Offset: 0x23c, Size: 1]
	uint16 ReplicatedMagicShield;//[Offset: 0x23e, Size: 1]
	uint16 ReplicatedMaxMagicShield;//[Offset: 0x240, Size: 1]
	float MaxHealth;//[Offset: 0x244, Size: 1]
	UnitVisionComponent* UnitVision;//[Offset: 0x248, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x250, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x258, Size: 1]
	UnitStatComponent* StatComponent;//[Offset: 0x260, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x268, Size: 1]
	LocationSnapshotComponent* LocationSnapshotManagerComponent;//[Offset: 0x270, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x278, Size: 1]
	OPCharacterMovementComponent* OPCharacterMovementComponent;//[Offset: 0x280, Size: 1]
	PrimitiveComponent*[] CameraSummonIgnorable;//[Offset: 0x288, Size: 1]
	Pawn* MyPawn;//[Offset: 0x298, Size: 1]
	ShapeComponent* MyCollisionComponent;//[Offset: 0x2a0, Size: 1]
	UnitBase*[] NeedSolveOverlapUnit;//[Offset: 0x2a8, Size: 1]
	bool bIsGhostState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	<FName> GhostTokens;//[Offset: 0x2c0, Size: 1]
	FText UnitName;//[Offset: 0x408, Size: 1]
	byte TeamNum;//[Offset: 0x420, Size: 1]
	byte Level;//[Offset: 0x421, Size: 1]
	float Exp;//[Offset: 0x424, Size: 1]
	SlateBrush UnitIcon;//[Offset: 0x428, Size: 1]
	SlateBrush UnitIconEnemy;//[Offset: 0x4b0, Size: 1]
	SlateBrush UnitKillStreakIcon;//[Offset: 0x538, Size: 1]
	SlateBrush UnitKillStreakIconEnemy;//[Offset: 0x5c0, Size: 1]
	float DamageResistance_WithNoMinions;//[Offset: 0x648, Size: 1]
	CurveFloat* DamageAnimationCurve;//[Offset: 0x660, Size: 1]
	OPAccumulatedDamageHistory AccumulatedDamageHistory;//[Offset: 0x6d8, Size: 1]
	void SucideByWorld(bool bIsDeathByCheat);// 0x1be85a0
	void SucideByUnit(Actor* InUnitFrom, bool bIsDeathByCheat);// 0x1be84d0
	float SubtractHP(float Amount);// 0x1be8430
	void SpawnAddExpEffect(enum ActorType, Vector SourceLocation, float EffectDuration);// 0x1be82c0
	bool ShouldTakeDamageBP();// 0x1be8290
	void SetTeamNum(byte NewTeam);// 0x1be8210
	void SetShopState(bool InIsShop);// 0x1be8180
	void SetPrimitiveValue(enum InPrimitiveType, float InValue);// 0x1be80b0
	void SetMaxMana(float NewMaxMana);// 0x1be7f20
	void SetMaxHealth(float MaxHP);// 0x1be7ea0
	float SetManaPercent(float Amount);// 0x1be7e00
	void SetManaAndMaxMana(float NewMana, float NewMaxMana);// 0x1be7d30
	void SetMana(float NewMana);// 0x1be7cb0
	float SetHealthPercent(float Amount);// 0x1be7c10
	void SetHealthAndMaxHealth(float NewHealth, float NewMaxHealth);// 0x1be7b40
	float SetHealth(float HP);// 0x1be7aa0
	void RemovePrimitiveValueToken(enum InPrimitiveType, FName InTokenName);// 0x1be7940
	void OverrideSkinID(FName InNewSkinID);// 0x1be7820
	void OverrideHeroEventCharacter(FName InCharacterID, FName InCharacterSkinID);// 0x1be7750
	void OnReplicatedHealthChanged();// 0x1be7320
	void OnRep_TeamNum();// 0x1be7300
	void OnRep_Shield();// 0x1be72e0
	void OnRep_MaxMana();// 0x1be72c0
	void OnRep_MaxHealth();// 0x1be72a0
	void OnRep_Mana();// 0x1be7280
	void OnRep_Level();// 0x1be7260
	void OnRep_IsSummon();// 0x1be7240
	void OnRep_Health();// 0x1be7220
	void OnRep_GhostState();// 0x1be7200
	void OnRep_Exp();// 0x1be71e0
	void OnDimensionChanged();// 0x1be6d10
	void OnDead_S2A();// 0x1be6c60
	void OnComponentEndOverlapFromMyCollisionComponent(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1be6ae0
	void OnAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1be63c0
	void NotifyRespawn_S2C_Reliable(const Transform InSpawnTransform);// 0x1be61d0
	void NotifyDeath_S2C_Reliable(float InRespawnTime, Actor* InLastAffectedAttacker);// 0x1be60f0
	void LevelUp(byte InLevelIncrease, bool InWithLevelUpEffect);// 0x1be6020
	bool IsUntouched();// 0x1be5ff0
	static bool IsRange(enum InAttackCategory);// 0x1be5f70
	static bool IsMelee(enum InAttackCategory);// 0x1be5ef0
	bool IsMaxLevel();// 0x1be5ec0
	bool IsInvincible();// 0x1be5e90
	bool IsEnemy(Actor* Target, bool IgnoreSelfDead, bool DoHidingCheck);// 0x1be5d70
	static bool IsDeadUnit(Actor* InActor);// 0x1be5ce0
	static UnitBase* GetWorldUnitBase(Object* InWorldContextObject);// 0x1be5b40
	float GetShield();// 0x1be5b10
	enum GetMonsterType();// 0x1be5ae0
	float GetMaxShield();// 0x1be5ab0
	float GetMaxMana();// 0x1be5a90
	float GetMaxMagicalShield();// 0x1be5a60
	int GetMaxLevel();// 0x1be5a30
	float GetMaxHealth();// 0x1be5a10
	float GetManaPercent();// 0x1be59d0
	float GetMana();// 0x1be59b0
	float GetMagicalShield();// 0x1be5980
	float GetLostMana();// 0x1be5950
	float GetLostHealth();// 0x1be5920
	UnitBase* GetLastSummonOwner();// 0x1be58f0
	FName GetHeroEventCharacterSkinID();// 0x1be58b0
	FName GetHeroEventCharacterID();// 0x1be5870
	float GetHealthPercent();// 0x1be5830
	float GetHealth();// 0x1be5810
	float GetEXPPercent();// 0x1be5710
	static float GetExpNeededForNextLevel(Object* InWorldContextObject, byte InNextLevel);// 0x1be5740
	static float GetClosetDistanceToPoint(Actor* InActor, Vector InPoint);// 0x1be5630
	enum GetAttackCategoryType();// 0x1be5600
	enum GetActorTypeSub();// 0x1be55d0
	enum GetActorTypeMain();// 0x1be55a0
	void BroadcastInGameObjectivePopup_S2C(FName InCausedBy, FString InUserNickName, byte InArgument1, byte InArgument2, FName InInGameObjectPopupTableIndex);// 0x1be5310
	void AddPrimitiveValueToken(enum InPrimitiveType, float InValue, FName InTokenName);// 0x1be5040
	float AddMana(float Amount);// 0x1be4fa0
	float AddHP(float Amount);// 0x1be4f00
	void AddExp(float Amount, Actor* Source);// 0x1be4e30

--------------------------------
Class: OPAbnormalStateComponent.ActorComponent.Object
	OPDamageIndicatorTypeComponent* LastIndicator;//[Offset: 0xb0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x188, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x190, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x198, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x1a0, Size: 1]
	OPCharacterMovementComponent* CharacterMovementComponent;//[Offset: 0x1a8, Size: 1]
	OPAbnormalStateEffectObject*[] AbnormalStateEffectObjects;//[Offset: 0x1b0, Size: 1]
	OPAbnormalStateEffectObject*[] AbnormalStateEffectTickableObjects;//[Offset: 0x1c0, Size: 1]
	byte Dimension;//[Offset: 0x1f0, Size: 1]
	float BodyExpansionScale;//[Offset: 0x1f4, Size: 1]
	bool bPlayTravelModeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPreUnitDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateInHerit;//[Size: 1]
	float TryGetDurationLeftBySkillEffectID(FName InSkillEffectTableID);// 0x1ac8730
	OPAbnormalStateEffectObject* TryGetAbnormalStateEffectObjectByKeywordType(FName InExpansionKeyword);// 0x1ac8690
	OPAbnormalStateEffectObject* TryGetAbnormalStateEffectObject(class OPAbnormalStateEffectObject InClass);// 0x1ac85f0
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x1ac7eb0
	void OnRespawnEvent();// 0x1ac7e90
	void OnRep_BodyExpansionScale();// 0xd9d3e0
	void OnLockInSphereStatusChanged_S2C_Reliable(Vector InCenter, float InRadius, float InHeight);// 0x1ac7d70
	void OnKeywordStateChangedFromAbnormalComponent_S2C_Unreliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x1ac7af0
	void OnKeywordStateChangedFromAbnormalComponent_S2C_Reliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x1ac7870
	void OnKeywordStateChangedFromAbnormalComponent_S2AC_Unreliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom, const PlayerState*[] InExcept);// 0x1ac75a0
	void OnKeywordStateChangedFromAbnormalComponent_S2AC_Reliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom, const PlayerState*[] InExcept);// 0x1ac72d0
	void OnHidingStateChanged();// 0x1ac7150
	void OnDeathEventGlobal(UnitBase* InUnitBase);// 0x1ac6f10
	void OnDeathEvent(Actor* InLastAffectedAttacker);// 0x1ac6e80
	static bool IsTwoUnitsInSameDimention_Static(Actor* InActorA, Actor* InActorB);// 0x1ac6a30
	bool IsStructure();// 0x1ac6a00
	bool IsInSameDimensionWithLocal();// 0x1ac69a0
	static bool IsInSameDimensionIndexWithLocal(Object* InWorldContextObject, byte InTargetDimension);// 0x1ac68d0
	static bool IsInCustomDimension(byte InDimensionCode);// 0x1ac6850
	bool HasAnyAbnormalStateInfoFrom(FName InKeyName, Actor* InAppliedFrom);// 0x1ac6780
	bool HasAnyAbnormalStateInfo(FName InKeyName);// 0x1ac66e0
	static bool HasAbnormalStateInfoFromPlayerBase(PlayerBase* PlayerBase, FName InKeywordType, FName InKeyName);// 0x1ac65e0
	bool HasAbnormalStateInfo(FName InKeywordType, FName InKeyName);// 0x1ac6510
	static OPAbnormalStateComponent* GetWorldAbnormalStateComponent(Object* InWorldContextObject);// 0x1ac6480
	static Object* GetUITextResourceObjectByAssetName(Object* InWorldContextObject, Object* InOuter, FName InAssetName);// 0x1ac6380
	int GetTotalStacks(FName InKeywordType);// 0x1ac62e0
	float GetTimeSinceFirstAdded(FName InExpansionKeyword);// 0x1ac6240
	static SlotData GetSlotFrom(Object* InWorldContextObject, AbnormalStateChangedEventPayload InPayload);// 0x1ac6040
	static FName GetSkillEffectFrom(Object* InWorldContextObject, AbnormalStateChangedEventPayload InPayload);// 0x1ac5e90
	float GetMaxCCDurationLeft(FName InKeywordType);// 0x1ac5d50
	float GetHighestAbnormalStateValue(FName InKeywordType);// 0x1ac5cb0
	bool GetCurrentAbnormalStateFlagByBaseKeyword(FName InBaseKeywordType);// 0x1ac5be0
	float GetAbnormalStateValue(FName InKeywordType);// 0x1ac5b40
	bool ContainsStackZero(FName InKeywordType);// 0x1ac5aa0
	bool ContainsAbnormalStateKeyword(FName InKeywordType);// 0x1ac5a00
	void ClearApplyBuff_BPHelper(FName InKeywordType);// 0x1ac5970
	static bool CC_ShouldCancelPreviousMovementForce(Object* InWorldContextObject, FName InKeywordType);// 0x1ac58a0
	bool CC_ShouldBlockCameraAngleControl();// 0x1ac5870
	bool CC_CanMove();// 0x1ac5840
	bool CC_CanLockSkill(bool InIsMovableTypeSkill);// 0x1ac57a0
	void CC_Apply_Simple(FName InKey, Actor* InCausedBy, FName InKeywordName, float InDuration, float AbsoluteValue, enum InCalculationRule, int InStack, bool InIsPermanent);// 0x1ac5540
	void BroadcastPreDimensionChangedEvent();// 0x1ac5520
	void BroadcastDimensionChangedEvent();// 0x1ac5500
	void ApplyStatBuff_Simple(FName InKey, Actor* InCausedBy, FName InKeywordType, float InAmount, float InDuration, enum InCalculationRule, int InMaxStack, int InStack, bool InIsPermanent);// 0x1ac5250

--------------------------------
Class: OPAbnormalStateEffectObject.Object
	FName KeywordType;//[Offset: 0x28, Size: 1]
	Actor* CausedBy;//[Offset: 0x30, Size: 1]
	FName KeyName;//[Offset: 0x38, Size: 1]
	DateTime CreatedAt;//[Offset: 0x40, Size: 1]
	AbnormalStateChangedEventPayload Payload;//[Offset: 0x48, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	delegate OnDestroyed;//[Offset: 0x102, Size: 1]
	void SetTickEnabled(OPAbnormalStateComponent* InOwnerAbnormalStateComponent, bool InIsEnabled);// 0x1ac84c0
	void OnUpdated_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x1ac8280
	void OnTick_BPNE(float InDeltaTime, OPAbnormalStateComponent* InOwnerAbnormalStateComponent);// 0x1ac81a0
	void OnStarted_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x1ac7ff0
	void OnHidingStatusChanged_BPNE(bool InHiding, Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController);// 0x1ac7170
	void OnFinished_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x1ac6fa0
	bool IsLoadingOnlyObject();// 0x1ac69d0
	float GetTimeSinceCreation();// 0x1ac6210
	OP_GameState* GetOPGameState(Object* InWorldContextObject);// 0x1ac5df0
	enum GetHideDirectionInStealth();// 0x1ac5c80

--------------------------------
Class: OP_GameState.GameStateBase.Info.Actor.Object
	OPGameEventDispatcher* GameEventDispatcher;//[Offset: 0x270, Size: 1]
	OPDamageSystem* DamageSystem;//[Offset: 0x278, Size: 1]
	OPRoundHandlerComponent* RoundHandlerComponent;//[Offset: 0x280, Size: 1]
	OPUnitManager* UnitManager;//[Offset: 0x288, Size: 1]
	OPSkillColliderManager* SkillColliderManager;//[Offset: 0x290, Size: 1]
	OPGimmickManager* WorldGimmickManager;//[Offset: 0x298, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x2a0, Size: 1]
	OPPingSystemComponent* PingSystemComponent;//[Offset: 0x2a8, Size: 1]
	OPSpawnerManager* SpawnerManager;//[Offset: 0x2b0, Size: 1]
	OPVolumeManager* VolumeManager;//[Offset: 0x2b8, Size: 1]
	OPLoadingManagerComponent* ServerLoadingManagerComponent;//[Offset: 0x2c0, Size: 1]
	OPSkillComponent* WorldSkillComponent;//[Offset: 0x2c8, Size: 1]
	OPAbnormalStateComponent* WorldAbnormalComponent;//[Offset: 0x2d0, Size: 1]
	UnitBase* WorldUnitBase;//[Offset: 0x2d8, Size: 1]
	PSCoolTimeManager* WorldCoolTimeManager;//[Offset: 0x2e0, Size: 1]
	PSInventoryManager* WorldInventoryManager;//[Offset: 0x2e8, Size: 1]
	UnitStatComponent* WorldStatComponent;//[Offset: 0x2f0, Size: 1]
	OPDirectionComponent* WorldDirectionComponent;//[Offset: 0x2f8, Size: 1]
	bool bCanBuyRefillableItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	FText GameModeName;//[Offset: 0x308, Size: 1]
	FText[] GameModeDescriptions;//[Offset: 0x320, Size: 1]
	int ReadyTimerForObserverSelect;//[Offset: 0x330, Size: 1]
	int Draft_ReadyWaitingTime;//[Offset: 0x334, Size: 1]
	int AutoBalancingWaitingTime;//[Offset: 0x338, Size: 1]
	byte MaxPlayersLimitation;//[Offset: 0x33c, Size: 1]
	byte MaxPlayersLimitationByForce;//[Offset: 0x33d, Size: 1]
	float GameStartMinionActivationDelay;//[Offset: 0x340, Size: 1]
	float GameStartJungleMinionActivationDelay;//[Offset: 0x344, Size: 1]
	enum HeroSpawnZoneSelectionRule;//[Offset: 0x348, Size: 1]
	enum GameTeamRule;//[Offset: 0x349, Size: 1]
	FName GameTeamRuleValue;//[Offset: 0x34c, Size: 1]
	enum GameWinType;//[Offset: 0x354, Size: 1]
	FName GameWinValue;//[Offset: 0x358, Size: 1]
	enum HeroSelectionType;//[Offset: 0x360, Size: 1]
	FName HeroSelectionValue;//[Offset: 0x364, Size: 1]
	enum TeamScoreType;//[Offset: 0x36c, Size: 1]
	enum VictoryCameraType;//[Offset: 0x36d, Size: 1]
	FName VictoryCameraValue;//[Offset: 0x370, Size: 1]
	enum VictoryHandlingType;//[Offset: 0x378, Size: 1]
	int StartLevel;//[Offset: 0x37c, Size: 1]
	int StartSkillPoint;//[Offset: 0x380, Size: 1]
	int StartGold;//[Offset: 0x384, Size: 1]
	float ManaGenMutiplier;//[Offset: 0x388, Size: 1]
	float GlobalCoolDownScaleMutiplier;//[Offset: 0x38c, Size: 1]
	float EXPMultiplier;//[Offset: 0x390, Size: 1]
	float SkillDamageMultiplier;//[Offset: 0x394, Size: 1]
	int MaxCardPoint;//[Offset: 0x398, Size: 1]
	bool EnableFountainRegen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool SendMatchDataToServerWhenEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool HidePlayerHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool HidePlayerOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool PreventPortalUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool HidePlayerRespawnEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	<byte,SurrenderInfo> SurrenderInfoArray;//[Offset: 0x3c0, Size: 1]
	<byte,SurrenderInfo> SurrenderInfoArray_forEarlySurrender;//[Offset: 0x440, Size: 1]
	bool IsDedicatedServerMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	MasteryPPDetailData[] MasteryDetailDatas;//[Offset: 0x498, Size: 1]
	float EXPAdjustmentStartTimeMinute;//[Offset: 0x4a8, Size: 1]
	int MaxSpectators;//[Offset: 0x4ac, Size: 1]
	OP_PlayerController* LocalOPC;//[Offset: 0x568, Size: 1]
	bool OpenShopOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	<enum,FName> AvailableTeamObjectives;//[Offset: 0x580, Size: 1]
	bool bRoundEndCalled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	OP_PlayerState* HighestBountyDawnPS;//[Offset: 0x628, Size: 1]
	OP_PlayerState* HighestBountyDuskPS;//[Offset: 0x630, Size: 1]
	void UpdateTeamObjectives(bool InIsAdded, enum InObjectiveType, FName CharacterID);// 0x1aaaf50
	void UpdateBounty_S2AC();// 0x1aaad80
	void TimeLimitMode_Start();// 0x1aaad60
	void TimeLimitMode_NotifyTime();// 0x1aaad40
	void TimeLimitMode_End();// 0x1aaad20
	void SyncSurrenderStatus(enum Status, byte TeamNum, byte NumPlayersAll, byte NumAccepted, byte NumDenied, OP_PlayerState* RequestedBy);// 0x1aaab40
	void SyncLaneSelectionAndCommunityLevel();// 0x1aaaa90
	void RequestBroadcastRoundEndResult(byte WinTeam, float Timelapsed, Vector InLookAtPos, bool InShouldLookAtPos, bool IsTestPurpose);// 0x1aaa060
	void OnLiveMessageAllUsers(FString InGMMessage, int InDuration);// 0x1aa89d0
	void OnAfterSettingMapTable_BPNE();// 0x1aa8790
	void Notify_PlayerJoined_S2C(PlayerState* ply);// 0x1aa8430
	void Notify_PlayerDisconnected_S2C(PlayerState* ply);// 0x1aa83a0
	bool IsRemainHumanInDediServer();// 0x1aa8220
	bool IsDraftModeEnabled();// 0x1020290
	float GetPlayerRespawnTime(float InPlayerLevel, UnitBase* InUnitToRespawn);// 0x1aa7ef0
	Vector GetPlayerPositionByTeamNum(byte TeamNum);// 0x1aa7e50
	int GetNumSpectators();// 0x1aa7e20
	int GetNumPlayersByTeam(byte TeamNum);// 0x1aa7d60
	int GetNumPlayersByNotTeam(byte TeamNum);// 0x1aa7cd0
	int GetNumPlayers_AllBattleTeam();// 0x1aa7df0
	int GetNumPlayers1_2Team();// 0x1aa7bf0
	int GetNumPlayers(GetNumPlayersArgument InGetArgument);// 0x1aa7c20
	void GetKDAM(byte TeamNum, out int Kills, out int Deaths, out int Assists, out int CSs);// 0x1aa7a10
	void GetEXPSTDEV(out float OutAverage, out float OutSigma);// 0x1aa77f0
	byte[] GetActiveTeamsWithPlayers();// 0x1aa76a0
	bool CanAddSpectators();// 0x1aa75d0
	float CalculateMaxBounty(OP_PlayerState* BountyPlayer, float KillReward, bool IsChat, bool IsSavePrevBounty, enum CurrentMapType, enum GameModeType);// 0x1aa73e0
	float CalculateCurrentBounty(OP_PlayerState* BountyPlayer, float KillReward, bool IsChat, bool IsSavePrevBounty, enum CurrentMapType, enum GameModeType);// 0x1aa71f0
	float CalculateAverageLevel(enum CalcAverageLevelType, byte MyTeamNum);// 0x1aa7110
	void BroadcastUpdateRecommendState(const HonorRecommendCountData[] InRecommendStateData);// 0x1aa7040
	void BroadcastUpdateHeroMasteryData(const CollectionMasteryInfo[] InMasteryDatas);// 0x1aa6fa0
	void BroadcastSystemChat(const FText Message, LinearColor ChatColor, enum InSysMsgLevel);// 0x1aa6e50
	void BroadcastSurfaceSoundPath(FName SoundPath);// 0x1aa6dc0
	void BroadcastSurfaceSound(SoundBase* Sound);// 0x1aa6d30
	void BroadcastRoundEndResult(byte WinTeam, float Timelapsed, Vector InLookAtPos, bool InShouldLookAtPos);// 0x1aa6bc0
	void BroadcastResponseHeroTrade(OP_PlayerState* Sender, OP_PlayerState* Reciever, bool IsSuccess);// 0x1aa6ab0
	void BroadcastRequestHeroTrade(OP_PlayerState* Sender, OP_PlayerState* Reciever);// 0x1aa69e0
	void BroadcastPlayerChangeName(PlayerState* Player, FString NewName);// 0x1aa68f0
	void BroadcastPlayerBoughtItem(OP_PlayerState* Player, class ItemBase Item);// 0x1aa6820
	void BroadcastMatchInfo(FString PacketString);// 0x1aa6690
	void BroadcastKillStreakData(const KillStreakData InData);// 0x1aa6530
	void BroadcastKillStreakAllKill(byte InKillerTeamNum, byte InDeadTeamNum);// 0x1aa6460

--------------------------------
Class: OP_PlayerState.PlayerState.Info.Actor.Object
	FString ClientLoginID;//[Offset: 0x328, Size: 1]
	bool IsAnonymousMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int HonorPoint;//[Offset: 0x33c, Size: 1]
	int MMR;//[Offset: 0x340, Size: 1]
	int CommunityLevel;//[Offset: 0x344, Size: 1]
	int LanePos;//[Offset: 0x348, Size: 1]
	float MVPScore;//[Offset: 0x34c, Size: 1]
	CollectionMasteryInfo HeroMasteryData;//[Offset: 0x350, Size: 1]
	OPTimerManager* TimerManager;//[Offset: 0x388, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0x390, Size: 1]
	MulticastInlineDelegateProperty OnPlayerKDACSPointChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnARAMDiceCounterChanged;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnControllingCharacterChanged;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_AddRecommendedType;//[Size: 1]
	byte ARAMDiceCounter;//[Offset: 0x3f9, Size: 1]
	byte Kills;//[Offset: 0x3fa, Size: 1]
	byte Deaths;//[Offset: 0x3fb, Size: 1]
	byte Assists;//[Offset: 0x3fc, Size: 1]
	byte BuildingKills;//[Offset: 0x3fd, Size: 1]
	int CreepScore;//[Offset: 0x400, Size: 1]
	byte KillStreak;//[Offset: 0x404, Size: 1]
	byte MaxConsecutiveKills;//[Offset: 0x405, Size: 1]
	byte ConsecutiveKills;//[Offset: 0x406, Size: 1]
	byte ConsecutiveDeaths;//[Offset: 0x407, Size: 1]
	bool ChatMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	enum PlayerRoundState;//[Offset: 0x409, Size: 1]
	byte TeamNum;//[Offset: 0x40a, Size: 1]
	float Gold;//[Offset: 0x40c, Size: 1]
	float TotalGold;//[Offset: 0x410, Size: 1]
	int MaxItemPoint;//[Offset: 0x414, Size: 1]
	DateTime LastHistoryTime;//[Offset: 0x418, Size: 1]
	byte MaxKillStreak;//[Offset: 0x420, Size: 1]
	Vector LastDeadPosition;//[Offset: 0x424, Size: 1]
	OP_Character* ControllingCharacter;//[Offset: 0x430, Size: 1]
	bool bIsAfk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bIsOPSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool bIsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	enum PlayerConnectionState;//[Offset: 0x43b, Size: 1]
	bool bIsPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	OPAccumulatedDamageHistory AccumulatedDamageHistory;//[Offset: 0x440, Size: 1]
	int CrowdControlCount;//[Offset: 0x598, Size: 1]
	int MinionKillCount;//[Offset: 0x59c, Size: 1]
	int MonsterKillCount;//[Offset: 0x5a0, Size: 1]
	float PlayerHealing;//[Offset: 0x5a4, Size: 1]
	float HealingTaken;//[Offset: 0x5a8, Size: 1]
	FName SelectedHeroID;//[Offset: 0x5ac, Size: 1]
	FName SelectedHeroSkinID;//[Offset: 0x5b4, Size: 1]
	bool bIsHeroLockIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	int PlayerIndex;//[Offset: 0x5c0, Size: 1]
	int DraftOrder;//[Offset: 0x5c4, Size: 1]
	int SortOrder;//[Offset: 0x5c8, Size: 1]
	enum DesiredLanePosition;//[Offset: 0x5cc, Size: 1]
	enum SelectedLanePosition;//[Offset: 0x5cd, Size: 1]
	int CurrentStep;//[Offset: 0x5e0, Size: 1]
	FName[] RecommendItems;//[Offset: 0x5e8, Size: 1]
	FName[] AutoItemGuideList;//[Offset: 0x5f8, Size: 1]
	FName[] SelectedSpell;//[Offset: 0x608, Size: 1]
	ShopItemHistory[] ShopItemHistory;//[Offset: 0x618, Size: 1]
	MulticastInlineDelegateProperty OnIntoFountain;//[Size: 1]
	MaterialParameterCollection* TeamMPC;//[Offset: 0x698, Size: 1]
	Vector[] BattleAlertLocationStack;//[Offset: 0x708, Size: 1]
	int RankTier;//[Offset: 0x730, Size: 1]
	int PrevSeasonRankTier;//[Offset: 0x734, Size: 1]
	int8 RecommendedCount;//[Offset: 0x738, Size: 1]
	FName[] HeroIDsForDediServer;//[Offset: 0x740, Size: 1]
	bool bIsBotGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	bool bIsActivatingRecall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	AddGoldType[] TotalGoldByAddGoldType;//[Offset: 0x758, Size: 1]
	bool bIsCheckFirstGoldGainDifference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	float FirstGoldGainDifference;//[Offset: 0x76c, Size: 1]
	float prevBounty;//[Offset: 0x770, Size: 1]
	float bountyToChat;//[Offset: 0x774, Size: 1]
	float myGoldBeforeDeath;//[Offset: 0x778, Size: 1]
	float enemyTemGoldBeforeDeath;//[Offset: 0x77c, Size: 1]
	float prevAssistBounty;//[Offset: 0x780, Size: 1]
	float GainedBounty;//[Offset: 0x784, Size: 1]
	Vector BountyVictimLocation;//[Offset: 0x788, Size: 1]
	MasteryPPDetailData MasteryResultDetail;//[Offset: 0x798, Size: 1]
	void UpdatePlayerIndex(int InIndex);// 0x1ac32a0
	void UpdateCommunityLevel(int InCommunityLevel);// 0x1ac3210
	int TryGetLevel();// 0x1ac31e0
	float TryGetExp();// 0x1ac31b0
	void SetUseCustomPlayerNames(bool bUse);// 0x1ac3120
	void SetTraining(FName InHeroID, FName InSkinID);// 0x1ac3050
	void SetSelectedHeroSkin_S2AC(FName HeroSkinID);// 0x1ac2ef0
	void SetSelectedHero_S2AC(FName HeroID, bool bIsLockIn);// 0x1ac2f80
	void SetPlayerBotName(const FText InBotName);// 0x1ac2e30
	void SetMasteryDetailObj(const MasteryPPDetailData[] InMasteryDetails, bool InIsValidGame);// 0x1ac2d20
	void SetLanePosition(enum NewPosition, bool IsFixed);// 0x1ac2c40
	void SetIsPenaltyUser_S2A(bool InIsPenalty);// 0x1ac2bb0
	void SetIsOPSpectator(bool InbIsOPSpectator, PlayerController* APC);// 0x1ac2ae0
	void SetIsAfk_C2S(bool InIsAfk);// 0x1ac2a50
	void SetHeroMasteryData_C2S(const CollectionMasteryInfo InMasteryData);// 0x1ac29b0
	void SetHeroIDs_C2S(const FName[] NewHasHeroIDs);// 0x1ac2910
	void SendSelectedSpellInfo(const FName[] InSelectedSpell);// 0x1ac2870
	void SelectPlayerSpell(byte SpellSlotIndex, FName SpellID);// 0x1ac27a0
	void ReceiveShowGotOrbPing(uint32 InPlayerID, FString InClientLoginID);// 0x1ac26b0
	void ReceiveRemovePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder);// 0x1ac2580
	void ReceivePingSystemMessageWorld(uint32 InPlayerID, FString InClientLoginID, byte InOrder, const Vector InPosByWorld, byte InPingSystemMsg);// 0x1ac23c0
	void ReceivePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder, const Vector2D InPosByMinimap, const Vector InPosByWorld, byte InPingSystemMsg);// 0x1ac21d0
	void ReceiveHideGotOrbPing();// 0x1ac21b0
	void OverridePlayerName(FString NewName);// 0x1ac2100
	void OnTeamChanged();// 0x1ac20e0
	void OnShopItemHistoryCleared();// 0x1ac20c0
	void OnRep_ControllingCharacter();// 0x1ac20a0
	void OnRep_ARAMDiceCounter();// 0x1ac2080
	void OnPossessToBattleCharacter(OP_Character* InCharacter);// 0x1ac1ff0
	void OnKDACSPointChanged();// 0x1ac1fd0
	void OnGoldChanged();// 0x1ac1fb0
	void OnControllingCharacterStatChanged();// 0x1ac1f90
	void OnControllingCharacterLevelChanged(byte InNewLevel);// 0x1ac1f10
	void OnChangeOtherClientLoginID_S2C(const int InPlayerID, FString InClientLoginID);// 0x1ac1e20
	void OnChangeClientLoginID_S2C(FString InClientLoginID);// 0x1ac1d70
	void OnChangeClientLoginID_S2A(FString InClientLoginID);// 0x1ac1cc0
	void OnBattleAlert(Vector InLocation);// 0x1ac1c30
	void OnActiveRecall_Client(FString InClientLoginID, bool InFinished);// 0x1ac1b40
	bool IsHeroLockIn();// 0x1ac1b20
	void IntoFountain_S2C(bool IsIn);// 0x1ac1a90
	void InitAutoLearnSkillInfo(FName AutoSkillID);// 0x1ac1a00
	bool HasValidAutoSkillSettings();// 0x1ac19d0
	bool HasValidAutoItemSettings();// 0x1ac19a0
	FName GetUnselectedRandomHero();// 0x1ac1960
	FName GetSelectedHeroSkinID();// 0x1ac1920
	FName GetSelectedHeroID();// 0x1ac18e0
	FName GetPreSelectedHeroID();// 0x1ac18a0
	void ClearShopItemHistory();// 0x1ac1880
	void CheckRefillableItems();// 0x1ac1860
	void ChangePlayerName(FString NewName);// 0x1ac1790
	void ChangeDisconnected(bool InIsDisconnected);// 0x1ac1700
	bool CanBuyItem(FName ItemName);// 0x1ac1660
	void BroadcastRespawnRemainTime_S2C(float InRespawnRemainTime);// 0x1ac15d0
	void BroadcastKillSystemChat(const KillStreakData InKillstreakData);// 0x1ac1470
	void BroadcastKillStreak(const KillStreakData InKillstreakData, float InRespawnTime);// 0x1ac12c0
	void AutoLearnSkill(bool bIsForceLearn);// 0x1ac1230
	void AddRecommendToUser_S2C(const int8 InRecommendType);// 0x1ac11b0
	void AddGoldNotice(float Amount, bool NeedReplicate, bool IsRecording, Actor* InHitTarget, Actor* InAttacker, enum AddGoldType);// 0x1ac0fc0
	void AddGoldCheckDekima(float Amount, enum AddGoldType);// 0x1ac0ef0
	void AddGold(float Amount, bool NeedReplicate, bool IsRecording, Actor* InHitTarget, Actor* InAttacker, enum AddGoldType);// 0x1ac0d00

--------------------------------
Class: CollectionMasteryInfo
	FName HeroID;//[Offset: 0x0, Size: 1]
	int Level;//[Offset: 0x8, Size: 1]
	int Point;//[Offset: 0xc, Size: 1]
	int IsLevelUp;//[Offset: 0x10, Size: 1]
	int RewardItemID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: OPTimerManager.ActorComponent.Object
	<FName,SimpleTimerDataSet> SimpleTimers;//[Offset: 0x100, Size: 1]
	<FName,CountableTimerDataSet> CountableTimers;//[Offset: 0x150, Size: 1]

--------------------------------
Class: SimpleTimerDataSet
	TimerHandle TimerHandler;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CountableTimerDataSet
	enum Type;//[Offset: 0x0, Size: 1]
	TimerHandle TimerHandler;//[Offset: 0x8, Size: 1]
	int CurrentCount;//[Offset: 0x10, Size: 1]
	int MaxCount;//[Offset: 0x14, Size: 1]
	float Delay;//[Offset: 0x18, Size: 1]
	bool CallFailOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool CallWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool CancelWhenHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	float[] CustomSteps;//[Offset: 0x20, Size: 1]
	int StopWhenCancelLevel;//[Offset: 0x30, Size: 1]

--------------------------------
Class: OPSkillSystemReplicationTerminal.ActorComponent.Object
	void SyncUnitbaseExp_S2C_Reliable(UnitBase* InUnitBase, float InExp);// 0x1ba0890
	void SyncStats_S2C_Reliable(UnitStatComponent* InStatComponent, const OPSyncStatData[] Values);// 0x1ba07a0
	void SyncSlotModification_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, const OPSkillSlotData[] InSlotModification);// 0x1ba0680
	void SyncSkillStateCreation_S2C_Unreliable(OPSkillComponent* InTargetSkillComponent, int InSkillStateUniqueID, SlotData InSlot, float InSkillAcceleration);// 0x1ba02b0
	void SyncSkillStateCreation_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, int InSkillStateUniqueID, SlotData InSlot, float InSkillAcceleration);// 0x1ba0120
	void SyncSkillState_Unreliable(OPSkillComponent* InTargetSkillComponent, SyncSkillStateArgument InSyncSkillStateArgument);// 0x1ba0560
	void SyncSkillState_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, SyncSkillStateArgument InSyncSkillStateArgument);// 0x1ba0440
	void SyncSkillSlotID_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, FName InSkillSlotID);// 0x1ba0050
	void SyncSkillPoint_S2C_Reliable(PSInventoryManager* InInventoryManager, byte InSkillPoint);// 0x1b9ff80
	void SyncSkillLevels_S2C_Reliable(PSInventoryManager* InInventoryManager, const int[] InSkillLevels);// 0x1b9fe90
	void SyncSkillLevel_S2C_Reliable(PSInventoryManager* InInventoryManager, enum InSkillSlot, int NewAmount);// 0x1b9fd80
	void SyncPlaySoundTableID_S2C_Reliable(FName InSoundTableID, FName InSkinID, Vector_NetQuantize InOrigin);// 0x1b9fc60
	void SyncItemCharges_S2C_Reliable(PSInventoryManager* InInventoryManager, const FName[] InSlotIDs, const int[] InSkillLevels);// 0x1b9fb20
	void SyncItemCharge_S2C_Reliable(PSInventoryManager* InInventoryManager, FName InSlotID, int InAmount);// 0x1b9fa10
	void SyncImportedCoolTime_S2C_Reliable(PSCoolTimeManager* InCoolTimeManager, const CoolTimeSyncInfo[] InImportedData);// 0x1b9f920
	void SyncGimmickRespawningData_S2C_Reliable(const GimmickSyncInfo[] GimmickSyncData);// 0x1b9f880
	void SyncCoolTime_S2C_Reliable(PSCoolTimeManager* InCoolTimeManager, FName Key, float CoolDownInfo);// 0x1b9f770
	void SyncARAMSelectableHeroes_S2C_Reliable(const FName[] InAvailables);// 0x1b9f6d0
	void OnSpawnSkillCollider_S2AC_WorldPlaceableSkillColliderActor_Reliable(int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, Vector_NetQuantize InPreviousColliderLocation, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x1b9f390
	void OnSpawnSkillCollider_S2AC_WithPreviousColliderLocation_UnReliable(Actor* InProjectileOwner, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, Vector_NetQuantize InPreviousColliderLocation, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x1b9f0d0
	void OnSpawnSkillCollider_S2AC_WithPreviousColliderLocation_Reliable(Actor* InProjectileOwner, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, Vector_NetQuantize InPreviousColliderLocation, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x1b9ee10
	void OnSpawnSkillCollider_S2AC_UnReliable(Actor* InProjectileOwner, Actor* InCreateTarget, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x1b9eb50
	void OnSpawnSkillCollider_S2AC_Reliable(Actor* InProjectileOwner, Actor* InCreateTarget, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x1b9e890
	void OnSkillPreparationStateChanged_S2C_UnReliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlotData, enum InStatusType);// 0x1b9e740
	void OnSkillPreparationStateChanged_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlotData, enum InStatusType);// 0x1b9e5f0
	void OnMovementTokenChanged_S2C(OPCharacterMovementComponent* InMovementComponent, enum InTokenType, bool InServerState);// 0x1b11870
	void OnKeywordStateChanged_S2C_UnReliable(OPAbnormalStateComponent* InAbnormalHolder, int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x1b9e240
	void OnKeywordStateChanged_S2C_Reliable(OPAbnormalStateComponent* InAbnormalHolder, int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x1b9df80
	void OnColliderReplicateData_S2C_Reliable(int InColliderUniqueID, ItemModeDataSet InReplicatedData);// 0x1b9dc60
	void OnColliderDimensionChanged_S2C_UnReliable(int InColliderUniqueID, byte InNewDimension);// 0x1b9db90
	void OnColliderDimensionChanged_S2C_Reliable(int InColliderUniqueID, byte InNewDimension);// 0x1b9dac0
	void BroadcastStopSkillAnimation_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, FName InSkillGroupID);// 0x1b9cfe0

--------------------------------
Class: UnitStatComponent.ActorComponent.Object
	<enum,DefaultStatDataSet> DefaultStats;//[Offset: 0xb0, Size: 1]
	<enum,float> Calculated_Stats_PreviousFrame;//[Offset: 0x100, Size: 1]
	<enum,float> Calculated_Stats;//[Offset: 0x150, Size: 1]
	<enum,float> Calculated_Stats_Synced;//[Offset: 0x1a0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x290, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x298, Size: 1]
	MulticastInlineDelegateProperty OnPlayerStatChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnStatCalculated;//[Size: 1]
	void SyncStats(const OPSyncStatData[] Values);// 0x1b9f6d0
	static float SimulateFinalStat(OP_PlayerState* InPlayerState, enum InStatusType, ItemBase* InAdditionalItem);// 0x1bec4d0
	static float SimulateDefaultStatWithItem(OP_PlayerState* InPlayerState, enum InStatusType);// 0x1bec400
	static float SimulateDefaultStat(OP_PlayerState* InPlayerState, enum InStatusType, bool IgnoreBuff, bool InWithHandleStatsEffectedByStat);// 0x1bec2a0
	void SetStatModification(enum InStatusType, enum InValueType, FName InToken, float InValue);// 0x1bebf50
	void PrintCurrentStat();// 0x1bebdf0
	float GetPreviousFinalStat(enum InStatusType);// 0x1beb510
	float GetFinalStat(enum InStatusType);// 0x1beaec0
	float GetFinalAttackSpeed();// 0x1beae90
	float GetDefaultStat(enum InStatusType, int InOwnerLevel);// 0x1bead90
	float GetCoolTimeByCDR(float InCoolTime);// 0x1beacf0
	<enum,float> GetCalculatedStats_ServerSide();// 0x1beacc0
	<enum,float> GetCalculatedStats_ClientSide();// 0x1beac90
	float GetAttackSpeed();// 0x1beac60

--------------------------------
Class: OPSyncStatData
	enum StatusType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ItemBase.Object
	FName TableName;//[Offset: 0x28, Size: 1]
	FName TableGroupID;//[Offset: 0x30, Size: 1]
	FName SkillDamageType;//[Offset: 0x38, Size: 1]
	FText PrintName;//[Offset: 0x40, Size: 1]
	FText Description;//[Offset: 0x58, Size: 1]
	FText ItemSaying;//[Offset: 0x70, Size: 1]
	byte MaxItemAmount;//[Offset: 0x88, Size: 1]
	Texture2D* Icon;//[Offset: 0x90, Size: 1]
	<enum,ItemStatInfo> ItemStats;//[Offset: 0x98, Size: 1]
	enum ENum_SkillActivationType;//[Offset: 0xe8, Size: 1]
	bool HideFromItemShop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	enum GetItemType();// 0xd9d3b0
	float GetItemSimulatedCoolTime(OP_PlayerState* Owner, int LevelOverride);// 0x1a82ff0
	float GetItemCoolTime(OP_PlayerState* Owner);// 0x1a82f50
	Texture2D* GetIcon();// 0x1a82f20

--------------------------------
Class: ItemStatInfo
	float Amount;//[Offset: 0x0, Size: 1]
	enum UnitType;//[Offset: 0x4, Size: 1]
	FName UniqueId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: DefaultStatDataSet
	float FirstValue;//[Offset: 0x0, Size: 1]
	float AddPerLevel;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPSkillComponent.ActorComponent.Object
	OPSkillComponent* WorldSkillComponent;//[Offset: 0x178, Size: 1]
	bool bIsGlobalSkillComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	enum bIsInBattleState;//[Offset: 0x1f9, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x200, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x208, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x210, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0x218, Size: 1]
	OPCharacterMovementComponent* CharacterMovementComponent;//[Offset: 0x220, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x228, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x230, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x238, Size: 1]
	LocationSnapshotComponent* LocationSnapshotComponent;//[Offset: 0x240, Size: 1]
	SkeletalMeshComponent*[] BoneTransformCalculationMeshes;//[Offset: 0x248, Size: 1]
	OPSkillDecalActor* PreviewSkillDecalActor;//[Offset: 0x258, Size: 1]
	OPSkillDecalActor* PreviewSkillMaxRangeDecalActor;//[Offset: 0x260, Size: 1]
	FName AnimationState;//[Offset: 0x3a0, Size: 1]
	AnimMontage*[] IgnoreBlendOutSkillFinishedUnNormally;//[Offset: 0x510, Size: 1]
	OPSkillActionKeywordState*[] KeywordStates;//[Offset: 0x640, Size: 1]
	MulticastInlineDelegateProperty OnSkillInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillSlotChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDisabledSkillSlotChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBattleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerTryCastSkill;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillMontagePlayStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPreparationStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPreparationTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillColliderCreated;//[Size: 1]
	MulticastInlineDelegateProperty OnPreApplyBuff;//[Size: 1]
	MulticastInlineDelegateProperty OnActionKeywordStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnActionKeywordFinished;//[Size: 1]
	int DisabledSkillSlot;//[Offset: 0x7e8, Size: 1]
	int DisabledSkillSlotNoneNoti;//[Offset: 0x7ec, Size: 1]
	enum TryGetSkillStateBySkillGroupID(FName InGroupID, out bool OutFound);// 0x1b95130
	enum TryGetSkillSlotBySkillTableID(FName InSkillTableID);// 0x1b95090
	int TryGetOwnerLevelRealTime();// 0x1b95060
	int TryGetOwnerLevelAtMoment();// 0x1b95030
	Vector TryGetAimingDirection();// 0x1b94ff0
	void SyncEffectActorAttach_S2C(FName InEffectActorName, bool Inactive);// 0x1b94f20
	void SyncDirectionMontage_S2C(AnimMontage* InMontage);// 0x1b94e90
	void SyncBlinkEvent_S2C(Vector InLocation, bool InEnableInertia);// 0x1b94db0
	void SyncActionLikeKeywordOnPendingKillGlobally_S2C_UnReliable(Vector_NetQuantize InOwnerLastPosition, Actor* InCausedBy, int InEffectKeywordTableUniqueIndex, SlotData InCausedSlotFrom);// 0x1b94c10
	void SyncActionLikeKeywordOnPendingKillGlobally_S2C_Reliable(Vector_NetQuantize InOwnerLastPosition, Actor* InCausedBy, int InEffectKeywordTableUniqueIndex, SlotData InCausedSlotFrom);// 0x1b94a70
	void SetSkillLockToken(enum InSkillSlot, FName InToken, bool InAdd);// 0x1b94950
	void SetSkillEffectExecutionPreventationToken(FName InSkillEffectGroupSTR, FName InToken, bool InAdd);// 0x1b94840
	void SendRangeBaseAttackHitResult_C2S(float InTimeChecksum, SlotData InSlot, int InColliderTableUniqueIndex, int InSkillStateUniqueID, Actor* InTarget, Vector_NetQuantize InHitLocation, Vector_NetQuantizeNormal InHitNormal, byte InHitSurface);// 0x1b94580
	void SendNextSkillCircleActivationBar_S2C(float InDuration, FName InCausedSkillID, FName InNextSkillID);// 0x1b94470
	void SendCastCancelRequest_C2S(const SlotData[] InSkillID);// 0x1b943d0
	void ResetLearnedSkills();// 0x1b943b0
	static void RequestReplicateActorNow(Actor* InActor);// 0x1b94330
	void RequestPlaySoundTable_S2C_Reliable(FName InSoundTableID);// 0x1b942a0
	void RequestForceActivation_S2C(SlotData InSlotData, enum InCastType);// 0x1b94180
	void RequestCancelAttackFunction_S2C_Reliable(int InSkillTableUniqueIndex, enum InPreparationStateFinishedReason);// 0x1b940b0
	void RequestActivateSkillIndex_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x1b93dd0
	void RequestActivateSkill_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x1b93f40
	void PreGlobalAbnormalStateChanged(OPAbnormalStateComponent* InCausedBy, bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, Actor* InAbnormalCausedBy);// 0x1b93470
	void PlaySkillNetworkError_S2C();// 0x1b93450
	void OnSpawnSkillColliderFromSkillComponent_WithLocation_S2AC_Reliable(Actor* InCreateTarget, int InColliderTableUniqueIndex, Vector InSpawnLocation, SpawnSkillColliderClientSyncData InSpawnSyncData, SkillColliderClientSyncData InSyncData);// 0x1b93190
	void OnSpawnSkillColliderFromSkillComponent_S2AC_Reliable(Actor* InCreateTarget, int InColliderTableUniqueIndex, SpawnSkillColliderClientSyncData InSpawnSyncData, SkillColliderClientSyncData InSyncData);// 0x1b92f20
	void OnSkillActionKeywordStateBroadcastArgument_S2C(FName InActionKeyword, const BroadcastedActionKeywordStateArgument InBroadcastingArgument);// 0x1b92e50
	void OnServerSideCastSkillFailed_S2C_Reliable(SlotData InSlotData, const SkillCanUseResult InResult);// 0x1b92cc0
	void OnReplicateSkillActionKeywordStateDestroyed_S2C(FName InActionKeyword);// 0x1b92ab0
	void OnReplicateSkillActionKeywordState_S2C(FName InActionKeyword, const SkillColliderClientSyncData InSyncData, const FName[] InArguments);// 0x1b92b40
	void OnReplicateSkillActionKeywordNotifyState_S2C(FName InActionKeyword, const SkillColliderClientSyncData InSyncData, const FName[] InArguments, float InLifespan);// 0x1b928f0
	void OnRepAnimationStateChanged();// 0x1b92890
	void OnRep_DisabledSkillSlotNoneNoti();// 0x1b928d0
	void OnRep_DisabledSkillSlot();// 0x1b928d0
	void OnRep_BattleState();// 0x1b928b0
	void OnMontageEnded(AnimMontage* InMontage, bool InInterrupted);// 0x1b927c0
	void OnGlobalUnitCreated(UnitBase* InUnit);// 0x1b92730
	void OnGlobalSkillStateChanged(OPSkillComponent* InSkillComponent, SlotData InChangedSlot, enum InSkillState);// 0x1b925f0
	void OnGlobalCoolTimeChanged(PSCoolTimeManager* InCoolTimeManager, FName InCoolTimeName, float InPreviousCoolTime, float InNewCoolTime);// 0x1b92490
	void OnGlobalColliderDestroyed(OPSkillColliderActor* InDestroyedActor);// 0x1b92400
	void OnGlobalCharacterBattleStateChanged(OP_Character* InCharacterFrom, enum InNewBattleState);// 0x1b92330
	void OnGlobalAbnormalStateChanged(OPAbnormalStateComponent* InCausedBy, bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InAbnormalCausedBy);// 0x1b92010
	void OnEvent_SkillInventoryChanged();// 0x1b91ff0
	void OnEvent_PreDimensionChanged();// 0x1b91fd0
	void OnEvent_OwnerDeathEvent(Actor* InLastAffectedAttacker);// 0x1261ce0
	void OnEvent_OnOwnerOPCharacterExposedStateChanged();// 0x1b91fb0
	void OnEvent_GameTimeChanged(int InPreviousGameTimeLapsedSeconds, int InGameTimeLapsedSeconds);// 0x1b91ee0
	void OnEvent_DimensionChanged();// 0x1b91ec0
	void OnEvent_CoolTimeSet_Server(FName InCoolTimeName, float InPreviousCoolTime, float InNewCoolTime);// 0x1b91d20
	void OnEvent_CoolTimerReady_Server(FName InCoolTimeName);// 0x1b91e30
	void OnEvent_AbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b91a60
	void OnCharacterRespawned();// 0x1b91770
	void OnAbnormalStateChanged_UnitOnly(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b914b0
	void NotifySkillPreparationState_C2S(SlotData InSlotData, enum InStatusType);// 0x1b91390
	void NotifyChargeOverTime_S2C(SlotData InSlotData);// 0x1b912c0
	static bool IsSpellSlot(enum InSlotType);// 0x1b90ff0
	bool IsSkillBlocked(enum InSkillSlot, out bool OutNotiNeeded);// 0x1b90f10
	static bool IsInventorySlot(enum InSlotType);// 0x1b90e90
	static bool IsCoolTimeIgnoreSlot(enum InSlotType);// 0x1b90e10
	bool IsAnySkillInCastAction(out SlotData OutSlotData);// 0x1b90d50
	static bool IsActiveInventorySlot(enum InSlotType);// 0x1b90cd0
	void HandleStiffBroadcast_S2C_UnReliable(Actor* InVictim, float InCasterStiff, float InVictimStiff);// 0x1b90bc0
	void HandleActionLikeEffectKeyword_S2C_Unreliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x1b90a80
	void HandleActionLikeEffectKeyword_S2C_Reliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x1b90940
	void HandleActionLikeEffectKeyword_S2C_Owner_Unreliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x1b90800
	void HandleActionLikeEffectKeyword_S2C_Owner_Reliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x1b906c0
	static Actor* GetWorldSkillComponentOwnerActor(Object* InWorldContextObject);// 0x1b90630
	static OPSkillComponent* GetWorldSkillComponent(Object* InWorldContextObject);// 0x1b905a0
	static Transform GetSocketLocationAtSequenceTime(AnimSequence* InSequence, FName InSocketName, float InTime, out Transform OutSocketRelativeTransform);// 0x1b903c0
	static FName GetSkillTableIDFromSlotData(Object* InWorldContextObject, SlotData InSlotData);// 0x1b902b0
	FName GetSkillTableIDBySkillSlot(enum InSkillSlot);// 0x1b90210
	static FName GetSkillTableGroupIDBySkillTableIndex(Object* InWorldContextObject, FName InSkillTableIndex);// 0x1b90140
	static enum GetSkillSlotFromSlotData(out const SlotData InSlotData);// 0x1b90090
	int GetSkillLevel(enum InSlot);// 0x1b90000
	static float GetSkillActionDuration(Object* InWorldContextObject, FName InSkillTableID, FName InSkinID, float InSkillAcceleration);// 0x1b8fb20
	OPSkillColliderActor*[] GetSCAByClass(class OPSkillColliderActor SCAClass);// 0x1b8fa40
	static enum GetLocalInBattleState(Object* InWorldContextObject);// 0x1b8f3c0
	static FName GetItemTableIDFromSlotData(Object* InWorldContextObject, SlotData InSlotData);// 0x1b8f2b0
	bool GetIsControlledByBot();// 0x1b8f280
	static int GetInventorySlotIndex(enum InSlotType);// 0x1b8f200
	static enum GetInventorySlotBySlotNumber(int InSlotNumberStartingOne);// 0x1b8f170
	static int GetInventoryActiveSlotIndex(enum InSlotType);// 0x1b8f0f0
	static enum GetInventoryActiveSlotBySlotNumber(int InSlotNumberStartingOne);// 0x1b8f060
	static FName GetHoldingValue(Object* InWorldContextObject, FName InSkillEffectID);// 0x1b8ef90
	FName GetEffectStartTimeValue(FName InSkillEffectTableID);// 0x1b8ef00
	static Transform GetBoneLocationAtSequenceTime(SkeletalMeshComponent* InSimulationMesh, AnimSequence* InSequence, FName InBoneName, float InTime, out Transform[] OutStackArray);// 0x1b8ed10
	void FireChargingSkill_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x1b8eac0
	bool ContainsSkillEffect(FName InSkillEffectID);// 0x1b8e880
	void CastSkill_BPHelper(enum InSkillSlotFrom, Actor* InMainTarget);// 0x1b8e7b0
	void BroadcastRangeBaseAttackHitResult_S2C(int InColliderTableUniqueIndex, SlotData InSlotFrom, Vector_NetQuantize InHitLocation, Vector_NetQuantizeNormal InHitNormal, byte InHitSurface);// 0x1b8e5c0
	void ApplyClientSideSkillEffect_S2C(FName InSkillEffectID, SlotData InSlotFrom, bool Inactive);// 0x1b8e470
	void AddBoneTransformCalculationMesh(SkeletalMeshComponent* InSkeletalMesh);// 0x1b8e3e0

--------------------------------
Class: OPCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ServerMovePacketDelay;//[Offset: 0xb08, Size: 1]
	MulticastInlineDelegateProperty OnMovementTokenChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementModeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGroundSurfaceTypeChanged;//[Size: 1]
	CapsuleComponent* ColliderStuckFixTargetCapsuleComponent;//[Offset: 0xbc0, Size: 1]
	OPSkillColliderActor*[] CollidersNeedToFixStuck;//[Offset: 0xbc8, Size: 1]
	UnitBase*[] UnitsNeedFixStuck;//[Offset: 0xbd8, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0xbe8, Size: 1]
	OPOptimizationComponent* OptimizationComponent;//[Offset: 0xbf0, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0xbf8, Size: 1]
	UnitBase* UnitBase;//[Offset: 0xc00, Size: 1]
	void SyncLockMoveDelay_S2C(float InTime);// 0x1aaaab0
	void SetServerClientSyncedMovementData_ServerSide(FName InToken, enum InDataType, float InNewValue, bool InForceSync);// 0x1aaa890
	void SetServerClientSyncedMovementData_Override(FName InToken, enum InDataType, float InNewValue);// 0x1aaa770
	void SetIgnoreMovementCorrectionToken(bool InAdd, FName InToken);// 0x1aaa6a0
	void SetDash(bool Inactive, Vector InSpeed, float InMoveDistance);// 0x1aaa570
	void SendServerClientSyncedMovementData_S2C(enum InDataType, int InIndex, float InMovementSpeed);// 0x1aaa460
	void SendAckServerClientSyncedMovementData_S2C(enum InDataType, int InAckIndex);// 0x1aaa350
	void RemoveServerClientSyncedMovementData_ServerSide(FName InToken, enum InDataType);// 0x1aa9030
	void RemoveServerClientSyncedMovementData_Override(FName InToken, enum InDataType);// 0x1aa8f60
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x1aa8ca0
	void OnHitPlayerBaseCapsuleComponent(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1aa87f0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1aa84c0
	bool IsMovingBySkill();// 0x1aa81f0
	Vector GetCurrentUserMovementInput();// 0x1aa7720
	bool CanCharacterMove();// 0x1aa7630
	bool CanCharacterJump();// 0x1aa7600
	void BroadcastMovementTokenChanged_S2C(enum InTokenType, bool InServerState);// 0x1aa6740
	void BroadcastBlackholeState_S2C(int InUniqueID, Vector InLocation, float InPower, float InMaxScaleDistance);// 0x1aa62f0
	void BroadcastBlackholeRemoval_S2C(int InUniqueID);// 0x1aa6260
	void AddPinPointToken(bool InAdd, FName InToken);// 0x1aa6190

--------------------------------
Class: OPSkillColliderActor.Actor.Object
	PrimitiveComponent*[] CustomColliderShapes;//[Offset: 0x220, Size: 1]
	Actor*[] CustomOverlapCounter;//[Offset: 0x230, Size: 1]
	OPSkillColliderActor* MyNextCollider;//[Offset: 0x3d0, Size: 1]
	OPSkillColliderActor* MyPreviousCollider;//[Offset: 0x3d8, Size: 1]
	OPGimmickPointActor* RelatedGimmickPointActor;//[Offset: 0x3e0, Size: 1]
	OPColliderSkillComponent* SkillComponent;//[Offset: 0x3e8, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x3f0, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x3f8, Size: 1]
	UnitVisionComponent* OwnerUnitVisionComponent;//[Offset: 0x400, Size: 1]
	OPLoadingManagerComponent* LoadingManagerComponent;//[Offset: 0x408, Size: 1]
	Actor* ColliderAttachTarget;//[Offset: 0x410, Size: 1]
	Actor* SyncTarget;//[Offset: 0x418, Size: 1]
	Actor* SelectedTarget;//[Offset: 0x420, Size: 1]
	Actor* CachedTargetFromSkill;//[Offset: 0x428, Size: 1]
	FName ColliderTableID;//[Offset: 0x430, Size: 1]
	FName ColliderSkinID;//[Offset: 0x438, Size: 1]
	byte Dimension;//[Offset: 0x440, Size: 1]
	int ColliderID;//[Offset: 0x444, Size: 1]
	byte SkillColliderTeam;//[Offset: 0x448, Size: 1]
	enum ColliderMovementTickPrecisionLevel;//[Offset: 0x4c0, Size: 1]
	<Actor*,int> HitHistory;//[Offset: 0x518, Size: 1]
	<Actor*,int> HitCheckPassHistory;//[Offset: 0x568, Size: 1]
	OP_PlayerController*[] RejoinSyncedTargets;//[Offset: 0x638, Size: 1]
	OPSkillDecalActor* AttachedColliderDecalActor;//[Offset: 0x668, Size: 1]
	Actor* SkillColliderOwner;//[Offset: 0x670, Size: 1]
	Actor* SkillColliderHolder;//[Offset: 0x678, Size: 1]
	UnitBase* SkillColliderOwnerUnit;//[Offset: 0x680, Size: 1]
	OPSkillComponent* SkillColliderCreator;//[Offset: 0x688, Size: 1]
	SkillColliderMovement* ColliderMovementComponent;//[Offset: 0x698, Size: 1]
	Actor* FollowingTarget;//[Offset: 0x6a0, Size: 1]
	Vector LastFollowingTargetLocation;//[Offset: 0x6a8, Size: 1]
	Actor*[] OverlapAffectedActorHistory;//[Offset: 0x6b8, Size: 1]
	Actor* CreateTarget;//[Offset: 0x6c8, Size: 1]
	Actor* NearestOverlapAffectableActorOnBeginPlay;//[Offset: 0x6e0, Size: 1]
	Actor*[] OverlappedActors;//[Offset: 0x6e8, Size: 1]
	Actor*[] OverlapAffectedActors;//[Offset: 0x6f8, Size: 1]
	OPSkillColliderActor*[] OverlappedColliders;//[Offset: 0x708, Size: 1]
	SceneComponent* SceneRootComponent;//[Offset: 0x738, Size: 1]
	SplineComponent* SplineComponentForVine;//[Offset: 0x740, Size: 1]
	BoxComponent* BoxCollision;//[Offset: 0x748, Size: 1]
	SphereComponent* SphereCollision;//[Offset: 0x750, Size: 1]
	CapsuleComponent* CapsuleCollision;//[Offset: 0x758, Size: 1]
	ProceduralMeshComponent* ProceduralMeshComponent;//[Offset: 0x760, Size: 1]
	FName BounceSound3D;//[Offset: 0x770, Size: 1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool bIgnorePreCalcDeterministicPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	float HybridHoming_DeterminismGoalRadius;//[Offset: 0x77c, Size: 1]
	float HybridHoming_DeterminismSampleDistance;//[Offset: 0x780, Size: 1]
	CurveFloat* HybridHoming_SpeedCurve;//[Offset: 0x788, Size: 1]
	CurveFloat* HybridHoming_WeightCurve;//[Offset: 0x790, Size: 1]
	CurveFloat* HybridHoming_NoiseStrengthCurve;//[Offset: 0x798, Size: 1]
	float HybridHoming_DefaultSpeed;//[Offset: 0x7a0, Size: 1]
	Vector HybridHoming_CustomForwardVector;//[Offset: 0x7a4, Size: 1]
	FName HybridHoming_TargetLostTag;//[Offset: 0x7c8, Size: 1]
	enum HybridHoming_TargetLostDestroyReason;//[Offset: 0x7d0, Size: 1]
	bool bIsTutorialPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 1]
	FName PortalOpenKeyword;//[Offset: 0x80c, Size: 1]
	FName PortalOpenKeyvalue;//[Offset: 0x814, Size: 1]
	FName PortalRefreshKeyword1;//[Offset: 0x81c, Size: 1]
	FName PortalRefreshKeyvalue1;//[Offset: 0x824, Size: 1]
	FName PortalRefreshKeyword2;//[Offset: 0x82c, Size: 1]
	FName PortalRefreshKeyvalue2;//[Offset: 0x834, Size: 1]
	void UpdateOverlaps_BP();// 0x1b892c0
	float TryGetLongest2DLengthFromTableShape(out bool OutIsError);// 0x1b89220
	HitResult SimulateHitTestAtLocation(Vector InLocation, out bool OutSuccess);// 0x1b890c0
	void SetColliderDeactivated(bool InIsDeactivated);// 0x1b89030
	Vector ProjectLocationToBaseLine(Actor* InActor);// 0x1b88f80
	void PostInitHybridHoming(bool bSuccess);// 0x1b88ef0
	void PostHandleDestroy_BP();// 0x1b88ed0
	float OverrideSpawnSoundStartPoint();// 0x1b88e90
	void OnUpdateHybridHomingDetrministicPathTravel(float PathLength, float DistTraveled);// 0x1b88dc0
	void OnTeamChanged_BP(byte InNewTeam);// 0x1b88d40
	void OnSyncedTargetRespawn();// 0x1b88d20
	void OnSyncedTargetDestroyed(Actor* Actor, byte EndPlayReason);// 0x1b88c50
	void OnSyncedTargetDeath(Actor* InLastAffectedAttacker);// 0x1b88bc0
	void OnRep_SkillColliderTeam();// 0x1b88ba0
	void OnRep_Dimension();// 0x1b88b80
	void OnRemoveOverlapAffectedActor(Actor* InActor);// 0x1b88af0
	void OnReceiveDestroySyncronizationFromServer_BP(out const enum[] InDestroyReasons);// 0x1b88a40
	void OnRangeBaseAttackNotify_BP(Actor* InShooter, FName InShootSocket, Vector InHitLocation, Vector InHitImpactNormal, byte InImpactSurface);// 0x1b88890
	void OnOwnerExposedStateChanged();// 0x1b88870
	void OnOwnerDimensionChanged();// 0x1b88850
	void OnOwnerDestoyed(Actor* InDestroyedActor);// 0x1b887c0
	void OnHolderDimensionChanged();// 0x1b887a0
	void OnHitPlaceableCollider(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1b885c0
	void OnGetHybridHomingInfo(out CurveFloat* OutSpeedCurve, out CurveFloat* OutWeightCurve, out CurveFloat* OutNoiseStrengthCurve, out float OutDefaultSpeed, out SceneComponent* OutAttachTo, out FName OutAttachSocketName, out float OutAttachDuration, out Vector OutCustomForwardVector, out Vector[] OutPreCalcDeterministicPath);// 0x1b88270
	void OnEndOverlapPlaceableCollider(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b88120
	void OnElementAttachedToDirectionComponent(Object* InObject);// 0x1b88090
	void OnColliderOwnerDeath(Actor* InLastAffectedAttacker);// 0x1b88000
	void OnColliderHitTarget_BP(Actor* InHitTarget, Vector InHitLocation);// 0x1b87f20
	void OnBeingRemovedAndSpawningNextCollider_BPNE(Actor* InColliderOwner, OPSkillColliderActor* InNextCollider);// 0x1b87e50
	void OnBeginPlayFromPreviousCollider_BPNE(Actor* InColliderOwner, OPSkillColliderActor* InPreviousCollider);// 0x1b87d80
	void OnBeginOverlapPlaceableCollider(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b87b60
	void OnApplyMovement_BP();// 0x1b35f90
	void OnAddOverlapAffectedActor(Actor* InActor);// 0x1b87ad0
	static bool IsProjectileType(enum InColliderType);// 0x1b87a50
	bool IsLoadingOnlyObject();// 0x1b87a20
	void IsHybridHomingLostTarget(out bool bTargetLost, out bool bEverReceivedDestroyReasons, out enum[] DestroyReasons);// 0x1b878d0
	static bool IsGroundType(enum InColliderType);// 0x1b87850
	bool IsAffectedActor(Actor* InTarget);// 0x1b877b0
	float GetWorldShapeZMinus();// 0x1b875b0
	float GetWorldHitShapeZm();// 0x1b87580
	float GetWorldHitShapeZ();// 0x1b87550
	float GetWorldHitShapeY();// 0x1b87520
	float GetWorldHitShapeX();// 0x1b874f0
	static bool GetWorld_ShapeFromTable(Object* InWorldContextObject, out Vector4 World_Shape, FName InSkillColliderTableID);// 0x1b87690
	bool GetWorld_Shape(out Vector4 World_Shape);// 0x1b875e0
	Vector GetTargetPoint();// 0x1b874b0
	FName GetSpawnSocketName();// 0x1b87470
	int GetSkillLevel();// 0x1b87440
	static bool GetSkillColliderShapeFromTable(Object* InWorldContextObject, out enum SkillColliderShape, FName InSkillColliderTableID);// 0x1b87320
	PlayerBase* GetSkillColliderOwner_PlayerBase(out enum Branches);// 0x1b87280
	Actor* GetSkillColliderOwner();// 0x1b87260
	float GetShapeZMinus();// 0x1b87230
	float GetRightSize();// 0x1b87200
	Actor*[] GetOverlapAffectedActors();// 0x1b87180
	int GetNumOverlapAffectedActors();// 0x1b87150
	Vector GetLocationDataFromSyncData();// 0x1b87110
	float GetLengthBetweenBaseAndTarget();// 0x1b870e0
	void GetLastDestroyReasons(out enum[] OutReasons);// 0x1b87030
	Actor* GetHomingTarget();// 0x1b87000
	float GetHitShapeZm();// 0x1b86fd0
	float GetHitShapeZ();// 0x1b86fa0
	float GetHitShapeY();// 0x1b86f70
	float GetHitShapeX();// 0x1b86f40
	enum GetHideDirectionInStealth();// 0x1b86f10
	static FName GetFirstDestroyType(Object* InWorldContextObject, FName InSkillColliderTableID, enum InDestroyType);// 0x1b86e00
	float GetDuration();// 0x1b86dd0
	float GetDistanceFromBaseLine(Actor* InActor);// 0x1b86d30
	Vector GetDirectionDataFromSyncData();// 0x1b86cf0
	bool GetDeterministicPathPoints(out Vector[] OutPathPoints);// 0x1b86c30
	enum GetDestroyTypeByConditionIndex(enum InConditionIndex);// 0x1b86ba0
	enum GetColliderShape();// 0x1b86b70
	bool GetColliderMoveValue(out Vector2D ColliderMoveValue);// 0x1b86ad0
	FName GetColliderDestroyTag();// 0x1b86a90
	Vector GetCenterPoint();// 0x1b86a50
	static bool GetBehit_ShapeFromTable(Object* InWorldContextObject, out Vector4 Behit_Shape, FName InSkillColliderTableID);// 0x1b86930
	bool GetBehit_Shape(out Vector4 Behit_Shape);// 0x1b86880
	Vector GetBasePoint();// 0x1b86840
	enum GetBaseAttackDirection();// 0x1b86810
	float GetAngleFromBaseLine(Actor* InActor);// 0x1b86770
	Vector GetAimDirectionFromStraightMovement();// 0x1b86730
	void DestroyTicker();// 0x1b86710
	void CreateSectorProceduralMesh(float InRadius, float InHeighZUp, float InHeightZMinus, float InAngle360, int InDensity);// 0x1b86550
	void CreateCylinderProceduralMesh(float InRadius, float InHeighZUp, float InHeightZMinus, int InDensity);// 0x1b863e0
	void CreateCapsuleCollisionForDome(float InRadius, float CenterCylinderZUp, float CenterCylinderZMinus);// 0x1b862c0
	void CreateBoxVineCollision(float InWidth, float InDepth, float InHeightZUp, float InHeightZMinus, float InMaxSlopeAngle);// 0x1b86110
	void CreateBoxCollision(float InWidth, float InDepth, float InHeightZUp, float InHeightZMinus);// 0x1b85fb0
	bool ContainsLastDestroyReason(enum InReason);// 0x1b85f20
	bool ContainsBlocking(enum InBlockType);// 0x1b85e90
	void ColliderDestroyed();// 0x1b85e70
	void ColliderBeginPlay();// 0x1b85e50
	static float CalculateMaximumReachableDistanceForStraight(Object* InWorldContextObject, Vector InAimDirection, FName InSkillColliderTableID);// 0x1b85d30
	void AddCustomColliderShape(PrimitiveComponent* InShapeComponent);// 0x1b85ca0

--------------------------------
Class: OPGimmickPointActor.Actor.Object
	MulticastInlineDelegateProperty OnGimmickStateChanged;//[Size: 1]
	SceneComponent* SceneRootComponent;//[Offset: 0x230, Size: 1]
	OPColliderSkillComponent* GimmickSkillComponent;//[Offset: 0x238, Size: 1]
	OPDirectionComponent* GimmickDirectionComponent;//[Offset: 0x240, Size: 1]
	FName GimmickTableID;//[Offset: 0x298, Size: 1]
	FName GimmickPointName;//[Offset: 0x2a0, Size: 1]
	OPSkillColliderActor* CurrentGimmickCollider;//[Offset: 0x2b0, Size: 1]
	void SyncGimmickState_S2AC(bool InHasGimmick, float InTimeSinceRespawnStarted, float InRespawnRequiredTime);// 0x1b26800
	void OnWorldAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b25fa0
	void OnCurrentGimmickDestroyed(Actor* InDestroyedActor);// 0x1b25d80
	bool HasSpawnedGimmickCollider();// 0x1b257b0
	bool GetRespawnInfo(out float OutRespawnProgress, out float OutRemainTime, out float OutRespawnDelay);// 0x1b25670

--------------------------------
Class: OPColliderSkillComponent.OPSkillComponent.ActorComponent.Object
	OPAbnormalStateComponent* ColliderAbnormalStateComponent;//[Offset: 0x928, Size: 1]
	Actor* SkillColliderOwner;//[Offset: 0x930, Size: 1]
	void OnColliderAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1aed0a0

--------------------------------
Class: OPDirectionComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnSwitchingToInvisibleMaterial;//[Size: 1]
	MulticastInlineDelegateProperty PostSwitchingToInvisibleMaterial;//[Size: 1]
	MulticastInlineDelegateProperty OnElementAttached;//[Size: 1]
	Point_CameraPivotActor* CameraPivotActor;//[Offset: 0xe8, Size: 1]
	class Point_CameraPivotActor* CameraPivotActorClass;//[Offset: 0xf0, Size: 1]
	bool bLevelSequenceInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	LevelSequenceActor* LevelSequenceActorPlaying;//[Offset: 0x100, Size: 1]
	LevelSequencePlayer* LevelSequencePlaying;//[Offset: 0x108, Size: 1]
	UserWidget* LevelSequenceOverlayWidget;//[Offset: 0x110, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x358, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x360, Size: 1]
	OPSkillComponent* OwnerSkillComponent;//[Offset: 0x368, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x370, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x378, Size: 1]
	OPAbnormalStateComponent* OwnerAbnormalStateComponent;//[Offset: 0x380, Size: 1]
	OPCharacterMovementComponent* OwnerCharacterMovementComponent;//[Offset: 0x388, Size: 1]
	OPFXEventReceiver*[] AttachedOPFXEventReceivers;//[Offset: 0x390, Size: 1]
	PrimitiveComponent*[] OutlineableComponents;//[Offset: 0x3a0, Size: 1]
	InvisableComponentsInfo[] InvisableComponents;//[Offset: 0x3b0, Size: 1]
	PrimitiveComponent*[] RenderBoundsOverrideableComponents;//[Offset: 0x3c0, Size: 1]
	MaterialInterface* InvisibleMaterialEffect;//[Offset: 0x430, Size: 1]
	<FName,MaterialInterface*> InvisibleMaterialEffectOverride;//[Offset: 0x438, Size: 1]
	Material* DeathMaterialEffect;//[Offset: 0x488, Size: 1]
	bool bDrawSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bDrawAimOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	AudioComponent* FlyingSoundManagerComponent;//[Offset: 0x5d8, Size: 1]
	AudioComponent* SystemVoiceComponent;//[Offset: 0x7e0, Size: 1]
	void UnregisterHeroMotionPlaybleMesh(SkeletalMeshComponent* InSkeletalMesh);// 0x1b0e1a0
	void StopLevelSequenceInstantly(bool InIsInterrupt);// 0x1b0e110
	void StopEffortSound();// 0x1b0e0f0
	void SpawnCameraPivotActorClass();// 0x1b0e0d0
	void ShowCastBar_S2C(enum InCastBarType, enum InCastBarCategory, float InDuration, float InOverchargeTime, FString InStringKey);// 0x1b0df10
	void SetStealthHidingStateIgnorable(Object* InTarget, bool Inset);// 0x1b0de40
	void SetSoundOrigin(Vector InRelativeLocation);// 0x1b0ddb0
	void SetRenderBoundsOverrideToken(bool IsSet, FName InTokenName, float InMaxValue);// 0x1b0dc90
	void SetParticlePauseToken(bool Inset, FName InTokenName);// 0x1b0dbc0
	void SetOutlineToken(bool IsSet, FName InOutlineTokenName);// 0x1b0daf0
	void SetInvisToken(bool Inset, FName InTokenName);// 0x1b0d8c0
	void SetInvisableComponentSuppressedDefaultMaterial(PrimitiveComponent* InComponent, int InMaterialArrayIndex, MaterialInterface* InMaterial, bool InRecalculateCurrentState);// 0x1b0d990
	void SetElementHiddenFlag(FName InKeyName, bool Inset);// 0x1b0d7f0
	void SetAudioComponentCenterRelativeLocation(Vector InAudioComponentRelativeLocation);// 0x1b0d760
	void RemoveSoundAttached(FName InKeyName);// 0x1b0d6d0
	void RemoveScreenParticleAttached(FName Slot);// 0x1b0d640
	void RemoveParticleAttached(FName InSlot);// 0x1b0d5b0
	void RemoveOutlineableComponent(PrimitiveComponent* InComponent);// 0x1b0d520
	void RemoveInvisableComponent(PrimitiveComponent* InComponent);// 0x1b0d490
	void RemoveElementAttached(FName InSlot);// 0x1b0d400
	void RemoveCastBar_S2C(enum InCastBarType, enum InCastBarCategory);// 0x1b0d330
	void RegisterHeroMotionPlayableMesh(SkeletalMeshComponent* InSkeletalMesh, FName InCharacterID, FName InSkinID);// 0x1b0d220
	void RecheckStencilState_Internal();// 0x1b0d200
	void PlaySystemVoiceAnnounceType_S2C(enum InShowType, OPSystemVoiceAnnounceArgument InArgument);// 0x1b0ccc0
	void PlaySystemVoiceAnnounce_S2C(FName InSystemVoiceAnnounceTableID, const OPSystemVoiceAnnounceArgument InArgument);// 0x1b0d0d0
	void PlaySystemVoiceAnnounce_S2AC(FName InSystemVoiceAnnounceTableID, const OPSystemVoiceAnnounceArgument InArgument);// 0x1b0cfa0
	void PlaySystemVoiceAnnounce_BP(enum InShowType);// 0x1b0cf20
	AudioComponent* PlaySoundAtLocation(SoundBase* InSound, OPAddSoundArgument InArgument, FName InKeyName, Vector InLocation, float InPitchOverride, float InVolumeOverride, bool InIsLocal, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, SoundClass* InSoundClassOverride, Actor* InCausedBy, enum InPlaySoundRule);// 0x1b0c8f0
	void PlayLevelSequenceCameraByFocusActor(LevelSequence* InLevelSequence, Actor* InActor);// 0x1b0c820
	void PlayLevelSequenceCamera(LevelSequence* InLevelSequence, class UserWidget InOverlayWidget);// 0x1b0c750
	static void PlayGlobalGameEventDirection(Object* InWorldContextObject, OPDirectionComponent* InDirectionComponent, FName InGlobalEventDirectionTableIndex, DirectionEffectArgument InDirectionEffectArgument);// 0x1b0c5d0
	void PlayDirectionEffect_S2C(FName InDirectionTableIndex, float InFloatValue);// 0x1b0c4f0
	void OnSkillPreparationStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InStatusType);// 0x1b0c3b0
	void OnOwnerRespawnEvent();// 0x1b0c390
	void OnOwnerDimensionChanged();// 0x1b0c370
	void OnOwnerDeathEvent(Actor* InLastAffectedAttacker);// 0x1b0c2e0
	void OnOwnerAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b0c010
	void OnLevelSequencePlayByFocusActor();// 0x1b0bff0
	void OnLevelSequenceFinishedByFocusActor();// 0x1b0bfd0
	void OnLevelSequenceFinished();// 0x1b0bfb0
	void OnGlobalUnitRespawned(UnitBase* InSpawnedUnit);// 0x1b0be90
	void OnGlobalUnitDestroyed(UnitBase* InSpawnedUnit);// 0x1b0bf20
	void OnGlobalUnitDeath(UnitBase* InSpawnedUnit);// 0x1b0bf20
	void OnGlobalUnitCreated(UnitBase* InSpawnedUnit);// 0x1b0be90
	void OnGlobalRoundStatusChanged(enum InNewRoundStatus);// 0x1b0be10
	void OnGlobalGameTimeChanged(int InPreviousTimeSinceRoundStarted, int InTimeSinceRoundStarted);// 0x1b0bd40
	void OnGlobalExposedStateChanged(UnitVisionComponent* InChangedTarget);// 0x1b0bcb0
	void OnExposedStateChanged();// 0x1b0bc90
	void OnCurrentSurfaceTypeChanged(byte InNewSurfaceType);// 0x1b0bc10
	void MarkLevelSequenceInterrupted(bool InIsInterrupted);// 0x1b0bb80
	bool IsSoundPlaying(FName InSoundKeyName);// 0x1b0bae0
	static bool IsLocalSoundPlayTarget(Actor* InTargetCharacter);// 0x1b0ba50
	bool IsLevelSequencePlaying();// 0x1b0ba20
	static OPDirectionComponent* GetWorldDirectionComponent(Object* InWorldContextObject);// 0x1b0b990
	bool GetStealthHidingState();// 0x1b0b970
	FName[] GetObjectKeyNames();// 0x1b0b8c0
	Object* GetObjectByKeyName(FName InKeyName);// 0x1b0b820
	static OPDirectionComponent* GetLocalPlayerControllerDirectionComponent(Object* InWorldContextObject);// 0x1b0b790
	SkeletalMeshComponent* GetHeroMotionPlayableMesh(int InIndex);// 0x1b0b6f0
	Vector GetCameraLocationAffectedByCameraDirection();// 0x1b0b6b0
	void FadeOutSoundAttached(FName InKeyName, float InFadeOut);// 0x1b0b5e0
	void DestroyCameraPivotActor();// 0x1b0b5c0
	bool ContainsElementAttachedByKeyName(FName InKeyName);// 0x1b0b520
	void ClearInvisableComponentSuppressedDefaultMaterials(PrimitiveComponent* InComponent, bool InRecalculateCurrentState);// 0x1b0b450
	void ClearAllSounds();// 0x1b0b430
	void CleanUpOPFXEventReceiver(OPFXEventReceiver* OPFXEventReceiver);// 0x1b0b3a0
	void CleanUp();// 0x1b0b380
	void BroadcastRecalArriveEventDirection_S2AC(Vector_NetQuantize InArriveLocation);// 0x1b0b2f0
	AudioComponent* AddSoundAttached(SoundBase* InSound, OPAddSoundArgument InArgument, FName InKeyName, float InPitchOverride, float InVolumeOverride, bool InIsLocal, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, SoundClass* InSoundClassOverride, enum InvisibleRuleType, Actor* InCausedBy, enum InPlaySoundRule);// 0x1b0af30
	void AddSound(AudioComponent* InAudioComponent, DirectionComponentElementArgument InElementArgument, OPAddSoundArgument InArgument, FName InKeyName, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, enum InInvisibleRule, Actor* InCausedBy, enum InPlaySoundRule);// 0x1b0abd0
	void AddScreenParticleAttached_S2C(bool Activation, FName Slot, ParticleSystem* Particle, float RotationYaw, float DestroyAfter);// 0x1b0aa20
	ParticleSystemComponent* AddScreenParticleAttached(OP_PlayerController* InPlayerController, FName Slot, ParticleSystem* Particle, float RotationYaw, float DestroyAfter, float InForward);// 0x1b0a840
	void AddSceneComponent(SceneComponent* InPrimitiveComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x1b0a600
	void AddRenderBoundsOverrideableComponent(PrimitiveComponent* InComponent);// 0x1b0a570
	ParticleSystemComponent* AddParticleAssetAttached(FName InSlot, SceneComponent* AttachToComponent, ParticleSystem* InParticle, float InDestroyAfter, Transform SpawnTransform, FName AttachTo, byte InAttachLocation, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x1b0a200
	void AddParticle(FXSystemComponent* InParticleComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x1b09fc0
	void AddOutlineableComponent(PrimitiveComponent* InComponent);// 0x1b09f30
	void AddOPFXEventReceiver(OPFXEventReceiver* OPFXEventReceiver);// 0x1b09ea0
	NiagaraComponent* AddNiagaraAssetAttached(FName InSlot, SceneComponent* AttachToComponent, NiagaraSystem* InParticle, float InDestroyAfter, Transform SpawnTransform, FName AttachTo, byte InAttachLocation);// 0x1b09c20
	void AddInvisableComponent(PrimitiveComponent* InComponent, bool InRegisterSceneComponentToo);// 0x1b09b50
	void AddFXActor(OPFXActor* InFXActor, DirectionComponentElementArgument InElementArgument, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x1b09950
	void AddDecal(DecalComponent* InDecalComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x1b09710

--------------------------------
Class: Point_CameraPivotActor.Actor.Object
	SpringArmComponent* CameraBoom;//[Offset: 0x220, Size: 1]
	SceneComponent* LookTarget;//[Offset: 0x228, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f8, Size: 1]
	Vector SocketOffset;//[Offset: 0x1fc, Size: 1]
	Vector TargetOffset;//[Offset: 0x208, Size: 1]
	float ProbeSize;//[Offset: 0x214, Size: 1]
	byte ProbeChannel;//[Offset: 0x218, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x220, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x224, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x228, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x22c, Size: 1]
	bool IsCollisionFixApplied();// 0x3b9d630
	Vector GetUnfixedCameraPosition();// 0x3b9d5f0
	Rotator GetTargetRotation();// 0x3b9d5b0

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x270, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x278, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x280, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x290, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x298, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	void ShowBurnin();// 0x32f0fe0
	void SetSequence(LevelSequence* InSequence);// 0x32f0f50
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x32f0ec0
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x32f0c90
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x32f0b30
	void ResetBindings();// 0x32f0b10
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x32f0a50
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x32f0980
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x32f0880
	void OnLevelSequenceLoaded__DelegateSignature();// 0x1f25360
	LevelSequence* LoadSequence();// 0x32f0810
	void HideBurnin();// 0x32f07f0
	LevelSequencePlayer* GetSequencePlayer();// 0x32f0780
	LevelSequence* GetSequence();// 0x32f0700
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x32f0220
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x32f0170
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x32efe60
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x32efd10

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 1]
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x1a8c3e0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x32eff70
	Object* FindMetaDataByClass(class Object InClass);// 0x32eff70
	Object* CopyMetaData(Object* InMetaData);// 0x32eff70

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x32f0300
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x32efff0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte Status;//[Offset: 0x2b0, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x2b8, Size: 1]
	FrameNumber StartTime;//[Offset: 0x2c0, Size: 1]
	int DurationFrames;//[Offset: 0x2c4, Size: 1]
	float DurationSubFrames;//[Offset: 0x2c8, Size: 1]
	int CurrentNumLoops;//[Offset: 0x2cc, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2d0, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e8, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x438, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x448, Size: 1]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x458, Size: 1]
	void StopAtCurrentTime();// 0x2f669a0
	void Stop();// 0x2f66980
	void SetTimeRange(float StartTime, float Duration);// 0x2f668b0
	void SetPlayRate(float PlayRate);// 0x2f66560
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2f665e0
	void SetFrameRate(FrameRate FrameRate);// 0x2f66300
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x2f661f0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x2f66160
	void ScrubToSeconds(float TimeInSeconds);// 0x2f65fb0
	bool ScrubToMarkedFrame(FString InLabel);// 0x2f65ea0
	void ScrubToFrame(FrameTime NewPosition);// 0x2f65df0
	void Scrub();// 0x2f65dd0
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x2f65d10
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x2f65c30
	void RestoreState();// 0x2f65db0
	void PlayToSeconds(float TimeInSeconds);// 0x2f65b80
	bool PlayToMarkedFrame(FString InLabel);// 0x2f65a70
	void PlayToFrame(FrameTime NewPosition);// 0x2f659c0
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2f658a0
	void PlayReverse();// 0x2f65880
	void PlayLooping(int NumLoops);// 0x2f657f0
	void Play();// 0x2f657d0
	void Pause();// 0x2f657b0
	void JumpToSeconds(float TimeInSeconds);// 0x2f65700
	bool JumpToMarkedFrame(FString InLabel);// 0x2f655f0
	void JumpToFrame(FrameTime NewPosition);// 0x2f65540
	bool IsReversed();// 0x2f65510
	bool IsPlaying();// 0x2f654e0
	bool IsPaused();// 0x2f654b0
	void GoToEndAndStop();// 0x2f65430
	QualifiedFrameTime GetStartTime();// 0x2f653e0
	MovieSceneSequence* GetSequence();// 0x2f653c0
	float GetPlayRate();// 0x2f65350
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x2f65250
	FrameRate GetFrameRate();// 0x2f65230
	int GetFrameDuration();// 0x2f65200
	QualifiedFrameTime GetEndTime();// 0x2f651a0
	QualifiedFrameTime GetDuration();// 0x2f65160
	bool GetDisableCameraCuts();// 0x2f65130
	QualifiedFrameTime GetCurrentTime();// 0x2f650f0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x2f64fc0
	void ChangePlaybackDirection();// 0x2f64de0

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 1]
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	FString MarkedFrame;//[Offset: 0x10, Size: 1]
	enum PositionType;//[Offset: 0x20, Size: 1]
	enum UpdateMethod;//[Offset: 0x21, Size: 1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x32f0dc0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 1]
	void SetSettings(Object* InSettings);// 0x1f25360
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x32f07b0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPFXEventReceiver.Object
	OPDirectionComponent* DirectionComponent;//[Offset: 0x40, Size: 1]
	World* World;//[Offset: 0x48, Size: 1]
	FXSystemComponent* FXSystemComponent;//[Offset: 0x50, Size: 1]
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0x1b184a0
	void OnSystemFinished_PS(ParticleSystemComponent* PSystem);// 0x1b17930
	void OnSystemFinished_NS(NiagaraComponent* PSystem);// 0x1b17930
	void OnParticleSpawn(FName EventName, float EmitterTime, Vector Location, Vector Velocity);// 0x1b174a0
	void OnParticleDeath(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction);// 0x1b17290
	void OnParticleCollided(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x1b16fb0
	void OnParticleBurst(FName EventName, float EmitterTime, int ParticleCount);// 0x1b16ea0

--------------------------------
Class: BasicParticleData
	Vector position;//[Offset: 0x0, Size: 1]
	float Size;//[Offset: 0xc, Size: 1]
	Vector Velocity;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 1]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 1]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 1]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 1]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 1]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 1]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 1]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 1]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 1]
	Box FixedBounds;//[Offset: 0x388, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float WarmupTime;//[Offset: 0x3a8, Size: 1]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 1]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 1]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 1]
	enum CullReaction;//[Offset: 0x2c, Size: 1]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 1]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 1]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 1]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 1]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 1]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 1]
	Guid PerfBaselineVersion;//[Offset: 0x88, Size: 1]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	float MaxDistance;//[Offset: 0x34, Size: 1]
	int MaxInstances;//[Offset: 0x38, Size: 1]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 1]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 1]
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 1]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 1]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 1]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 1]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 1]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int MinInt;//[Offset: 0xc, Size: 1]
	int MaxInt;//[Offset: 0x10, Size: 1]
	float MinFloat;//[Offset: 0x14, Size: 1]
	float MaxFloat;//[Offset: 0x18, Size: 1]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float SpawnCountScale;//[Offset: 0x34, Size: 1]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 1]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 1]
	NiagaraSystem* System;//[Offset: 0x40, Size: 1]
	bool OnTickTest();// 0xd9d3b0
	void OnOwnerTick(float DeltaTime);// 0xd9d320
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0xd9d290
	void OnBeginTest();// 0xd9d270
	NiagaraSystem* GetSystem();// 0xd9d210

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x220, Size: 1]
	TextRenderComponent* Label;//[Offset: 0x228, Size: 1]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x450, Size: 1]
	MaterialInterface* TextMaterial;//[Offset: 0x468, Size: 1]
	Font* Font;//[Offset: 0x470, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x478, Size: 1]
	byte VerticalAlignment;//[Offset: 0x479, Size: 1]
	Color TextRenderColor;//[Offset: 0x47c, Size: 1]
	float XScale;//[Offset: 0x480, Size: 1]
	float YScale;//[Offset: 0x484, Size: 1]
	float WorldSize;//[Offset: 0x488, Size: 1]
	float InvDefaultSize;//[Offset: 0x48c, Size: 1]
	float HorizSpacingAdjust;//[Offset: 0x490, Size: 1]
	float VertSpacingAdjust;//[Offset: 0x494, Size: 1]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	void SetYScale(float Value);// 0x3ba5700
	void SetXScale(float Value);// 0x3ba5680
	void SetWorldSize(float Value);// 0x3ba5600
	void SetVertSpacingAdjust(float Value);// 0x3ba5500
	void SetVerticalAlignment(byte Value);// 0x3ba5580
	void SetTextRenderColor(Color Value);// 0x3ba5480
	void SetTextMaterial(MaterialInterface* Material);// 0x3ba53f0
	void SetText(FString Value);// 0x3ba5350
	void SetHorizSpacingAdjust(float Value);// 0x3ba5250
	void SetHorizontalAlignment(byte Value);// 0x3ba52d0
	void SetFont(Font* Value);// 0x3ba51c0
	void K2_SetText(out const FText Value);// 0x3ba50f0
	Vector GetTextWorldSize();// 0x3ba4fe0
	Vector GetTextLocalSize();// 0x3ba4fa0

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 1]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 1]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 1]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 1]
	FName IdName;//[Offset: 0x10, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FName Name;//[Offset: 0x1c, Size: 1]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 1]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int RandomSeed;//[Offset: 0x2c, Size: 1]
	enum AllocationMode;//[Offset: 0x30, Size: 1]
	int PreAllocationCount;//[Offset: 0x34, Size: 1]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 1]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 1]
	enum SimTarget;//[Offset: 0x88, Size: 1]
	Box FixedBounds;//[Offset: 0x8c, Size: 1]
	int MinDetailLevel;//[Offset: 0xa8, Size: 1]
	int MaxDetailLevel;//[Offset: 0xac, Size: 1]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 1]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 1]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 1]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 1]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 1]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 1]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 1]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 1]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 1]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 1]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 1]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 1]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 1]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 1]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 1]
	Guid UsageId;//[Offset: 0x2c, Size: 1]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 1]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 1]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 1]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 1]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 1]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 1]
	void RaiseOnGPUCompilationComplete();// 0xd9d3e0

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 1]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 1]
	byte[] ParameterData;//[Offset: 0x20, Size: 1]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 1]
	Object*[] UObjects;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 1]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 1]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 1]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 1]
	uint16 DestOffset;//[Offset: 0x2, Size: 1]
	uint16 SrcSize;//[Offset: 0x4, Size: 1]
	uint16 DestSize;//[Offset: 0x6, Size: 1]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 1]
	int SrcOffset;//[Offset: 0x20, Size: 1]
	int DestOffset;//[Offset: 0x24, Size: 1]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 1]
	enum ScriptUsageType;//[Offset: 0x10, Size: 1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 1]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 1]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 1]
	Guid ScriptVersionID;//[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 1]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 1]
	int NumTempRegisters;//[Offset: 0x20, Size: 1]
	int NumUserPtrs;//[Offset: 0x24, Size: 1]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 1]
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 1]
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 1]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 1]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 1]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 1]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 1]
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 1]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 1]
	enum LastCompileStatus;//[Offset: 0xd0, Size: 1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 1]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 1]
	FString StringValue;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	int UserPtrIdx;//[Offset: 0x8, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 1]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 1]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 1]
	FName OwnerName;//[Offset: 0x8, Size: 1]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 1]
	int NumOutputs;//[Offset: 0x20, Size: 1]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 1]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 1]
	FName Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 1]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 1]
	FName FriendlyName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 1]
	FString DIClassName;//[Offset: 0x10, Size: 1]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 1]
	FName IterationSource;//[Offset: 0x8, Size: 1]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 1]
	int MinStage;//[Offset: 0x28, Size: 1]
	int MaxStage;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 1]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 1]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 1]
	Guid CompileId;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 1]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 1]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xd98a10
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xd98920
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xd98840
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xd983e0
	void SetIntParameter(FString InVariableName, int InValue);// 0xd98300
	void SetFloatParameter(FString InVariableName, float InValue);// 0xd98210
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xd98120
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xd98040
	Vector GetVectorParameter(FString InVariableName);// 0xd97c20
	Vector4 GetVector4Parameter(FString InVariableName);// 0xd97b60
	Vector2D GetVector2DParameter(FString InVariableName);// 0xd97aa0
	Quat GetQuatParameter(FString InVariableName);// 0xd979e0
	int GetIntParameter(FString InVariableName);// 0xd97860
	float GetFloatParameter(FString InVariableName);// 0xd977b0
	LinearColor GetColorParameter(FString InVariableName);// 0xd976f0
	bool GetBoolParameter(FString InVariableName);// 0xd97640

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 1]
	FName Name;//[Offset: 0x8, Size: 1]
	int UserPtrIdx;//[Offset: 0x10, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 1]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 1]
	FName SourceEmitter;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 1]
	FName ID;//[Offset: 0x4, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 1]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 1]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 1]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 1]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 1]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	enum SimTarget;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 1]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 1]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 1]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 1]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 1]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 1]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 1]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 1]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 1]
	float Medium;//[Offset: 0x4, Size: 1]
	float High;//[Offset: 0x8, Size: 1]
	float Epic;//[Offset: 0xc, Size: 1]
	float Cine;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 1]
	int SortOrderHint;//[Offset: 0x58, Size: 1]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 1]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 1]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 1]
	FName SourceEventName;//[Offset: 0x44, Size: 1]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 1]
	FName SimulationStageName;//[Offset: 0x30, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 1]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 1]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 1]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 1]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 1]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 1]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 1]

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x450, Size: 1]
	enum TickBehavior;//[Offset: 0x458, Size: 1]
	int RandomSeedOffset;//[Offset: 0x45c, Size: 1]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x460, Size: 1]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x558, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x558, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x55c, Size: 1]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x560, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x588, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x590, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x598, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x599, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x59a, Size: 1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0xd88360
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0xd88280
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0xd881b0
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0xd880e0
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0xd88010
	void SetVariableObject(FName InVariableName, Object* Object);// 0xd87f40
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0xd87e70
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0xd87da0
	void SetVariableInt(FName InVariableName, int InValue);// 0xd87cd0
	void SetVariableFloat(FName InVariableName, float InValue);// 0xd87c00
	void SetVariableBool(FName InVariableName, bool InValue);// 0xd87b30
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0xd87a60
	void SetTickBehavior(enum NewTickBehavior);// 0xd879e0
	void SetSeekDelta(float InSeekDelta);// 0xd87960
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0xd878d0
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0xd87840
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0xd87770
	void SetPaused(bool bInPaused);// 0xd876e0
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0xd875f0
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0xd87500
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0xd87420
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0xd87330
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0xd86eb0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0xd87240
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0xd87160
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0xd87070
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0xd86f90
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0xd86eb0
	void SetMaxSimTime(float InMaxTime);// 0xd86e30
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0xd86da0
	void SetGpuComputeDebug(bool bEnableDebug);// 0xd86d10
	void SetForceSolo(bool bInForceSolo);// 0xd86c80
	void SetDesiredAge(float InDesiredAge);// 0xd86c00
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0xd86b70
	void SetAutoDestroy(bool bInAutoDestroy);// 0xd86ae0
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0xd86a10
	void SetAllowScalability(bool bAllow);// 0xd86980
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0xd86900
	void SeekToDesiredAge(float InDesiredAge);// 0xd86880
	void ResetSystem();// 0xd86860
	void ReinitializeSystem();// 0xd86840
	bool IsPaused();// 0xd86810
	void InitForPerformanceBaseline();// 0xd867f0
	enum GetTickBehavior();// 0xd867d0
	float GetSeekDelta();// 0xd867a0
	int GetRandomSeedOffset();// 0xd86780
	bool GetPreviewLODDistanceEnabled();// 0xd86760
	float GetPreviewLODDistance();// 0xd86740
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0xd864a0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0xd865f0
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0xd863b0
	float GetMaxSimTime();// 0xd86380
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0xd86350
	bool GetForceSolo();// 0xd86320
	float GetDesiredAge();// 0xd862f0
	NiagaraDataInterface* GetDataInterface(FString Name);// 0xd86240
	NiagaraSystem* GetAsset();// 0xd86220
	enum GetAgeUpdateMode();// 0xd861f0
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0xd86120
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0xd86050

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 1]

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 1]
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 1]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPSystemVoiceAnnounceArgument
	FString StringArgument1;//[Offset: 0x0, Size: 1]
	FString StringArgument2;//[Offset: 0x10, Size: 1]
	FString NameArgument1;//[Offset: 0x20, Size: 1]
	FString NameArgument2;//[Offset: 0x30, Size: 1]
	int ShowTypeValue1;//[Offset: 0x40, Size: 1]
	byte NumArgument1;//[Offset: 0x44, Size: 1]
	byte NumArgument2;//[Offset: 0x45, Size: 1]
	PlayerState* LocalTarget;//[Offset: 0x48, Size: 1]

--------------------------------
Class: InvisableComponentsInfo
	MaterialInstanceDynamic*[] UnitDefaultMaterials;//[Offset: 0x8, Size: 1]
	MaterialInterface*[] SuppressdUnitDefaultMaterials;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPAddSoundArgument
	float FadeOutDelay;//[Offset: 0x0, Size: 1]
	bool StopSoundOnLinkedAnimationCCStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float StartPoint;//[Offset: 0x8, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FadeInTime;//[Offset: 0x10, Size: 1]
	float FadeInVolume;//[Offset: 0x14, Size: 1]

--------------------------------
Class: DirectionEffectArgument
	float SoundVolumeMultiplier;//[Offset: 0x0, Size: 1]
	bool bForceLocalSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bSupressLocalSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bPlayOnLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bSoundAsEffortSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bOverrideLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Vector OverridedLocation;//[Offset: 0xc, Size: 1]
	float CameraShakeMultiplier;//[Offset: 0x18, Size: 1]
	AnimSequenceBase* MontageFrom;//[Offset: 0x20, Size: 1]
	Actor* SoundPlayRequestedBy;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DirectionComponentElementArgument
	FName[] Tags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPFXActor.Actor.Object
	float[] FloatArg;//[Offset: 0x230, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x250, Size: 1]
	bool bDestroyOnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bAutoDeactivateComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bAutoRegist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bWasDeactivateCalled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	bool bWasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	Actor* DirectionComponentOwner;//[Offset: 0x260, Size: 1]
	Actor* CausedBy;//[Offset: 0x268, Size: 1]
	enum ShouldHideOnStealth;//[Offset: 0x270, Size: 1]
	OPDirectionComponent* AutoRegisteredOnDirectionComponent;//[Offset: 0x278, Size: 1]
	static OPFXActor* SpawnOPFXActor(Object* WorldContextObject, out enum Branches, Actor* inDirectionComponentOwner, class OPFXActor Class, Transform SpawnTransform, Actor* InOwner, out const float[] InFloatArg, DirectionComponentElementArgument InDirectionComponentElementArg, bool AttachToOwner, FName AttachSocketName, enum LocationRule, enum RotationRule, enum ScaleRule, enum InShouldHideOnStealth, Actor* InCausedBy);// 0x1b19600
	void RegistAgainToOtherDirectionComponentOwner(Actor* InOtherDirectionComponentOwner);// 0x1b185a0
	void PlayDestroySound(FName[] InDestroySound, FName[] InDestroySoundLocal, FName InSkinID);// 0x1b17e30
	FName PlayColliderSpawnSound(FName[] InSpawnSound, FName[] InSpawnSoundLocal, bool InStopSpawnSoundOnDestroy);// 0x1b17c60
	void PlayColliderDestroySound(FName[] InDestroySound, FName[] InDestroySoundLocal);// 0x1b17ae0
	void OnFinishedInternal();// 0x1b16d90
	void OnFinished();// 0xe0e4e0
	void OnFadeOutTimerFinished();// 0x1b16d70
	void OnDeactivate(int intarg);// 0x1b16ce0
	bool GetFloatArg(int Index, out float outFloat, float DefaultValue);// 0x1b15aa0
	float GetFadeOutTime();// 0x1b15a80
	void Deactivate(float FadeOutTime, int intarg);// 0x1b15990

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 1]
	int SortOrder;//[Offset: 0x200, Size: 1]
	float FadeScreenSize;//[Offset: 0x204, Size: 1]
	float FadeStartDelay;//[Offset: 0x208, Size: 1]
	float FadeDuration;//[Offset: 0x20c, Size: 1]
	float FadeInDuration;//[Offset: 0x210, Size: 1]
	float FadeInStartDelay;//[Offset: 0x214, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	Vector DecalSize;//[Offset: 0x21c, Size: 1]
	void SetSortOrder(int Value);// 0x3a81ba0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x3a81910
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x3a817f0
	void SetFadeIn(float StartDelay, float Duaration);// 0x3a81720
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x3a81470
	float GetFadeStartDelay();// 0x3a80f50
	float GetFadeInStartDelay();// 0x3a80f20
	float GetFadeInDuration();// 0x3a80ef0
	float GetFadeDuration();// 0x3a80ec0
	MaterialInterface* GetDecalMaterial();// 0x3a80e90
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x3a80e30

--------------------------------
Class: OPLoadingManagerComponent.ActorComponent.Object
	class OPDraftSplashScreenWidget* DraftSplashScreenWidgetClass;//[Offset: 0x278, Size: 1]
	OPDraftSplashScreenWidget* LoadingWidget;//[Offset: 0x280, Size: 1]
	float MinimumLoadingTime;//[Offset: 0x288, Size: 1]
	float MinimumFakeLoadingTime;//[Offset: 0x28c, Size: 1]
	float StartFakeDelayTime;//[Offset: 0x290, Size: 1]
	Vector2D NextLoadingStepDelayTimeMinMax;//[Offset: 0x294, Size: 1]
	OPLoadedResourceHolder ResourceHolder;//[Offset: 0x2a0, Size: 1]
	Object*[] LoadedObject;//[Offset: 0x380, Size: 1]
	class Object[] LoadedClass;//[Offset: 0x390, Size: 1]
	UnitBase*[] SynchronizableQueue;//[Offset: 0x3f8, Size: 1]
	OPSkillColliderActor*[] SynchronizableColliderQueue;//[Offset: 0x408, Size: 1]
	void SyncSynchronizableLoadingPercent_S2C(float InPercent);// 0x1b3bc60
	void StartLoadingSequenceAs(enum InFirstStep);// 0x1b3bbe0
	void StartLoadingClientSide(int InNumNeedSync, enum InStartType);// 0x1b3bb10
	void SendMyLoadingStatus_C2S(float InDisplayLoadingPercent, enum InCurrentStep);// 0x1b3b8f0
	bool IsLoadingClientSide();// 0x1b3b310
	static OPLoadingManagerComponent* GetLoadingManagerComponentServerSide(Object* InWorldContextObject);// 0x1b3ad50
	static OPLoadingManagerComponent* GetLoadingManagerComponentLocalSide(Object* InWorldContextObject);// 0x1b3acc0
	static OPLoadingManagerComponent* GetLoadingManagerComponentAutoSide(Object* InWorldContextObject);// 0x1b3ac30
	float GetCurrentDisplayLoadingPercent();// 0x1b3ab70

--------------------------------
Class: OPDraftSplashScreenWidget.UserWidget.Widget.Visual.Object
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x260, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x268, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x270, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x278, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x280, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x288, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x290, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x298, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x2a0, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x2a8, Size: 1]
	enum LoadingStartType;//[Offset: 0x2b0, Size: 1]
	void PlayAnimation_BP();// 0x1f25360
	void OnShow();// 0x1b11d50
	void OnLoadingPercentChanged_BP(float InNewPercent);// 0x1f25360
	void OnHide();// 0x1b116a0

--------------------------------
Class: OPDraftSplashScreenSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Hero;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Tier;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_UserName;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x278, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x280, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x288, Size: 1]
	Image* Bind_Img_MasteryIcon;//[Offset: 0x290, Size: 1]
	enum HeroIconType;//[Offset: 0x298, Size: 1]
	void OnShowHonorGrade_BPIE(enum InIconType);// 0x1f25360
	void OnSetPlayerState_BP(bool IsAlly, bool IsMe);// 0x1f25360

--------------------------------
Class: OPSpellIconWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x268, Size: 1]
	Widget* Bind_CoolTime;//[Offset: 0x270, Size: 1]
	OPGroupProgressBar_Material* Bind_CoolTime_Mat;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Txt_CoolTime;//[Offset: 0x280, Size: 1]
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x288, Size: 1]
	OPNotifyType_SuperScript* Bind_RedDot;//[Offset: 0x290, Size: 1]
	Widget* Bind_Locked;//[Offset: 0x298, Size: 1]
	enum SpellIconType;//[Offset: 0x2a0, Size: 1]
	enum SpellIconSizeType;//[Offset: 0x2a1, Size: 1]
	byte SpellSlotIndex;//[Offset: 0x2a2, Size: 1]
	class OPSpellTooltipWidget* ToolTipClass;//[Offset: 0x2a8, Size: 1]
	byte TooltipPlacement;//[Offset: 0x2b0, Size: 1]
	Margin AnchorOffset;//[Offset: 0x2b4, Size: 1]
	FName SpellID;//[Offset: 0x2c4, Size: 1]
	FString UserClientID;//[Offset: 0x2d0, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	float FrameUpdatePeriod;//[Offset: 0x308, Size: 1]
	void UpdateSpellCoolTimeInfo();// 0x1ba6110
	void SetSpell(FName InSpellID);// 0x1ba5790
	void SetSelected_BP(bool bIsSelected);// 0x1f25360
	void SetPlayerState(OP_PlayerState* InState);// 0x1ba5700
	void SetLock();// 0x1ba56e0
	void SetAlert(bool bIsAlert);// 0x1ba5650
	void OnPlayerSelectSpell(FString InPlayerName, byte InSpellSlotIndex, FName InSpellID);// 0x1ba4c40
	UserWidget* CreateTooltipWidget();// 0x1ba4150

--------------------------------
Class: OPGroupProgressBar_Material.UserWidget.Widget.Visual.Object
	MaterialInterface* SourceMaterial;//[Offset: 0x260, Size: 1]
	FName MaterialParameterName_Progress;//[Offset: 0x268, Size: 1]
	float DeltaLerpScale;//[Offset: 0x270, Size: 1]
	bool Reverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	SlateBrush BackgroundImageBrush;//[Offset: 0x278, Size: 1]
	SlateBrush ProgressbarBrush;//[Offset: 0x300, Size: 1]
	SlateBrush DeltaBarBrush;//[Offset: 0x388, Size: 1]
	bool bEnableTestValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float TestValue;//[Offset: 0x414, Size: 1]
	void SetPercent(float InNewPercent);// 0x1a7f290

--------------------------------
Class: OPNotifyType_SuperScript.UserWidget.Widget.Visual.Object
	WidgetAnimation* NewAlert;//[Offset: 0x268, Size: 1]
	void UpdateNotifyStatus_BPNE(enum InNewAlertType, int InNotifyCount, bool InbIsTemportalNotify);// 0x1b611c0
	void UpdateNotifyStatus(enum InNewAlertType, int InNotifyCount, bool InbIsTemportalNotify);// 0x1b610b0

--------------------------------
Class: OPSpellTooltipWidget.UserWidget.Widget.Visual.Object
	OPSpellIconWidget* Bind_Icon;//[Offset: 0x260, Size: 1]
	OPTextBlock* Bind_Name;//[Offset: 0x268, Size: 1]
	OPTextBlock* Bind_CoolTime;//[Offset: 0x270, Size: 1]
	OPRichTextBlock* Bind_Description;//[Offset: 0x278, Size: 1]

--------------------------------
Class: OPTextBlock.TextBlock.TextLayoutWidget.Widget.Visual.Object
	enum TextTransformPolicy2;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: OPRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	enum TextTransformPolicy2;//[Offset: 0x678, Size: 1]
	void SetWrapTextAt(float InPixelLength);// 0x1b7c580

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 1]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x3171730
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x31716a0
	void SetText(out const FText InText);// 0x31715d0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3170ca0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3170760
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3170650
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x31705d0
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3170540
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3170420
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3170330
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3170220
	FText GetText();// 0x316f5d0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x316f350
	void ClearAllDefaultStyleOverrides();// 0x316ef70

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: OPLoadedResourceHolder
	class OPSkillColliderActor[] SCAClasses;//[Offset: 0x0, Size: 1]
	class Object[] AOClasses;//[Offset: 0x10, Size: 1]
	class OPFXActor[] FXActorClassess;//[Offset: 0x20, Size: 1]
	class OPDecalFXActor[] DecalFXActorClassess;//[Offset: 0x30, Size: 1]
	<FName,class OPSkillColliderActor> SCAClassMap;//[Offset: 0x40, Size: 1]
	<FName,class Object> AOClassMap;//[Offset: 0x90, Size: 1]

--------------------------------
Class: OPDecalFXActor.Actor.Object
	bool bDisableTickWhenColorUpdateFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	DecalComponent* DecalComponent;//[Offset: 0x228, Size: 1]
	MaterialInstanceDynamic* DecalMaterialDynamic;//[Offset: 0x230, Size: 1]
	OPDecalFXActorParams DecalActorParams;//[Offset: 0x238, Size: 1]
	Actor* DirectionComponentOwner;//[Offset: 0x2a0, Size: 1]
	Actor* CausedBy;//[Offset: 0x2a8, Size: 1]
	enum ShouldHideOnStealth;//[Offset: 0x2b0, Size: 1]
	static OPDecalFXActor* SpawnOPDecalFXActor(Object* WorldContextObject, out enum Branches, out MaterialInstanceDynamic* outDecalMaterialDynamic, Actor* inDirectionComponentOwner, OPDecalFXActorParams OPDecalFXActorParams, Transform SpawnTransform, Actor* InOwner, bool AttachToOwner, FName AttachSocketName, enum LocationRule, enum RotationRule, enum ScaleRule, enum InShouldHideOnStealth, Actor* InCausedBy);// 0x1b19080
	static OPDecalFXActorParams Make_OPDecalFXActorParams_ForNativeFadeInOut(MaterialInterface* DecalMaterial, Vector RelativeLocation, Rotator RelativeRotation, Vector DecalSize, float LifeTime, float TickInterval, float FadeInDelay, float FadeInDuration, float FadeOutDelay, float FadeOutDuration, bool bDestroyOwnerAfterFadeOut);// 0x1b168d0
	static OPDecalFXActorParams Make_OPDecalFXActorParams_ForCurve(MaterialInterface* DecalMaterial, Vector RelativeLocation, Rotator RelativeRotation, Vector DecalSize, float LifeTime, float TickInterval, CurveLinearColor* ColorOverLife, FName ColorOverLifeParamName);// 0x1b165f0
	static OPDecalFXActorParams Make_OPDecalFXActorParams_CustomClass(class OPDecalFXActor DecalClass, MaterialInterface* DecalMaterial, Vector RelativeLocation, Rotator RelativeRotation, Vector DecalSize, float LifeTime, float TickInterval);// 0x1b16360
	bool InitDecalComponent(out const OPDecalFXActorParams inDecalActorInitParam);// 0x1b16100
	MaterialInstanceDynamic* GetDecalMaterialDynamic();// 0x1b15a60

--------------------------------
Class: OPDecalFXActorParams
	MaterialInterface* DecalMaterialBase;//[Offset: 0x0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x8, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 1]
	Vector DecalSize;//[Offset: 0x20, Size: 1]
	float LifeTime;//[Offset: 0x2c, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 1]
	CurveLinearColor* ColorOverLife;//[Offset: 0x38, Size: 1]
	FName ColorOverLifeParamName;//[Offset: 0x40, Size: 1]
	float FadeInDelay;//[Offset: 0x48, Size: 1]
	float FadeInDuration;//[Offset: 0x4c, Size: 1]
	float FadeOutDelay;//[Offset: 0x50, Size: 1]
	float FadeOutDuration;//[Offset: 0x54, Size: 1]
	bool bDestroyOwnerAfterFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	class OPDecalFXActor* DecalClass;//[Offset: 0x60, Size: 1]

--------------------------------
Class: OPSkillDecalActor.Actor.Object
	SceneComponent* Root;//[Offset: 0x230, Size: 1]
	DecalComponent* Decal_Range;//[Offset: 0x238, Size: 1]
	NiagaraComponent* Decal_Canopy;//[Offset: 0x240, Size: 1]
	Actor* DecalActorOwner;//[Offset: 0x248, Size: 1]
	OP_Character* DecalActorOwnerCharacter;//[Offset: 0x250, Size: 1]
	FName DefaultDecalDepth_TableKey;//[Offset: 0x280, Size: 1]
	bool bDrawCanopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool RotationLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bAutoDecalColorByTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool bAutoDecalSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	float OverrideDecalHeight;//[Offset: 0x28c, Size: 1]
	FName DecalSizeParamName;//[Offset: 0x290, Size: 1]
	enum LastSkillCollderShape;//[Offset: 0x298, Size: 1]
	Vector4 LastBehit_Shape;//[Offset: 0x2a0, Size: 1]
	float castrange;//[Offset: 0x2b0, Size: 1]
	float aoeradius;//[Offset: 0x2b4, Size: 1]
	void SetDecalSizeBySkillColliderShape(out const enum inSkillCollderShape, out const Vector4 inBehit_Shape);// 0x1b994f0
	void SetDecalSize(DecalComponent* InDecalComponent, Vector NewDecalSize);// 0x1b99410
	void SendHitRangeAttack_BPNE(HitResult InHitResult);// 0x1b99200
	void SendCharacterRadius_BPNE(Vector InLocation);// 0x1b991a0
	void PreSetDecalSizeFromTable(out const enum inSkillCollderShape, out const Vector4 inBehit_Shape, out const FName InSkillMainColliderID, out enum outSkillCollderShape, out Vector4 outBehit_Shape);// 0x1b99030
	void OnSetDecalSizeFromTable(Actor* InDecalOwner, out const enum inSkillCollderShape, out const Vector4 inBehit_Shape, out const FName InSkillMainColliderID, out const LinearColor inTeamColor, MaterialInstanceDynamic* inMID);// 0x1b98e80
	void OnOtherDestroyed(Actor* OtherActor);// 0x1a837a0
	bool OnGetNativeUpdate();// 0x1b98cd0
	void OnAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b98980
	bool IsSameTeam(Actor* InDecalOwner);// 0x1b988b0
	bool HasAnyAbnormalStateInfo(FName InKeyName);// 0x1b987c0
	int GetTotalStacks(FName InKeywordType);// 0x1b98720
	float GetSkillUpperMostChargeTime();// 0x1b986f0
	float GetSkillMaxChargeTime();// 0x1b986c0
	int GetSkillLevel();// 0x1b98690
	bool GetMySkillTable(out SkillTableData OutSkillTableData);// 0x1b983e0
	float GetLocalSkillPrepareChargeRate();// 0x1b983b0
	float GetLocalRealSkillPrepareChargeRate();// 0x1b982f0

--------------------------------
Class: SkillColliderMovement.Object
	OPSkillColliderActor* Mother;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x450, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x4c0, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d8, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4f0, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x508, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x524, Size: 1]
	float Duration;//[Offset: 0x528, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 1]
	float LoopPosition;//[Offset: 0x534, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x538, Size: 1]
	void UpdateSpline();// 0x1bd5480
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x3b9a9d0
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x3b9a860
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3b9a010
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3b9a690
	void SetTangentColor(out const LinearColor TangentColor);// 0x3b9a010
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3b9a520
	void SetSplineWorldPoints(out const Vector[] Points);// 0x3b9a470
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x3b9a230
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x3b9a340
	void SetSplineLocalPoints(out const Vector[] Points);// 0x3b9a180
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3b9a010
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x3b99f00
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x3b99d90
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x3b99c20
	void SetDrawDebug(bool bShow);// 0x3b99b90
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x3b99ab0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x3b99990
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x3b998c0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x3b997f0
	bool IsClosedLoop();// 0x3b997c0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x3b99710
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x3b99620
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x3b99570
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x3b99480
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x3b993d0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x3b99320
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x3b99230
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x3b99180
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3b990a0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3b98fc0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b98e90
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b98db0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b98cc0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b98bd0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x3b98a30
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x3b988e0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x3b98780
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x3b98620
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b984f0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b96b60
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b98400
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b98310
	byte GetSplinePointType(int PointIndex);// 0x3b98270
	float GetSplineLength();// 0x3b98240
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x3b980c0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x3b98010
	Vector GetScaleAtSplineInputKey(float InKey);// 0x3b97f70
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x3b97ed0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b97da0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b97cc0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b97bd0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b97ae0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b979c0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b978f0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b97810
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b97730
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b97600
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b97520
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b97430
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b97340
	int GetNumberOfSplineSegments();// 0x3b97310
	int GetNumberOfSplinePoints();// 0x3b972e0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b971b0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b970d0
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b96fe0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b96ef0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x3b96d70
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x3b96c40
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b96b60
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x3b96ac0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3b969f0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3b96920
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x3b96880
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x3b967e0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3b966b0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b965d0
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3b964e0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3b963f0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x3b96350
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3b96270
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b96180
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x3b96020
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95f30
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x3b95e80
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95d90
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95cb0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95bc0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95ad0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x3b95a30
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3b95940
	void ClearSplinePoints(bool bUpdateSpline);// 0x3b958b0
	void AddSplineWorldPoint(out const Vector position);// 0x3b95810
	void AddSplinePointAtIndex(out const Vector position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x3b956a0
	void AddSplinePoint(out const Vector position, byte CoordinateSpace, bool bUpdateSpline);// 0x3b95580
	void AddSplineLocalPoint(out const Vector position);// 0x3b954f0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x3b953f0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x3b952e0

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SplineCurves
	InterpCurveVector position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]
	uint32 Version;//[Offset: 0x68, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x468, Size: 1]
	float LineThickness;//[Offset: 0x474, Size: 1]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x3a638e0
	Vector GetUnscaledBoxExtent();// 0x3a638b0
	Vector GetScaledBoxExtent();// 0x3a63850

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x488, Size: 1]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x490, Size: 1]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x4a0, Size: 1]
	BoxSphereBounds LocalBounds;//[Offset: 0x4b0, Size: 1]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4d0, Size: 1]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x1385700
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x1385440
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1385120
	bool IsMeshSectionVisible(int SectionIndex);// 0x1385080
	int GetNumSections();// 0x1384a90
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x1384390
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x1384030
	void ClearMeshSection(int SectionIndex);// 0x1383660
	void ClearCollisionConvexMeshes();// 0x1383640
	void ClearAllMeshSections();// 0x1383620
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x13832f0

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 1]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 1]
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 1]
	Box SectionLocalBox;//[Offset: 0x20, Size: 1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: ProcMeshVertex
	Vector position;//[Offset: 0x0, Size: 1]
	Vector Normal;//[Offset: 0xc, Size: 1]
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 1]
	Color Color;//[Offset: 0x28, Size: 1]
	Vector2D UV0;//[Offset: 0x2c, Size: 1]
	Vector2D UV1;//[Offset: 0x34, Size: 1]
	Vector2D UV2;//[Offset: 0x3c, Size: 1]
	Vector2D UV3;//[Offset: 0x44, Size: 1]

--------------------------------
Class: OPOptimizationComponent.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0xb0, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0xb8, Size: 1]
	float DistanceToCurrentCamera;//[Offset: 0xc0, Size: 1]
	PrimitiveComponent*[] ClientSideGenerateOverlapComponents;//[Offset: 0xc8, Size: 1]
	SkeletalMeshComponent*[] SkeletalMeshes;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: PSCoolTimeManager.ActorComponent.Object
	OPSkillComponent* SkillComponent;//[Offset: 0xb0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0xb8, Size: 1]
	MulticastInlineDelegateProperty OnSkillReadStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCoolTimeReady_Server;//[Size: 1]
	MulticastInlineDelegateProperty OnCoolTimeSet_Server;//[Size: 1]
	byte SkillReadyStatusBitFlag;//[Offset: 0xf1, Size: 1]
	<FName,CoolTimeInfo> CoolTimes;//[Offset: 0xf8, Size: 1]
	static FName SkillSlotToCoolTimeName(enum InSkillSlot);// 0x1bda190
	void SetCoolTimeBP(enum InSkillSlot, float InCoolDown);// 0x1bd9df0
	void OnSkillReadyStatusChanged();// 0x1bd9c30
	bool GetPreviousSkillReadyStateFlag(enum InSkillSlot);// 0x1bd94a0
	static PSCoolTimeManager* GetLocalCoolTimeManager(Object* InWorldContextObject);// 0x1bd93e0
	bool GetCurrentSkillReadyStateFlag(enum InSkillSlot);// 0x1bd9350
	static PSCoolTimeManager* GetCoolTimeManager(OP_PlayerState* InPlayerState);// 0x1bd9290
	float GetCoolTimeLeftPer(FName ElementName);// 0x1bd91f0
	float GetCoolTimeLeftBP(FName ItemName);// 0x1bd9150
	float GetCoolTimeLeft(FName ElementName);// 0x1bd90b0
	static enum CoolTimeNameToSkillSlot(FName InCoolTimeName);// 0x1bd8f80
	float CoolTimeLeftPer(FName ElementName);// 0x1bd8ee0
	float CoolTimeLeft(FName ElementName);// 0x1bd8e40
	static bool CanCDR(enum InSkillCategory);// 0x1bd8dc0

--------------------------------
Class: CoolTimeInfo

--------------------------------
Class: PSInventoryManager.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnItemChargeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPointChanged;//[Size: 1]
	<enum,int> SkillInventory;//[Offset: 0x148, Size: 1]
	byte SkillPoint;//[Offset: 0x198, Size: 1]
	int TryGetItemAmount(ItemBase* ITB);// 0x1be1230
	void SyncInventoryAll_S2C_Internal(const ItemInventoryInfoSync[] ItemsList);// 0x1be1190
	void OnUnitRespawn();// 0x1be0560
	void OnRep_SkillPoint();// 0x1be0400
	void LearnSkillsMaximum(enum InSkillSlot);// 0x1bdff70
	void LearnAllSkillsMaximumOf(OPSkillComponent* InSkillComponentOwner);// 0x1bdfee0
	void INV_SyncItem_S2C(ItemInventoryInfoSync ItemInfo, bool IsRemoving);// 0x1bdfdf0
	bool HasItemInInventorySlot(enum InInventorySlot);// 0x1bdfd60
	bool HasItemByItemGroupID(FName InItemTableGroupID);// 0x1bdfcc0
	bool HasItem(FName InItemTableName);// 0x1bdfc20
	int GetSkillLevel(enum InSkillSlot);// 0x1bdf950
	static PSInventoryManager* GetObserverTargetInventoryManager(Object* InWorldContextObject);// 0x1bdf270
	static PSInventoryManager* GetLocalInventoryManager(Object* InWorldContextObject);// 0x1bded20
	static PSInventoryManager* GetInventoryManager(OP_PlayerState* InPlayerState);// 0x1bdebc0
	int GetAllPricesOfMyItems();// 0x1bdeb90
	int AmountItem(FName ItemName);// 0x1bde460

--------------------------------
Class: ItemInventoryInfoSync
	FName ItemName;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x8, Size: 1]
	int SkillEffectUniqueID;//[Offset: 0xc, Size: 1]
	enum InventorySlot;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocationSnapshotComponent.ActorComponent.Object
	bool HasMovedInSecond(float InSecond);// 0x1a8aba0
	Vector GetLocationAtTimeSince(float InTime, out bool OutIsValid);// 0x1a8aa80

--------------------------------
Class: OPSkillActionKeywordState.Object
	OPSkillComponent* Mother;//[Offset: 0x28, Size: 1]
	FName ActionKeyword;//[Offset: 0x30, Size: 1]
	FName[] Arguments;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPCastSkillC2SArgument
	bool bIsSmartKeyActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Actor* MainTarget;//[Offset: 0x8, Size: 1]
	Actor* Target;//[Offset: 0x10, Size: 1]
	bool bIsCheckCollidedTargetCanUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: SpawnSkillColliderClientSyncData
	Actor* CachedTarget;//[Offset: 0x0, Size: 1]
	int ColliderUniqueID;//[Offset: 0x8, Size: 1]
	int PreviousColliderUniqueID;//[Offset: 0xc, Size: 1]
	float ColliderChargeRate;//[Offset: 0x10, Size: 1]
	float ColliderRealChargeRate;//[Offset: 0x14, Size: 1]
	enum[] PreviousColliderDestroyReasons;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SkillColliderClientSyncData
	SlotData SlotData;//[Offset: 0x0, Size: 1]
	Vector_NetQuantizeNormal DirectionData;//[Offset: 0x28, Size: 1]
	Vector_NetQuantize LocationData;//[Offset: 0x34, Size: 1]
	Actor* ActorData;//[Offset: 0x40, Size: 1]
	float SkillAcceleration;//[Offset: 0x48, Size: 1]
	byte ColliderDimension;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: BroadcastedActionKeywordStateArgument
	bool BooleanArgument;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkillCanUseResult
	CanUseSkillResult[] CantUseReaons;//[Offset: 0x0, Size: 1]
	FName Result;//[Offset: 0x10, Size: 1]
	float ResultValue;//[Offset: 0x18, Size: 1]
	FText ResultStringOverride;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CanUseSkillResult
	enum ReasonType;//[Offset: 0x0, Size: 1]
	SlotData ReasonArgument;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPSkillSlotData
	enum SkillSlot;//[Offset: 0x0, Size: 1]
	FName SkillTableID;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SyncSkillStateArgument
	SlotData Slot;//[Offset: 0x0, Size: 1]
	enum SkillState;//[Offset: 0x28, Size: 1]
	float TimeSinceCasted;//[Offset: 0x2c, Size: 1]
	int SkillStateUniqueIDOnCreation;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CoolTimeSyncInfo
	FName Name;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GimmickSyncInfo
	OPGimmickPointActor* GimmickTarget;//[Offset: 0x0, Size: 1]
	bool HasGimmick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float RespawnRequiredTime;//[Offset: 0xc, Size: 1]
	float TimeSinceStartedRespawning;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ItemModeDataSet
	Actor*[] ActorParameter;//[Offset: 0x0, Size: 1]
	Vector[] VectorParameter;//[Offset: 0x10, Size: 1]
	int[] ModeParameter;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DateTime

--------------------------------
Class: MasteryPPDetailData
	FString UserLoginID;//[Offset: 0x0, Size: 1]
	int WinTeamNum;//[Offset: 0x10, Size: 1]
	int Timelapsed;//[Offset: 0x14, Size: 1]
	int SpiritKillCount;//[Offset: 0x18, Size: 1]
	int GuardianKillCount;//[Offset: 0x1c, Size: 1]
	int KillGrade;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KillStreakData
	FName KillerUnitSkinID;//[Offset: 0x0, Size: 1]
	FName VictimUnitSkinID;//[Offset: 0x8, Size: 1]
	byte KillerTeamNum;//[Offset: 0x10, Size: 1]
	byte VictimTeamNum;//[Offset: 0x11, Size: 1]
	FText KillerNameOverride;//[Offset: 0x18, Size: 1]
	FText VictimNameOverride;//[Offset: 0x30, Size: 1]
	byte KillStreakNumber;//[Offset: 0x48, Size: 1]
	byte KillStreakContinuousNumber;//[Offset: 0x49, Size: 1]
	PlayerState* LocalTarget;//[Offset: 0x50, Size: 1]
	OP_PlayerState* VictimPlayerState;//[Offset: 0x58, Size: 1]
	FString KillerClientLoginId;//[Offset: 0x60, Size: 1]
	FString VictimClientLoginId;//[Offset: 0x70, Size: 1]

--------------------------------
Class: OPAccumulatedDamageHistory
	float DamageTaken;//[Offset: 0x0, Size: 1]
	float DamageTakenByPlayer;//[Offset: 0x4, Size: 1]
	<enum,float> DamageTakenByActorType;//[Offset: 0x8, Size: 1]
	<enum,float> DamageTakenByActorTypeSub;//[Offset: 0x58, Size: 1]
	float DamageMitigated;//[Offset: 0xa8, Size: 1]
	float DamageGiven;//[Offset: 0xac, Size: 1]
	<enum,float> DamageGivenByActorType;//[Offset: 0xb0, Size: 1]
	<enum,float> DamageGivenByActorTypeSub;//[Offset: 0x100, Size: 1]
	float DamageGiven_OnlyTowerDamage;//[Offset: 0x150, Size: 1]

--------------------------------
Class: ShopItemHistory
	ItemInventoryInfoSync[] Inventory;//[Offset: 0x0, Size: 1]
	float Price;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AddGoldType
	enum AddGoldType;//[Offset: 0x0, Size: 1]
	float Gold;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPGameEventDispatcher.ActorComponent.Object
	MulticastInlineDelegateProperty OnPlayerUseSkill;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshDraftUserSlot;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalCharacterBattleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamBlackScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundTimerChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDisconnected;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedTeam;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedName;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerSelectHero;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerSelectHeroSkin;//[Size: 1]
	MulticastInlineDelegateProperty OnChangedPlayerSortOrder;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerBoughtItem;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftPreBanPickChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGoldenTimeServerSide;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftSelectPositionPhaseStart;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftBanPickPhaseStart;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftBanPickPhaseEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnSyncDraftTradeInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundDesiredPlayersNumChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitExposedStateChangedGlobal;//[Size: 1]
	MulticastInlineDelegateProperty OnCoolTimeSetGlobal_Server;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChatOnServerSide;//[Size: 1]
	MulticastInlineDelegateProperty OnARAMSelectableHeroesChangedOnClientSide;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalUnitDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLanePositionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerControllingNewHero;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty PreAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnChangeDisconnected;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerEnteredLoadingOnServerSide;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalSkillInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerSelectSpell;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdatedHighestBountyPlayer;//[Size: 1]
	static OPGameEventDispatcher* GetGameEventDispatcher(Object* InWorldContextObject);// 0x1b1bc70

--------------------------------
Class: OPDamageSystem.ActorComponent.Object
	static void ConstructAndApplyDamage_BPHelper(Actor* InAttacker, Actor* InVictim, enum InSkillSlot, FName InSkillTableID);// 0x1af1750

--------------------------------
Class: OPRoundHandlerComponent.ActorComponent.Object
	OPTimerManager* GameStateTimerManager;//[Offset: 0x110, Size: 1]
	MulticastInlineDelegateProperty RequestEnterSequence;//[Size: 1]
	MulticastInlineDelegateProperty OnGameTimeChanged;//[Size: 1]
	int RoundStartTimerCountdown;//[Offset: 0x178, Size: 1]
	enum RoundStatus;//[Offset: 0x1d0, Size: 1]
	byte DesiredPlayersNum;//[Offset: 0x1d1, Size: 1]
	enum ServerNetMode;//[Offset: 0x1d2, Size: 1]
	enum GameServerType;//[Offset: 0x1d3, Size: 1]
	PlayerState* GameMasterPlayer;//[Offset: 0x1d8, Size: 1]
	OPBlackScoreInfo[] BlackScore;//[Offset: 0x1e0, Size: 1]
	int[] TeamScores;//[Offset: 0x1f0, Size: 1]
	BanStateInfo[] BanStateInfos;//[Offset: 0x200, Size: 1]
	BanStateInfo PreBanStateInfo;//[Offset: 0x210, Size: 1]
	FName[] BanList;//[Offset: 0x228, Size: 1]
	FName[] ServerBanItemList;//[Offset: 0x238, Size: 1]
	DraftStateInfo DraftStateInfo;//[Offset: 0x248, Size: 1]
	DraftTradeInfo DraftTradeInfo;//[Offset: 0x298, Size: 1]
	OP_PlayerState*[] SortedTeam1;//[Offset: 0x2a8, Size: 1]
	OP_PlayerState*[] SortedTeam2;//[Offset: 0x2b8, Size: 1]
	void SyncPreBanState(BanStateInfo NewBanStateInfo);// 0x1b7c9c0
	void SyncGameModeType(enum NewType);// 0x1b7c940
	void SyncDraftTradeInfo(DraftTradeInfo InDraftTradeInfo);// 0x1b7c830
	void SyncDraftState(DraftStateInfo InNewDraftState);// 0x1b7c720
	void SyncBanStateInfos(const BanStateInfo[] InBanStateInfos);// 0x1b7c620
	int SetTeamScore(byte TeamNum, int Score, OP_PlayerState* InCauser);// 0x1b7c110
	void SetCountdownTimer(int InSecond);// 0x1b7bff0
	void RequestDisconnectForAllClients(enum InExitResult);// 0x1b7bf50
	void ProcessRoundEnd(byte WinTeamNum, Vector LookAtPos, bool InShouldLookAtPos);// 0x1b7be20
	void OnTimeCountDownChanged();// 0x1b7bde0
	void OnTeamScoreChangedNotify();// 0x1b7bdc0
	void OnRoundStateChanged_Event();// 0x1b7bda0
	void OnRepBlackScore();// 0x1b7bd80
	void OnDraftStateInfoUpdated();// 0x1b7bd60
	void OnDesiredPlayerNumChanged_Event();// 0x1b7bd40
	void KickAllAndExitGame();// 0xd9d3e0
	bool IsItemServerBanned(FName TargetName);// 0x1b7bca0
	bool IsGoldenTime(out bool OutIsCountDownMode);// 0x1b7bc00
	bool IsDraftingAndMyTurn(PlayerController* InLocalPC);// 0x1b7bb60
	bool IsBanned(out const FName InHeroID);// 0x1b7bac0
	int GetTeamScore(byte TeamNum);// 0x1b7b8e0
	static OPRoundHandlerComponent* GetRoundHandler(Object* InWorldContextObject);// 0x1b7b850
	byte[] GetHighestTeamsWithTeamScore(out int OutHighestScore);// 0x1b7b770
	int GetHighestScoreTeamNumWithPlayer();// 0x1b7b740
	bool GetHighestScoreExceptTeam(byte InTeamNum, out byte OutTeamNum, out int OutTeamScore);// 0x1b7b610
	Timespan GetGameTimeSinceRoundStarted();// 0x1b7b5d0
	int GetDraftBanStep();// 0x1b7b5a0
	Timespan GetDisplayGameTimeSinceRoundStarted(out bool OutIsGoldenTime);// 0x1b7b500
	int GetBlackScoreAsTeam(byte InTeamNum);// 0x1b7b470
	void CheckFakeAIMatchShutdown();// 0xd9d3e0
	void BroadcastSelectPositionPhaseStart(int phase);// 0x1b7b3e0
	void BroadcastDefaultSpell();// 0x1b7b3c0
	void BroadcastBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x1b7b2f0
	void BroadcastBanPickPhaseEnd(const BanStateInfo InBanStateInfo, const FName[] InBanList, const FName InBanHero);// 0x1b7b180
	void BroadcastAddPlayerName(byte TeamNum, const FString[] NickNames);// 0x1b7b070
	int AddTeamScore_BP(byte TeamNum, int Score, OP_PlayerState* InCauser);// 0x1b7af60

--------------------------------
Class: BanStateInfo
	byte TeamNum;//[Offset: 0x0, Size: 1]
	byte BanStep;//[Offset: 0x1, Size: 1]
	BanHeroSetInfo[] BanHeros;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BanHeroSetInfo
	FString UserName;//[Offset: 0x0, Size: 1]
	FName HeroID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DraftTradeInfo
	DraftTradeSetInfo[] DraftTradeSetInfos;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftTradeSetInfo
	FString UserName;//[Offset: 0x0, Size: 1]
	byte TeamNum;//[Offset: 0x10, Size: 1]
	FName[] HeroIDs;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DraftStateInfo
	bool IsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	OP_PlayerState*[] Current_Order;//[Offset: 0x8, Size: 1]
	DraftStatePlayerSetInfo[] Order_Set;//[Offset: 0x18, Size: 1]
	byte DraftStep;//[Offset: 0x28, Size: 1]
	bool IsPreparing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	byte StartTeam;//[Offset: 0x2a, Size: 1]
	OP_PlayerState*[] Captured_T1_Order;//[Offset: 0x30, Size: 1]
	OP_PlayerState*[] Captured_T2_Order;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DraftStatePlayerSetInfo
	OP_PlayerState*[] Players;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: OPBlackScoreInfo
	byte TeamNum;//[Offset: 0x0, Size: 1]
	FName[] IDs;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPUnitManager.ActorComponent.Object
	OPTimerManager* GameStateTimerManager;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitCreated;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitDestroyed;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitDeath;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitRespawn;//[Size: 1]
	float WorldBoundMinXY;//[Offset: 0x220, Size: 1]
	float WorldBoundMaxXY;//[Offset: 0x224, Size: 1]
	MaterialParameterCollection* MPC_FoliageInteraction;//[Offset: 0x228, Size: 1]
	TextureRenderTarget2D* RT_FoliageInteration;//[Offset: 0x230, Size: 1]
	Texture* T_FoliageInteration_Brush;//[Offset: 0x238, Size: 1]
	float FoliageRenderTargetDrawSize;//[Offset: 0x240, Size: 1]
	Actor*[] VisionBlockingIgnoreable;//[Offset: 0x248, Size: 1]
	OPDirectionComponent*[] DirectionComponentArray;//[Offset: 0x258, Size: 1]
	UnitBase*[] UnitArray;//[Offset: 0x268, Size: 1]
	PlayerBase*[] UnitArray_Type_PlayerBase;//[Offset: 0x278, Size: 1]
	PlayerBase*[] UnitArray_MinionType_PlayerBase;//[Offset: 0x288, Size: 1]
	PlayerBase*[] UnitArray_LaneBabyPrimeType_PlayerBase;//[Offset: 0x298, Size: 1]
	OP_Character*[] UnitArray_Type_Character;//[Offset: 0x2a8, Size: 1]
	UnitVisionComponent*[] UnitArray_Type_UnitVisions;//[Offset: 0x2b8, Size: 1]
	OPTeamManagerActor*[] TeamManagersArray;//[Offset: 0x2c8, Size: 1]
	OPOptimizationComponent*[] OptimizationComponentsArray;//[Offset: 0x2d8, Size: 1]
	float UnitVisionCheckInterval;//[Offset: 0x304, Size: 1]
	float LocationSnapshotInterval;//[Offset: 0x308, Size: 1]
	static void StopAllSoundsForRoundEnd(Object* InWorldContextObject);// 0x1bba590
	static Actor* SpawnUnit(Object* InWorldContextObject, FName InHeroSkinID, Transform InSpawnTransform, OPSpawnUnitArgument InSpawnArgument);// 0x1bba350
	static OPTeamManagerActor* GetTeamManager(Object* InWorldContextObject, byte InTeamNum);// 0x1bb9be0
	static OPTeamManagerActor* GetOrCreateTeamManager(Object* InWorldContextObject, byte InTeamNum);// 0x1bb9b10
	static UnitBase*[] GetAllUnit(Object* InWorldContextObject);// 0x1bb9800
	static PlayerBase*[] GetAllPlayerBaseInCircleRange(Object* InWorldContextObject, Vector InCenterLocation, float InRadius);// 0x1bb9690
	static PlayerBase*[] GetAllPlayerBase(Object* InWorldContextObject);// 0x1bb95c0
	static OPTeamManagerActor*[] GetActiveTeamManager(Object* InWorldContextObject);// 0x1bb94f0

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 1]
	int SizeY;//[Offset: 0x184, Size: 1]
	LinearColor ClearColor;//[Offset: 0x188, Size: 1]
	byte AddressX;//[Offset: 0x198, Size: 1]
	byte AddressY;//[Offset: 0x199, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 1]
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 1]
	byte MipsAddressU;//[Offset: 0x19e, Size: 1]
	byte MipsAddressV;//[Offset: 0x19f, Size: 1]
	byte OverrideFormat;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: OPTeamManagerActor.Info.Actor.Object
	OPSkillComponent* SkillComponent;//[Offset: 0x220, Size: 1]
	OPAbnormalStateComponent* AbnormalComponent;//[Offset: 0x228, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x230, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x238, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x240, Size: 1]
	UnitStatComponent* StatComponent;//[Offset: 0x248, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x250, Size: 1]

--------------------------------
Class: OPSpawnUnitArgument
	byte TeamNum;//[Offset: 0x0, Size: 1]
	byte UnitLevel;//[Offset: 0x1, Size: 1]
	Actor* IsSummonsOf;//[Offset: 0x8, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x10, Size: 1]
	bool bSpawnLocationAsFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: OPSkillColliderManager.ActorComponent.Object
	MulticastInlineDelegateProperty Delegate_OnColliderDestroyed;//[Size: 1]
	OPSkillColliderActor*[] ColliderEnemyBlockable;//[Offset: 0x168, Size: 1]
	OPSkillColliderActor*[] ServerColliders;//[Offset: 0x178, Size: 1]
	OPSkillColliderActor*[] SyncedColliders;//[Offset: 0x188, Size: 1]
	static void PrintColliderNeedClientBroadcast(Object* InWorldContextObject);// 0x1b93d50
	void OnDestroySkillCollider_S2AC(int InColliderUniqueID, OPSkillColliderDestroyArgument InDestroyReason);// 0x1b91920
	void OnColliderBounce_S2AC(int InColliderUniqueID, Vector InStartLocation, Vector InReflectedDirection, int InBounceCounter);// 0x1b91790
	static Vector K2GetOffsetVectorFromTable(FName InGenerateValue);// 0x1b91070
	static OPSkillColliderManager* GetSkillColliderManager(Object* InWorldContextObject);// 0x1b8ff70
	OPSkillColliderActor*[] GetSkillColliderByOwnerAndGroupID(Actor* InColliderOwner, FName InColliderTableGroupID);// 0x1b8fe60
	OPSkillColliderActor*[] GetSkillColliderByOwner(Actor* InColliderOwner);// 0x1b8fd80
	OPSkillColliderActor*[] GetSkillColliderByGroupID(Object* InWorldContextObject, FName InColliderTableGroupID);// 0x1b8fc70
	static Transform GetRandomWalkableTransformOnNavigation(Actor* InPivotActor, float InRandomRadiusMin, float InRandomRadiusMax, int InIteration);// 0x1b8f8a0
	static Transform GetRandomAroundTransformInCylinder(Actor* InPivotActor, Vector2D InRandomRadiusMinMax, Vector2D InRandomHeightMinMax, float InProbeRadius, out bool OutIsValid, GetRandomAroundTransformInCylinderArgument InIterationArgument, bool InAllowSky);// 0x1b8f520
	int GetNumSkillColliderByOwnerAndGroupID(Actor* InColliderOwner, FName InColliderTableGroupID);// 0x1b8f450
	OPSkillColliderActor*[] GetAllColliders(Object* InWorldContextObject);// 0x1b8ec30

--------------------------------
Class: OPSkillColliderDestroyArgument
	enum[] DestroyReasons;//[Offset: 0x0, Size: 1]
	int NextColliderUniqueID;//[Offset: 0x10, Size: 1]
	FName DestroyTag;//[Offset: 0x14, Size: 1]

--------------------------------
Class: GetRandomAroundTransformInCylinderArgument
	int MaxIterations;//[Offset: 0x28, Size: 1]
	enum RandomType;//[Offset: 0x2c, Size: 1]
	enum FindInLineType;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: OPGimmickManager.ActorComponent.Object
	OPGimmickPointActor*[] GimmickPointActors;//[Offset: 0xb8, Size: 1]
	static OPGimmickPointActor* SpawnGimmickPoint(Object* InWorldContextObject, Transform InSpawnTransform, FName InGimmickTableID);// 0x1b265f0
	void OnRoundStateChanged(enum NewRoundState);// 0x1b25f20
	void OnPlayerEnteredLoadingOnServerSide(OPLoadingManagerComponent* InLoadingManager, enum InLoadingStep);// 0x1b25e50
	static OPGimmickManager* GetGimmickManager(Object* InWorldContextObject);// 0x1b24fa0

--------------------------------
Class: OPPingSystemComponent.ActorComponent.Object
	uint32 TraceDistance;//[Offset: 0xb0, Size: 1]
	enum SelectedOrderType;//[Offset: 0xb5, Size: 1]
	TimerHandle PressTimer;//[Offset: 0xb8, Size: 1]
	OPPingSystemBase_Widget* CurrentMenu_Widget;//[Offset: 0xc0, Size: 1]
	OPPingSystemBase_Widget* OrderMenu_Widget;//[Offset: 0xc8, Size: 1]
	OPPingSystemBase_Widget* EMotionMenu_Widget;//[Offset: 0xd0, Size: 1]
	bool bIsWorldPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	enum DrawType;//[Offset: 0xf5, Size: 1]
	float CircleRadius;//[Offset: 0xf8, Size: 1]
	TimerHandle EmotionCooldownTimerHandle;//[Offset: 0x110, Size: 1]
	OPPingSystemElement*[] Widgets_Scoreboard;//[Offset: 0x120, Size: 1]
	OPPingSystemElement*[] Widgets_Minimap;//[Offset: 0x130, Size: 1]
	OPPingSystemElement*[] Widgets_World;//[Offset: 0x140, Size: 1]
	OPMinimapWidgetStyleComponent* MinimapOnTheScoreboard;//[Offset: 0x150, Size: 1]
	OPMinimapWidgetStyleComponent* MinimapOnTheMainHUD;//[Offset: 0x158, Size: 1]
	void ShowPing_World(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType, out const Vector WorldPosition, FString MessageKey, float InHideTime, bool InUseAssetTime);// 0x1b69f30
	void ShowPing_Minimap(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType, Vector2D ScreenPosition, bool InIsScoreboardbool, float InHideTime, bool InUseAssetTime);// 0x1b69cd0
	void ShowOrderSystem();// 0x1b69cb0
	void ShowEmotion(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x1b69b70
	void SetMousePositionCenter();// 0x1b69b30
	void RemoveLocalPing(byte OrderType);// 0x1b69860
	void OnShowAlert(Vector InWorldLocation);// 0x1b695d0
	bool OnReleasedKey();// 0x1b69520
	void OnReceiveRemovePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder);// 0x1b693f0
	void OnReceivePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder, out const Vector2D InPosByMinimap, out const Vector InPosByWorld, byte InPingSystemMsg);// 0x1b691e0
	void OnPressedKey_Escape();// 0x1b691c0
	void OnPressedKey(bool InIsGoodOrBad, bool InIsWorldPing, bool InIsEmotionKey);// 0x1b69090
	void OnPressedIcon(out const enum InActorType, uint32 InPlayerID);// 0x1b68fc0
	void OnPostPingAction();// 0x1b68fa0
	bool IsShowMenuWidget();// 0x1b68d50
	void HidePing_World(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x1b68bf0
	void HidePing_Minimap(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x1b68ab0
	bool GetTraceWorldDown(out Vector InResult, Vector InWorldLocstion);// 0x1b68910
	bool GetTracePointWorld(out Vector InResult);// 0x1b68870
	Vector2D GetOffsetScreenSpaceOver();// 0x1b68830
	void AddLocalPing(byte InOrderType, out const Vector InPosByWorld);// 0x1b68380

--------------------------------
Class: OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	class OPPingSystemElement* Widget_PingHelpClass;//[Offset: 0x260, Size: 1]
	class OPPingSystemElement* Widget_PingDangerClass;//[Offset: 0x268, Size: 1]
	class OPPingSystemElement* Widget_PingLostClass;//[Offset: 0x270, Size: 1]
	class OPPingSystemElement* Widget_PingMoveClass;//[Offset: 0x278, Size: 1]
	class OPPingSystemElement* Widget_PingGoodClass;//[Offset: 0x280, Size: 1]
	class OPPingSystemElement* Widget_PingBadClass;//[Offset: 0x288, Size: 1]
	class OPPingSystemElement* Widget_DunkZoneClass;//[Offset: 0x290, Size: 1]
	class OPPingSystemElement* Widget_ImpossibleClass;//[Offset: 0x298, Size: 1]
	class OPPingSystemElement* Widget_Assemble;//[Offset: 0x2a0, Size: 1]
	class OPPingSystemElement* Widget_Guard;//[Offset: 0x2a8, Size: 1]
	class OPPingSystemElement* Widget_Fallback;//[Offset: 0x2b0, Size: 1]
	class OPPingSystemElement* Widget_Ward;//[Offset: 0x2b8, Size: 1]
	class OPPingSystemElement* Widget_BattleClass;//[Offset: 0x2c0, Size: 1]
	class OPPingSystemElement* Widget_DroppedOrbClass;//[Offset: 0x2c8, Size: 1]
	class OPPingSystemElement* Widget_WarningPrimeClass;//[Offset: 0x2d0, Size: 1]
	class OPPingSystemElement* Widget_WarningBlackClass;//[Offset: 0x2d8, Size: 1]
	SlateBrush PrimeFace;//[Offset: 0x2e0, Size: 1]
	SlateBrush BlackFace;//[Offset: 0x368, Size: 1]
	TextBlock* Bind_Text_Order;//[Offset: 0x3f0, Size: 1]
	Vector2D CachedMouseStartPosition;//[Offset: 0x3f8, Size: 1]
	Vector2D CachedMouseCurrentPosition;//[Offset: 0x400, Size: 1]
	Vector CachedTraceStart;//[Offset: 0x408, Size: 1]
	Vector CachedTraceEnd;//[Offset: 0x414, Size: 1]
	float WorldScale;//[Offset: 0x420, Size: 1]
	float MinimapScale;//[Offset: 0x424, Size: 1]
	CanvasPanel*[] HoverImages;//[Offset: 0x428, Size: 1]
	OPPingSystemComponent* PingSystem;//[Offset: 0x438, Size: 1]
	void OnVisible_BP();// 0x1f25360
	void OnCollapsed_BP();// 0x1f25360
	void OnChangeOrder(out const enum InOrderType);// 0x1f25360
	class OPPingSystemElement GetWidgetClass(out const enum Order);// 0x1b68a10

--------------------------------
Class: OPPingSystemElement.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Meter;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_Arrow_Parent;//[Offset: 0x288, Size: 1]
	UserWidget* Bind_Mouse_Hover;//[Offset: 0x290, Size: 1]
	SoundBase* AppearSound;//[Offset: 0x298, Size: 1]
	float LifeTime;//[Offset: 0x2a0, Size: 1]
	TimerHandle DestroyTimerHandle;//[Offset: 0x2a8, Size: 1]
	OPPingSystemComponent* CurrentPingSystem;//[Offset: 0x2b0, Size: 1]
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x2d0, Size: 1]
	OP_PlayerController* SelfPlayerController;//[Offset: 0x2d8, Size: 1]
	enum HeroIconType;//[Offset: 0x2f4, Size: 1]
	void SetPingIconType_BP(bool InIsSelf);// 0x1f25360
	void OnStartHovered();// 0x1a7d3a0
	void OnEndtHovered();// 0x1a7d3a0
	void OnContinueAnimation3D();// 0x1f25360
	void OnClicked();// 0xd9d3e0
	void OnAppear3D();// 0x1f25360
	void OnAppear2D();// 0x1f25360

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x315e830

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 1]
	void SetZOrder(int InZOrder);// 0x3160a30
	void SetSize(Vector2D InSize);// 0x3160550
	void SetPosition(Vector2D InPosition);// 0x3160350
	void SetOffsets(Margin InOffset);// 0x315ff70
	void SetMinimum(Vector2D InMinimumAnchors);// 0x315fe60
	void SetMaximum(Vector2D InMaximumAnchors);// 0x315fde0
	void SetLayout(out const AnchorData InLayoutData);// 0x315fc10
	void SetAutoSize(bool InbAutoSize);// 0x315f0e0
	void SetAnchors(Anchors InAnchors);// 0x315efc0
	void SetAlignment(Vector2D InAlignment);// 0x315ef40
	int GetZOrder();// 0x315ee80
	Vector2D GetSize();// 0x315ebe0
	Vector2D GetPosition();// 0x315eba0
	Margin GetOffsets();// 0x315eb60
	AnchorData GetLayout();// 0x315ead0
	bool GetAutoSize();// 0x315ea40
	Anchors GetAnchors();// 0x315ea00
	Vector2D GetAlignment();// 0x315e9c0

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	Vector2D Alignment;//[Offset: 0x20, Size: 1]

--------------------------------
Class: OPMinimapWidgetStyleComponent.UserWidget.Widget.Visual.Object
	bool bIsOnScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bIsHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	FText MapName;//[Offset: 0x268, Size: 1]
	enum HeroIconType;//[Offset: 0x280, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x281, Size: 1]
	class OPMinimapElementPlayer* WIDGET_A_Player;//[Offset: 0x288, Size: 1]
	class OPMinimapElementPlayer* WIDGET_E_Player;//[Offset: 0x290, Size: 1]
	class OPMinimapElementPlayer* WIDGET_S_Player;//[Offset: 0x298, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Core;//[Offset: 0x2a0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Core;//[Offset: 0x2a8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Inhivitor;//[Offset: 0x2b0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Inhivitor;//[Offset: 0x2b8, Size: 1]
	class OPMinimapElementBase* WIDGET_AR_Inhivitor;//[Offset: 0x2c0, Size: 1]
	class OPMinimapElementBase* WIDGET_ER_Inhivitor;//[Offset: 0x2c8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Tower;//[Offset: 0x2d0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Tower;//[Offset: 0x2d8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Minion;//[Offset: 0x2e0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Minion;//[Offset: 0x2e8, Size: 1]
	class OPMinimapElementBase* WIDGET_M_Warp;//[Offset: 0x2f0, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Blue;//[Offset: 0x2f8, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Red;//[Offset: 0x300, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Green;//[Offset: 0x308, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Purple;//[Offset: 0x310, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Dino;//[Offset: 0x318, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Prime;//[Offset: 0x320, Size: 1]
	class OPMinimapElementBase* WIDGET_J_PrimeBaby;//[Offset: 0x328, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Ward;//[Offset: 0x330, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Ward;//[Offset: 0x338, Size: 1]
	class OPMinimapElementBase* WIDGET_S_Ward;//[Offset: 0x340, Size: 1]
	class OPMinimapElementBase* WIDGET_J_White;//[Offset: 0x348, Size: 1]
	LinearColor IconColor_White_Ally;//[Offset: 0x350, Size: 1]
	LinearColor IconColor_White_Enemy;//[Offset: 0x360, Size: 1]
	class OPMinimapElementBase* WIDGET_Tutorial_Spot;//[Offset: 0x370, Size: 1]
	Image* Bind_Map;//[Offset: 0x378, Size: 1]
	Image* Bind_Map_Outline;//[Offset: 0x380, Size: 1]
	CanvasPanel* Bind_WidgetParent;//[Offset: 0x388, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Root;//[Offset: 0x390, Size: 1]
	bool bIsReversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	<uint32,Image*> WIDGETS_MINIONS;//[Offset: 0x3a0, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_LANEBABYPRIMES;//[Offset: 0x3f0, Size: 1]
	<FString,OPMinimapElementBase*> WIDGETS_HEROS;//[Offset: 0x440, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_JUNGLES;//[Offset: 0x490, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_PLACEABLES;//[Offset: 0x4e0, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_INHIBITOR_SPAWNERS;//[Offset: 0x530, Size: 1]
	OPMinimapElementPlcaceableCollider*[] WIDGETS_PORTALS;//[Offset: 0x580, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_WARDS;//[Offset: 0x590, Size: 1]
	OPMinimapElementBase* WIDGETS_TUTORIAL_SPOT;//[Offset: 0x5e0, Size: 1]
	OPMinimapElementBase*[] WidgetPools;//[Offset: 0x5f8, Size: 1]
	Image*[] MinionWidgetPools;//[Offset: 0x608, Size: 1]
	Actor*[] JungleSpawners;//[Offset: 0x620, Size: 1]
	Actor*[] InhibitorSpawners;//[Offset: 0x630, Size: 1]
	Actor*[] Portals;//[Offset: 0x640, Size: 1]
	OP_PlayerController* CachedPlayerController_Self;//[Offset: 0x658, Size: 1]
	OPRoundHandlerComponent* CachedRoundHandler;//[Offset: 0x660, Size: 1]
	Vector2D MinimapOffset;//[Offset: 0x668, Size: 1]
	Vector2D MinimapOffset_Invert;//[Offset: 0x670, Size: 1]
	float IconSize_Base;//[Offset: 0x678, Size: 1]
	float IconSize_Tower;//[Offset: 0x67c, Size: 1]
	float IconSize_Hero;//[Offset: 0x680, Size: 1]
	float IconSize_Minion;//[Offset: 0x684, Size: 1]
	float IconSize_Jungle;//[Offset: 0x688, Size: 1]
	float IconSize_Ping;//[Offset: 0x68c, Size: 1]
	float IconSize_Base_Big;//[Offset: 0x690, Size: 1]
	float IconSize_Tower_Big;//[Offset: 0x694, Size: 1]
	float IconSize_Hero_Big;//[Offset: 0x698, Size: 1]
	float IconSize_Minion_Big;//[Offset: 0x69c, Size: 1]
	float IconSize_Jungle_Big;//[Offset: 0x6a0, Size: 1]
	float IconSize_Ping_Big;//[Offset: 0x6a4, Size: 1]
	float MinimapWidgetSize;//[Offset: 0x6a8, Size: 1]
	float COG_Size;//[Offset: 0x6ac, Size: 1]
	float AOP_Size;//[Offset: 0x6b0, Size: 1]
	float MNL_Size;//[Offset: 0x6b4, Size: 1]
	float Tuto01_Size;//[Offset: 0x6b8, Size: 1]
	float Tuto02_Size;//[Offset: 0x6bc, Size: 1]
	Vector2D MinimapOffsetToTuto02;//[Offset: 0x6c0, Size: 1]
	Vector2D MinimapOffset_InvertToTuto02;//[Offset: 0x6c8, Size: 1]
	SlateBrush IconBrush_Minion_Ally;//[Offset: 0x6d8, Size: 1]
	SlateBrush IconBrush_Minion_Enemy;//[Offset: 0x760, Size: 1]
	LinearColor IconColor_Minion_Ally;//[Offset: 0x7e8, Size: 1]
	LinearColor IconColor_Minion_Ally_Hit;//[Offset: 0x7f8, Size: 1]
	LinearColor IconColor_Minion_Enemy;//[Offset: 0x808, Size: 1]
	LinearColor IconColor_Minion_Enemy_Hit;//[Offset: 0x818, Size: 1]
	Vector2D BrushSize_Minion;//[Offset: 0x828, Size: 1]
	Vector2D BrushSize_Minion_Big;//[Offset: 0x830, Size: 1]
	Vector2D MinimapOffset_PaintMulti;//[Offset: 0x838, Size: 1]
	Vector2D MinimapOffset_PaintAdd;//[Offset: 0x840, Size: 1]
	Vector2D MinimapOffset_PaintAdd_Invert;//[Offset: 0x848, Size: 1]
	float HeroMinionIntervalTime;//[Offset: 0x870, Size: 1]
	float RemainIntervalTime;//[Offset: 0x874, Size: 1]
	void OnLoadedOPLevel();// 0x1f25360
	void OnLastHitAttackerChanged(enum InAttackerType, UnitBase* InVictimUB);// 0x1b5bce0
	void OnDeadLaneMinion(UnitBase* InDeadUnit);// 0x1b5bb70
	void OnAppearEnemy(byte InMainType, Actor* InActor);// 0x1b5baa0
	OPMinimapTableRow GetMinimapImagePath(FString InMapID);// 0x1b5b8d0
	static OPMinimapWidgetStyleComponent* GetInstance(Object* InWorldContextObject, bool FromHUDOrScoreboard);// 0x1b5b7e0

--------------------------------
Class: OPMinimapElementPlayer.OPMinimapElementBase.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Sight;//[Offset: 0x2c0, Size: 1]
	Image* Bind_Image_Hero;//[Offset: 0x2c8, Size: 1]
	OP_PlayerState* PlayerState;//[Offset: 0x2d0, Size: 1]
	class UserWidget* OrbPing_BP;//[Offset: 0x2d8, Size: 1]
	void OnUnHovered();// 0x1b5be40
	void OnShowOrb(bool InIsShow);// 0x1f25360
	void OnRecallActive(bool InFinished);// 0x1f25360
	void OnHovered();// 0x1b5bcc0

--------------------------------
Class: OPMinimapElementBase.UserWidget.Widget.Visual.Object
	float HPClampMin;//[Offset: 0x270, Size: 1]
	float HPClampMax;//[Offset: 0x274, Size: 1]
	Actor* CachedInhibitor;//[Offset: 0x280, Size: 1]
	OPMinimapWidgetStyleComponent* WidgetParent;//[Offset: 0x288, Size: 1]
	Actor* CurrentActor;//[Offset: 0x290, Size: 1]
	CanvasPanelSlot* WidgetSlot;//[Offset: 0x298, Size: 1]
	OPMinimapElementBase* DestroyedWidget;//[Offset: 0x2a0, Size: 1]
	void UpdateRespawn(float InPer);// 0x1f25360
	void TryHide();// 0x1b5bef0
	void SetRespawn(bool InIsRespawning);// 0x1f25360
	void SetHP(float InHPPer);// 0x1f25360
	void OnStartAlert(float InTime);// 0x1b5bc20
	void OnHit();// 0x1f25360
	void OnHeroHealthChanged(float InHP);// 0x1b5bc20
	void OnFinishedDestroy();// 0x1b5bc00
	void OnFinishedAlert();// 0xd9d3e0
	void OnDOA_BP(bool InIsDead);// 0x1f25360
	void OnDestroy();// 0x1f25360
	void OnChangeTeamColor(LinearColor InColor, bool InIsAlly);// 0x1f25360
	void OnAppearEnemy();// 0x1f25360
	void OnAppear();// 0x1f25360
	void OnActiveStatus(bool InIsActive);// 0x1f25360
	bool IsAlertRemain();// 0x1ac5870
	bool GetIsDeadState();// 0x1b5b8b0

--------------------------------
Class: OPMinimapElementPlcaceableCollider.OPMinimapElementBase.UserWidget.Widget.Visual.Object
	FName ColliderTableID;//[Offset: 0x2c0, Size: 1]
	Actor* CachedPlaceableSkillColliderActor;//[Offset: 0x2c8, Size: 1]
	void OnSetColorBP(bool InIsDuoOrGuadianPrime);// 0x1f25360

--------------------------------
Class: OPMinimapTableRow.TableRowBase
	FName MapID;//[Offset: 0x8, Size: 1]
	enum MiniMapType;//[Offset: 0x10, Size: 1]
	int MiniMapValue;//[Offset: 0x14, Size: 1]
	Material* MinimapImage;//[Offset: 0x18, Size: 1]
	Material* MinimapImageInvert;//[Offset: 0x20, Size: 1]
	Material* MinimapImageHover;//[Offset: 0x28, Size: 1]
	Material* MinimapImageHoverInvert;//[Offset: 0x30, Size: 1]

--------------------------------
Class: OPSpawnerManager.ActorComponent.Object
	Point_PlayerSpawn*[] GetPlayerSpawner(enum TeamFriendlyState);// 0x1ba46b0
	Point_LaneMinionSpawn*[] GetLaneSpawner(enum TeamFriendlyState);// 0x1ba4540
	Point_JungleMinionSpawn*[] GetJungleSpawner(enum JungleSpawnerType);// 0x1ba4460
	Point_InhibitorSpawn*[] GetInhibitorSpawner();// 0x1ba43e0
	FName[] GetAllMinionSpawnerHeroSkinIDs(bool bUniqueValue);// 0x1ba4270

--------------------------------
Class: Point_PlayerSpawn.TeamActorBase.Actor.Object
	BillboardComponent* BillboardComponent;//[Offset: 0x230, Size: 1]
	FName SpawnPointName;//[Offset: 0x244, Size: 1]
	int TeamNum;//[Offset: 0x24c, Size: 1]

--------------------------------
Class: TeamActorBase.Actor.Object
	void HandleTeamChanged(byte NewTeam);// 0x1be5bd0

--------------------------------
Class: Point_LaneMinionSpawn.Point_MinionSpawn.TeamActorBase.Actor.Object
	NPC_WayPoint* GotoTargetWayPointAfterSpawn;//[Offset: 0x2c0, Size: 1]
	Point_InhibitorSpawn* SuperMinionSpawnFactor;//[Offset: 0x2c8, Size: 1]
	enum LaneIndex;//[Offset: 0x334, Size: 1]
	FName RunSpawnDunk();// 0x1bd9db0
	void OnSpawnStart();// 0x1bd9c70
	void OnSpawnEnd();// 0x1bd9c50
	void OnCustomStart();// 0xeba2b0

--------------------------------
Class: Point_MinionSpawn.TeamActorBase.Actor.Object
	FName Index;//[Offset: 0x220, Size: 1]
	FName TrainingSpiritID;//[Offset: 0x228, Size: 1]
	enum TrainingSpiritType;//[Offset: 0x230, Size: 1]
	enum SpawnActorType;//[Offset: 0x231, Size: 1]
	enum SpawnSpilitType;//[Offset: 0x232, Size: 1]
	float AddHealthPerWave;//[Offset: 0x234, Size: 1]
	float AddPhysicalDamagePerWave;//[Offset: 0x238, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x240, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x248, Size: 1]
	bool SpawnFirstNPCOnCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Transform[] ObjectSpawnTransforms;//[Offset: 0x258, Size: 1]
	int TeamNum;//[Offset: 0x268, Size: 1]
	SphereComponent* SpawnRadius;//[Offset: 0x2b0, Size: 1]
	SphereComponent* VisionCollider;//[Offset: 0x2b8, Size: 1]
	void OnSpawnedChildNPC(const Actor* SpawnedChild);// 0x1bd9c90
	void OnRestartingRespawnTimer(float TimeLeft);// 0x1bd9b20
	void OnPostCreationNotify(float InTimeAfter);// 0x1bd99c0
	int GetTeamNum();// 0x1bd9630
	enum GetSpawnerType();// 0x1bd9600
	static Point_MinionSpawn* GetSpawnerBySpawnerID(Object* InWorldContextObject, FName InSpawnerID);// 0x1bd9530
	OPMinimapExposableComponent* GetMinimapExposable();// 0x1bd9470
	void BroadcastTableInfo(enum InSpawnerTypeByTable);// 0x1bd8d40
	void BroadcastRespawnEvent(float InNextRespawnDelay);// 0x1bd8cb0

--------------------------------
Class: NPC_WayPoint.Actor.Object
	NPC_WayPoint* WaypointWhereTeam1Goes;//[Offset: 0x228, Size: 1]
	NPC_WayPoint* WaypointWhereTeam2Goes;//[Offset: 0x230, Size: 1]
	Actor* CheckObjectBeforeGo;//[Offset: 0x238, Size: 1]
	Vector WaypointOffset;//[Offset: 0x240, Size: 1]
	bool bWaypointCheckDebugTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	float WaypointCheckInterval;//[Offset: 0x250, Size: 1]
	bool bOnlyUseTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	BoxComponent* Range;//[Offset: 0x268, Size: 1]
	void LaneMinionCheck();// 0x1a9d260
	Vector GetTargetPoint();// 0x1a9d0d0

--------------------------------
Class: OPMinimapExposableComponent.ActorComponent.Object
	SlateBrush Cached_MinimapIcon;//[Offset: 0xb8, Size: 1]
	bool bShouldHideOnMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bAlwaysExposed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	enum IconType;//[Offset: 0x142, Size: 1]
	bool bOverrideMinimapIconColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	LinearColor ColorOverride;//[Offset: 0x144, Size: 1]
	bool bIsRotatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bShowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]

--------------------------------
Class: Point_InhibitorSpawn.TeamActorBase.Actor.Object
	CapsuleComponent* RootSphereBorder;//[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* SkeletalMeshToShow;//[Offset: 0x230, Size: 1]
	class TowerBaseCPP* InhibitorClass;//[Offset: 0x238, Size: 1]
	FName TowerCharacterID;//[Offset: 0x240, Size: 1]
	FName PostTowerCharacterID;//[Offset: 0x248, Size: 1]
	TowerBaseCPP* FrontTower;//[Offset: 0x250, Size: 1]
	enum BuildingType;//[Offset: 0x258, Size: 1]
	enum LaneType;//[Offset: 0x259, Size: 1]
	TowerBaseCPP* CurrentTower;//[Offset: 0x260, Size: 1]
	int TeamNum;//[Offset: 0x268, Size: 1]
	float RespawnDelay;//[Offset: 0x26c, Size: 1]
	Vector WaypointOffset;//[Offset: 0x270, Size: 1]
	Vector SpawnPointOffset;//[Offset: 0x27c, Size: 1]
	bool IsFirstSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	JungleSpawnerHeadbarComponent* RespawnHeadbarComponent;//[Offset: 0x290, Size: 1]
	bool bSpawnedAtStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	TowerBaseCPP* SpawnInhibitor_ByCustom();// 0x1be8400
	void SpawnInhibitor();// 0x1be83e0
	void OnTowerSpawned_BPNE(TowerBaseCPP* InTower, float InRespawnTime);// 0x1be75e0
	void NotifyTowerDestroyed(Actor* InActor);// 0x1be62a0
	void BroadcastTowerSpawnEvent(TowerBaseCPP* InTower, float InRespawnTime);// 0x1be54c0

--------------------------------
Class: TowerBaseCPP.Placeable_Object.TeamActorBase.Actor.Object
	SkeletalMeshComponent* TowerMesh;//[Offset: 0x300, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty OnCurrentEnemyChanged;//[Size: 1]
	TowerBaseCPP* FrontTower;//[Offset: 0x328, Size: 1]
	enum BuildingType;//[Offset: 0x330, Size: 1]
	enum LaneType;//[Offset: 0x331, Size: 1]
	float TimesPoweredPerPeriods;//[Offset: 0x334, Size: 1]
	int PeriodsNum;//[Offset: 0x338, Size: 1]
	int PeriodsCount;//[Offset: 0x33c, Size: 1]
	Actor* LastHitEnemy;//[Offset: 0x340, Size: 1]
	Actor* CurrentEnemy;//[Offset: 0x348, Size: 1]
	bool IsProtected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool IsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	SoundData AttackHitSound;//[Offset: 0x358, Size: 1]
	float AttackHitSoundVolumeOverrride;//[Offset: 0x3b8, Size: 1]
	SoundBase* DeathSound;//[Offset: 0x3c0, Size: 1]
	float DeathSoundVolumeOverride;//[Offset: 0x3c8, Size: 1]
	Point_InhibitorSpawn* CachedSpawner;//[Offset: 0x3d0, Size: 1]
	float AttackRange;//[Offset: 0x3d8, Size: 1]
	void SetRespawed(bool InIsRespawned);// 0x1be6720
	void SetCurrentEnemy(Actor* Target);// 0x1be7a10
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1be7530
	void OnSomethingEndOverlappedInVision(Actor* Target);// 0x1be7410
	void OnRepActivated();// 0x1be7180
	void OnCurrentEnemyChangedDelegate();// 0x1be6c40
	void OnActivated(bool NewState);// 0x1be6690
	void HandleTowerShootEffectBP(Vector Pos);// 0x1be5c50
	void BroadcastHitEffect(Vector_NetQuantize HitPos, Actor* InTarget);// 0x1be5230
	void AddTakeDamageCondition(enum SkillSlot, byte Count);// 0x1be5160

--------------------------------
Class: Placeable_Object.TeamActorBase.Actor.Object
	CapsuleComponent* RootSphereBorder;//[Offset: 0x228, Size: 1]
	StaticMeshComponent* RootMesh;//[Offset: 0x230, Size: 1]
	OPRewardComponent* OPRewardComponent;//[Offset: 0x238, Size: 1]
	bool EnableTimedThink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ServerSideOnlyThink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	float NextThink;//[Offset: 0x24c, Size: 1]
	ParticleSystem*[] DestructionEffect;//[Offset: 0x250, Size: 1]
	float GlobalExpWhenDestroyed;//[Offset: 0x260, Size: 1]
	Vector WaypointOffset;//[Offset: 0x264, Size: 1]
	Actor*[] Invincible_Factors;//[Offset: 0x280, Size: 1]
	bool bEnableAdjustFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	UnitStatComponent* UnitStatComponent;//[Offset: 0x298, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x2a0, Size: 1]
	OPOptimizationComponent* OptimizationComponent;//[Offset: 0x2a8, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x2b0, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x2b8, Size: 1]
	BuildingHealthbar* HUDHeadbarComponent;//[Offset: 0x2c0, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x2c8, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x2d0, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x2d8, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x2e0, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x2e8, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x2f0, Size: 1]
	enum ActorType;//[Offset: 0x2f8, Size: 1]
	void Think();// 0xe0e420
	bool ShouldTakeDamageBP();// 0x1bd5d20
	void OnDimensionChanged();// 0xd9d3e0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1bd48e0
	bool IsEnemy(Actor* Target, bool DoHidingCheck);// 0x1bd4410
	void HandleDestruction(Actor* Actor);// 0x1bd4250
	void HandleDeathBP();// 0x1bd4230
	Transform GetRootSphereGroundTransform();// 0x1bd3f50
	float GetHealthPercent();// 0x1bd3de0
	Transform GetGroundTransform();// 0x1bd3d10
	FName GetCharacterID();// 0x1bd3970
	Vector GetActorLocationRandomBounds(float tolerence);// 0x1bd3640
	float AdjustFinalDamage_BPNE(enum InStatusType, float InFinalDamage);// 0x1bd3130

--------------------------------
Class: OPUROComponent.ActorComponent.Object
	int[] LODToFrameSkipMap;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: OPRewardComponent.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0xb0, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0xb8, Size: 1]
	float ExpCheckTime;//[Offset: 0xc0, Size: 1]
	RewardTableData[] ExpDatas;//[Offset: 0xc8, Size: 1]
	RewardTableData[] GoldDatas;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: RewardTableData
	float Reward;//[Offset: 0x0, Size: 1]
	enum RewardGainedType;//[Offset: 0x4, Size: 1]
	float AssisteReviseRate;//[Offset: 0x8, Size: 1]
	float GainedRange;//[Offset: 0xc, Size: 1]
	float GainedTime;//[Offset: 0x10, Size: 1]
	float STDEV_Ratio;//[Offset: 0x14, Size: 1]
	float STDEV_Ratio_BlockTime;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BuildingHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: HUDHeadbarComponent.SceneComponent.ActorComponent.Object
	OPHeadbarComponent* MyHeadbarComponent;//[Offset: 0x1f8, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x200, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x208, Size: 1]
	PSCoolTimeManager* PSCoolTimeManager;//[Offset: 0x210, Size: 1]
	PSInventoryManager* PSInventoryManager;//[Offset: 0x218, Size: 1]
	bool IgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool HideWhenHealthFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	bool IgnoreVisionBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 1]
	bool IgnoreTeamCheckOrExposedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float MaxDrawDistanceOverride;//[Offset: 0x238, Size: 1]
	float MinDrawDistanceOverride;//[Offset: 0x23c, Size: 1]
	float FullScaleDistance;//[Offset: 0x240, Size: 1]
	bool bDrawHealthBarOnTopScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	int DrawOnTopScreen_Priority;//[Offset: 0x248, Size: 1]
	void SetMaxDrawDistanceOverride(float InNewOverride);// 0x1a7f190
	void SetHideFromScreen(FName InToken, bool InShouldHide);// 0x1a7f0c0
	void OnUpdateBleedingInfo(float InBleedMarkCount);// 0x1a7ef20
	void OnSkillReadStatusChanged();// 0x1a7ede0
	void OnSkillInventoryUpdated();// 0x1a7edc0
	void OnNativeHidingStateChanged();// 0x1a7e830
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a7d600
	float GetPostDuration();// 0x1a7d500
	bool GetHideFromScreen();// 0x1a7d400
	float GetDuration();// 0x1a7d3e0

--------------------------------
Class: OPHeadbarComponent.UserWidget.Widget.Visual.Object
	float ScaleByDistMin;//[Offset: 0x260, Size: 1]
	float ScaleByDistMax;//[Offset: 0x264, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x268, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Self;//[Offset: 0x270, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Enemy;//[Offset: 0x278, Size: 1]
	ProgressBar* Bind_PBar_Mana;//[Offset: 0x280, Size: 1]
	OPRetainerBox* Bind_OPRetainerBox_UnitName;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_UnitName;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_UnitLevel;//[Offset: 0x298, Size: 1]
	Widget* Bind_View_Aimmed;//[Offset: 0x2a0, Size: 1]
	Image* Bind_Image_Image;//[Offset: 0x2a8, Size: 1]
	OPCCDurationWidget* Bind_Widget_CCWidget;//[Offset: 0x2b0, Size: 1]
	UserWidget* Bind_Headbar_Stack;//[Offset: 0x2b8, Size: 1]
	CanvasPanel* Bind_Canvas_HeadbarStackSlot;//[Offset: 0x2c0, Size: 1]
	OPHeadbarStack* HeadbarStack;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* CCActive;//[Offset: 0x2d0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Small;//[Offset: 0x2d8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Medium;//[Offset: 0x2e0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x2e8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Tiny;//[Offset: 0x2f0, Size: 1]
	Widget* Bind_View_Self;//[Offset: 0x2f8, Size: 1]
	Widget* Bind_View_Ally;//[Offset: 0x300, Size: 1]
	Widget* Bind_View_Enemy;//[Offset: 0x308, Size: 1]
	CanvasPanel* Bind_Bleeding;//[Offset: 0x310, Size: 1]
	CanvasPanel* Bind_Use_item;//[Offset: 0x318, Size: 1]
	OPShopItemIconComponent* Bind_ShopItemIcon;//[Offset: 0x320, Size: 1]
	CanvasPanel* Bind_Panel_Harvester;//[Offset: 0x328, Size: 1]
	ProgressBar* Bind_PBar_HarvesterGauge;//[Offset: 0x330, Size: 1]
	TextBlock* Bind_Text_HarvesterGauge;//[Offset: 0x338, Size: 1]
	TextBlock* Bind_Text_Health;//[Offset: 0x348, Size: 1]
	CanvasPanel* Bind_Panel_DeathTimer;//[Offset: 0x350, Size: 1]
	ProgressBar* Bind_PBar_DeathTimer;//[Offset: 0x358, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Ultimate;//[Offset: 0x360, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Ultimate_On;//[Offset: 0x368, Size: 1]
	UMGSequencePlayer* CCActiveSequencePlayer;//[Offset: 0x390, Size: 1]
	FName HeadBarMagnification_Key;//[Offset: 0x398, Size: 1]
	SlateBrush SelfHealthbarBrush;//[Offset: 0x3a0, Size: 1]
	SlateBrush TeamHealthbarBrush;//[Offset: 0x428, Size: 1]
	SlateBrush EnemyHealthbarBrush;//[Offset: 0x4b0, Size: 1]
	SlateBrush EnemyMinionExecutableBrush;//[Offset: 0x538, Size: 1]
	float CCActiveAnimationSpeedScale;//[Offset: 0x5c0, Size: 1]
	HUDHeadbarComponent* MyHeadbarComponent;//[Offset: 0x5c8, Size: 1]
	UnitBase* ownerUnitBase;//[Offset: 0x660, Size: 1]
	void UpdateTeamColor();// 0x1a7f6c0
	void UpdateHighestBountyPlayer(OP_PlayerState* InDawnPlayer, OP_PlayerState* InDuskPlayer);// 0x1a7f560
	void ShowUseItem_BPNE(bool InIsShow);// 0x1a7f330
	void SetTeamState_BPNE(bool InIsSameTeam);// 0x11032c0
	void SetFocusAnimation_MaxHp(bool IsFocusOn, byte InTeamNum);// 0x1f25360
	void SetFocusAnimation(bool IsFocusOn, byte InTeamNum);// 0x1f25360
	void SetEmotion(enum InOrderType, bool InOpen, float InLifeTime, Vector InLocation, bool bAlly);// 0x1f25360
	void RefreshEmotionAnimation();// 0x1f25360
	void OnUnitMaxHealthChanged(float InNewMaxHealth);// 0x1a7eea0
	void OnUnitHealthChanged(float InNewHealth);// 0x1a7ee20
	void OnPercentChanged_BPNE(float InNewPercent, float InPreviousPercent);// 0x1a7e9f0
	void OnHighestBountyPlayer_BPNE(bool IsActive, bool IsAllyTeam);// 0x1a7e6d0
	void OnChangedPatiensProgressVisible(bool InVisibled);// 0x1f25360
	void OnChangedPatiensProgressValue(float InValue, float InMax);// 0x1f25360
	void OnChangedPatiensProgressPlay(bool InIsPlaying);// 0x1f25360
	float GetPatiensValue();// 0x1a7d4b0
	void CallRemoveFromParent_BPNE();// 0x1a7d3a0

--------------------------------
Class: OPHealthProgressBar.UserWidget.Widget.Visual.Object
	float Percent;//[Offset: 0x260, Size: 1]
	Vector2D HorizontalSizeRatio;//[Offset: 0x264, Size: 1]
	Vector2D VerticalSizeRatio;//[Offset: 0x26c, Size: 1]
	SlateBrush BackgroundBrush;//[Offset: 0x278, Size: 1]
	SlateBrush ProgressbarBrush;//[Offset: 0x300, Size: 1]
	bool bAutoGlowColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	SlateBrush ProgressBarVerticalGlowBrush;//[Offset: 0x390, Size: 1]
	SlateBrush ShieldBarBrush;//[Offset: 0x418, Size: 1]
	SlateBrush MagicShieldBarBrush;//[Offset: 0x4a0, Size: 1]
	SlateBrush DeltaBarBrush;//[Offset: 0x528, Size: 1]
	SlateBrush ScrollBarThumbBrush;//[Offset: 0x5b0, Size: 1]
	float GlowAmountOffet;//[Offset: 0x644, Size: 1]
	Vector2D ShieldAmount;//[Offset: 0x648, Size: 1]
	Vector2D MagicalShieldAmount;//[Offset: 0x650, Size: 1]
	float DeltaLerpPower;//[Offset: 0x658, Size: 1]
	float DeltaLerpRatioBaseLength;//[Offset: 0x65c, Size: 1]
	void SetProgressBarBrush(SlateBrush InNewBrush);// 0x1b26450
	void SetPercent(float InPercent);// 0x1b263d0
	void SetFromUnitBase(UnitBase* InUnitBase);// 0x1b26340

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 1]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 1]
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 1]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 1]
	float Percent;//[Offset: 0x2c8, Size: 1]
	byte BarFillType;//[Offset: 0x2cc, Size: 1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 1]
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 1]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 1]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 1]
	void SetPercent(float InPercent);// 0x316c0b0
	void SetIsMarquee(bool InbIsMarquee);// 0x316be70
	void SetFillColorAndOpacity(LinearColor InColor);// 0x316bba0

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush FillImage;//[Offset: 0x90, Size: 1]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 1]

--------------------------------
Class: OPRetainerBox.RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bUseVectorParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bUseVectorParameter1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bUseVectorParameter2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool bUseVectorParameter3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	LinearColor VectorParameter;//[Offset: 0x154, Size: 1]
	LinearColor VectorParameter1;//[Offset: 0x164, Size: 1]
	LinearColor VectorParameter2;//[Offset: 0x174, Size: 1]
	LinearColor VectorParameter3;//[Offset: 0x184, Size: 1]
	FName VectorParameterName;//[Offset: 0x194, Size: 1]
	FName VectorParameter1Name;//[Offset: 0x19c, Size: 1]
	FName VectorParameter2Name;//[Offset: 0x1a4, Size: 1]
	FName VectorParameter3Name;//[Offset: 0x1ac, Size: 1]
	<FName,LinearColor> VectorParameterInjection;//[Offset: 0x1b8, Size: 1]
	void SetVectorParameterValue(FName InVectorParameterName, LinearColor InVectorParameterValue);// 0x1b7c4d0
	void SetVectorParameter3(LinearColor V);// 0x1b7c380
	void SetVectorParameter2(LinearColor V);// 0x1b7c2d0
	void SetVectorParameter1(LinearColor V);// 0x1b7c220
	void SetVectorParameter(LinearColor V);// 0x1b7c430
	LinearColor GetVectorParameter3();// 0x1b7b9d0
	LinearColor GetVectorParameter2();// 0x1b7b9a0
	LinearColor GetVectorParameter1();// 0x1b7b970
	LinearColor GetVectorParameter();// 0x1b7ba00

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int phase;//[Offset: 0x124, Size: 1]
	int PhaseCount;//[Offset: 0x128, Size: 1]
	MaterialInterface* EffectMaterial;//[Offset: 0x130, Size: 1]
	FName TextureParameter;//[Offset: 0x138, Size: 1]
	void SetTextureParameter(FName TextureParameter);// 0x316c580
	void SetRetainRendering(bool bInRetainRendering);// 0x316c280
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x316c1b0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x316ba30
	void RequestRender();// 0x316ba10
	MaterialInstanceDynamic* GetEffectMaterial();// 0x316b3f0

--------------------------------
Class: OPCCDurationWidget.UserWidget.Widget.Visual.Object
	OPHeadbarComponent* MyHeadbarComponent;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Type;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_TypeUserName;//[Offset: 0x290, Size: 1]
	HorizontalBox* Bind_HorizontalBox_Size;//[Offset: 0x298, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Ultimate;//[Offset: 0x2a0, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Ultimate_On;//[Offset: 0x2a8, Size: 1]
	OPRetainerBox* OP_Text;//[Offset: 0x2b0, Size: 1]
	void OnStopCCActiveAnimation_BPNE();// 0x1102d70
	void OnCCTypeSet_BPNE(FName InKeywordType, float InDuration, float InExpired, Object* InIconResource, bool InPlayFillUp);// 0x1a7d8f0

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x31667a0

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3168760
	void SetSize(SlateChildSize InSize);// 0x31685d0
	void SetPadding(Margin InPadding);// 0x3168120
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3167cc0

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPHeadbarStack.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_Horizontal_Slot;//[Offset: 0x260, Size: 1]
	class OPHeadbarStackSlot* StackSlotWidget;//[Offset: 0x268, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x270, Size: 1]
	OPHeadbarStackSlot*[] StackSlotList;//[Offset: 0x278, Size: 1]
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1b25a90

--------------------------------
Class: OPHeadbarStackSlot.UserWidget.Widget.Visual.Object
	WidgetAnimation* Enable;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Enable_Idle;//[Offset: 0x268, Size: 1]
	WidgetAnimation* Disable;//[Offset: 0x270, Size: 1]
	WidgetAnimation* Disable_Idle;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Activate;//[Offset: 0x280, Size: 1]
	WidgetAnimation* Activate_Idle;//[Offset: 0x288, Size: 1]
	void PlayStackAnimation_BPNE(enum InStackType);// 0x1ace1a0
	void OnEnableAnimationFinished();// 0x1b25e30
	void OnDisableAnimationFinished();// 0x1b25e10
	void OnActivateAnimationFinished();// 0x1b25d60

--------------------------------
Class: OPUnitDividerWidget.UserWidget.Widget.Visual.Object
	float DivideSpacing;//[Offset: 0x260, Size: 1]
	float Size;//[Offset: 0x264, Size: 1]
	float DividerWidth;//[Offset: 0x268, Size: 1]
	float[] IgnoreSpacing;//[Offset: 0x270, Size: 1]
	SlateBrush DividerBrush;//[Offset: 0x288, Size: 1]
	SlateBrush DividerBrush2;//[Offset: 0x310, Size: 1]

--------------------------------
Class: OPShopItemIconComponent.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x260, Size: 1]
	OPIconImageWidget* Bind_Item_Icon;//[Offset: 0x268, Size: 1]
	OPIconImageWidget* Bind_Item_Background;//[Offset: 0x270, Size: 1]
	Image* Bind_Item_Cover;//[Offset: 0x278, Size: 1]
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x280, Size: 1]
	int HoverImagePlayCount;//[Offset: 0x288, Size: 1]
	WidgetAnimation* Bind_HoverAnimation;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Bind_SelectAnimation;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Bind_HoverEndAnimation;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* Bind_SelectEndAnimation;//[Offset: 0x2a8, Size: 1]
	Vector2D IconSize;//[Offset: 0x2b0, Size: 1]
	Texture2D* Background_Normal;//[Offset: 0x2b8, Size: 1]
	Texture2D* Background_Magic;//[Offset: 0x2c0, Size: 1]
	Texture2D* Background_Rare;//[Offset: 0x2c8, Size: 1]
	Texture2D* Background_Disable;//[Offset: 0x2d0, Size: 1]
	Texture2D* Cover_Normal;//[Offset: 0x2d8, Size: 1]
	Texture2D* Cover_Magic;//[Offset: 0x2e0, Size: 1]
	Texture2D* Cover_Rare;//[Offset: 0x2e8, Size: 1]
	Texture2D* Cover_Disable;//[Offset: 0x2f0, Size: 1]
	ShopItemBase* Cached_ItemInfo;//[Offset: 0x2f8, Size: 1]
	enum ItemGrade;//[Offset: 0x300, Size: 1]
	enum ItemSlotType;//[Offset: 0x301, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x308, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x310, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x318, Size: 1]
	ItemToolTipComponent* ItemToolTip;//[Offset: 0x320, Size: 1]
	bool bOverrideAnchorSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	byte TooltipPlacement;//[Offset: 0x329, Size: 1]
	Margin TooltipOffset;//[Offset: 0x32c, Size: 1]
	void UnselectSlot();// 0x1b311d0
	void ToolTipUpdate();// 0x1b311b0
	void SetItem(ShopItemBase* InItem, enum InSlotType, bool InMakeToolTip);// 0x1b31090
	void SetGreyScale(bool InIsGrey);// 0x1b30dc0
	void SelectSlot();// 0x1b30b90
	void Init();// 0x1b30380
	UserWidget* GetItemTooltip();// 0x1b30030

--------------------------------
Class: ShopItemBase.ItemBase.Object
	bool DestroyItemWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	enum ItemGrade;//[Offset: 0xf1, Size: 1]
	bool UnSellable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	enum[] CanBuyPosition;//[Offset: 0xf8, Size: 1]
	float SellBlockTime;//[Offset: 0x108, Size: 1]
	int ItemPrice;//[Offset: 0x10c, Size: 1]
	int Refillable;//[Offset: 0x110, Size: 1]
	int MaxStack;//[Offset: 0x114, Size: 1]
	bool IsStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool UseHiddenSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool IsActiveItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	ParticleSystem* Effect_OnActive;//[Offset: 0x120, Size: 1]
	FName SOCKET_NAME_ACTIVE_EFFECT_ATTACH;//[Offset: 0x128, Size: 1]
	SoundData Sound_OnActive;//[Offset: 0x130, Size: 1]

--------------------------------
Class: SoundData
	float FadeOutDelay;//[Offset: 0x0, Size: 1]
	FName SoundTableID;//[Offset: 0x4, Size: 1]
	SoundBase* Sound;//[Offset: 0x10, Size: 1]
	enum PlaySoundRule;//[Offset: 0x18, Size: 1]
	float SoundVolume;//[Offset: 0x1c, Size: 1]
	float SoundPitch;//[Offset: 0x20, Size: 1]
	float Radius;//[Offset: 0x24, Size: 1]
	float StartDelay;//[Offset: 0x28, Size: 1]
	FName LocalSoundTableID;//[Offset: 0x2c, Size: 1]
	SoundBase* LocalSound;//[Offset: 0x38, Size: 1]
	float LocalSoundVolume;//[Offset: 0x40, Size: 1]
	float LocalSoundPitch;//[Offset: 0x44, Size: 1]
	float LocalStartDelay;//[Offset: 0x48, Size: 1]
	bool bPlayClientOwnerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bForcePlayBothSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	SoundClass* SoundClassOverride;//[Offset: 0x50, Size: 1]
	SoundClass* LocalSoundClassOverride;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 1]
	float HeightOverride;//[Offset: 0x134, Size: 1]
	float MinDesiredWidth;//[Offset: 0x138, Size: 1]
	float MinDesiredHeight;//[Offset: 0x13c, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x140, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x144, Size: 1]
	float MinAspectRatio;//[Offset: 0x148, Size: 1]
	float MaxAspectRatio;//[Offset: 0x14c, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x31719b0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3170d20
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3170c20
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3170ba0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3170b20
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3170aa0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3170a20
	void SetHeightOverride(float InHeightOverride);// 0x3170810
	void ClearWidthOverride();// 0x316f070
	void ClearMinDesiredWidth();// 0x316f050
	void ClearMinDesiredHeight();// 0x316f030
	void ClearMinAspectRatio();// 0x316f010
	void ClearMaxDesiredWidth();// 0x316eff0
	void ClearMaxDesiredHeight();// 0x316efd0
	void ClearMaxAspectRatio();// 0x316efb0
	void ClearHeightOverride();// 0x316ef90

--------------------------------
Class: OPIconImageWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Icon;//[Offset: 0x260, Size: 1]
	Widget* Bind_Deactivate;//[Offset: 0x268, Size: 1]
	Texture2D* Texture;//[Offset: 0x270, Size: 1]
	Texture2D* Mask;//[Offset: 0x278, Size: 1]
	LinearColor ColorAndOpacity_Normal;//[Offset: 0x280, Size: 1]
	LinearColor ColorAndOpacity_Grey;//[Offset: 0x290, Size: 1]
	bool IsGreyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x2a8, Size: 1]
	MaterialInstanceDynamic* MaterialInstanceDynamic;//[Offset: 0x2b0, Size: 1]
	bool UseSprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	void SetTexture(Texture2D* InTexture);// 0x1b2cd00
	void SetSprite(FString InSpritePath);// 0x1b2d2d0
	void SetMask(Texture2D* InTexture);// 0x1b2ceb0
	void SetGreyScale(bool InIsGreyScale);// 0x1b2ce20
	void SetBrushFromTexture(Texture2D* InTexture);// 0x1b2cd00
	void SetBrush(out const SlateBrush InBrush);// 0x1b2cbf0
	void CheckMaterialInstanceDynamic();// 0x1b2bff0

--------------------------------
Class: ItemToolTipComponent.OPToolTipWidget.UserWidget.Widget.Visual.Object
	ItemInfoHeadComponent* Bind_ItemInfoHead;//[Offset: 0x270, Size: 1]
	ItemInfoMainComponent* Bind_ItemInfoMain;//[Offset: 0x278, Size: 1]
	void SetItem(ShopItemBase* ShopItem, bool IsInventoryItem);// 0x1a83e80

--------------------------------
Class: OPToolTipWidget.UserWidget.Widget.Visual.Object
	UserWidget* ParentWidget;//[Offset: 0x268, Size: 1]
	void OnWindowFocusChanged(bool bIsFocused);// 0x1bac070

--------------------------------
Class: ItemInfoHeadComponent.UserWidget.Widget.Visual.Object
	OPShopItemIconComponent* Bind_Icon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Name;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Price;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Grade;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_StackInfo;//[Offset: 0x280, Size: 1]
	Image* Bind_GoldIcon;//[Offset: 0x288, Size: 1]

--------------------------------
Class: ItemInfoMainComponent.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_StatContainer;//[Offset: 0x260, Size: 1]
	RichTextBlock* Bind_Description;//[Offset: 0x268, Size: 1]
	Spacer* Bind_Stat_Spacer;//[Offset: 0x270, Size: 1]
	Spacer* Bind_Desc_Spacer;//[Offset: 0x278, Size: 1]
	class ItemInfoStatComponent* ToolTipStatClass;//[Offset: 0x280, Size: 1]
	ItemInfoStatComponent*[] StatList;//[Offset: 0x290, Size: 1]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x317e4b0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x317fef0
	void SetSize(SlateChildSize InSize);// 0x317fc70
	void SetPadding(Margin InPadding);// 0x317f800
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x317f240

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 1]
	void SetSize(Vector2D InSize);// 0x31754b0

--------------------------------
Class: ItemInfoStatComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_StatText;//[Offset: 0x260, Size: 1]
	Image* Bind_StatIcon;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_StatValue;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_BeforeStat;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_AfterStat;//[Offset: 0x280, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x288, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x290, Size: 1]
	LinearColor DefaultColor;//[Offset: 0x298, Size: 1]
	LinearColor IncreaseColor;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: JungleSpawnerHeadbarComponent.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: Point_JungleMinionSpawn.Point_MinionSpawn.TeamActorBase.Actor.Object
	FName SpawnerGroupID;//[Offset: 0x2c0, Size: 1]
	Vector[] BattleFieldRange;//[Offset: 0x348, Size: 1]
	int TeamLocaitonNumber;//[Offset: 0x358, Size: 1]
	bool bNotUseRespawnSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	byte NumActiveMinions;//[Offset: 0x35d, Size: 1]
	class ActorFloatingWidget* ActorFloatingWidget_Class;//[Offset: 0x360, Size: 1]
	Actor*[] SpawnedMinions_Jungle;//[Offset: 0x428, Size: 1]
	enum PatiensState;//[Offset: 0x444, Size: 1]
	void UpdateNumActiveMinions(byte NewNumActiveMinions);// 0xeba070
	void SetJungleSpawner_S2AC(Actor* InSpawnedChild);// 0x1b88af0
	void OnSyncFromServerData(float InPatiensTime);// 0x1bd9d20
	void OnSelcectedSpiritNotify_S2AC(enum InSpiritType);// 0x1bd9bb0
	void OnPostCreationNotify_S2AC(float InTimeRemain, enum InSpiritType);// 0x1bd9a50
	void OnNumActiveMinionChanged();// 0x1bd9910
	void OnDestoryForBabyPrime_Temp();// 0x1bd98a0
	void OnChangedExposable(bool InTeam1, bool InTeam2);// 0x1bd97c0
	void OnChagnedPatiens_Client();// 0x1bd97a0
	void NextFirstGenTimer();// 0x1bd9780
	void MainHUDNotifyJob();// 0x1bd9760
	byte GetCurrentGroupIndex();// 0x1bd9320
	void ForceSpawnByEditor();// 0x1bd9090
	NPCBase*[] CustomSpawnJungleMinion();// 0x1bd9010

--------------------------------
Class: NPCBase.PlayerBase.Character.Pawn.Actor.Object
	FString[] Debug_NPCStateHistory;//[Offset: 0x958, Size: 1]
	bool bIsSummonedPrime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981, Size: 1]
	MinionHealthbar* HUDHeadbarComponent;//[Offset: 0x988, Size: 1]
	float PursuitTime;//[Offset: 0x9a0, Size: 1]
	int StuckToSelfDestructionCount;//[Offset: 0x9a4, Size: 1]
	int StuckToManualWalkCount;//[Offset: 0x9a8, Size: 1]
	Point_MinionSpawn* MotherSpawner;//[Offset: 0x9b0, Size: 1]
	Point_JungleMinionSpawn* MotherSpawnerAsJungle;//[Offset: 0x9b8, Size: 1]
	float EXPMultiply;//[Offset: 0x9c4, Size: 1]
	float EXPMultiplyDevideAmount;//[Offset: 0x9c8, Size: 1]
	int CardPointNoKillNPC;//[Offset: 0x9cc, Size: 1]
	int CardPointKillNPC;//[Offset: 0x9d0, Size: 1]
	float NPCInstantKillRatio;//[Offset: 0x9d4, Size: 1]
	bool MoveTo_HasDestination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	Vector MoveTo_FinalLocation;//[Offset: 0x9dc, Size: 1]
	Actor* EnemyObjectToCheck;//[Offset: 0x9e8, Size: 1]
	Actor* CurrentEnemy;//[Offset: 0x9f0, Size: 1]
	Actor* LastEnemy;//[Offset: 0x9f8, Size: 1]
	enum CurrentEnemyMainType;//[Offset: 0xa00, Size: 1]
	int EnemyLooseRange;//[Offset: 0xa28, Size: 1]
	bool bStaticNPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	float DamageScaleOnObjects;//[Offset: 0xa30, Size: 1]
	float DamageScaleOnNPCs;//[Offset: 0xa34, Size: 1]
	float DamageScaleOnHeroes;//[Offset: 0xa38, Size: 1]
	bool AttackRandomPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool IgnoreNearbyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	bool SetAsEnemyWhenHitIfNoEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 1]
	float BroadcastAggroToNearby;//[Offset: 0xa40, Size: 1]
	bool bIsForceAttackTowerNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 1]
	float InvincibleHomeDistance;//[Offset: 0xa58, Size: 1]
	float HealthAddPerWave;//[Offset: 0xab0, Size: 1]
	float DamageAddperWave;//[Offset: 0xab4, Size: 1]
	FXSystemAsset* FX_Aggro;//[Offset: 0xad0, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0xae8, Size: 1]
	float AttackSyncMaxDistance;//[Offset: 0xaf0, Size: 1]
	float AttackDelay;//[Offset: 0xaf4, Size: 1]
	enum MyLane;//[Offset: 0xb05, Size: 1]
	void StopMovement();// 0x1a9dde0
	void SetNextAttackPosition(Vector Pos, bool InMoveNow);// 0x1a9dc10
	void SetInvincibleHomeDistance(float InNewValue);// 0x1a9db90
	void PursuitEnemy(Actor* InAttacker, enum InVictimType);// 0x1a9dac0
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1a9da30
	void OnAggro_Internal();// 0x1a9d7e0
	bool IsInstantKillCondition(float InDamage);// 0x1a9d1d0
	FString GetNPCStatus();// 0x1a9d000
	Point_JungleMinionSpawn* GetMotherSpawnerAsJungle();// 0x1a9cfd0
	float GetInstantKillDamage();// 0x1a9cfa0
	float getgametime1();// 0x1a9e020
	Actor* GetCurrentEnemy();// 0x1a9ce80
	int GetCannotMoveCount();// 0x1a9ce60

--------------------------------
Class: MinionHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ActorFloatingWidget.UserWidget.Widget.Visual.Object
	Actor* CachedParentActor;//[Offset: 0x260, Size: 1]
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x268, Size: 1]
	PlayerController* CachedSelfPlayerController;//[Offset: 0x270, Size: 1]
	MainBattleUIComponent* CachedMainHUD;//[Offset: 0x278, Size: 1]
	void OnAppear3D();// 0x1f25360

--------------------------------
Class: MainBattleUIComponent.UserWidget.Widget.Visual.Object
	bool IsApplyUnitNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	Vector2D ScreenOverOffsetValueMin;//[Offset: 0x264, Size: 1]
	Vector2D ScreenOverOffsetValueMax;//[Offset: 0x26c, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x278, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Kill;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Death;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Assist;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_CS;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_Score_MyTeam;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_Score_Enemy;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_BlackScore_MyTeam;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_BlackScore_Enemy;//[Offset: 0x2c8, Size: 1]
	OPQuickSlotWidget* Bind_Widget_QuickSlot;//[Offset: 0x2d0, Size: 1]
	TextBlock* Bind_Text_Ping;//[Offset: 0x2d8, Size: 1]
	TextBlock* Bind_Text_FPS;//[Offset: 0x2e0, Size: 1]
	OPUMGHUDPointHUDWidgetHolder* Bind_Widget_PointHUD;//[Offset: 0x2e8, Size: 1]
	CanvasPanel* Bind_Widget_Root_Panel;//[Offset: 0x2f0, Size: 1]
	CanvasPanel* not_InvalidationBox_depth;//[Offset: 0x2f8, Size: 1]
	CanvasPanel* Bind_LB_ProFile;//[Offset: 0x300, Size: 1]
	MainBattleUIElement_HealthInfoComponent* Bind_Widget_HealthInfo;//[Offset: 0x308, Size: 1]
	MainBattleUIElement_HealthAndManaInfoWidget* Bind_Widget_HealthAndManaInfo;//[Offset: 0x310, Size: 1]
	OPInventoryWidget* Bind_Widget_Inventory;//[Offset: 0x318, Size: 1]
	OPQueuedBattlePopupHolderWidget* Bind_Widget_QueuedPopupHolder;//[Offset: 0x320, Size: 1]
	OPSkillActivationHelperComponent* Bind_Widget_SkillActivationHelper;//[Offset: 0x328, Size: 1]
	MainBattleUIElement_AutoRunNoticeWidget* Bind_Widget_Notice_AutoRun_Message;//[Offset: 0x330, Size: 1]
	MainBattleUIElement_SkillLevelUpErrorWidget* Bind_SkillLevelUpErrorWidget;//[Offset: 0x338, Size: 1]
	MainBattleUIElement_CircleBarTimeComponent* Bind_Widget_CircleBarTime;//[Offset: 0x340, Size: 1]
	MainBattleUIElement_CastBarComponent* Bind_Widget_CastBar;//[Offset: 0x348, Size: 1]
	MainBattleUIElement_CrosshairComponent* Bind_View_Crosshair;//[Offset: 0x350, Size: 1]
	OPTrainingCheatMenuKeyGuide* Bind_Ingame_HUD_Training_Key_Guide;//[Offset: 0x358, Size: 1]
	OPTrainingCheatMenuToast* Bind_ToolTip_Training_Message;//[Offset: 0x360, Size: 1]
	OPTrainingCheatMenu* Bind_Ingame_Training;//[Offset: 0x368, Size: 1]
	OPBattleShopWidget* Bind_Widget_ShopMenu;//[Offset: 0x370, Size: 1]
	MainBattleUIElement_TopHealthInfoComponent* Bind_Widget_TopBuildingHealthInfo;//[Offset: 0x378, Size: 1]
	MainBattleUIElement_TopHealthInfoComponent* Bind_Widget_TopEpicHealthInfo;//[Offset: 0x380, Size: 1]
	MainBattleUIElement_HitEffectBase* Bind_Widget_HitEffectBase;//[Offset: 0x388, Size: 1]
	OPChatComponent* Bind_Chat;//[Offset: 0x390, Size: 1]
	OPMinimapWidgetStyleComponent* Bind_WidgetStyle_Minimap;//[Offset: 0x398, Size: 1]
	MainBattleUIElement_LevelUpComponent* Bind_Widget_LevelUpPopup;//[Offset: 0x3a0, Size: 1]
	MainBattleUIElement_TeamPlayerListComponent* UMGHUD_TeamPlayerLister;//[Offset: 0x3a8, Size: 1]
	MainBattleUIElement_TeamPlayerListComponent* UMGHUD_TeamPlayerListerEnemy_C;//[Offset: 0x3b0, Size: 1]
	CanvasPanel* Bind_Top_Player;//[Offset: 0x3b8, Size: 1]
	MainBattleUIElement_CoreHealthComponent* Bind_Widget_Core_Team;//[Offset: 0x3c0, Size: 1]
	MainBattleUIElement_CoreHealthComponent* Bind_Widget_Core_Enemy;//[Offset: 0x3c8, Size: 1]
	OPSmartShopWidget* Bind_Popup_SmartShop;//[Offset: 0x3d0, Size: 1]
	OPSurrenderComponent* Bind_Popup_Surrender;//[Offset: 0x3d8, Size: 1]
	OPSurrenderComponent* Bind_Popup_Surrender_Early;//[Offset: 0x3e0, Size: 1]
	OPDeathscreenComponent* Bind_Widget_DeathScreen;//[Offset: 0x3e8, Size: 1]
	OPBattleScoreBoardComponent* Bind_Widget_ScoreBoard;//[Offset: 0x3f0, Size: 1]
	MainBattleUIElement_AbnormalListWidget* Bind_Widget_AbnormalList;//[Offset: 0x3f8, Size: 1]
	OPDamageIndicatorBaseComponent* Bind_Widget_IndicatorBase;//[Offset: 0x400, Size: 1]
	OPHeadbarManagerComponent* Bind_Widget_HeadbarManager;//[Offset: 0x408, Size: 1]
	MainBattleUIElement_NetworkError* Bind_Widget_NetworkError;//[Offset: 0x410, Size: 1]
	MainBattleUIElement_OutOfRange* Bind_Widget_OutOfRange;//[Offset: 0x418, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToOpenShop;//[Offset: 0x420, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToLearnSkill;//[Offset: 0x428, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToBabyPrime;//[Offset: 0x430, Size: 1]
	VerticalBox* Bind_VBox_TeamObjectives;//[Offset: 0x438, Size: 1]
	OPVerticalBoxKillStreak* Bind_VBox_KillStreaks;//[Offset: 0x440, Size: 1]
	OPPingSystemOrder_Widget* Bind_Widget_PingSystem;//[Offset: 0x448, Size: 1]
	OPPingSystemEmotion_Widget* Bind_Widget_PingSystem_Emotion;//[Offset: 0x450, Size: 1]
	OPPingSystemConsoleWidget* Bind_Widget_PingSystem_Console;//[Offset: 0x458, Size: 1]
	MainBattleUIElement_TrainingGuideComponent* Bind_Widget_TrainingGuide;//[Offset: 0x460, Size: 1]
	MainBattleUIElement_TrainingToastComponent* Bind_Widget_TrainingToast;//[Offset: 0x468, Size: 1]
	MainBattleUIElement_TutorialToastComponent* Bind_ToolTip_Practice_Message;//[Offset: 0x470, Size: 1]
	OPUnitNotifySystemComponent* Bind_UnitNotifyWidget;//[Offset: 0x478, Size: 1]
	bool bToggleHUDStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	OPStatSlotWidget* Stats_Physical;//[Offset: 0x4e8, Size: 1]
	OPStatSlotWidget* Stats_Physical_Def;//[Offset: 0x4f0, Size: 1]
	OPStatSlotWidget* Stats_AttackSpeed;//[Offset: 0x4f8, Size: 1]
	OPStatSlotWidget* Stats_CriticalChance;//[Offset: 0x500, Size: 1]
	OPStatSlotWidget* Stats_Magical;//[Offset: 0x508, Size: 1]
	OPStatSlotWidget* Stats_Magical_Def;//[Offset: 0x510, Size: 1]
	OPStatSlotWidget* Stats_CoolTime;//[Offset: 0x518, Size: 1]
	Actor*[] VisionActorArray;//[Offset: 0x520, Size: 1]
	bool IsShowRecommendCoreItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	void UpdateKDACG();// 0x1a8d230
	void UpdateHighestBountyPlayer(OP_PlayerState* InDawnPlayer, OP_PlayerState* InDuskPlayer);// 0x1a8d0b0
	void UpdateGold(float InNewGold);// 0x1a8cfa0
	void ToggleHideHUD_BP();// 0x1a8ac30
	void ShowWarningMessage_BP(out const FText InMessage);// 0x1a8cbb0
	void SetupUMGHUDForPureObserver_BPNE();// 0x1a8ca60
	void SetupUMGHUDForPureObserver();// 0x1a8ca40
	void SetStatInfo();// 0x1a8c990
	void SetScoreboardState(bool InVisible);// 0x1f25360
	void PreInputModeChange(enum InNewInputMode);// 0x1a8c4e0
	void PlayMainBattleUIFadeInOut_BPNE(bool bIsFadeOut);// 0x1a8c450
	void PlayBlindAnimation_BPNE(float InDuration);// 0x1a8c1a0
	void OnTeamScoreChanged(byte InTeamNum, OP_PlayerState* InCauser);// 0x1a8bf40
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x1a8bc90
	void OnSkillStackChanged(FName InStackID);// 0x1a8bc00
	void OnSkillSlotChanged();// 0x1a8bbe0
	void OnSkillReadStatusChanged();// 0x1a8bbc0
	void OnShopStateChanged(bool InIsIn);// 0x1a8bb30
	void OnPlayerSkillPointChanged(byte InNewPoint);// 0x1a8b9e0
	void OnPlayerLevelUp(byte InNewLevel);// 0x1a8b960
	void OnInventoryUpdated(OP_PlayerState* InPlayerState);// 0x1a8b730
	void OnDisabledSkillSlotChanged();// 0x1a8b430
	void OnControllingCharacterManaChanged(float InNewMana);// 0x1a8b4e0
	void OnControllingCharacterDestroyed(Actor* InLastAffectedAttacker);// 0x1a8b450
	void OnCharacterMovementModeChanged();// 0x1a8b430
	void OnChangedPotalState(bool InUsable, out const FName InTableID);// 0x1a8b350
	void OnBlackScoreChanged(byte InTeamNum);// 0x1a8b200
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a8adf0
	bool IsShowTrainingCheatWidget();// 0x1a8adc0
	static MainBattleUIComponent* GetBattleUIComponent(Object* InWorldContextObject);// 0x1a8a9f0
	void CleanUp_beforeResultScene();// 0x1a8a800

--------------------------------
Class: OPQuickSlotWidget.UserWidget.Widget.Visual.Object
	OPQuickSlotIconWidget* Bind_Icon_R;//[Offset: 0x260, Size: 1]
	OPQuickSlotIconWidget* Bind_Icon_Q;//[Offset: 0x268, Size: 1]
	OPQuickSlotIconWidget* Bind_Icon_E;//[Offset: 0x270, Size: 1]
	OPQuickSlotIconWidget* Bind_Icon_RMB;//[Offset: 0x278, Size: 1]
	OPQuickSlotIconWidget* Bind_Icon_LMB;//[Offset: 0x280, Size: 1]
	OPQuickSlotIconWidget* Bind_Icon_Passive;//[Offset: 0x288, Size: 1]
	OPQuickSubSlotIconWidget* Bind_Icon_Ward;//[Offset: 0x290, Size: 1]
	OPQuickSubSlotIconWidget* Bind_Icon_Recall;//[Offset: 0x298, Size: 1]
	CanvasPanel* Bind_ShortCut_Ward;//[Offset: 0x2a0, Size: 1]
	CanvasPanel* Bind_ShortCut_Recall;//[Offset: 0x2a8, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x350, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x358, Size: 1]
	void SetVisibilityWardIcon(bool bIsShow);// 0x1b77850
	void SetVisibilityRecallIcon(bool bIsShow);// 0x1b777c0

--------------------------------
Class: OPQuickSlotIconWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_CoolDownOverlay;//[Offset: 0x260, Size: 1]
	Widget* Bind_Image_CoolDownBorder;//[Offset: 0x268, Size: 1]
	OPQuickSlotIcon* Bind_Icon_Slot;//[Offset: 0x270, Size: 1]
	OPSkillLevelWidget* Bind_Skill_Level;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Cooltime;//[Offset: 0x280, Size: 1]
	Widget* Bind_View_Stack;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Stack;//[Offset: 0x290, Size: 1]
	Widget* Bind_View_Lock;//[Offset: 0x298, Size: 1]
	CanvasPanel* Bind_Canvas_CanLearn;//[Offset: 0x2a0, Size: 1]
	Widget* Bind_View_ToggleState;//[Offset: 0x2a8, Size: 1]
	CanvasPanel* Bind_Canvas_UltimateFx;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* Lock;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* UnLock;//[Offset: 0x2c0, Size: 1]
	WidgetAnimation* CanLearn;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* CanLearn_Available;//[Offset: 0x2d0, Size: 1]
	WidgetAnimation* CantUse_Start;//[Offset: 0x2d8, Size: 1]
	WidgetAnimation* CantUse_End;//[Offset: 0x2e0, Size: 1]
	WidgetAnimation* Available;//[Offset: 0x2e8, Size: 1]
	WidgetAnimation* Deco_on;//[Offset: 0x2f0, Size: 1]
	WidgetAnimation* Deco_off;//[Offset: 0x2f8, Size: 1]
	WidgetAnimation* Deco_CanLearn_Loop;//[Offset: 0x300, Size: 1]
	WidgetAnimation* Deco_base;//[Offset: 0x308, Size: 1]
	TextBlock* Bind_Text_Mana;//[Offset: 0x310, Size: 1]
	Widget* Bind_Widget_ManaDivider;//[Offset: 0x318, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x328, Size: 1]
	FName CurrentSkillTableID;//[Offset: 0x32c, Size: 1]
	void UpdateSlotState(OP_Character* InCharacter);// 0x1b77ac0
	void UpdateSlotStack(OP_Character* InCharacter, OP_PlayerState* InPlayerState);// 0x1b779f0
	void UpdateSlotLevel(OP_Character* InCharacter, OP_PlayerState* InPlayerState);// 0x1b77920
	void OnSkillToggleStateChanged_BPNE(bool InToggleON);// 0x11032c0

--------------------------------
Class: OPQuickSlotIcon.UserWidget.Widget.Visual.Object
	Image* Bind_Image_IconImage;//[Offset: 0x260, Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPSkillLevelWidget.UserWidget.Widget.Visual.Object
	int MaxLevel;//[Offset: 0x260, Size: 1]
	int CurrentLevel;//[Offset: 0x264, Size: 1]
	SlateBrush LevelTexture_On;//[Offset: 0x268, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x2f0, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x300, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x310, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x320, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x330, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x340, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x350, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x360, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x370, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x380, Size: 1]
	SlateBrush[] LevelTexture_Off_Ex;//[Offset: 0x390, Size: 1]
	SlateBrush[] LevelTexture_Off_Ex;//[Offset: 0x3a0, Size: 1]
	SlateBrush[] LevelTexture_Off_Ex;//[Offset: 0x3b0, Size: 1]
	SlateBrush[] LevelTexture_Off_Ex;//[Offset: 0x3c0, Size: 1]
	SlateBrush[] LevelTexture_Off_Ex;//[Offset: 0x3d0, Size: 1]
	Image* Bind_Image_BG;//[Offset: 0x3e0, Size: 1]
	Image* Bind_Image;//[Offset: 0x3e8, Size: 1]
	Image* Bind_Image_2;//[Offset: 0x3f0, Size: 1]
	Image* Bind_Image_2;//[Offset: 0x3f8, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x400, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x408, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x410, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x418, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x420, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x428, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x430, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x438, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x440, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x448, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x450, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x458, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x460, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x468, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x470, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x478, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x480, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x488, Size: 1]
	bool bIsUseEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bUseBG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x494, Size: 1]
	void SetMaxLevel(int InMaxLevel, bool IsInTrainingLevel);// 0x1b995f0
	void SetCurrentLevel(int InLevel, bool bInIsUseEx);// 0x1b99340
	void SetBackgroundColor(LinearColor InColor);// 0x1b992b0
	SlateBrush GetOffBrush(int InMaxLv, int InIndex);// 0x1b984a0

--------------------------------
Class: OPQuickSubSlotIconWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_CoolDownOverlay;//[Offset: 0x260, Size: 1]
	Widget* Bind_Image_CoolDownBorder;//[Offset: 0x268, Size: 1]
	OPQuickSlotIcon* Bind_Icon_Slot;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Cooltime;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Activate;//[Offset: 0x280, Size: 1]
	WidgetAnimation* CantUse_Start;//[Offset: 0x288, Size: 1]
	WidgetAnimation* CantUse_End;//[Offset: 0x290, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x2a0, Size: 1]
	FName CurrentSkillTableID;//[Offset: 0x2a4, Size: 1]
	void UpdateSlotState(OP_Character* InCharacter);// 0x1b77b50

--------------------------------
Class: OPUMGHUDPointHUDWidgetHolder.UserWidget.Widget.Visual.Object
	ListView* Bind_ListView_Main;//[Offset: 0x260, Size: 1]
	void AddWidget(FText InText, float InPoint, OPPointHudArgument[] InArguments);// 0x1bb9100

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 1]
	byte SelectionMode;//[Offset: 0x2d9, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float EntrySpacing;//[Offset: 0x2e0, Size: 1]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Object*[] ListItems;//[Offset: 0x2e8, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryInitialized;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemDoubleClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemIsHoveredChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemSelectionChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemScrolledIntoView;//[Size: 1]
	void SetSelectionMode(byte SelectionMode);// 0x3168550
	void SetSelectedIndex(int Index);// 0x31683d0
	void ScrollIndexIntoView(int Index);// 0x3167520
	void RemoveItem(Object* Item);// 0x3167470
	void NavigateToIndex(int Index);// 0x31673c0
	bool IsRefreshPending();// 0x3167390
	int GetNumItems();// 0x3167150
	Object*[] GetListItems();// 0x3167120
	Object* GetItemAt(int Index);// 0x3166fe0
	int GetIndexForItem(Object* Item);// 0x3166f10
	void ClearListItems();// 0x3166e00
	void BP_SetSelectedItem(Object* Item);// 0x3166d70
	void BP_SetListItems(out const Object*[] InListItems);// 0x3166cc0
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x3166bf0
	void BP_ScrollItemIntoView(Object* Item);// 0x3166b60
	void BP_NavigateToItem(Object* Item);// 0x3166ad0
	bool BP_IsItemVisible(Object* Item);// 0x3166a30
	bool BP_GetSelectedItems(out Object*[] Items);// 0x3166970
	Object* BP_GetSelectedItem();// 0x3166940
	int BP_GetNumItemsSelected();// 0x3166910
	void BP_ClearSelection();// 0x31668f0
	void BP_CancelScrollIntoView();// 0x31668d0
	void AddItem(Object* Item);// 0x3166840

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 1]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryGenerated;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryReleased;//[Size: 1]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x31687e0
	void SetScrollOffset(const float InScrollOffset);// 0x31682d0
	void SetScrollbarVisibility(enum InVisibility);// 0x3168350
	void ScrollToTop();// 0x31675d0
	void ScrollToBottom();// 0x31675b0
	void RequestRefresh();// 0x3167500
	void RegenerateAllEntries();// 0x3167450
	UserWidget*[] GetDisplayedEntryWidgets();// 0x3166e50

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 1]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPPointHudArgument
	enum ArgumentType;//[Offset: 0x0, Size: 1]
	FString Argument;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MainBattleUIElement_HealthInfoComponent.UserWidget.Widget.Visual.Object
	OP_Character* CurrentHero;//[Offset: 0x260, Size: 1]
	float ExpLerpScale;//[Offset: 0x274, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x280, Size: 1]
	Image* Bind_PBar_EXP_Material;//[Offset: 0x288, Size: 1]
	Image* Bind_PBar_EXP_Material_Delta;//[Offset: 0x290, Size: 1]
	PanelWidget* Bind_Panel_Stat;//[Offset: 0x298, Size: 1]
	enum HeroIconType;//[Offset: 0x2a0, Size: 1]
	void UpdateInfo(OP_Character* InCharacter);// 0x1a8d1a0
	void UpdateHeroStat(OP_Character* InCharacter);// 0x1a8d020
	void SetMyHero(OP_Character* InCharacter);// 0x1a8c880
	void PlayHeartBeatSound_BPNE(bool InPlay, float InHealthPercent);// 0x1a8c300
	void OnPlayerLevelChanged();// 0x1a8b710
	void OnPlayerEXPChanged(float InNewEXP);// 0x1a8b8e0
	void OnLevelChanged_BPNE(int InNewLevel);// 0x1a8b7c0
	void OnHeroStatChanged();// 0x1a8b710
	void OnDestroyed(Actor* InActor);// 0x1a8b560

--------------------------------
Class: MainBattleUIElement_HealthAndManaInfoWidget.UserWidget.Widget.Visual.Object
	OP_Character* CurrentHero;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentHP;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_MaxHP;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_HPGen;//[Offset: 0x278, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_CurrentMP;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_MaxMP;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_MPGen;//[Offset: 0x298, Size: 1]
	OPHealthProgressBar* Bind_PBar_Mana;//[Offset: 0x2a0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Small;//[Offset: 0x2a8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Medium;//[Offset: 0x2b0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x2b8, Size: 1]
	AudioComponent* MyHeatBearSoundComponent;//[Offset: 0x2c0, Size: 1]
	void UpdateInfo();// 0x1a8d180
	void SetMyHero(OP_Character* InMyHero);// 0x1a8c7f0
	void PlayHeartBeatSound_BPNE(bool InPlay, float InHealthPercent);// 0x1a8c300
	void OnHeroStatChanged();// 0x1a8b6f0
	void OnHeroHealthChanged(float InNewValue);// 0x1a8b670

--------------------------------
Class: OPInventoryWidget.UserWidget.Widget.Visual.Object
	OPInventorySpellSlotWidget* Bind_Widget_SpellSlot;//[Offset: 0x260, Size: 1]
	OPInventorySpellSlotWidget* Bind_Widget_SpellSlot;//[Offset: 0x268, Size: 1]
	OPInventoryActiveSlotWidget* Bind_Widget_ActiveSlot;//[Offset: 0x270, Size: 1]
	OPInventoryActiveSlotWidget* Bind_Widget_ActiveSlot;//[Offset: 0x278, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x280, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x288, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x290, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x298, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x2a0, Size: 1]
	OPInventoryIconSlotWidget* Bind_Widget_ItemIcon;//[Offset: 0x2a8, Size: 1]
	OPInventoryIconSlotWidget*[] InventoryItemIcons;//[Offset: 0x2b0, Size: 1]
	OPInventoryActiveSlotWidget*[] InventoryActiveSlots;//[Offset: 0x2c0, Size: 1]
	OPInventorySpellSlotWidget*[] InventorySpellSlots;//[Offset: 0x2d0, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x2e0, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x2e8, Size: 1]
	void UpdateSpellSlotInTraining();// 0x1b311f0

--------------------------------
Class: OPInventorySpellSlotWidget.UserWidget.Widget.Visual.Object
	OPInventoryIconSlotWidget* Bind_Slot_Spell;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Amount_Spell;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_AmountSpell;//[Offset: 0x270, Size: 1]
	Image* Bind_Image_Dimmed;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_CoolDown;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x288, Size: 1]
	CanvasPanel* Bind_View_Key;//[Offset: 0x290, Size: 1]
	CanvasPanel* Bind_View_KeyLine;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_Key;//[Offset: 0x2a0, Size: 1]
	Image* Bind_View_AmountZeroBG;//[Offset: 0x2a8, Size: 1]
	ScaleBox* Bind_View_GamepadKey1;//[Offset: 0x2b0, Size: 1]
	Image* Bind_Image_GamepadKey1;//[Offset: 0x2b8, Size: 1]
	ScaleBox* Bind_View_GamepadKey2;//[Offset: 0x2c0, Size: 1]
	Image* Bind_Image_GamepadKey2;//[Offset: 0x2c8, Size: 1]
	ScaleBox* Bind_View_GamepadKey3;//[Offset: 0x2d0, Size: 1]
	Image* Bind_Image_GamepadKey3;//[Offset: 0x2d8, Size: 1]
	WidgetAnimation* CantUse_Start;//[Offset: 0x2e0, Size: 1]
	WidgetAnimation* CantUse_End;//[Offset: 0x2e8, Size: 1]
	int SpellSlotIndex;//[Offset: 0x2f0, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x2f4, Size: 1]
	FName CurrentSpellID;//[Offset: 0x2f8, Size: 1]
	void OnUpdateUserSetting();// 0x1b30b50
	void OnChangeInputDevice(enum InType, enum InGamepadType);// 0x1b30a60

--------------------------------
Class: OPInventoryIconSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_IconBackground;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_IconImage;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Dimmed;//[Offset: 0x270, Size: 1]
	Image* Bind_Image_CoolDown;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x280, Size: 1]
	Texture2D* Background_Normal;//[Offset: 0x288, Size: 1]
	Texture2D* Background_Magic;//[Offset: 0x290, Size: 1]
	Texture2D* Background_Rare;//[Offset: 0x298, Size: 1]
	Texture2D* Background_Disable;//[Offset: 0x2a0, Size: 1]
	SlateBrush BG_None;//[Offset: 0x2a8, Size: 1]
	SlateBrush BG_WithItem;//[Offset: 0x330, Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x3b8, Size: 1]
	MaterialInstanceDynamic* BackPanelDynMat;//[Offset: 0x3c0, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x3c8, Size: 1]
	FName CurrentItemID;//[Offset: 0x3cc, Size: 1]
	void InventoryItemSlotUpdated_BPNE(bool InbHasItem, bool InbIsActiveItem, enum InItemGrade);// 0x1b304c0

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x120, Size: 1]
	byte StretchDirection;//[Offset: 0x121, Size: 1]
	float UserSpecifiedScale;//[Offset: 0x124, Size: 1]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x31717b0
	void SetStretchDirection(byte InStretchDirection);// 0x3171550
	void SetStretch(byte InStretch);// 0x31714d0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x3170990

--------------------------------
Class: OPInventoryActiveSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_IconBackground;//[Offset: 0x260, Size: 1]
	OPInventoryIconSlotWidget* Bind_Slot_ActiveItem;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_Amount_Item;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_AmountItem;//[Offset: 0x278, Size: 1]
	CanvasPanel* Bind_View_Key;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_View_KeyLine;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Key;//[Offset: 0x290, Size: 1]
	Image* Bind_View_AmountZeroBG;//[Offset: 0x298, Size: 1]
	ScaleBox* Bind_View_GamepadKey1;//[Offset: 0x2a0, Size: 1]
	Image* Bind_Image_GamepadKey1;//[Offset: 0x2a8, Size: 1]
	ScaleBox* Bind_View_GamepadKey2;//[Offset: 0x2b0, Size: 1]
	Image* Bind_Image_GamepadKey2;//[Offset: 0x2b8, Size: 1]
	ScaleBox* Bind_View_GamepadKey3;//[Offset: 0x2c0, Size: 1]
	Image* Bind_Image_GamepadKey3;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* CantUse_Start;//[Offset: 0x2d0, Size: 1]
	WidgetAnimation* CantUse_End;//[Offset: 0x2d8, Size: 1]
	Texture2D* Background_Normal;//[Offset: 0x2e0, Size: 1]
	Texture2D* Background_Magic;//[Offset: 0x2e8, Size: 1]
	Texture2D* Background_Rare;//[Offset: 0x2f0, Size: 1]
	Texture2D* Background_Disable;//[Offset: 0x2f8, Size: 1]
	SlateBrush BG_None;//[Offset: 0x300, Size: 1]
	SlateBrush BG_WithItem;//[Offset: 0x388, Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x410, Size: 1]
	int ActiveSlotIndex;//[Offset: 0x418, Size: 1]
	MaterialInstanceDynamic* BackPanelDynMat;//[Offset: 0x420, Size: 1]
	ShopItemBase* CurrentActiveItem;//[Offset: 0x428, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x430, Size: 1]
	FName CurrentItemID;//[Offset: 0x434, Size: 1]
	void SettingKeyView_BPNE(bool IsGamepad, bool IsHasItem);// 0x1a92390
	void OnUpdateUserSetting();// 0x1b30b30
	void OnChangeInputDevice(enum InType, enum InGamepadType);// 0x1b30990
	void InventoryItemSlotUpdated_BPNE(bool InbHasItem, bool InbIsActiveItem, enum InItemGrade);// 0x1b303a0

--------------------------------
Class: OPQueuedBattlePopupHolderWidget.UserWidget.Widget.Visual.Object
	OPKillStreakComponent* Bind_Widget_KillStreakWidget;//[Offset: 0x268, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_First;//[Offset: 0x270, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Double;//[Offset: 0x278, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Triple;//[Offset: 0x280, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Quadra;//[Offset: 0x288, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Penta;//[Offset: 0x290, Size: 1]
	WidgetSwitcher* Bind_Widget_KillStreak_Switcher;//[Offset: 0x298, Size: 1]
	WidgetSwitcher* Bind_Widget_ObjectKill_Switcher;//[Offset: 0x2a0, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Red;//[Offset: 0x2a8, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Blue;//[Offset: 0x2b0, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Ally;//[Offset: 0x2b8, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Enemy;//[Offset: 0x2c0, Size: 1]
	OPQueuedBattlePopupHolderElement* Bind_Widget_Notice_Message;//[Offset: 0x2c8, Size: 1]
	OPQueuedBattlePopupHolderElement* CurrentWidget;//[Offset: 0x2e8, Size: 1]
	void NotifyOnAnimationFinished();// 0xd9d3e0

--------------------------------
Class: OPKillStreakComponent.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* Animation_SameTeam;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Animation_DifferentTeam;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_KillStreakSituation;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_KillerName;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_VictimName;//[Offset: 0x2b0, Size: 1]
	Image* Bind_Image_KillerIcon;//[Offset: 0x2b8, Size: 1]
	Image* Bind_Image_VictimIcon;//[Offset: 0x2c0, Size: 1]
	OPIconImageWidget* Bind_Image_Hero_Victim;//[Offset: 0x2c8, Size: 1]
	OPIconImageWidget* Bind_Image_Hero_Killer;//[Offset: 0x2d0, Size: 1]
	OPIconImageWidget* Bind_Image_VictimGreyIcon;//[Offset: 0x2d8, Size: 1]
	Image* Bind_Image_BG_Left;//[Offset: 0x2e0, Size: 1]
	Image* Bind_Image_BG_Right;//[Offset: 0x2e8, Size: 1]
	Widget* Bind_View_Reverseable;//[Offset: 0x2f0, Size: 1]
	LinearColor Color_BG_Ally;//[Offset: 0x2f8, Size: 1]
	LinearColor Color_BG_Enemy;//[Offset: 0x308, Size: 1]
	enum HeroIconType;//[Offset: 0x318, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x319, Size: 1]
	void OnSet_BP(enum InKillerType, enum InVictimType);// 0x1b36600
	void OnMark();// 0xd9d3e0

--------------------------------
Class: OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* CurrentAnimation;//[Offset: 0x260, Size: 1]
	float PauseTime;//[Offset: 0x280, Size: 1]

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x120, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0x318a130
	void SetActiveWidget(Widget* Widget);// 0x1253940
	Widget* GetWidgetAtIndex(int Index);// 0x3189710
	int GetNumWidgets();// 0x3189460
	int GetActiveWidgetIndex();// 0x3189190
	Widget* GetActiveWidget();// 0x3189160

--------------------------------
Class: BattlePopupWidget_ObjectiveKill.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* Start;//[Offset: 0x290, Size: 1]
	Image* Bind_Image_SymbolIcon;//[Offset: 0x298, Size: 1]
	Image* Bind_Image_SymbolIconAdd;//[Offset: 0x2a0, Size: 1]
	BattlePopupWidget_ObjectiveKillSubIcon* Bind_Image_NoticeElement;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_StackBuff;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_StackBuff2;//[Offset: 0x2b8, Size: 1]
	Widget* Bind_View_Gold;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x2c8, Size: 1]
	TextBlock* Bind_Text_Title;//[Offset: 0x2d0, Size: 1]
	LinearColor Color_Ally;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: BattlePopupWidget_ObjectiveKillSubIcon.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x290, Size: 1]

--------------------------------
Class: OPSkillActivationHelperComponent.UserWidget.Widget.Visual.Object
	SlotData CurrentSkillSlotForActivation;//[Offset: 0x260, Size: 1]
	TargetSelectionModeData TargetSelectionModeData;//[Offset: 0x298, Size: 1]
	Actor* NearbyEnemy;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_ActivationName;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_UnitName;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_PressRToCastYourself;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_DistanceToTarget;//[Offset: 0x2c8, Size: 1]
	CanvasPanel* Bind_Canvas_ActivationHelperSlot;//[Offset: 0x2d0, Size: 1]
	SoundBase* Sound_LockOn;//[Offset: 0x2d8, Size: 1]
	SoundBase* Sound_LockOff;//[Offset: 0x2e0, Size: 1]
	MainBattleUIElement_CrosshairMode* ActivationHelperCrosshair;//[Offset: 0x2e8, Size: 1]
	void OnUserSettingSaved();// 0x1b835c0
	void OnTargetSelectionMode_TargetUpdated_BP(Actor* InNewTarget, UserWidget* CrosshairMode, bool InIsTeamMate);// 0x1b834b0
	void OnOutlinedTargetChanged();// 0x1b83490
	void OnChangeColorAndOpacity_BPNE(bool IsOutRangeDistance, byte InTeamNum);// 0x1b831e0
	void OnActivated_BPNE(bool InIsActivated, enum InActivationType, UserWidget* CrosshairMode);// 0x1b830c0

--------------------------------
Class: TargetSelectionModeData
	bool Activated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum TargetSelectionType;//[Offset: 0x9, Size: 1]

--------------------------------
Class: MainBattleUIElement_CrosshairMode.UserWidget.Widget.Visual.Object
	enum TargetSelectionType;//[Offset: 0x270, Size: 1]
	int MaxRange;//[Offset: 0x274, Size: 1]
	bool Activated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	WidgetAnimation* Aimed_Enemy;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Aimed_Enemy_Target;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* Aimed_Ally;//[Offset: 0x2a8, Size: 1]
	WidgetAnimation* Aimed_Ally_Target;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* In;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* In_Loop;//[Offset: 0x2c0, Size: 1]
	float AnimationPlaySpeed;//[Offset: 0x2c8, Size: 1]
	float AnimationPlaySpeed_Reverse;//[Offset: 0x2cc, Size: 1]
	bool bIsAimingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bIsEnemyTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	void PlayInLoopAnimation_BPNE();// 0x1a7d3a0
	void PlayInAnimation_BPNE();// 0x1a7d3a0
	void PlayAimedEnemyTargetAnimation_BPNE();// 0x1a7d3a0
	void PlayAimedEnemyAnimation_BPNE(bool IsForward);// 0x1a7f330
	void PlayAimedAllyTargetAnimation_BPNE();// 0x1a7d3a0
	void PlayAimedAllyAnimation_BPNE(bool IsForward);// 0x1a7f330
	void DistanceActivationType_BPNE(float InChargingDistance, float InSkillRange, out float OutDistance);// 0x1a8a8d0

--------------------------------
Class: MainBattleUIElement_AutoRunNoticeWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Notice;//[Offset: 0x260, Size: 1]
	void OnShow();// 0x1f25360
	void OnHide();// 0x1f25360

--------------------------------
Class: MainBattleUIElement_SkillLevelUpErrorWidget.UserWidget.Widget.Visual.Object
	void ShowErrorText(FName InText, float InValue);// 0x1f25360

--------------------------------
Class: MainBattleUIElement_CircleBarTimeComponent.MainBattleUIElement_CastBarComponent.UserWidget.Widget.Visual.Object

--------------------------------
Class: MainBattleUIElement_CastBarComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_CastName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentTime;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_CastTime;//[Offset: 0x270, Size: 1]
	bool IsStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	enum CurrentCastBarTypeInternal;//[Offset: 0x2a0, Size: 1]
	enum CurrentCastBarType;//[Offset: 0x2a1, Size: 1]
	float TimeStartDecimal;//[Offset: 0x2a4, Size: 1]
	int DecimalPoints;//[Offset: 0x2a8, Size: 1]
	void StartCast(enum InCastBarTypeInternal, enum InCastBarType, FString InPrintNameLocalKey, float Timelapsed, float InSeconds, bool InIsReverse, float InOverCharge, enum InCategory);// 0x1a8cc90
	void OnUpdatePercent_BP(float InPercent);// 0x1a8c1a0
	void OnStarted_BP(enum InCastBarTypeInternal, enum InCastBarType, bool InIsStarted, float InDuration);// 0x1a8bdd0
	void OnOvercharge_BP(bool InOverCharge);// 0x1a8b850

--------------------------------
Class: MainBattleUIElement_CrosshairComponent.UserWidget.Widget.Visual.Object
	MainBattleUIComponent_CrosshairMainComponent* BaseAttackCrosshair;//[Offset: 0x260, Size: 1]
	MainBattleUIElement_CrosshairMode* SkillCrosshair;//[Offset: 0x268, Size: 1]
	PanelWidget* Bind_View_AutoAimCircle;//[Offset: 0x270, Size: 1]
	CanvasPanel* Bind_Canvas_CrosshairSlot;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_TextBox_Distance;//[Offset: 0x280, Size: 1]
	void OnUserSettingSaved();// 0x1a8c2e0
	void OnUserSettingChanged();// 0x1a8c2c0
	void OnDistanceDisplaytextCanAttackTarget_BPNE(bool IsAttackable);// 0x1a7f330
	void OnAutoAimTargetStatusChanged();// 0x1a8b1e0
	void OnAutoAimStatusChanged_BPNE(bool InIsAutoAimmed);// 0x1a7f330
	void OnAutoAimFeatureToggled_BPNE(bool InPlayActiveAnimation);// 0x1a7f330
	void OnAutoAimFeatureStatusChanged(bool InActivated);// 0x1a8b150
	bool IsIn(PlayerController* InController, PlayerBase* InTargetActor, Vector2D InFirstPoint, Vector2D InSecondPoint);// 0x1a8ac70
	void DisplayDebugMessage_BPNE(out const FText DebugMessage);// 0x1a8a820

--------------------------------
Class: MainBattleUIComponent_CrosshairMainComponent.UserWidget.Widget.Visual.Object
	float AimAnimationPlaySpeed;//[Offset: 0x260, Size: 1]
	float AimAnimationPlaySpeed_Reverse;//[Offset: 0x264, Size: 1]
	float AimAnimationHoldTime;//[Offset: 0x268, Size: 1]
	float HitAnimationPlaySpeed;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Hit;//[Offset: 0x288, Size: 1]
	WidgetAnimation* Aimed;//[Offset: 0x290, Size: 1]
	void StopUsedAnimation_BPNE();// 0x1a7d3a0
	void SendC2BMode_BPNE(int InMode, bool InBoolean, float InFloat, Vector InVector);// 0x1a8c630
	void PlayIdleAnimation_BPNE(OP_Character* InCharacter);// 0x1a8c3e0
	void PlayHitAnimation_BPNE();// 0x1a7d3a0
	void PlayAimedEnemyTargetAnimation_BPNE();// 0x1a7d3a0
	void PlayAimedAnimation_BPNE(bool IsForward);// 0x1a7f330

--------------------------------
Class: OPTrainingCheatMenuKeyGuide.UserWidget.Widget.Visual.Object
	void SetTextBP();// 0x1f25360
	void OnChangeInputDevice(enum InType, enum GamepadType);// 0x1babc40

--------------------------------
Class: OPTrainingCheatMenuToast.UserWidget.Widget.Visual.Object
	OPRichTextBlock* Bind_Description;//[Offset: 0x260, Size: 1]
	WidgetAnimation* OpenAnimation;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPTrainingCheatMenu.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	enum HeroIconType;//[Offset: 0x2a8, Size: 1]
	OPTrainingCheatMenuCategorySlotMenu* Bind_Training_Slot_Menu;//[Offset: 0x2b0, Size: 1]
	ListView* Bind_ListView_Cheat;//[Offset: 0x2b8, Size: 1]
	OPTextButtonBase* Bind_TextButton_CheatRefresh;//[Offset: 0x2c0, Size: 1]
	WidgetAnimation* OpenAnimation;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* CloseAnimation;//[Offset: 0x2d0, Size: 1]
	class UserWidget* HeroIconSlotClass;//[Offset: 0x2d8, Size: 1]
	OPTextBlock* Bind_Select_Hero_Name;//[Offset: 0x2f0, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x2f8, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x300, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x308, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x310, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x318, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x320, Size: 1]
	WrapBox* Bind_Hero_List;//[Offset: 0x328, Size: 1]
	OPTextButtonBase* Bind_TextButton_ChangeHero;//[Offset: 0x330, Size: 1]
	OPTextButtonBase* Bind_TextButton_ChangeHero_Negative;//[Offset: 0x338, Size: 1]
	FName DefaultHeroSkinIndex;//[Offset: 0x344, Size: 1]
	FName SelectHeroSkinIndex;//[Offset: 0x34c, Size: 1]
	FName[] PrimeBuffKeyword;//[Offset: 0x358, Size: 1]
	FName[] PrimeGuardianBuffKeyword;//[Offset: 0x368, Size: 1]
	FName[] PrimeGuardianBuffKeyName;//[Offset: 0x378, Size: 1]
	bool bPlayRefreshAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	OPTrainingCheatMenuSlot_OneButton_Spell* SpellSlot;//[Offset: 0x4c0, Size: 1]
	Button* Bind_Button_CloseSpell1;//[Offset: 0x4c8, Size: 1]
	Button* Bind_Button_CloseSpell2;//[Offset: 0x4d0, Size: 1]
	void SetTextBP();// 0x1f25360
	void SetHeroRoleList();// 0x1bac3e0
	void SetHeroList();// 0x1bac3c0
	void SetDefaultSpell();// 0x1bac3a0
	void SetCheatMenu(enum NewCatogory, bool ForceRefresh, bool PlayRefreshAnimation);// 0x1bac280
	void RefreshDeadSignal(enum npcType, enum spiritType);// 0x1bac100
	void OnSelectedHero(FName InSelectedheroID);// 0x1babeb0
	void OnOffCloseSpellButton(bool bClose);// 0x1babd90
	void OnClickRightButton();// 0x1babd30
	void OnClickLeftButton();// 0x1babd10
	static OPTrainingCheatMenu* GetTrainingCheatUI(Object* InWorldContextObject);// 0x1baa080
	bool GetPlayRefreshAnimation();// 0x1baa060
	bool GetIsInfinityTowerHealth();// 0x1ba9fa0
	bool GetIsInfinityHeroMP();// 0x1ba9f70
	bool GetIsInfinityHeroHealth();// 0x1ba9f40
	void CloseCheatMenu();// 0x1ba9790
	void CheatDeActive(enum CheatType, TrainingCheatTableRow CheatData, bool ShowToast, bool DeleteUsingData);// 0x1ba95c0
	void CheatActive(enum CheatType, TrainingCheatTableRow CheatData, bool ShowToast, FName SpellSlot1, FName SpellSlot2);// 0x1ba93d0
	void ChangeHero();// 0x1ba93b0
	void AllCheatDeActive();// 0x1ba9390

--------------------------------
Class: OPTrainingCheatMenuCategorySlotMenu.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_Value;//[Offset: 0x260, Size: 1]
	Button* Bind_Button_Left;//[Offset: 0x268, Size: 1]
	Button* Bind_Button_Right;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OPRoleSelectWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x2c8, Size: 1]
	<enum,TitleDescTextGroup> RoleDescription;//[Offset: 0x2d0, Size: 1]
	enum RoleType;//[Offset: 0x320, Size: 1]
	byte TooltipPlacement;//[Offset: 0x340, Size: 1]
	Margin TooltipOffsets;//[Offset: 0x344, Size: 1]

--------------------------------
Class: OPSelectableButton.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_CP_Normal;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_CP_Hover;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_CP_Selected;//[Offset: 0x270, Size: 1]
	CanvasPanel* Bind_CP_Selected_Hover;//[Offset: 0x278, Size: 1]
	CanvasPanel* Bind_CP_Disable;//[Offset: 0x280, Size: 1]
	Image* Bind_Imgae_NormalIcon;//[Offset: 0x288, Size: 1]
	Image* Bind_Imgae_HoverIcon;//[Offset: 0x290, Size: 1]
	Image* Bind_Imgae_SelectedIcon;//[Offset: 0x298, Size: 1]
	enum SelectableState;//[Offset: 0x2a0, Size: 1]
	Texture2D* ButtonIcon;//[Offset: 0x2a8, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x2b0, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x2b8, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	void OnUnSelectButton_BP();// 0x1f25360
	void OnSelectButton_BP();// 0x1f25360
	void OnChangeSelectableState_BP(enum State, bool Selected);// 0x1f25360
	void DoClick();// 0x1102d70

--------------------------------
Class: TitleDescTextGroup
	FText Title;//[Offset: 0x0, Size: 1]
	FText Desc;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x120, Size: 1]
	float WrapWidth;//[Offset: 0x128, Size: 1]
	float WrapSize;//[Offset: 0x12c, Size: 1]
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	byte Orientation;//[Offset: 0x132, Size: 1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x318a640
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x3189080

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x318aa80
	void SetPadding(Margin InPadding);// 0x318a870
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x318a5c0
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x318a330
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x318a2a0

--------------------------------
Class: OPTrainingCheatMenuSlot_OneButton_Spell.OPTrainingCheatMenuSlot_OneButton.OPTrainingCheatMenuSlot_Base.UserWidget.Widget.Visual.Object
	FName SpellSlot;//[Offset: 0x278, Size: 1]
	FName SpellSlot;//[Offset: 0x280, Size: 1]
	OPDraftSpellListWidget* Bind_DraftSpellList;//[Offset: 0x288, Size: 1]
	OPSpellIconWidget* Bind_Spell_01;//[Offset: 0x290, Size: 1]
	OPSpellIconWidget* Bind_Spell_02;//[Offset: 0x298, Size: 1]
	OPSpellIconWidget* CurrentSelectedSpellSlot;//[Offset: 0x2a0, Size: 1]
	void ShowSpellList(bool bIsShow, out const FName InSpellID);// 0x1f25360
	void SetSelectedSpellSlotWithIndex(byte InSpellSlotIndex, out const FName InSpellID);// 0x1bb0b60
	void SetSelectedSpellSlot(FName InSpellSlot, FName InSpellSlot);// 0x1bb0a90
	void OnSpellListShowAniFinished();// 0x1bb04d0
	void OnSpellListHideAniFinished();// 0x1bb04b0
	void OnShowSpellList(byte InSpellSlotIndex);// 0x1bb0430
	void OnHideSpellList();// 0x1bb0380
	void OnClickedSpell(byte InSpellSlotIndex, out const FName InSpellID);// 0x1bb0210

--------------------------------
Class: OPTrainingCheatMenuSlot_OneButton.OPTrainingCheatMenuSlot_Base.UserWidget.Widget.Visual.Object
	OPTextButtonBase* Bind_TextButton_Positive;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OPTrainingCheatMenuSlot_Base.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_OptionName;//[Offset: 0x260, Size: 1]

--------------------------------
Class: OPDraftSpellListWidget.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_Title;//[Offset: 0x260, Size: 1]
	OPTextBlock* Bind_Text_Cooltime;//[Offset: 0x268, Size: 1]
	OPTextBlock* Bind_Text_Level;//[Offset: 0x270, Size: 1]
	OPRichTextBlock* Bind_Text_Description;//[Offset: 0x278, Size: 1]
	WrapBox* Bind_SpellList;//[Offset: 0x280, Size: 1]
	Vector2D SpellSlotSize;//[Offset: 0x288, Size: 1]
	enum SpellIconSizeType;//[Offset: 0x290, Size: 1]
	byte SpellSlotIndex;//[Offset: 0x291, Size: 1]
	void UpdateSelectedSpellToTraining(FName CurrentSelectSpellId);// 0x1b12370
	void ShowListWidget_BP();// 0x1f25360
	void OnSpellHovered(out const FName InSpellID);// 0x1b11e00
	OPSpellIconWidget* CreateSpellIconWidget_BP();// 0x1f25360

--------------------------------
Class: TrainingCheatTableRow.TableRowBase
	enum CheatCategory;//[Offset: 0x8, Size: 1]
	enum CheatType;//[Offset: 0x9, Size: 1]
	int CheatValue;//[Offset: 0xc, Size: 1]
	enum UseType;//[Offset: 0x10, Size: 1]
	bool DefaultCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool CheatEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	FString CheatOptionName;//[Offset: 0x18, Size: 1]
	FString CheatOptionActivateDesc;//[Offset: 0x28, Size: 1]
	FString CheatOptionDeActivateDesc;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPBattleShopWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButton_Common_Tab* BPBind_Button_RecommendItems;//[Offset: 0x298, Size: 1]
	OPButton_Common_Tab* BPBind_Button_AllItems;//[Offset: 0x2a0, Size: 1]
	WidgetSwitcher* Bind_WS_TabMenu;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_ErrorMessage;//[Offset: 0x2b0, Size: 1]
	OPShopContentWidget_RecommendItem* Bind_ShopWidget_RecommendItem;//[Offset: 0x2b8, Size: 1]
	OPShopContentWidget_AllItem* Bind_ShopWidget_AllItem;//[Offset: 0x2c0, Size: 1]
	OPShopInventoryWidget* Bind_ShopInventory;//[Offset: 0x2c8, Size: 1]
	OPShopItemDetailWidget* Bind_ShopItemDetail;//[Offset: 0x2d0, Size: 1]
	Widget* Bind_GamepadKeyInfo;//[Offset: 0x2d8, Size: 1]
	WidgetAnimation* Bind_Open_Anim;//[Offset: 0x2e0, Size: 1]
	WidgetAnimation* Bind_Close_Anim;//[Offset: 0x2e8, Size: 1]
	WidgetAnimation* Bind_ErrorMessageAnim;//[Offset: 0x2f0, Size: 1]
	OPBattleShopItemSlotComponent*[] ShopItemSlots;//[Offset: 0x2f8, Size: 1]
	ShopItemBase* SelectedItem;//[Offset: 0x308, Size: 1]
	OPItemSlotBaseWidget* SelectedSlot;//[Offset: 0x310, Size: 1]
	bool EnableSellBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	FText ERROR_MESSAGE_CAN_NOT_BUY;//[Offset: 0x320, Size: 1]
	FText ERROR_MESSAGE_NOT_ENOUGH_GOLD;//[Offset: 0x338, Size: 1]
	FText ERROR_MESSAGE_NO_EMPTY_SLOT;//[Offset: 0x350, Size: 1]
	FText ERROR_MESSAGE_MAX_ITEM_AMOUNT;//[Offset: 0x368, Size: 1]
	FText ERROR_MESSAGE_EXEPTION_ERROR;//[Offset: 0x380, Size: 1]
	FText ERROR_MESSAGE_ALREADY_HAS_GROUP_ITEM;//[Offset: 0x398, Size: 1]
	void UpdateShopItems_BP();// 0x1acdab0
	void UpdateShopItems();// 0x1ada470
	void UpdateInventory();// 0x1ada450
	void Update();// 0x1ada430
	void ShowErrorMessage(FText ErrorMessage);// 0x1ada350
	void ShowBattleShop();// 0x1ada330
	void RefreshShopState(bool IsInFountain);// 0x1ad9f70
	void OnSlotRightClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x1ad9b50
	void OnSlotDoubleClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x1ad9a80
	void OnSlotClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x1ad98e0
	void OnSellBuySelectedItem();// 0x1ad9880
	void OnRoundStateChanged(enum InRoundState);// 0x1ad9800
	void OnReturnItem();// 0x1ad97e0
	void OnPlayTutorialAnimation(int Index);// 0x1f25360
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x1ad9510
	void OnGoldChanged(float NewGold);// 0x1ad9490
	void OnChangeTabRecommendItem();// 0x1ad9260
	void OnChangeTabAllItem();// 0x1ad9240
	void OnBuyItemByDrag(ShopItemBase* InItem, enum InSlotIndex, enum InSlotType);// 0x1ad9130
	void OnAddItemUpdateUI_BP(enum SlotIndex);// 0x1f25360
	void HideBattleShop(bool InShowMouseCursor);// 0x1ad9010

--------------------------------
Class: OPItemSlotBaseWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	ShopItemBase* Item;//[Offset: 0x278, Size: 1]
	ShopItemBase* CoreItem;//[Offset: 0x280, Size: 1]
	bool bDragDropEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int DragDropDimension;//[Offset: 0x28c, Size: 1]
	float GamepadHoldTime;//[Offset: 0x290, Size: 1]
	enum SlotIndex;//[Offset: 0x294, Size: 1]
	float ItemPrice;//[Offset: 0x298, Size: 1]
	enum SlotType;//[Offset: 0x29c, Size: 1]
	class OPBattleShopInventorySlotDragAndDropIconComponent* DragAndDropIconComponentClass;//[Offset: 0x2a0, Size: 1]
	class OPShopInventoryDragOperation* ShopInventoryDragOperationClass;//[Offset: 0x2a8, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	MulticastInlineDelegateProperty OnItemSlotDragDetected;//[Size: 1]
	MulticastInlineDelegateProperty OnItemSlotDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnItemSlotDropped;//[Size: 1]
	float FrameUpdatePeriod;//[Offset: 0x2f4, Size: 1]
	void HandleRightClick();// 0x1ad3c50
	void HandleDoubleClick();// 0x1ad3c30
	void HandleClick();// 0x1acdab0

--------------------------------
Class: OPBattleShopInventorySlotDragAndDropIconComponent.UserWidget.Widget.Visual.Object
	void SetItem_BP(Texture2D* ItemIcon, enum ItemGrade);// 0x1f25360
	void OnDragEnd(DragDropOperation* Operation);// 0x1ad3ec0

--------------------------------
Class: OPShopInventoryDragOperation.DragDropOperation.Object
	enum SlotIndex;//[Offset: 0x88, Size: 1]
	enum SlotType;//[Offset: 0x89, Size: 1]
	int DragDropDimension;//[Offset: 0x8c, Size: 1]
	OPBattleShopInventorySlotDragAndDropIconComponent* DragWidget;//[Offset: 0x90, Size: 1]
	Vector2D StartPositionInScreenSpace;//[Offset: 0x98, Size: 1]
	Vector2D StartPosition;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: OPButton_Common_Tab.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Text_Clicked;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_TXT_Text_Selected;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Hover;//[Offset: 0x288, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Clicked;//[Offset: 0x290, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Selected;//[Offset: 0x298, Size: 1]
	FText ButtonText;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	SoundBase* ClickDownSound;//[Offset: 0x260, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x268, Size: 1]
	bool bReverseHoverAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]

--------------------------------
Class: OPShopContentWidget_RecommendItem.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPDropDownListButtonWidget* Bind_Dropdown_Preset;//[Offset: 0x278, Size: 1]
	ScrollBox* Bind_ScrollBox;//[Offset: 0x280, Size: 1]
	OPSmartShopWidget* Bind_ItemGrid_SmartShop;//[Offset: 0x288, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Starter;//[Offset: 0x290, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Core;//[Offset: 0x298, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Situational;//[Offset: 0x2a0, Size: 1]
	VerticalBox* Bind_VB_ItemGrid;//[Offset: 0x2a8, Size: 1]
	OPButtonBase* Bind_Button_Sort;//[Offset: 0x2b0, Size: 1]
	float GamepadScrollSpeed;//[Offset: 0x2b8, Size: 1]
	void OnClickedSort();// 0x1ad9350

--------------------------------
Class: OPDropDownListButtonWidget.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	FText[] OptionsArray;//[Offset: 0xa00, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa10, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa10, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa10, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa10, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa10, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa10, Size: 1]
	float WidthOverride;//[Offset: 0xa14, Size: 1]
	float HeightOverride;//[Offset: 0xa18, Size: 1]
	float MinDesiredWidth;//[Offset: 0xa1c, Size: 1]
	float MinDesiredHeight;//[Offset: 0xa20, Size: 1]
	float MaxDesiredWidth;//[Offset: 0xa24, Size: 1]
	float MaxDesiredHeight;//[Offset: 0xa28, Size: 1]
	int DefaultIndex;//[Offset: 0xa2c, Size: 1]
	enum DropDownMenuDirection;//[Offset: 0xa30, Size: 1]
	CanvasPanel* Bind_CanvasPanel;//[Offset: 0xa38, Size: 1]
	VerticalBox* Bind_VerticalBox;//[Offset: 0xa40, Size: 1]
	SizeBox* Bind_SizeBox;//[Offset: 0xa48, Size: 1]
	Image* Bind_Image_Arrow;//[Offset: 0xa50, Size: 1]
	int SelectedIndex;//[Offset: 0xa5c, Size: 1]
	bool IsDropDownListOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	class OPDropDownListItemWidget* DropDownListItemClass;//[Offset: 0xa68, Size: 1]
	MulticastInlineDelegateProperty OnDropDownMenuClicked;//[Size: 1]
	void SetIsEnabledArrowIcon_BPIE(bool InIsEnabled);// 0x1f25360
	void SelectOptionByString(FString InOptionName);// 0x1ae0bb0
	void SelectOption(int InIndex);// 0x1ae0b20
	void OpenDropDownList();// 0x1ae0990
	void CloseDropDownList();// 0x1ae00f0

--------------------------------
Class: OPDropDownListItemWidget.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	int Index;//[Offset: 0xa00, Size: 1]

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 1]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 1]
	byte Orientation;//[Offset: 0x828, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 1]
	enum NavigationDestination;//[Offset: 0x848, Size: 1]
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 1]
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 1]
	MulticastInlineDelegateProperty OnUserScrolled;//[Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3171930
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x31710d0
	void SetScrollOffset(float NewScrollOffset);// 0x3171050
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x3170fd0
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x31711f0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3171150
	void SetOrientation(byte NewOrientation);// 0x3170da0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x31702b0
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x3170190
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3170100
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x3170070
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x316ff10
	void ScrollToStart();// 0x316fef0
	void ScrollToEnd();// 0x316fed0
	float GetViewOffsetFraction();// 0x316f670
	float GetScrollOffsetOfEnd();// 0x316f5a0
	float GetScrollOffset();// 0x316f570
	void EndInertialScrolling();// 0x316f090

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 1]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 1]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 1]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 1]

--------------------------------
Class: OPSmartShopWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPShopFoldingButtonWidget* Bind_FoldingButton;//[Offset: 0x298, Size: 1]
	HorizontalBox* Bind_ItemGridBox;//[Offset: 0x2a0, Size: 1]
	OPSmartShopItem* Bind_SmartShop_Offensive;//[Offset: 0x2a8, Size: 1]
	OPSmartShopItem* Bind_SmartShop_Defensive;//[Offset: 0x2b0, Size: 1]
	OPSmartShopItem* Bind_SmartShop_Assistant;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* In;//[Offset: 0x320, Size: 1]
	WidgetAnimation* Out;//[Offset: 0x328, Size: 1]
	bool IsPopupWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	void UpdateUserSetting();// 0x1ada4b0
	void PlayAnimationPopupWidget_BPNE(bool bIsIn);// 0x1ad9e50
	void OnFoldingButtonClicked(bool IsFolding);// 0x1ad9400

--------------------------------
Class: OPShopFoldingButtonWidget.UserWidget.Widget.Visual.Object
	Button* Bind_Button;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text;//[Offset: 0x268, Size: 1]
	RichTextBlock* Bind_RichText;//[Offset: 0x270, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x278, Size: 1]
	void SetButtonText(FText InText);// 0x1ada000
	void OnClickFoldingButton();// 0x1ad9280

--------------------------------
Class: OPSmartShopItem.OPBattleShopItemSlotComponent.OPItemSlotBaseWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_Category;//[Offset: 0x450, Size: 1]
	OPTextBlock* Bind_Text_ItemName;//[Offset: 0x458, Size: 1]
	OPTextBlock* Bind_Text_ItemKeyword;//[Offset: 0x460, Size: 1]
	OPTextBlock* Bind_Text_InputKey;//[Offset: 0x468, Size: 1]
	VerticalBox* Bind_VerticalBox_InputKey;//[Offset: 0x470, Size: 1]
	Widget* Bind_HB_GamepadKey;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Canvas_ChildItemIcon;//[Offset: 0x480, Size: 1]
	Image* Bind_Image_EffectItemIcon;//[Offset: 0x488, Size: 1]
	Image* Bind_Image_EffectChildItemIcon;//[Offset: 0x490, Size: 1]
	OPTextBlock* Bind_Text_BlockMessage;//[Offset: 0x498, Size: 1]
	WidgetAnimation* Bind_HoverAnimation;//[Offset: 0x4a0, Size: 1]
	WidgetAnimation* Bind_SelectAnimation;//[Offset: 0x4a8, Size: 1]
	WidgetAnimation* Bind_HoverEndAnimation;//[Offset: 0x4b0, Size: 1]
	WidgetAnimation* Bind_SelectEndAnimation;//[Offset: 0x4b8, Size: 1]
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x4c0, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x4c8, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x4d0, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x4d8, Size: 1]
	int HoverImagePlayCount;//[Offset: 0x4e0, Size: 1]
	ItemToolTipComponent* ItemToolTip;//[Offset: 0x4e8, Size: 1]
	bool bHudInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	void NotEnoughGoldBuyItem_BPNE(bool bIsNotEnough);// 0x1ad90a0
	void NotAnyRecommendItem_BPNE(bool bAnyMoreRecommendItem);// 0x1a7f330
	void IsMaxCountByItem_BPNE(bool IsMax);// 0x1103230
	UserWidget* GetItemTooltip();// 0x1ad8fe0
	void BuyCategoryItem_BPNE();// 0x1ad8fa0

--------------------------------
Class: OPBattleShopItemSlotComponent.OPItemSlotBaseWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x300, Size: 1]
	OPShopItemIconComponent* Bind_Widget_ItemIcon;//[Offset: 0x308, Size: 1]
	OPShopItemIconComponent* Bind_Widget_ChildItemIcon;//[Offset: 0x310, Size: 1]
	Image* Bind_SlotTint;//[Offset: 0x318, Size: 1]
	TextBlock* Bind_Text_ItemPrice;//[Offset: 0x320, Size: 1]
	float SlotIconOpacity_Normal;//[Offset: 0x328, Size: 1]
	float SlotIconOpacity_NotEnoughGold;//[Offset: 0x32c, Size: 1]
	float SlotIconOpacity_Filtered;//[Offset: 0x330, Size: 1]
	float SlotIconOpacity_Filtered_NotEnoughGold;//[Offset: 0x334, Size: 1]
	Vector2D SlotSize;//[Offset: 0x338, Size: 1]
	LinearColor SlotTintColor_Normal;//[Offset: 0x340, Size: 1]
	LinearColor SlotTintColor_NotEnoughGold;//[Offset: 0x350, Size: 1]
	LinearColor SlotTintColor_Filtered;//[Offset: 0x360, Size: 1]
	LinearColor SlotTintColor_Filtered_NotEnoughGold;//[Offset: 0x370, Size: 1]
	SlateColor SlotTextColor_Normal;//[Offset: 0x380, Size: 1]
	SlateColor SlotTextColor_NotEnoughGold;//[Offset: 0x3a8, Size: 1]
	SlateColor SlotTextColor_Filtered;//[Offset: 0x3d0, Size: 1]
	SlateColor SlotTextColor_Filtered_NotEnoughGold;//[Offset: 0x3f8, Size: 1]
	SlateColor SlotTextColor_MaxItemAmount;//[Offset: 0x420, Size: 1]
	void UpdateByDelegate(float fNewGold);// 0x1ad44c0
	void SetSlotSize(Vector2D NewSlotsize);// 0x1ad4420
	void SetItemPrice(float NewPrice);// 0x1ad43a0
	void SetItem(ShopItemBase* ShopItem);// 0x1ad4310
	void SetChildItem(ShopItemBase* ShopItem);// 0x1ad41b0
	void RemoveItem();// 0x1ad3c70
	void OnRecalcSlotItemPrice();// 0x1ad4130
	void OnLocalControllingNewHero(OP_PlayerState* TargetPlayer, OP_Character* HeroCharacter);// 0x1ad4060
	void Init();// 0x1ad3c70
	void HasItem_BP(bool bHasItem);// 0x1f25360

--------------------------------
Class: OPShopItemGridWidget.UserWidget.Widget.Visual.Object
	OPShopFoldingButtonWidget* Bind_FoldingButton;//[Offset: 0x260, Size: 1]
	WrapBox* Bind_ItemGridBox;//[Offset: 0x268, Size: 1]
	class OPBattleShopItemSlotComponent* ChildSlotClass;//[Offset: 0x270, Size: 1]
	FText TierName;//[Offset: 0x278, Size: 1]
	Vector2D SlotSize;//[Offset: 0x290, Size: 1]
	Vector2D SlotPadding;//[Offset: 0x298, Size: 1]
	void SetIsEnableDragDrop(bool InIsEnable);// 0x1ada1c0
	void OnFoldingButtonClicked(bool IsFolding);// 0x1ad9370
	OPBattleShopItemSlotComponent*[] AddShopItems(ShopItemBase*[] Items);// 0x1ad8e60
	OPBattleShopItemSlotComponent* AddShopItem(ShopItemBase* ShopItem);// 0x1ad8dc0

--------------------------------
Class: OPShopContentWidget_AllItem.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPBattleShopWidget* ShopWidget;//[Offset: 0x278, Size: 1]
	<int,StatusList> SelectedStats;//[Offset: 0x280, Size: 1]
	bool Filter_ActiveItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool Filter_ConsumeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	enum SelectedRoleType;//[Offset: 0x2d2, Size: 1]
	OPEditableText* Bind_EditText_ItemName;//[Offset: 0x2d8, Size: 1]
	OPBattleShopStatFilterWidget* Bind_StatusCategory;//[Offset: 0x2e0, Size: 1]
	OPTextButtonBase* Bind_CheckBox_ActiveItem;//[Offset: 0x2e8, Size: 1]
	HorizontalBox* Bind_RoleCategory;//[Offset: 0x2f0, Size: 1]
	ScrollBox* Bind_ScrollBox;//[Offset: 0x2f8, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Starter;//[Offset: 0x300, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Normal;//[Offset: 0x308, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Magic;//[Offset: 0x310, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Rare;//[Offset: 0x318, Size: 1]
	OPButtonBase* Bind_Button_Sort;//[Offset: 0x320, Size: 1]
	VerticalBox* Bind_ItemGridBox;//[Offset: 0x328, Size: 1]
	OPBattleShopRoleToggleWidget*[] RoleToggleWidgets;//[Offset: 0x330, Size: 1]
	float GamepadScrollSpeed;//[Offset: 0x340, Size: 1]
	void UpdateShopItems();// 0x1ada490
	void OnToggleClear();// 0x1ad9e30
	void OnToggleChanged(bool IsSelected, int InToggleIndex, enum InToggleType, byte[] InStatusTypes, bool InBool);// 0x1ad9c20
	void OnShow();// 0x1ad98c0
	void OnItemNameCommited(out const FText Text, byte CommitMethod);// 0x1ad95a0
	void OnClickedSort();// 0x1ad9330
	void OnClickedFilterActiveItem(bool bShow);// 0x1ad92a0
	void ClearItems();// 0x1ad8fc0
	void AddItemSlot(OPBattleShopItemSlotComponent* NewItemSlot);// 0x1ad8d30

--------------------------------
Class: StatusList

--------------------------------
Class: OPEditableText.UserWidget.Widget.Visual.Object
	EditableText* Bind_EditText;//[Offset: 0x260, Size: 1]
	Button* Bind_CancelButton;//[Offset: 0x268, Size: 1]
	FText HintText;//[Offset: 0x270, Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	void SetText(FText InText);// 0x1b18ea0
	void SetHintText(FText InText);// 0x1b18dc0
	void HandleTextCommitted(out const FText Text, byte CommitMethod);// 0x1b15fa0
	void HandleTextChanged(out const FText Text);// 0x1b15ed0
	void HandleEditCancel();// 0x1b15eb0
	FText GetText();// 0x1b15e10

--------------------------------
Class: OPBattleShopStatFilterWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox;//[Offset: 0x260, Size: 1]
	OPBattleShopStatusToggleWidget*[] StatusWidgets;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPBattleShopStatusToggleWidget.OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	enum[] StatusTypes;//[Offset: 0x388, Size: 1]
	bool bIsConsumeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]

--------------------------------
Class: OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	Image* Bind_Icon;//[Offset: 0x280, Size: 1]
	class OPTextTooltipComponent* TooltipWidgetClass;//[Offset: 0x288, Size: 1]
	FText ToggleToolTipText;//[Offset: 0x290, Size: 1]
	SlateBrush IconBrush;//[Offset: 0x2a8, Size: 1]
	bool IsToggleClearButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	LinearColor SelectedColor;//[Offset: 0x334, Size: 1]
	LinearColor UnSelectedColor;//[Offset: 0x344, Size: 1]
	WidgetAnimation* Bind_HoverAnim;//[Offset: 0x358, Size: 1]
	int ToggleIndex;//[Offset: 0x380, Size: 1]
	void OnShowToolTip_BP();// 0x1f25360
	void OnHideToolTip_BP();// 0x1f25360

--------------------------------
Class: OPTextTooltipComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void SetText(out const FText InToolTipText);// 0x1bac400

--------------------------------
Class: OPBattleShopRoleToggleWidget.OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	enum RoleType;//[Offset: 0x388, Size: 1]

--------------------------------
Class: OPShopInventoryWidget.UserWidget.Widget.Visual.Object
	OPBattleShopWidget* ShopWidget;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentGold;//[Offset: 0x268, Size: 1]
	OPTextButtonBase* Bind_Button_Return;//[Offset: 0x270, Size: 1]
	OPTextButtonBase* Bind_Button_SellBuy;//[Offset: 0x278, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventoryActiveSlot;//[Offset: 0x280, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventoryActiveSlot;//[Offset: 0x288, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x290, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x298, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2a0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2a8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2b0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2b8, Size: 1]
	OPBattleShopInventorySlotComponent*[] ShopInventoryIcons;//[Offset: 0x2c0, Size: 1]
	OPBattleShopInventorySlotComponent*[] ShopInventoryActiveIcons;//[Offset: 0x2d0, Size: 1]
	void RefreshInventory(bool IsInFountain);// 0x1ad9ee0
	void OnSlotClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x1ad99b0
	void OnShopItemHistoryCleared();// 0x1ad98a0
	void OnItemSwitchRequest(enum InSlotType, enum InReceivedSlot, enum InSentSlot);// 0x1ad96d0

--------------------------------
Class: OPBattleShopInventorySlotComponent.OPItemSlotBaseWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x300, Size: 1]
	Widget* Bind_View_CoolDown;//[Offset: 0x308, Size: 1]
	Image* Bind_Image_CoolDown;//[Offset: 0x310, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x318, Size: 1]
	OPShopItemIconComponent* Bind_Widget_ItemIcon;//[Offset: 0x320, Size: 1]
	Widget* Bind_Amount_Item;//[Offset: 0x328, Size: 1]
	TextBlock* Bind_Text_Amount;//[Offset: 0x330, Size: 1]
	Vector2D SlotSize;//[Offset: 0x338, Size: 1]
	OP_PlayerState* OwnerPlayerState;//[Offset: 0x340, Size: 1]
	void OnAddItemUpdateUI_BP();// 0x1f25360

--------------------------------
Class: OPShopItemDetailWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	Button* Bind_CloseButton;//[Offset: 0x278, Size: 1]
	OPCombinationUpperItemWidget* Bind_CombinationUpperItem;//[Offset: 0x280, Size: 1]
	ItemInfoHeadComponent* Bind_ItemInfo_Head;//[Offset: 0x288, Size: 1]
	ItemInfoMainComponent* Bind_ItemInfo_Main;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Bind_ShowAnimation;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Bind_HideAnimation;//[Offset: 0x2a0, Size: 1]
	OPCombinationSlotWidget* Bind_CombinationSlot;//[Offset: 0x2a8, Size: 1]
	ScrollBox* Bind_ScrollBox;//[Offset: 0x2b0, Size: 1]
	float RenderOpacityForAnim;//[Offset: 0x2c0, Size: 1]
	float GamepadScrollSpeed;//[Offset: 0x2c4, Size: 1]
	void UpdateDetailInfo(ShopItemBase* InItem);// 0x1b83c70
	void UpdateCombinationTree(ShopItemBase* InItem, bool InIsDoClick);// 0x1b83ba0
	void UpdateAll(ShopItemBase* InItem, bool InIsDoClick);// 0x1b83ad0
	void ShowItemDetail(ShopItemBase* InItemTableName, bool InIsDoClick);// 0x1b83870
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x1b832b0
	void HideItemDetail();// 0x1b81c50

--------------------------------
Class: OPCombinationUpperItemWidget.UserWidget.Widget.Visual.Object
	ScrollBox* Bind_ScrollBox;//[Offset: 0x260, Size: 1]
	HorizontalBox* Bind_ItemSlotBox;//[Offset: 0x268, Size: 1]
	class OPBattleShopInventorySlotComponent* SlotClass;//[Offset: 0x280, Size: 1]
	Vector2D SlotSize;//[Offset: 0x288, Size: 1]
	void SetItem(ShopItemBase* InItem);// 0x1b837e0
	OPBattleShopInventorySlotComponent* AddNewSlot();// 0x1b7fc00

--------------------------------
Class: OPCombinationSlotWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_UpperItemSlotBox;//[Offset: 0x260, Size: 1]
	class OPBattleShopItemSlotComponent* UpperSlotClass;//[Offset: 0x268, Size: 1]
	class OPCombinationSlotWidget* ChildSlotClass;//[Offset: 0x270, Size: 1]
	Vector2D SlotSize;//[Offset: 0x278, Size: 1]
	Margin ItemSlotPadding;//[Offset: 0x280, Size: 1]
	OPShopItemDetailWidget* ShopItemDetailWidget;//[Offset: 0x290, Size: 1]
	bool IsTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool IsLast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool IsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool IsRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	int CurrentIndex;//[Offset: 0x29c, Size: 1]
	int MaxIndex;//[Offset: 0x2a0, Size: 1]
	void SetItem(OPShopItemDetailWidget* InDetailWidget, ShopItemBase* InItem, bool InIsTop, bool InIsDoClickTopSlot, int InCurrentIdx, int InMaxIdx);// 0x1b83600
	void ClearSlot();// 0x1b7fc30

--------------------------------
Class: MainBattleUIElement_TopHealthInfoComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_UnitName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_MinionsSupporting;//[Offset: 0x268, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Health;//[Offset: 0x278, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Enemy;//[Offset: 0x280, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_EnemyTeam;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_AllyTeam;//[Offset: 0x298, Size: 1]
	Widget* Bind_Text_TowerIsAttackingYou;//[Offset: 0x2a0, Size: 1]
	OPSpellIconWidget* Bind_Slot_Spell;//[Offset: 0x2a8, Size: 1]
	Actor* CurrentActor;//[Offset: 0x2d0, Size: 1]
	void UpdateTeamNames(FText InAllyName, FText InEnemyName);// 0x1a8d250
	void SetJungleItemBP(int InDamage);// 0x1f25360
	void OnUpdatedComponentOverlapEnd(Actor* InOther);// 0x1a8c230
	void OnUpdatedComponentOverlapBegin(Actor* InOther);// 0x1a8c230
	void OnTowerEnemyChanged();// 0x1a8c0e0
	void OnHealthChanged(float InNewHealth);// 0x1a8b5f0
	void OnChangedPatiensProgressVisible(bool InVisibled);// 0x1f25360
	void OnChangedPatiensProgressValue(float InValue, float InMax);// 0x1f25360
	void OnChangedPatiensProgressPlay(bool InIsPlaying);// 0x1f25360
	void OnActorDestroyed(Actor* DestroyedActor);// 0x1a8b0c0
	float GetPatiensValue();// 0x1a8ab70

--------------------------------
Class: MainBattleUIElement_HitEffectBase.UserWidget.Widget.Visual.Object
	MainBattleUIElement_HitEffectElement* Bind_Widget_HitEffectElement;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Canvas_Holder;//[Offset: 0x268, Size: 1]
	void AddTarget(Actor* InTarget);// 0x1a8a770

--------------------------------
Class: MainBattleUIElement_HitEffectElement.UserWidget.Widget.Visual.Object
	Actor* MyTarget;//[Offset: 0x260, Size: 1]
	void SetTarget(Actor* InTarget);// 0x1a8c9b0
	void SetRotation(float InYaw);// 0x1a8c910
	void OnSetTarget_BPNE(Actor* InTarget, bool InIsSet);// 0x1a8ba60

--------------------------------
Class: OPChatComponent.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	class OPDropDownButtonGroupComponent* DropDownWidgetClass;//[Offset: 0x298, Size: 1]
	OPChat_WhisperTargetList* Bind_WBP_ChatWhisperTargetList;//[Offset: 0x2a0, Size: 1]
	ListView* Bind_ListView_ChatMsgList;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_TXT_ChatMode;//[Offset: 0x2b0, Size: 1]
	EditableText* Bind_EditText_Entry;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* Ani_Open;//[Offset: 0x308, Size: 1]
	WidgetAnimation* Ani_Background_Open;//[Offset: 0x310, Size: 1]
	WidgetAnimation* Ani_Background_Close;//[Offset: 0x318, Size: 1]
	WidgetAnimation* Ani_Close;//[Offset: 0x320, Size: 1]
	bool bScrollToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	int MaximumChatStringLength;//[Offset: 0x32c, Size: 1]
	void UpdateChatMessageList(int InUserData);// 0x1ae84d0
	void StartTimerForTeamChat();// 0x1ae80d0
	void ShowChatContextMenu(bool InIsShow, int InMessageIndex);// 0x1ae7980
	void SetInputFocus(bool InIsInputFocus);// 0x1ae7860
	void RequestFocus();// 0x1ae7720
	void OnUpdatedGameSetting();// 0x1ae76e0
	void OnUpdateChatChannel(enum InChatChannel);// 0x1ae7660
	void OnTextCommitted(out const FText InText, byte CommitInfo);// 0x1ae7530
	void OnTextChanged(out const FText InText);// 0x1ae7460
	void OnShowHintText(bool InHasFocus);// 0x1f25360
	void OnRemovedChatMessage(int InMessageIndex);// 0x1ae73d0
	void OnReceivedChatMesssage(enum InChatType, OPChatMessageInfo InChatMessageInfo);// 0x1ae6fb0
	void OnPartyClientDataEventFired(enum InType);// 0x1ae6f30
	EventReply OnMouseButtonDown_WhisperReceiver(Geometry geo, out const PointerEvent fevent);// 0x1ae6d50
	void OnFinished_Animation(enum InFinishedLineMode);// 0x1262150
	void OnChatSystem_Error(int InErrorCode, FString InErrorString);// 0x1ae6c20
	void OnChangedChatBoxModeBP(enum InChatBoxMode, bool InIsActivatedTeamChat);// 0x1f25360
	void OnChangeChatMode(enum InChatMode);// 0x1ae6ba0
	FText GetHintText();// 0x1ae6940
	void ClearFocus();// 0x1ae6570
	void ChangeTopMenu(enum InTopMenu);// 0x1ae41e0
	void AddSystemMessage(enum InChatChannel, enum InMessageType, FString InMessage);// 0x1ae3e80

--------------------------------
Class: OPDropDownButtonGroupComponent.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	class OPDropDownMenuButton* ChildTextButtonClass;//[Offset: 0x2b8, Size: 1]
	OPDropDownButtonBase* OwnerDropDownButton;//[Offset: 0x2c0, Size: 1]
	OPVerticalBox* Bind_VBox_List;//[Offset: 0x2c8, Size: 1]
	SizeBox* Bind_SBox_Main;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: OPDropDownMenuButton.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	Widget* Bind_View_BottomLine;//[Offset: 0xa40, Size: 1]

--------------------------------
Class: OPDropDownButtonBase.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	FText[] OptionsArray;//[Offset: 0xa00, Size: 1]
	int DefaultIndex;//[Offset: 0xa10, Size: 1]
	enum DropDownMenuDirection;//[Offset: 0xa14, Size: 1]
	Vector2D DropDownMenuSpacing;//[Offset: 0xa18, Size: 1]
	int SelectedIndex;//[Offset: 0xa20, Size: 1]
	class OPDropDownButtonGroupComponent* DropDownButtonGroupClass;//[Offset: 0xa28, Size: 1]
	MulticastInlineDelegateProperty OnOPDropDownButtonClicked;//[Size: 1]
	OPDropDownButtonGroupComponent* MyDropDownButtonGroup;//[Offset: 0xa80, Size: 1]
	void SelectOption(int InIndex);// 0x1ae0a90
	static void RemoveDropDownMenuAll(Object* InWorldContextObject);// 0x1ae0a10
	FText GetOptionPrintNameByIndex(int InIndex);// 0x1ae0520
	static OPDropDownButtonGroupWithTitleComponent* DropDownMenuWithTitle(class OPDropDownButtonGroupComponent InDropDownWidgetClass, FString InTitle, World* InWorldContext, bool InAddToViewport, enum InDropDownMenuDirection);// 0x1ae0200
	static OPDropDownButtonGroupComponent* DropDownMenu(UserWidget* InMother, enum InDropDownMenuDirection);// 0x1ae0130
	int AddOption(FText InPrintName);// 0x1ae0000

--------------------------------
Class: OPDropDownButtonGroupWithTitleComponent.OPDropDownButtonGroupComponent.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Title;//[Offset: 0x2d8, Size: 1]
	CanvasPanel* Bind_CanvasPanel_ContextMenu;//[Offset: 0x2e0, Size: 1]
	void OnRemoveFromParent(FName InTag);// 0x1ae0900

--------------------------------
Class: OPVerticalBox.VerticalBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x130, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x140, Size: 1]
	Margin Padding;//[Offset: 0x148, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x158, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	UserWidget* CreateWidget();// 0x1b60210
	VerticalBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x1b60140

--------------------------------
Class: OPChat_WhisperTargetList.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox_ChatTargetList;//[Offset: 0x268, Size: 1]
	class UserWidget* ChatTargetSlotClass;//[Offset: 0x270, Size: 1]
	void OnChangedTargetIndex(UserWidget* InWidget, int InTargetIndex, bool InIsRightOrBottomDirection);// 0x1f25360

--------------------------------
Class: OPChatMessageInfo
	int MessageIndex;//[Offset: 0x0, Size: 1]
	enum Channel;//[Offset: 0x4, Size: 1]
	enum ChatType;//[Offset: 0x5, Size: 1]
	enum TeamType;//[Offset: 0x6, Size: 1]
	byte TeamNum;//[Offset: 0x7, Size: 1]
	FString SenderID;//[Offset: 0x8, Size: 1]
	FString SenderName;//[Offset: 0x18, Size: 1]
	FString SenderHeroID;//[Offset: 0x28, Size: 1]
	FString ReceiverID;//[Offset: 0x38, Size: 1]
	FString ReceiverName;//[Offset: 0x48, Size: 1]
	FString Message;//[Offset: 0x58, Size: 1]
	DateTime CreatedAtUTC;//[Offset: 0x68, Size: 1]
	int CreatedTimeSinceGameStated;//[Offset: 0x70, Size: 1]
	enum SystemMessageLevel;//[Offset: 0x74, Size: 1]
	FString LangCode;//[Offset: 0x78, Size: 1]
	int64 PartyUID;//[Offset: 0x88, Size: 1]

--------------------------------
Class: MainBattleUIElement_LevelUpComponent.UserWidget.Widget.Visual.Object
	void ShowAnimation_BPNE();// 0x1102d70

--------------------------------
Class: MainBattleUIElement_TeamPlayerListComponent.UserWidget.Widget.Visual.Object
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x260, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x268, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x278, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x280, Size: 1]
	bool IsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int TeamNumber;//[Offset: 0x28c, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent*[] IconList;//[Offset: 0x290, Size: 1]
	OP_PlayerState* HighestBountyPlayerState;//[Offset: 0x2a0, Size: 1]
	void Update();// 0x1be8630
	void OnUpdateHighestBountyPlayer(OP_PlayerState* InPlayerState);// 0x1be76c0
	void OnPlayerSelectHero(OP_PlayerState* InPlayer, out const FName InHeroID, bool bInIsLockIn);// 0x1be7060
	void OnPlayerJoinedDisconnected(PlayerState* InPlayer);// 0x1be6f00
	void OnPlayerControlingCharacterChanged(OP_PlayerState* InPlayer, OP_Character* NewHero);// 0x1be6f90
	void OnPlayerChangedTeam(PlayerState* InPlayer);// 0x1be6f00
	void OnChangedPlayerSortOrder(OP_PlayerState* InPlayerA, OP_PlayerState* InPlayerB);// 0x1be6880
	void ObserverSelectPlayer(int InIndex);// 0x1be6330

--------------------------------
Class: MainBattleUIElement_TopPlayerInfoComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_RespawnDelay;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_ObserverViewNum;//[Offset: 0x268, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x270, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIconBorder;//[Offset: 0x278, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIconBorder_Me;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_Canvas_UltimateParent;//[Offset: 0x288, Size: 1]
	OPHealthProgressBar* Bind_HealthProgressBar;//[Offset: 0x298, Size: 1]
	OPHealthProgressBar* Bind_HealthProgressBar_Me;//[Offset: 0x2a0, Size: 1]
	OPHealthProgressBar* Bind_ManaProgressBar;//[Offset: 0x2a8, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x2b0, Size: 1]
	OP_PlayerState* CurrentPlayer;//[Offset: 0x2b8, Size: 1]
	bool LastDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	enum HeroIconType;//[Offset: 0x2c4, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x2c5, Size: 1]
	void SetPlayer(OP_PlayerState* InPlayer, bool InIsMyTeam, int ObserverIndex);// 0x1be7fa0
	void RemovePlayer(bool InIsMyTeam);// 0x1be78b0
	void OnUltimateAvailable_BPNE(bool InIsAvailable);// 0x11033e0
	void OnSkillReadStatusChanged();// 0x1be7360
	void OnRespawnEvent();// 0x1be7340
	void OnPlayerDeathStatusChanged_BPNE(bool bIsDead);// 0x1a8b850
	void OnObserverSelectedPlayer_BPNE(bool bIsSelected);// 0x1ae0870
	void OnHighestBountyPlayer_BPNE(enum InFriendlyState, bool IsActive);// 0x1be6d30
	void OnHealthChanged(float InNewHealth);// 0x1b5bc20
	void OnDeathEvent(Actor* InLastAffectedAttacker);// 0x1be6c80
	void OnChangeDisconnected_BP(bool IsDisconnected);// 0x1f25360
	void OnChangeDisconnected(OP_PlayerState* InPlayerState, bool InIsDisconnected);// 0x1be67b0
	void OnChanged_MP(float InNewMP);// 0x1be6a60
	void OnChanged_HP(float InNewHP);// 0x1be69e0

--------------------------------
Class: MainBattleUIElement_CoreHealthComponent.UserWidget.Widget.Visual.Object
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Percent;//[Offset: 0x268, Size: 1]
	bool bShowMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	SoundBase* Sound_LowHealthAlert;//[Offset: 0x278, Size: 1]
	float LowHealthAlertDelay;//[Offset: 0x280, Size: 1]
	float LowHealthPercent;//[Offset: 0x284, Size: 1]
	UnitBase* Binded_Core_Unit;//[Offset: 0x288, Size: 1]
	void OnUnitHealthChanged(float InNewHealth);// 0x1a8c120
	void OnTeamScoreChanged(byte TeamNum, OP_PlayerState* InCauser);// 0x1a8c010

--------------------------------
Class: OPSurrenderComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HBox_UserSlots;//[Offset: 0x260, Size: 1]
	OPTextButtonBase* Bind_Button_Accept;//[Offset: 0x268, Size: 1]
	OPTextButtonBase* Bind_Button_Deny;//[Offset: 0x270, Size: 1]
	Widget* Bind_GamepadKeyInfo;//[Offset: 0x278, Size: 1]
	FText SurrenderAcceptText;//[Offset: 0x280, Size: 1]
	FText SurrenderDenyText;//[Offset: 0x298, Size: 1]
	SoundBase* Sound_Popup;//[Offset: 0x2b8, Size: 1]
	SoundBase* Sound_Agree;//[Offset: 0x2c0, Size: 1]
	SoundBase* Sound_Deny;//[Offset: 0x2c8, Size: 1]
	void VoteByShortCut(bool InIsAccept);// 0x1bac700
	void OnSurrenderSignal_BPNE(enum InStatus, int InTeamNum);// 0x1babf40
	void OnClickedDeny();// 0x1babd70
	void OnClickedAccept();// 0x1babd50

--------------------------------
Class: OPDeathscreenComponent.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VBox_History;//[Offset: 0x260, Size: 1]
	void UpdateSpectatingPlayerName(FString InPlayerName, bool bIsShow);// 0x1b0e230

--------------------------------
Class: OPBattleScoreBoardComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2a0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2a8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2b0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2b8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2c0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2c8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2d0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2d8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2e0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2e8, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left1;//[Offset: 0x2f0, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left2;//[Offset: 0x2f8, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left3;//[Offset: 0x300, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left4;//[Offset: 0x308, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left5;//[Offset: 0x310, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right1;//[Offset: 0x318, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right2;//[Offset: 0x320, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right3;//[Offset: 0x328, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right4;//[Offset: 0x330, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right5;//[Offset: 0x338, Size: 1]
	TimerHandle TimerFirstTimeEmptyCheck;//[Offset: 0x340, Size: 1]
	OPMinimapWidgetStyleComponent* Bind_MinimapOnTheScoreboard;//[Offset: 0x348, Size: 1]
	TextBlock* Bind_Text_AutoMoveError;//[Offset: 0x350, Size: 1]
	OPMinimapElementBase* WIDGET_JungleGreenOnHud;//[Offset: 0x358, Size: 1]
	OPMinimapElementBase* WIDGET_JunglePurpleOnHud;//[Offset: 0x360, Size: 1]
	OPBattleScoreBoardElementComponent*[] Slots_Left;//[Offset: 0x398, Size: 1]
	OPBattleScoreBoardElementComponent*[] Slots_Right;//[Offset: 0x3a8, Size: 1]
	enum PlayerSortOrder;//[Offset: 0x3b8, Size: 1]
	void Update();// 0x1ad44a0
	void ShowWarningMessage_BP(out const FText InMessage);// 0x1f25360
	void SetHideScoreboardBottom_Observer();// 0x1a7d3a0
	void OnVisible();// 0x1ad4150
	void OnShowAutoPilotNotice();// 0x1f25360
	void OnHideBP();// 0x1f25360
	void OnCollaped();// 0x1ad3e10
	void OnAppearBP();// 0x1f25360

--------------------------------
Class: OPBattleScoreBoardElementComponent.OPBattleScoreBoardElementBaseComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Level;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Nick;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_CharacterName;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_K;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_D;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_A;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_Minion;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_RespawnDelay;//[Offset: 0x2b8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2c0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2c8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2d0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2d8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2e0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2e8, Size: 1]
	Button* Bind_Button_Chat_Enabled;//[Offset: 0x2f0, Size: 1]
	Button* Bind_Button_Chat_Disabled;//[Offset: 0x2f8, Size: 1]
	Button* Bind_Button_Chat_Enabled;//[Offset: 0x300, Size: 1]
	Button* Bind_Button_Chat_Disabled;//[Offset: 0x308, Size: 1]
	Button* Bind_Button_Report_Enabled;//[Offset: 0x310, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x318, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x320, Size: 1]
	OPBattleShopInventorySlotComponent*[] Slots;//[Offset: 0x328, Size: 1]
	float prevWantedReward;//[Offset: 0x338, Size: 1]
	CanvasPanel* Bind_Wanted;//[Offset: 0x340, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x348, Size: 1]
	bool bIsMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	enum HeroIconType;//[Offset: 0x370, Size: 1]
	void SetWantedGold(float WantedGold);// 0x1f25360
	void PlayAnimationUpdate();// 0x1f25360
	void PlayAnimationOpen();// 0x1f25360
	void PlayAnimationClose();// 0x1f25360
	void OnUpdateTeamColor();// 0x1f25360
	void OnItemSwitchRequest(enum InSlotType, enum InReceivedSlot, enum InSentSlot);// 0x1ad3f50
	void OnDOA(bool InIsDead);// 0x1f25360
	void OnClickMute();// 0x1ad3d60
	void OnClickedButton(Button* InClickedButton);// 0x1ad3d80
	void OnChangeTeam(int InTeam);// 0x1f25360
	void OnChangeDisconnected_BP(bool IsDisconnected);// 0x1f25360
	void OnChangeDisconnected(OP_PlayerState* InPlayerState, bool InIsDisconnected);// 0x1ad3c90

--------------------------------
Class: OPBattleScoreBoardElementBaseComponent.UserWidget.Widget.Visual.Object
	bool bDragDropEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	class OPBattleScoreBoardElementBaseComponent* DragAndDropComponentClass;//[Offset: 0x270, Size: 1]
	class OPScoreboardElementDragOperation* DragOperationClass;//[Offset: 0x278, Size: 1]
	void OnDragEnd(DragDropOperation* Operation);// 0x1ad3e30

--------------------------------
Class: OPScoreboardElementDragOperation.DragDropOperation.Object
	int SlotIndex;//[Offset: 0x88, Size: 1]

--------------------------------
Class: OPBattleScoreBoard_SpiritPropertyElement.UserWidget.Widget.Visual.Object
	OPBattleScoreBoard_SpiritPropertyTooltip* Bind_ToolTip;//[Offset: 0x260, Size: 1]
	void SetProperty(enum InPropertyType, bool InAlly);// 0x1f25360

--------------------------------
Class: OPBattleScoreBoard_SpiritPropertyTooltip.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Buff_Text_001;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Buff_Text_Ally;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Buff_Text_Enemy;//[Offset: 0x270, Size: 1]

--------------------------------
Class: MainBattleUIElement_AbnormalListWidget.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	OPScrollBox* Bind_Scroll_Main;//[Offset: 0x268, Size: 1]
	ListView* Bind_List_Main;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_AbnormalElementWidgetBase*[] AbnormalIcons;//[Offset: 0x278, Size: 1]
	OP_Character* MyCharacter;//[Offset: 0x288, Size: 1]
	OPAbnormalStateComponent* MyAbnormalComponent;//[Offset: 0x290, Size: 1]
	void OnAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a91f90

--------------------------------
Class: MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: OPScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x880, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x890, Size: 1]
	Margin DefaultPadding;//[Offset: 0x898, Size: 1]
	Margin Padding;//[Offset: 0x8a8, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x8b8, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x8ba, Size: 1]
	byte VerticalAlignment;//[Offset: 0x8bb, Size: 1]
	void SetScrolling_Disable(bool InDisable);// 0x1b61000
	UserWidget* CreateWidget();// 0x1b60240
	ScrollBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x1b60000

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3171830
	void SetPadding(Margin InPadding);// 0x3170eb0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3170890

--------------------------------
Class: MainBattleUIElement_AbnormalElementWidgetBase.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	MainBattleUIElement_AbnormalElementWidget* Bind_Widget_Good;//[Offset: 0x268, Size: 1]
	MainBattleUIElement_AbnormalElementWidget* Bind_Widget_Bad;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_AbnormalElementWidget* ActiveWidget;//[Offset: 0x278, Size: 1]
	OPBattleUIAbnormalInfo* InfoObject;//[Offset: 0x280, Size: 1]
	void SetAbnormalStateInfo_BP(OPBattleUIAbnormalInfo* InInfoObject);// 0x1a92cb0

--------------------------------
Class: MainBattleUIElement_AbnormalElementWidget.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	Image* Bind_Image_BuffImage;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_ProgressBar;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_BuffName;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Stacks;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Duration;//[Offset: 0x298, Size: 1]
	OPRichTextBlock* Bind_Text_Description;//[Offset: 0x2a0, Size: 1]
	LinearColor Color_Good;//[Offset: 0x2a8, Size: 1]
	LinearColor Color_Bad;//[Offset: 0x2b8, Size: 1]
	MainBattleUIElement_AbnormalElementWidgetBase* Mother;//[Offset: 0x2d0, Size: 1]
	OPAbnormalStateComponent* MyAbnormalComponent;//[Offset: 0x2d8, Size: 1]
	void PlayRemoveAnimation_BP();// 0x1a8ac50
	void PlayAnimation_BP();// 0x1102d70

--------------------------------
Class: OPBattleUIAbnormalInfo.Object
	OPAbnormalStateComponent* InAbnormalComponent;//[Offset: 0x28, Size: 1]
	FName InKeywordType;//[Offset: 0x30, Size: 1]
	FName InKeyName;//[Offset: 0x38, Size: 1]
	float InDuration;//[Offset: 0x40, Size: 1]
	FName InSkillEffectFrom;//[Offset: 0x44, Size: 1]
	byte KeyNameUniqueIndex;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: OPDamageIndicatorBaseComponent.UserWidget.Widget.Visual.Object
	<FName,class OPDamageIndicatorTypeComponent> IndicatorTypes;//[Offset: 0x260, Size: 1]
	<enum,class OPDamageIndicatorTypeComponent> EventIndicatorTypes;//[Offset: 0x2b0, Size: 1]
	class OPDamageIndicatorTypeComponent* BaseAttackCriticalType;//[Offset: 0x300, Size: 1]
	class OPDamageIndicatorTypeComponent* TakingDamageType;//[Offset: 0x308, Size: 1]
	class OPDamageIndicatorTypeComponent* TextIndicatorType;//[Offset: 0x310, Size: 1]
	class OPDamageIndicatorTypeComponent* EffectKeywordIndicatorBaseType;//[Offset: 0x318, Size: 1]
	class OPDamageIndicatorTypeComponent* HealType;//[Offset: 0x320, Size: 1]
	class OPDamageIndicatorTypeComponent* ManaHealType;//[Offset: 0x328, Size: 1]
	class OPDamageIndicatorTypeComponent* GoldType;//[Offset: 0x330, Size: 1]
	OPDamageIndicatorTypeComponent*[] WidgetPoolForGC;//[Offset: 0x338, Size: 1]
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x348, Size: 1]
	OPDamageIndicatorTypeComponent* CreateCCIndicator(FName InKeywordType, Vector InPosition);// 0x1af18a0
	void AddTextIndicator(FText InText, Vector InPosition);// 0x1af1610
	void AddTakingDamageIndicator(int InDamage, Vector InPosition);// 0x1af1530
	void AddHealIndicator(float InAmount, enum InHealType);// 0x1af1460
	void AddGoldIndicator(Vector InPosition, float InGold, bool InIsNotice);// 0x1af1330
	void AddEventIndicator(enum InEventType, float InNumberValue, Vector InPosition);// 0x1af1210
	void AddDamageIndicator(FName InDamageID, int InDamage, Vector InPosition, byte InDamageIndicatorUniqueID);// 0x1af1090
	void AddCriticalDamageIndicator(int InDamage, Vector InPosition, byte InDamageIndicatorUniqueID);// 0x1af0f70

--------------------------------
Class: OPDamageIndicatorTypeComponent.UserWidget.Widget.Visual.Object
	WidgetAnimation* Open;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Main;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_EffectKeywordFont;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_EffectKeywordText;//[Offset: 0x278, Size: 1]
	ImageFontBoxComponent* Bind_ImageFont_Indicator;//[Offset: 0x280, Size: 1]
	ImageFontBoxComponent* Bind_ImageFont_Indicator_Emissive;//[Offset: 0x288, Size: 1]
	OPTextBlock* Bind_OPText_Indicator_Gold;//[Offset: 0x290, Size: 1]
	bool bPreventTextSetFromCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	FText DefaultTextIfPrevent;//[Offset: 0x2a0, Size: 1]

--------------------------------
Class: ImageFontBoxComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HBox_ImageContainer;//[Offset: 0x260, Size: 1]
	SlateBrush[] ImageFontList;//[Offset: 0x268, Size: 1]
	FString ImageFontTexts;//[Offset: 0x278, Size: 1]
	Vector2D ImageFontSizeRatio;//[Offset: 0x288, Size: 1]
	Margin ImageFontPadding;//[Offset: 0x290, Size: 1]
	void ShowImageFont_BP(FString InText, Vector2D InFontSize);// 0x1a83fd0

--------------------------------
Class: OPHeadbarManagerComponent.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x260, Size: 1]
	<enum,class OPHeadbarComponent> HeadbarInfo;//[Offset: 0x268, Size: 1]
	<enum,class OPHeadbarStack> HeadbarStackInfo;//[Offset: 0x2b8, Size: 1]
	OPHeadbarComponent*[] HeroHeadbars;//[Offset: 0x308, Size: 1]
	void UpdateGameSetting();// 0x1b26e80
	void Reload();// 0x1b26290

--------------------------------
Class: MainBattleUIElement_NetworkError.UserWidget.Widget.Visual.Object
	void Start_BPNE();// 0x1102d70

--------------------------------
Class: MainBattleUIElement_OutOfRange.UserWidget.Widget.Visual.Object
	void Start_BPNE();// 0x1102d70

--------------------------------
Class: HUD_NotificationWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Bind_ShowAnim;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Bind_HideAnim;//[Offset: 0x268, Size: 1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void ShowNotification();// 0x1102d70
	void SetText_BP();// 0x1f25360
	void OnChangeInputDevice(enum InType, enum GamepadType);// 0x1a8b280
	void HideNotification();// 0x1a8ac50
	void HideAnimationFinished();// 0x1a8ac30

--------------------------------
Class: OPVerticalBoxKillStreak.OPVerticalBox.VerticalBox.PanelWidget.Widget.Visual.Object
	enum KillerIconType;//[Offset: 0x160, Size: 1]
	enum VictimIconType;//[Offset: 0x161, Size: 1]

--------------------------------
Class: OPPingSystemOrder_Widget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Danger;//[Offset: 0x458, Size: 1]
	CanvasPanel* Bind_Hovered_Lost;//[Offset: 0x460, Size: 1]
	CanvasPanel* Bind_Hovered_Move;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Help;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Assemble;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Hovered_Fallback;//[Offset: 0x480, Size: 1]
	CanvasPanel* Bind_Hovered_Guard;//[Offset: 0x488, Size: 1]
	CanvasPanel* Bind_Hovered_Ward;//[Offset: 0x490, Size: 1]

--------------------------------
Class: OPPingSystemEmotion_Widget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Good;//[Offset: 0x458, Size: 1]
	CanvasPanel* Bind_Hovered_Sorry;//[Offset: 0x460, Size: 1]
	CanvasPanel* Bind_Hovered_Hello;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Provoke;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Love;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Hovered_Angry;//[Offset: 0x480, Size: 1]
	CanvasPanel* Bind_Hovered_Question;//[Offset: 0x488, Size: 1]
	CanvasPanel* Bind_Hovered_Exclamation;//[Offset: 0x490, Size: 1]

--------------------------------
Class: OPPingSystemConsoleWidget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Danger;//[Offset: 0x458, Size: 1]
	CanvasPanel* Bind_Hovered_Lost;//[Offset: 0x460, Size: 1]
	CanvasPanel* Bind_Hovered_Move;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Help;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Assemble;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Hovered_Fallback;//[Offset: 0x480, Size: 1]
	CanvasPanel* Bind_Hovered_Guard;//[Offset: 0x488, Size: 1]
	CanvasPanel* Bind_Hovered_Ward;//[Offset: 0x490, Size: 1]
	OPHorizontalIndicatorWidget* Bind_Indicator;//[Offset: 0x498, Size: 1]
	Widget* Bind_SwitchPing;//[Offset: 0x4a0, Size: 1]
	bool bIsOrderPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	void SwitchPing_BP(bool InIsOrderPing);// 0x1f25360
	void SwitchAnimationFinished();// 0x1b6f980
	void OnGamepadInputKey_BP(Key Key, byte KeyEvent);// 0x1f25360

--------------------------------
Class: OPHorizontalIndicatorWidget.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HorizontalBox;//[Offset: 0x260, Size: 1]
	class OPIndicatorSlotWidget* IndicatorSlotWidgetClass;//[Offset: 0x268, Size: 1]
	Margin SlotMargin;//[Offset: 0x270, Size: 1]
	byte PreviewSoltNum;//[Offset: 0x280, Size: 1]
	byte MaxSlotNum;//[Offset: 0x281, Size: 1]
	void SetSelected(byte InIndex);// 0x1b2d1c0
	void SetMaxSlot(byte InMaxSlotNum);// 0x1b2cf40

--------------------------------
Class: OPIndicatorSlotWidget.UserWidget.Widget.Visual.Object
	Widget* Bind_View_Selected;//[Offset: 0x260, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	void SetSelected_BP();// 0x1f25360
	void SetSelected(bool InIsSelected);// 0x1b2d240

--------------------------------
Class: MainBattleUIElement_TrainingGuideComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x260, Size: 1]
	VerticalBox* Bind_Vertical;//[Offset: 0x268, Size: 1]
	class MainBattleUIElement_TrainingGuideItem* ItemClassObject;//[Offset: 0x270, Size: 1]
	void ShowAniCheck();// 0x1f25360
	void Show();// 0x1f25360
	void Hide();// 0x1f25360

--------------------------------
Class: MainBattleUIElement_TrainingGuideItem.UserWidget.Widget.Visual.Object
	RichTextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void ShowAniNext();// 0x1f25360
	void SetText(out const FText InText);// 0x1f25360
	void OnCheck(bool bIsChecked);// 0x1f25360

--------------------------------
Class: MainBattleUIElement_TrainingToastComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void Show();// 0x1f25360
	void Hide();// 0x1f25360

--------------------------------
Class: MainBattleUIElement_TutorialToastComponent.UserWidget.Widget.Visual.Object
	OPRichTextBlockLetterByLetter* Bind_Description;//[Offset: 0x260, Size: 1]
	OPRichTextBlock* Bind_Description_Arabic;//[Offset: 0x268, Size: 1]
	FText[] ArrToast;//[Offset: 0x270, Size: 1]
	FText PrevToastText;//[Offset: 0x280, Size: 1]
	FText NewToastText;//[Offset: 0x298, Size: 1]
	bool BIsShowingTypingEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	void SkipTypingEffect();// 0x1f25360
	void ShowTypingEffect();// 0x1f25360
	void ShowNoTypingEffect();// 0x1f25360
	void Show();// 0x1f25360
	void SetTypingEffectToFirstData(out const FText FirstData);// 0x1f25360
	void ResetTypingEffectDatas();// 0x1f25360
	void OnClickAnimation();// 0x1f25360
	void OffClickAnimation();// 0x1f25360
	void Hide();// 0x1f25360
	void EndTypingEffect();// 0x1f25360

--------------------------------
Class: OPRichTextBlockLetterByLetter.OPRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	OPRichTextBlockLetterByLetterDecorator* CharColorDecorator;//[Offset: 0x6a8, Size: 1]
	int CurrentCharColorDecoratorCharacterIndex;//[Offset: 0x6c4, Size: 1]
	int CurrentPrintBlockIndex;//[Offset: 0x6c8, Size: 1]
	float LastCharacterPrintInterval;//[Offset: 0x6d4, Size: 1]
	MainBattleUIElement_TutorialToastComponent* Parent;//[Offset: 0x6e8, Size: 1]
	void ShowText();// 0x1b7c600
	void SetParent(MainBattleUIElement_TutorialToastComponent* InParent);// 0x1b7c080
	void ResetLineIndex();// 0x1b7bfd0
	void PrintLetterByLetter();// 0x1b7be00
	void HideText(int InCurrentCharColorDecoratorCharacterIndex);// 0x1b7ba30

--------------------------------
Class: OPRichTextBlockLetterByLetterDecorator.OPRichTextBlockImageDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: OPRichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 1]

--------------------------------
Class: OPUnitNotifySystemComponent.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_CanvasPanel;//[Offset: 0x260, Size: 1]
	bool IsIncludeMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	enum DrawType;//[Offset: 0x269, Size: 1]
	float CircleRadius;//[Offset: 0x26c, Size: 1]
	float NotifyDistance;//[Offset: 0x270, Size: 1]
	float NotifyFOV;//[Offset: 0x274, Size: 1]
	class OP_UnitNotifyIcon* UnitNotifyIconClass;//[Offset: 0x278, Size: 1]
	OP_GameState* GS;//[Offset: 0x288, Size: 1]
	OPUnitManager* UnitManager;//[Offset: 0x290, Size: 1]
	MainBattleUIComponent* MainHUD;//[Offset: 0x298, Size: 1]
	OP_PlayerController* MyPC;//[Offset: 0x2a0, Size: 1]
	OP_PlayerState* MyAPS;//[Offset: 0x2a8, Size: 1]
	OP_Character* MyCharacter;//[Offset: 0x2b0, Size: 1]
	CameraComponent* MyCamera;//[Offset: 0x2b8, Size: 1]
	PlayerBase*[] NotifyPlayers;//[Offset: 0x2c8, Size: 1]
	PlayerBase*[] AllPlayers;//[Offset: 0x2d8, Size: 1]
	OP_UnitNotifyIcon*[] PlayerNotifyIcons;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: OP_UnitNotifyIcon.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Hero;//[Offset: 0x270, Size: 1]
	CanvasPanel* Bind_Arrow_Parent;//[Offset: 0x278, Size: 1]
	OP_Character* TargetCharacter;//[Offset: 0x2a0, Size: 1]
	PlayerBase* TargetPlayer;//[Offset: 0x2a8, Size: 1]
	OP_PlayerState* TargetState;//[Offset: 0x2b0, Size: 1]
	void OnShow_BP(bool InIsAlly);// 0x1f25360

--------------------------------
Class: OPStatSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_StatIcon;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Up;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Down;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_StatName;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_StatValue;//[Offset: 0x280, Size: 1]
	SlateColor ValueTextColor_Default;//[Offset: 0x288, Size: 1]
	SlateColor NameTextColor_Default;//[Offset: 0x2b0, Size: 1]
	SlateColor ValueTextColor_Up;//[Offset: 0x2d8, Size: 1]
	SlateColor NameTextColor_Up;//[Offset: 0x300, Size: 1]
	SlateColor ValueTextColor_Down;//[Offset: 0x328, Size: 1]
	SlateColor NameTextColor_Down;//[Offset: 0x350, Size: 1]
	void Update(OP_PlayerState* InPlayerState);// 0x1ba5fb0

--------------------------------
Class: OPVolumeManager.ActorComponent.Object
	ForceVolume*[] ForceVolumes;//[Offset: 0xb0, Size: 1]
	ForceVolume*[] CurrentVolumeAroundSight;//[Offset: 0xc0, Size: 1]
	static OPVolumeManager* GetVolumeManager(Object* InWorldContextObject);// 0x1bd41a0
	ForceVolume*[] GetForceVolumeAroundCharacterSight();// 0x1bd3b60
	ForceVolume*[] GetForceVolume();// 0x1bd3ae0

--------------------------------
Class: ForceVolume.TriggerVolume.Volume.Brush.Actor.Object
	Transform[] PushObjectXDirectionTransforms;//[Offset: 0x258, Size: 1]
	void OnOverlapEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x1a7e920
	void OnOverlapBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x1a7e850

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: SurrenderInfo
	OP_PlayerController*[] VotedPlayers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GetNumPlayersArgument
	bool bIncludeConnectedBattleTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIncludeDisconnectedBattleTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIncludeObserverPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: HonorRecommendCountData
	FString UserLoginID;//[Offset: 0x0, Size: 1]
	int8 RecommendedCount;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7d0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x7dc, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x7e8, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x800, Size: 1]
	float CurrentFocalLength;//[Offset: 0x858, Size: 1]
	float CurrentAperture;//[Offset: 0x85c, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x860, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x870, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x880, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x890, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0x8a0, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0x8b0, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0x8c0, Size: 1]
	float DefaultLensFStop;//[Offset: 0x8c4, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x318f050
	void SetFilmbackPresetByName(FString InPresetName);// 0x318efb0
	void SetCurrentFocalLength(float InFocalLength);// 0x318ef30
	float GetVerticalFieldOfView();// 0x318ef00
	static NamedLensPreset[] GetLensPresetsCopy();// 0x318ee20
	FString GetLensPresetName();// 0x318eda0
	float GetHorizontalFieldOfView();// 0x318ed70
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x318ec90
	FString GetFilmbackPresetName();// 0x318ec10
	FString GetDefaultFilmbackPresetName();// 0x318eb50

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: OPSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0x280, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x288, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x290, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x298, Size: 1]
	Vector CameraOffset;//[Offset: 0x2a0, Size: 1]
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x1ba4ed0
	void OnSkillPreparationStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InStatusType);// 0x1ba4d90
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1ba4970

--------------------------------
Class: OPEnemyNotifyActorComponent.ActorComponent.Object
	float MaxDistance;//[Offset: 0xb0, Size: 1]
	int MaxIndicatorNum;//[Offset: 0xb4, Size: 1]
	FName AttachToBoneName;//[Offset: 0xb8, Size: 1]
	float EnemyCheckInterval;//[Offset: 0xc0, Size: 1]
	float IndicatorAlphaUpdateThreshold;//[Offset: 0xc4, Size: 1]
	float RearDotThresholdValue;//[Offset: 0xc8, Size: 1]
	float SizeClampFrom;//[Offset: 0xcc, Size: 1]
	float SizeClampTo;//[Offset: 0xd0, Size: 1]
	Transform InitialTransform;//[Offset: 0xe0, Size: 1]
	float ZDiffPerIndicator;//[Offset: 0x110, Size: 1]
	int BlinkMaterialIndex;//[Offset: 0x114, Size: 1]
	StaticMesh* IndicatorMeshType;//[Offset: 0x158, Size: 1]

--------------------------------
Class: HeroHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	float LightFalloffExponent;//[Offset: 0x344, Size: 1]
	float SourceRadius;//[Offset: 0x348, Size: 1]
	float SoftSourceRadius;//[Offset: 0x34c, Size: 1]
	float SourceLength;//[Offset: 0x350, Size: 1]
	void SetSourceRadius(float bNewValue);// 0x3b62960
	void SetSourceLength(float NewValue);// 0x3b628e0
	void SetSoftSourceRadius(float bNewValue);// 0x3b62860
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x3b626d0

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x328, Size: 1]
	float Radius;//[Offset: 0x32c, Size: 1]
	float AttenuationRadius;//[Offset: 0x330, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x334, Size: 1]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x3b1b4a0
	void SetAttenuationRadius(float NewRadius);// 0x3b1b420
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x3b1b310

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x228, Size: 1]
	float MaxDrawDistance;//[Offset: 0x22c, Size: 1]
	float MaxDistanceFadeRange;//[Offset: 0x230, Size: 1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	int ShadowMapChannel;//[Offset: 0x238, Size: 1]
	float MinRoughness;//[Offset: 0x240, Size: 1]
	float SpecularScale;//[Offset: 0x244, Size: 1]
	float ShadowResolutionScale;//[Offset: 0x248, Size: 1]
	float ShadowBias;//[Offset: 0x24c, Size: 1]
	float ShadowSlopeBias;//[Offset: 0x250, Size: 1]
	float ShadowSharpen;//[Offset: 0x254, Size: 1]
	float ContactShadowLength;//[Offset: 0x258, Size: 1]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25c, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x260, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x268, Size: 1]
	Vector LightFunctionScale;//[Offset: 0x270, Size: 1]
	TextureLightProfile* IESTexture;//[Offset: 0x280, Size: 1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	float IESBrightnessScale;//[Offset: 0x28c, Size: 1]
	float LightFunctionFadeDistance;//[Offset: 0x290, Size: 1]
	float DisabledBrightness;//[Offset: 0x294, Size: 1]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	float BloomScale;//[Offset: 0x29c, Size: 1]
	float BloomThreshold;//[Offset: 0x2a0, Size: 1]
	float BloomMaxBrightness;//[Offset: 0x2a4, Size: 1]
	Color BloomTint;//[Offset: 0x2a8, Size: 1]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2b0, Size: 1]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x3b18ff0
	void SetUseTemperature(bool bNewValue);// 0x3b18f60
	void SetUseIESBrightness(bool bNewValue);// 0x3b18ed0
	void SetTransmission(bool bNewValue);// 0x3b18e40
	void SetTemperature(float NewTemperature);// 0x3b18dc0
	void SetSpecularScale(float NewValue);// 0x3b18d40
	void SetShadowSlopeBias(float NewValue);// 0x3b18c30
	void SetShadowBias(float NewValue);// 0x3b18bb0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3b18960
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x3b188d0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x3b187b0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x3b186a0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x3b185a0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x3b184c0
	void SetIntensity(float NewIntensity);// 0x3b18290
	void SetIndirectLightingIntensity(float NewIntensity);// 0x3b18210
	void SetIESTexture(TextureLightProfile* NewValue);// 0x3b18180
	void SetIESBrightnessScale(float NewValue);// 0x3b18100
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x3b18070
	void SetEnableLightShaftBloom(bool bNewValue);// 0x3b17f50
	void SetBloomTint(Color NewValue);// 0x3b179a0
	void SetBloomThreshold(float NewValue);// 0x3b17920
	void SetBloomScale(float NewValue);// 0x3b178a0
	void SetBloomMaxBrightness(float NewValue);// 0x3b17820
	void SetAffectTranslucentLighting(bool bNewValue);// 0x3b17790
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x3b17550

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f8, Size: 1]
	float Brightness;//[Offset: 0x208, Size: 1]
	float Intensity;//[Offset: 0x20c, Size: 1]
	Color LightColor;//[Offset: 0x210, Size: 1]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	float DeepShadowLayerDistribution;//[Offset: 0x218, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x21c, Size: 1]
	float VolumetricScatteringIntensity;//[Offset: 0x220, Size: 1]
	int SamplesPerPixel;//[Offset: 0x224, Size: 1]
	void SetSamplesPerPixel(int NewValue);// 0x3b18b20
	void SetCastVolumetricShadow(bool bNewValue);// 0x3b17ce0
	void SetCastShadows(bool bNewValue);// 0x3b17c50
	void SetCastRaytracedShadow(bool bNewValue);// 0x3b17b30
	void SetCastDeepShadow(bool bNewValue);// 0x3b17aa0
	void SetAffectReflection(bool bNewValue);// 0x3b17670
	void SetAffectGlobalIllumination(bool bNewValue);// 0x3b175e0
	LinearColor GetLightColor();// 0x3b16e90

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x1a0, Size: 1]
	float TextureMultiplier;//[Offset: 0x1a4, Size: 1]

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 1]
	float ShadowExponent;//[Offset: 0x4, Size: 1]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkillStatInfo
	Texture2D* StatIcon;//[Offset: 0x0, Size: 1]
	FText StatName;//[Offset: 0x8, Size: 1]
	bool IsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float[] StatValues;//[Offset: 0x28, Size: 1]

--------------------------------
Class: OPUnitRadar.ActorComponent.Object
	MulticastInlineDelegateProperty OnFloatingWidgetComponentCreatedOrRemoved;//[Size: 1]
	HUDHeadbarComponent*[] Nearby_Headbar_Previous;//[Offset: 0xc8, Size: 1]
	HUDHeadbarComponent*[] Nearby_Headbar;//[Offset: 0xd8, Size: 1]
	OPMinimapExposableComponent*[] MinimapExposableActors;//[Offset: 0xe8, Size: 1]
	OPFloatingWidgetComponent*[] FloatingWidgetComponents;//[Offset: 0xf8, Size: 1]
	HUDHeadbarComponent*[] HUDHeadbarActors;//[Offset: 0x108, Size: 1]
	Placeable_Object*[] TopBuildHealthInfoArray;//[Offset: 0x118, Size: 1]
	NPCBase*[] TopEpicHealthInfoArray;//[Offset: 0x128, Size: 1]
	static OPUnitRadar* GetLocalUnitRadar(Object* InWorldContextObject);// 0x1bb9920
	void CheckNearByActors();// 0x1bb9420

--------------------------------
Class: OPFloatingWidgetComponent.SceneComponent.ActorComponent.Object
	class OPFloatingWidgetBase* WidgetClass;//[Offset: 0x1f8, Size: 1]
	OPFloatingWidgetBase* WidgetInstance;//[Offset: 0x200, Size: 1]

--------------------------------
Class: OPFloatingWidgetBase.UserWidget.Widget.Visual.Object
	OPFloatingWidgetComponent* MotherComponent;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Distance;//[Offset: 0x268, Size: 1]
	Vector2D CanvasPanelAlignment;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OP_CheatTerminalComponent.ActorComponent.Object
	Actor* TargetForInfo;//[Offset: 0xe0, Size: 1]
	void TestSendReceivePacketServer(const FString[] InArgs, FString InClientLoginID, bool bIsReceive);// 0x1ae8360
	void SwitchToObserver(OP_PlayerController* InPC, bool InbIsPureObserver, FString InClientLoginID);// 0x1ae80f0
	void SpawnActorFromCheat(const FString[] InArgs, Transform InSpawnTransform, FString InClientLoginID);// 0x1ae7f10
	void DebugCrashServer(const FString[] InArgs, FString InClientLoginID);// 0x1ae66d0
	void DebugCrashClient(out const FString[] InArgs, FString InClientLoginID);// 0x1ae6590
	void Cheat_Win(int InWinTeam, FString InClientLoginID);// 0x1ae6460
	void Cheat_ToggleLog(bool InOn, FString InClientLoginID);// 0x1ae6360
	void Cheat_StopMinions(bool InIsStop, FString InClientLoginID);// 0x1ae6260
	void Cheat_StopAction(bool InShouldStop, FString InClientLoginID);// 0x1ae6160
	void Cheat_StatStartFile(bool OnOff, FString InClientLoginID);// 0x1ae6060
	void Cheat_SkipCurrentTutorialStep(int InNewValue, FString InClientLoginID);// 0x1ae5f70
	void Cheat_SkipCurrentTutorial(int InNewValue, FString InClientLoginID);// 0x1ae5e80
	void Cheat_SetDamage(int InNewValue, FString InClientLoginID);// 0x1ae5d90
	void Cheat_ServerMemReport(FString InClientLoginID);// 0x1ae5ce0
	void Cheat_ServerGC(bool OnOff, FString InClientLoginID);// 0x1ae5be0
	void Cheat_ServerCrash(int InType, FString InClientLoginID);// 0x1ae5af0
	void Cheat_SendRoundEndResult(FString InClientLoginID);// 0x1ae5a40
	void Cheat_RemoveItem(int InSlow, FString InClientLoginID);// 0x1ae5950
	void Cheat_RegenMP(bool OnOff, FString InClientLoginID);// 0x1ae5850
	void Cheat_RegenHP(bool OnOff, FString InClientLoginID);// 0x1ae5750
	void Cheat_NetProfile(bool OnOff, FString InClientLoginID);// 0x1ae5650
	void Cheat_MoveSpeed(bool OnOff, FString InClientLoginID);// 0x1ae5550
	void Cheat_LevelUp(int InNewLevel, FString InClientLoginID);// 0x1ae5460
	void Cheat_KillTarget(int InTargetActorID, FString InClientLoginID);// 0x1ae5370
	void Cheat_KillLaneMinions(FString InClientLoginID);// 0x1ae52c0
	void Cheat_HighLightTutorial(FString WidgetName, FString InClientLoginID);// 0x1ae51b0
	void Cheat_Hide(bool InIsSet, FString InClientLoginID);// 0x1ae50b0
	void Cheat_Gold(int InNewValue, FString InClientLoginID, bool bIsCSGold);// 0x1ae4f70
	void Cheat_God(int InGodType, FString InClientLoginID);// 0x1ae4e80
	void Cheat_GetDamage(int InNewValue, FString InClientLoginID);// 0x1ae4d90
	void Cheat_ForceRespawn(FString InClientLoginID);// 0x1ae4ce0
	void Cheat_ExpUp(int InNewEXP, FString InClientLoginID);// 0x1ae4bf0
	void Cheat_EndlessGame(FString InClientLoginID);// 0x1ae4b40
	void Cheat_Dunk(int InTeamNum, FString InClientLoginID);// 0x1ae4a50
	void Cheat_Dump_AbnormalStates(FString InClientLoginID);// 0x1ae49a0
	void Cheat_Defeat(FString InClientLoginID);// 0x1ae48f0
	void Cheat_CoolDown(bool OnOff, FString InClientLoginID);// 0x1ae47f0
	void Cheat_BreakLaneSpawners(bool InIsStop, FString InClientLoginID);// 0x1ae46f0
	void Cheat_BotPossessAll(bool InIsPossessAll, FString InClientLoginID);// 0x1ae45f0
	void Cheat_ARAMTest();// 0x1ae42f0
	void Cheat_ARAMStart(int CurrentNum);// 0x1ae4260
	void Cheat_AddMVPLog(int InNewValue, FString InClientLoginID);// 0x1ae4500
	void Cheat_AddItem(int InNewValue, FString InClientLoginID);// 0x1ae4410
	void Cheat_AddGamePlayTime(float InAddSeconds, FString InClientLoginID);// 0x1ae4310
	void ChangeTeam(const FString[] InArgs, Transform InSpawnTransform, FString InClientLoginID);// 0x1ae4020

--------------------------------
Class: OPSkillCrosshairManager.ActorComponent.Object
	MulticastInlineDelegateProperty OnOutlinedTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAutoAimTargetStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAutoAimFeatureStatusChanged;//[Size: 1]
	UnitBase* LastOutlinedUnit;//[Offset: 0x100, Size: 1]
	float AutoAimMoveSpeedScale;//[Offset: 0x198, Size: 1]
	float AutoAimDistance;//[Offset: 0x19c, Size: 1]
	bool bEnableSkillAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	Vector2D CurrentAutoAimScreenPositionAdjustment;//[Offset: 0x1a4, Size: 1]
	Actor* CurrentAutoAimTarget;//[Offset: 0x1b8, Size: 1]
	bool IsAutoAimEnabled();// 0x1b98880
	static OPSkillCrosshairManager* GetLocalSkillCrosshairComponent(Object* InWorldContextObject);// 0x1b98320
	Vector GetCurrentLocalAimDirection();// 0x1b982b0
	enum GetAutoAimStatus();// 0x1b98280
	static Vector CalculateInterceptionOnViewport(Vector InOriginOfTheLine, Vector InCenterOfSphere, Vector InUnitVector, float InAttackRange);// 0x1b98070
	static Vector CalculateInterceptionOnActorViewport(Actor* InViewerActor, Vector InCenterOfSphere, Vector InUnitVector, float InAttackRange);// 0x1b97ec0

--------------------------------
Class: OPBattleDraftMenuComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_RoundStatus;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x2a8, Size: 1]
	OPDraftSkinSelectWidget* Bind_View_SkinSelector;//[Offset: 0x2b0, Size: 1]
	Widget* Bind_View_HeroSelection;//[Offset: 0x2b8, Size: 1]
	OPBattleDraftMenuHeroListComponent* Bind_Panel_HeroList_Left;//[Offset: 0x2c0, Size: 1]
	OPBattleDraftMenuHeroListComponent* Bind_Panel_HeroList_Right;//[Offset: 0x2c8, Size: 1]
	OPHeroHexagonButton*[] HeroHexIcons;//[Offset: 0x2d0, Size: 1]
	TextBlock* Bind_Text_Region;//[Offset: 0x2e8, Size: 1]
	Widget* Bind_RegionBorder;//[Offset: 0x2f0, Size: 1]
	OPVersionDisplayer* Bind_VersionDisplayer;//[Offset: 0x2f8, Size: 1]
	OPButtonBase* Bind_Button_Select;//[Offset: 0x300, Size: 1]
	OPButtonBase* Bind_Button_Select_Disable;//[Offset: 0x308, Size: 1]
	Button* Bind_Button_ForceStart_With_Bot;//[Offset: 0x310, Size: 1]
	Button* Bind_Button_ForceStart_With_Bot_Draft;//[Offset: 0x318, Size: 1]
	Button* Bind_Button_ForceStart_Player_vs_AI;//[Offset: 0x320, Size: 1]
	Button* Bind_Button_JoinBattle;//[Offset: 0x328, Size: 1]
	OPLobbyShop_Slot_Filter_CheckBox* Bind_AutoSkillCheck;//[Offset: 0x330, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x338, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x340, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x348, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x350, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x358, Size: 1]
	FName PreSelectedHeroID;//[Offset: 0x360, Size: 1]
	FName SelectedHeroID;//[Offset: 0x368, Size: 1]
	OPHealthProgressBar* Bind_TimeBar_L;//[Offset: 0x370, Size: 1]
	OPHealthProgressBar* Bind_TimeBar_R;//[Offset: 0x378, Size: 1]
	EditableText* Bind_EditText_Search;//[Offset: 0x380, Size: 1]
	OPDraftPositionSelectWidget* Bind_PositionSelect;//[Offset: 0x388, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x390, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x398, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x3a0, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x3a8, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x3b0, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3b8, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3c0, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3c8, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3d0, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3d8, Size: 1]
	Widget* Bind_Panel_Top;//[Offset: 0x3e0, Size: 1]
	Widget* Bind_Panel_PositionFilter;//[Offset: 0x3e8, Size: 1]
	Widget* Bind_Panel_MyTeam;//[Offset: 0x3f0, Size: 1]
	Widget* Bind_Panel_EnemyTeam;//[Offset: 0x3f8, Size: 1]
	OPDraftHeroInfoWidget* Bind_View_HeroInfo;//[Offset: 0x400, Size: 1]
	MainBattleUIElement_ARAMHeroSelectionWidget* Bind_View_ARAMSelection;//[Offset: 0x408, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x410, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x418, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x420, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x428, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x430, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x438, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x440, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x448, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x450, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x458, Size: 1]
	WidgetAnimation* Bind_SceneCloseAni;//[Offset: 0x460, Size: 1]
	WidgetAnimation* Bind_SkinSelectorOpenAni;//[Offset: 0x468, Size: 1]
	WidgetAnimation* Bind_Aram_Open;//[Offset: 0x470, Size: 1]
	WidgetAnimation* Bind_SkinSelectorCloseAni;//[Offset: 0x478, Size: 1]
	WidgetAnimation* Bind_TimeBarOnAni;//[Offset: 0x480, Size: 1]
	WidgetAnimation* Bind_TimeBarOffAni;//[Offset: 0x488, Size: 1]
	OPDraftSpellListWidget* Bind_SpellList;//[Offset: 0x490, Size: 1]
	OPSpellIconWidget* Bind_Spell_01;//[Offset: 0x498, Size: 1]
	OPSpellIconWidget* Bind_Spell_02;//[Offset: 0x4a0, Size: 1]
	int PlayTickSoundWhenTimerBelow;//[Offset: 0x4ac, Size: 1]
	int PlayTickSoundWhenTimerBelowClose;//[Offset: 0x4b0, Size: 1]
	SoundBase* TickSound;//[Offset: 0x4b8, Size: 1]
	SoundBase* TickSoundClose;//[Offset: 0x4c0, Size: 1]
	SoundBase* TickSound2;//[Offset: 0x4c8, Size: 1]
	SoundBase* TickSoundClose2;//[Offset: 0x4d0, Size: 1]
	SoundBase* TickSound3;//[Offset: 0x4d8, Size: 1]
	SoundBase* TickSoundClose3;//[Offset: 0x4e0, Size: 1]
	SoundBase* Sound_RoundStatusChanged;//[Offset: 0x4e8, Size: 1]
	enum LatestRoundState;//[Offset: 0x538, Size: 1]
	enum DraftBanPickHeroIconType;//[Offset: 0x539, Size: 1]
	byte CurrentPhaseTeam;//[Offset: 0x53a, Size: 1]
	float HeroTradeTimer;//[Offset: 0x53c, Size: 1]
	FText MESSAGE_TRADE_NOTICE;//[Offset: 0x540, Size: 1]
	FText MESSAGE_TRADE_ERROR;//[Offset: 0x558, Size: 1]
	FText MESSAGE_TRADE_REFUSAL;//[Offset: 0x570, Size: 1]
	<enum,FText> RoundStatusTitles;//[Offset: 0x588, Size: 1]
	<enum,FText> RoundStatusDescriptions;//[Offset: 0x5d8, Size: 1]
	MulticastInlineDelegateProperty OnDraftStateChangedDelegate;//[Size: 1]
	float CurrentRoundTime;//[Offset: 0x638, Size: 1]
	float CurrentRoundEndTime;//[Offset: 0x63c, Size: 1]
	bool IsShowSkinSelector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	int CurrentDraftPhase;//[Offset: 0x644, Size: 1]
	OP_InteractionPopup_Base* InteractionPopup;//[Offset: 0x658, Size: 1]
	void UpdateRegionText();// 0x1acecd0
	void UpdatePlayerList_BP(out const OP_PlayerState*[] MyTeams, out const OP_PlayerState*[] EnemyTeams);// 0x1f25360
	void UpdatePlayerList();// 0x1acecb0
	void UpdateHeroList();// 0x1acec90
	void Update_AutoSkill();// 0x1acecf0
	void ShowSpellSlot_BP();// 0x1f25360
	void ShowSkinSelector();// 0x1acec50
	void PlayCloseAnimation_BPNE(bool CloseUIOnly);// 0x1ace510
	void OnUpdateTimer_BP(bool IsAllyTurn);// 0x1f25360
	void OnSyncDraftTradeInfo();// 0x1ace460
	void OnSpellListShowAniFinished();// 0x1ace440
	void OnSpellListHideAniFinished();// 0x1ace420
	void OnSkinSelected(FName InSkinID);// 0x1ace390
	void OnShowSpellList_BP();// 0x1f25360
	void OnShowSpellList(byte InSpellSlotIndex);// 0x1ace310
	void OnRoundTimerChanged_BPNE(int RoundTime);// 0x1ace2a0
	void OnRoundTimerChanged(int InCoolDown);// 0x1ace210
	void OnRoundStateChanged_Observer_BP(enum RoundState);// 0x1f25360
	void OnRoundStateChanged_BPNE(enum RoundState);// 0x1ace1a0
	void OnRoundStateChanged(enum InNewRoundState);// 0x1ace120
	void OnRoundDesiredPlayersNumChanged();// 0x1ace100
	void OnResponseHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever, bool InIsTradeSuccess);// 0x1acdff0
	void OnRequestHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever);// 0x1acdf20
	void OnPlayPickSound(FName HeroID);// 0x1acdad0
	void OnPlayerSelectSpell(FString InPlayerName, byte InSpellSlotIndex, FName InSpellID);// 0x1acddf0
	void OnPlayerSelectHeroSkin(OP_PlayerState* TargetPlayer, out const FName HeroSkinID);// 0x1acdd10
	void OnPlayerSelectHero(OP_PlayerState* TargetPlayer, out const FName HeroID, bool bIsLockIn);// 0x1acdbf0
	void OnPlayerChangedTeam(PlayerState* InPlayer);// 0x1acdb60
	void OnNotifyNextIsMyDraftTurn_BPNE();// 0x1acdab0
	void OnHideSpellList_BP();// 0x1f25360
	void OnHideSpellList();// 0x1acda90
	void OnHeroSelectedFromHexList(FName InHeroID);// 0x1acda00
	void OnDraftStateChanged();// 0x1acd9e0
	void OnDraftSelectPositionPhaseStart_BP(bool IsMyTurn);// 0x1f25360
	void OnDraftingStart_BP(bool IsAllyTeam, bool IsMyTurn);// 0x1f25360
	void OnDraftingChangeTurn_BP(bool IsMyTurn);// 0x1f25360
	void OnDraftBanPickSelected_BP(bool IsAllyPick, out const FText HeroName, Texture2D* HeroPortrait);// 0x1f25360
	void OnDraftBanPickPhaseStart_BP(int InPhase, byte InTeamNum);// 0x1f25360
	void OnDraftBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x1acd910
	void OnDraftBanPickPhaseEnd_BP(int InPhase, byte InTeamNum, FName InHeroID);// 0x1f25360
	void OnDraftBanPickPhaseEnd(int InPhase, byte InTeamNum, FName InHeroID);// 0x1acd800
	void OnDraftBanPickNonSelected_BP(bool IsAllyPick);// 0x1f25360
	void OnDraftBanPickAllPhaseEnd_BP(byte EndTeamNum);// 0x1f25360
	void OnClickedSpell(byte InSpellSlotIndex, out const FName InSpellID);// 0x1acd720
	void OnBanPickStart_BP(bool IsAllyTeam);// 0x1f25360
	void OnBanPickChangeTurn_BP(bool IsAllyTeam, int phase);// 0x1f25360
	void JoinBattle_Test();// 0xd9d3e0
	bool IsWaitingState();// 0x1acd5c0
	void HideSpellSlot_BP();// 0x1f25360
	void HideSelectButton();// 0x1acd400
	FText GetRoundStatusTitle();// 0x1acd0e0
	FText GetRoundStatusDescription();// 0x1acd040
	void ForceStartWithBotDraft_Test();// 0xd9d3e0
	void ForceStartWithBot_Test();// 0xd9d3e0
	void ForceStartPlayerVsAI_Test();// 0xd9d3e0
	void DiableTestButtons_BP();// 0x1f25360
	void DiableTestButtons();// 0xd9d3e0
	void CloseMenuHandle(bool bSkipEnteringScreen);// 0x1acca00
	void CheckForDuplicatedErrors();// 0xd9d3e0

--------------------------------
Class: OPDraftSkinSelectWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_Button_Left;//[Offset: 0x298, Size: 1]
	OPButtonBase* Bind_Button_Right;//[Offset: 0x2a0, Size: 1]
	OPHorizontalIndicatorWidget* Bind_SlotIndicator;//[Offset: 0x2a8, Size: 1]
	CanvasPanel* Bind_HB_SkinList;//[Offset: 0x2b0, Size: 1]
	FName HeroID;//[Offset: 0x2b8, Size: 1]
	FName[] SkinList;//[Offset: 0x2c0, Size: 1]
	byte SelectedSkinIndex;//[Offset: 0x2d0, Size: 1]
	float ButtonSpacing;//[Offset: 0x2d4, Size: 1]
	byte PreviewSlotNum;//[Offset: 0x2e8, Size: 1]
	class OPDraftSkinSelectButton* DraftSkinSelectButtonClass;//[Offset: 0x2f0, Size: 1]
	OPDraftSkinSelectButton*[] ButtonList;//[Offset: 0x2f8, Size: 1]
	void SelectSkinID(FName InSkinID);// 0x1b12230
	void OnSkinButtonClicked(OPDraftSkinSelectButton* InButton);// 0x1b11d70
	void OnClickedRight();// 0x1b11500
	void OnClickedLeft();// 0x1b114e0
	void MoveButtonArray(int InDirection);// 0x1b11450
	void CheckSlotPosition(int InDirection);// 0x1b11380

--------------------------------
Class: OPDraftSkinSelectButton.UserWidget.Widget.Visual.Object
	OPIconImageWidget* Bind_SkinIcon;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_Selected;//[Offset: 0x270, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x288, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x290, Size: 1]
	byte MaxSkinNum;//[Offset: 0x298, Size: 1]
	FName SkinID;//[Offset: 0x29c, Size: 1]
	bool HasSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool IsBanned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	byte ArrayIndex;//[Offset: 0x2a7, Size: 1]
	float ButtonSpacing;//[Offset: 0x2a8, Size: 1]
	float ScrollSpeed;//[Offset: 0x2ac, Size: 1]
	float SlotScale_Normal;//[Offset: 0x2b0, Size: 1]
	float SlotScale_Selected;//[Offset: 0x2b4, Size: 1]
	float TargetPosition;//[Offset: 0x2b8, Size: 1]
	bool IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	float MoveDirection;//[Offset: 0x2c0, Size: 1]
	OPDraftSkinSelectWidget* SkinSelectWidget;//[Offset: 0x2c8, Size: 1]
	enum HeroIconType;//[Offset: 0x2d0, Size: 1]
	void SetDisabledIcon(bool InIsBanned);// 0x1f25360

--------------------------------
Class: OPBattleDraftMenuHeroListComponent.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x260, Size: 1]

--------------------------------
Class: OPHeroHexagonButton.UserWidget.Widget.Visual.Object
	int HeroButtonOrder;//[Offset: 0x260, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_BanCount;//[Offset: 0x270, Size: 1]
	Widget* Bind_Image_Rotate;//[Offset: 0x278, Size: 1]
	OPHeroHexButtonToolTipComponent* Bind_ToolTip;//[Offset: 0x280, Size: 1]
	FName HeroID;//[Offset: 0x288, Size: 1]
	bool IsRotationHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool IsStandBy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	enum IconState;//[Offset: 0x292, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	SoundBase* PressedSound;//[Offset: 0x2a8, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x2b0, Size: 1]
	class OPHeroHexButtonToolTipComponent* ToolTipClass;//[Offset: 0x2b8, Size: 1]
	enum HeroIconType;//[Offset: 0x2c0, Size: 1]
	OPBattleDraftMenuComponent* DraftMenu;//[Offset: 0x2c8, Size: 1]
	void SetZOrder(int Order);// 0x1b26560
	void OnMouseLeave_BP(enum CurrentStat);// 0x1f25360
	void OnMouseEnter_BP(enum CurrentStat);// 0x1f25360
	void OnMouseClick_BP(enum CurrentStat);// 0x1f25360
	void OnIconStateChanged_BPNE(enum NewState);// 0x1a83720
	void OnChangeState_ServerBanned(bool HasHero);// 0x1f25360
	void OnChangeState_Selected_Me();// 0x1f25360
	void OnChangeState_Selected_Enemy(bool HasHero);// 0x1f25360
	void OnChangeState_Selected_Ally(bool HasHero);// 0x1f25360
	void OnChangeState_Normal(bool HasHero);// 0x1f25360
	void OnChangeState_Empty();// 0x1f25360
	void OnChangeState_CantPick(bool HasHero);// 0x1f25360
	void OnChangeState_BanPick_Me();// 0x1f25360
	void OnChangeState_BanPick_Ally();// 0x1f25360
	void OnChangeState_Banned(bool HasHero);// 0x1f25360
	void OnChangeSelectedState(bool bIsSelected);// 0x1f25360
	void OnBanCountChanged_BP(int BanCount);// 0x1f25360
	bool IsMyTeamBanPick();// 0x1b25a60
	int GetBanCount();// 0x1b24f70

--------------------------------
Class: OPHeroHexButtonToolTipComponent.UserWidget.Widget.Visual.Object
	<enum,FText> RoleText;//[Offset: 0x260, Size: 1]
	<enum,FText> PositionText;//[Offset: 0x2b0, Size: 1]
	<enum,FText> DifficultyText;//[Offset: 0x300, Size: 1]
	<enum,FText> AttackCategoryText;//[Offset: 0x350, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x3a0, Size: 1]
	TextBlock* Bind_Text_Type;//[Offset: 0x3a8, Size: 1]
	TextBlock* Bind_Text_Role;//[Offset: 0x3b0, Size: 1]
	TextBlock* Bind_Text_Position;//[Offset: 0x3b8, Size: 1]
	TextBlock* Bind_Text_Difficult;//[Offset: 0x3c0, Size: 1]
	void SetCharacterID(FName InCharacterID);// 0x1b262b0

--------------------------------
Class: OPVersionDisplayer.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Version;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Version_Warning;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Version_DevelopmentWarning;//[Offset: 0x270, Size: 1]
	void UpdateVersionText();// 0x1bd5ed0

--------------------------------
Class: OPLobbyShop_Slot_Filter_CheckBox.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_FilterName;//[Offset: 0x2d0, Size: 1]
	Image* Bind_IMG_Check;//[Offset: 0x2d8, Size: 1]
	Image* Bind_IMG_Hover;//[Offset: 0x2e0, Size: 1]
	float OpacityValue_forCheck;//[Offset: 0x2e8, Size: 1]
	float OpacityValue_forUncheck;//[Offset: 0x2ec, Size: 1]
	void OnSelectChanged_BPNE(bool InIsSelected);// 0x1a8b850

--------------------------------
Class: OPPositionFilterWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x2c8, Size: 1]
	<enum,TitleDescTextGroup> PositionDescription;//[Offset: 0x2d0, Size: 1]
	<enum,Texture2D*> PositionIcon;//[Offset: 0x320, Size: 1]
	enum PositionType;//[Offset: 0x370, Size: 1]
	byte TooltipPlacement;//[Offset: 0x390, Size: 1]
	Margin TooltipOffsets;//[Offset: 0x394, Size: 1]

--------------------------------
Class: OPDraftPositionSelectWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x298, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x2a0, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x2a8, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x2b0, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x2b8, Size: 1]
	bool bShowDraftPositionByTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	enum[] Team1PositionSlots;//[Offset: 0x2c8, Size: 1]
	enum[] Team2PositionSlots;//[Offset: 0x2d8, Size: 1]
	enum[] CommonPositionSlots;//[Offset: 0x2e8, Size: 1]
	OPDraftPositionIconWidget*[] PositionIcons;//[Offset: 0x2f8, Size: 1]
	OPDraftPositionIconWidget* FocusedIcon;//[Offset: 0x308, Size: 1]
	byte TeamNum;//[Offset: 0x310, Size: 1]
	enum RoundState;//[Offset: 0x311, Size: 1]
	void ShowWidget();// 0x1b12350
	void OnShowWidget_BP();// 0x1f25360
	void OnRoundStateChanged_BP(enum NewRoundState);// 0x1f25360
	void OnRoundStateChanged(enum NewRoundState);// 0x1b11c50
	void OnPositionSelected(enum NewPositionType, int InIndex);// 0x1b11b80
	void OnPlayerLanePositionChanged(OP_PlayerState* APS, enum position, bool IsFixed);// 0x1b11750
	void OnHideWidget_BP();// 0x1f25360
	void OnEnableSelect_BP(bool IsEnable);// 0x1f25360
	void HideWidget();// 0x1b11430

--------------------------------
Class: OPDraftPositionIconWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_OPTextBlock_LaneName;//[Offset: 0x2c8, Size: 1]
	VerticalBox* Bind_VB_UserName;//[Offset: 0x2d0, Size: 1]
	<enum,Texture2D*> RoleMap;//[Offset: 0x2d8, Size: 1]
	byte TeamNum;//[Offset: 0x328, Size: 1]
	enum PositionType;//[Offset: 0x329, Size: 1]
	int ButtonIndex;//[Offset: 0x32c, Size: 1]
	bool IsFixedPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	<enum,TitleDescTextGroup> RoleDescription;//[Offset: 0x338, Size: 1]
	Texture2D* Center;//[Offset: 0x388, Size: 1]
	Texture2D* Jungle;//[Offset: 0x390, Size: 1]
	Texture2D* LeftGaurdian;//[Offset: 0x398, Size: 1]
	Texture2D* LeftSpirit;//[Offset: 0x3a0, Size: 1]
	Texture2D* RightGuardian;//[Offset: 0x3a8, Size: 1]
	Texture2D* RightSpirit;//[Offset: 0x3b0, Size: 1]
	OPDraftPositionSelectWidget* PositionSelectWidget;//[Offset: 0x3d0, Size: 1]
	void OnSelectFixed();// 0x1f25360
	OPDraftPositionUserNameWidget* AddUserNameWidget_BP();// 0x1f25360

--------------------------------
Class: OPDraftPositionUserNameWidget.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_UserName;//[Offset: 0x260, Size: 1]
	FString UserName;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPDraftUserSlotWidget_Ally.OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_BG;//[Offset: 0x760, Size: 1]
	Image* Bind_Image_TeamBar;//[Offset: 0x768, Size: 1]
	Image* Bind_Image_TeamBar_Add;//[Offset: 0x770, Size: 1]
	Image* Bind_Image_Fx_Picking;//[Offset: 0x778, Size: 1]
	OPButtonBase* Bind_Button_Trade;//[Offset: 0x780, Size: 1]
	SoundBase* PickSound_MySelf;//[Offset: 0x788, Size: 1]
	SoundBase* PickSound_Team;//[Offset: 0x790, Size: 1]
	bool IsTradeClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	void OnRoundTimerChanged(int InCoolDown);// 0x1b178a0
	void OnResponseHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever, bool InIsTradeSuccess);// 0x1b17710
	void OnRequestHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever);// 0x1b17640

--------------------------------
Class: OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_UserName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_State;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_PositionIcon_Line;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_UserHeroName;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x280, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x288, Size: 1]
	OPSpellIconWidget* Bind_Spell;//[Offset: 0x290, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon_Main;//[Offset: 0x298, Size: 1]
	Widget* Bind_Image_PositionIconEmpty;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* Bind_Picking_Anim;//[Offset: 0x2a8, Size: 1]
	bool bUsePredefinedSlateBrushes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	FName HeroIconMaterialSlotName;//[Offset: 0x2b4, Size: 1]
	MaterialInstanceDynamic* Bind_Image_HeroIcon_Mat;//[Offset: 0x2c0, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x2c8, Size: 1]
	SlateBrush TeamBar_MySelf;//[Offset: 0x2d0, Size: 1]
	SlateBrush TeamBar_Others;//[Offset: 0x358, Size: 1]
	SlateBrush TeamBar_Disabled;//[Offset: 0x3e0, Size: 1]
	SlateBrush TeamBar_Add_MySelf;//[Offset: 0x468, Size: 1]
	SlateBrush TeamBar_Add_Others;//[Offset: 0x4f0, Size: 1]
	SlateBrush TeamBar_Add_Disabled;//[Offset: 0x578, Size: 1]
	LinearColor Color_Name_MySelf;//[Offset: 0x600, Size: 1]
	LinearColor Color_Name_Others;//[Offset: 0x610, Size: 1]
	LinearColor Color_Name_Disabled;//[Offset: 0x620, Size: 1]
	LinearColor Color_Fx_Picking_MySelf;//[Offset: 0x630, Size: 1]
	LinearColor Color_Fx_Picking_Others;//[Offset: 0x640, Size: 1]
	LinearColor Color_Fx_Picking_Disabled;//[Offset: 0x650, Size: 1]
	LinearColor Color_BG_MySelf;//[Offset: 0x660, Size: 1]
	LinearColor Color_BG_Others;//[Offset: 0x670, Size: 1]
	LinearColor Color_BG_Disabled;//[Offset: 0x680, Size: 1]
	int SlotIndex;//[Offset: 0x690, Size: 1]
	enum HeroIconType;//[Offset: 0x694, Size: 1]
	FText TXT_POSITION_01;//[Offset: 0x6a0, Size: 1]
	FText TXT_POSITION_02;//[Offset: 0x6b8, Size: 1]
	FText TXT_POSITION_03;//[Offset: 0x6d0, Size: 1]
	FText TXT_POSITION_04;//[Offset: 0x6e8, Size: 1]
	FText TXT_POSITION_05;//[Offset: 0x700, Size: 1]
	FText TXT_SELECTING;//[Offset: 0x718, Size: 1]
	FText TXT_WAITING;//[Offset: 0x730, Size: 1]
	FText TXT_NEXTTURN;//[Offset: 0x748, Size: 1]
	void ONUpdateSlot_BP(bool bIsMySelf);// 0x1f25360
	void OnSlotUpdated_BPNE(bool bIsVisible);// 0x1a93080
	void OnSlotEnable_BP();// 0x1f25360
	void OnSlotDisable_BP();// 0x1f25360
	void OnSelectingStateStart_BP();// 0x1f25360
	void OnSelectingStateEnd_BP();// 0x1f25360
	void OnRoundStateChanged(enum InNewRoundState);// 0x1b11cd0
	void OnPlayerSelectHeroSkin(OP_PlayerState* TargetPlayer, out const FName HeroSkinID);// 0x1b11aa0
	void OnPlayerSelectHero(OP_PlayerState* TargetPlayer, out const FName HeroID, bool bIsLockIn);// 0x1b11980
	void OnPlayerLanePositionChanged(OP_PlayerState* APS, enum position, bool IsFixed);// 0x1b11870
	void OnDraftStateChanged();// 0x1b11680
	void OnDraftSelectPositionPhaseStart(int InPhase);// 0x1b115f0
	void OnDraftBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x1b11520

--------------------------------
Class: OPDraftUserSlotWidget_Enemy.OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	SoundBase* PickSound_Enemy;//[Offset: 0x760, Size: 1]

--------------------------------
Class: OPDraftHeroInfoWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Name;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Type;//[Offset: 0x268, Size: 1]
	WidgetAnimation* Bind_Show_Anim;//[Offset: 0x270, Size: 1]
	<enum,FText> RoleText;//[Offset: 0x278, Size: 1]

--------------------------------
Class: MainBattleUIElement_ARAMHeroSelectionWidget.UserWidget.Widget.Visual.Object
	PanelWidget* Bind_HBox_ARAMAvailable_Left;//[Offset: 0x260, Size: 1]
	PanelWidget* Bind_HBox_ARAMAvailable_Right;//[Offset: 0x268, Size: 1]
	OPButtonBase* Bind_Button_ARAMDice;//[Offset: 0x270, Size: 1]
	OPHeroHexagonButton*[] HexagonButtons;//[Offset: 0x278, Size: 1]
	void OnShow_BPNE();// 0x1a7d3a0
	void OnClickARAMHero(FName InHeroName);// 0x1acd670
	void OnClickARAMDice();// 0x1acd650
	void OnARAMSelectableChanged();// 0x1acd610
	void OnARAMDiceCounterChanged();// 0x1acd5f0

--------------------------------
Class: OPDraftBannedHeroSlot.UserWidget.Widget.Visual.Object
	void SetHero(FName DefaultSkinID);// 0x1f25360
	void Init();// 0x1f25360

--------------------------------
Class: MainBattleUIElement_RoundEndResultComponent.UserWidget.Widget.Visual.Object
	void ShowAnimationThenLobby();// 0x1f25360
	void ShowAnimation_BPNE(bool InIsWin, Vector InLookAtPos, bool InShouldLookAtPos);// 0x1a8ca80
	void OnTravelToLobby();// 0x1a8c100

--------------------------------
Class: OPESCMenuComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_Button_Return;//[Offset: 0x2a0, Size: 1]
	OPButtonBase* Bind_Button_Settings;//[Offset: 0x2a8, Size: 1]
	OPButtonBase* Bind_Button_Social;//[Offset: 0x2b0, Size: 1]
	OPButtonBase* Bind_Button_Surrender;//[Offset: 0x2b8, Size: 1]
	OPButtonBase* Bind_Button_Lobby;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_Button_QuitGame;//[Offset: 0x2c8, Size: 1]
	OPDisconnectWidget* Bind_DisconnectWidget;//[Offset: 0x2d0, Size: 1]
	Widget* Bind_FastGameSettings;//[Offset: 0x2d8, Size: 1]
	OPTextBlock* Bind_Text_HeroName;//[Offset: 0x2e0, Size: 1]
	void Update_BP();// 0x1f25360
	void OpenSocialWidget_BP();// 0x1f25360
	void OnRoundStateChanged(enum InRoundState);// 0x1b17820
	void OnClickedQuitGame();// 0x1b16cc0

--------------------------------
Class: OPDisconnectWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Description;//[Offset: 0x280, Size: 1]
	OPTextButtonBase* Bind_Button_Stay;//[Offset: 0x288, Size: 1]
	OPTextButtonBase* Bind_Button_Disconnect;//[Offset: 0x290, Size: 1]
	Widget* Bind_Frame_Normal;//[Offset: 0x298, Size: 1]
	Widget* Bind_Frame_Warning;//[Offset: 0x2a0, Size: 1]
	PopupTextSet Text_Normal_Draft;//[Offset: 0x2a8, Size: 1]
	PopupTextSet Text_Normal_InGame;//[Offset: 0x2d8, Size: 1]
	PopupTextSet Text_Single_Draft;//[Offset: 0x308, Size: 1]
	PopupTextSet Text_Single_InGame;//[Offset: 0x338, Size: 1]
	PopupTextSet Text_AI_Draft;//[Offset: 0x368, Size: 1]
	PopupTextSet Text_AI_InGame;//[Offset: 0x398, Size: 1]
	PopupTextSet Text_Custom_Draft;//[Offset: 0x3c8, Size: 1]
	PopupTextSet Text_Custom_InGame;//[Offset: 0x3f8, Size: 1]
	PopupTextSet Text_Training_InGame;//[Offset: 0x428, Size: 1]
	PopupTextSet Text_Tutorial_InGame;//[Offset: 0x458, Size: 1]
	SlateColor FontColor_Title_Normal;//[Offset: 0x488, Size: 1]
	SlateColor FontColor_Title_Warning;//[Offset: 0x4b0, Size: 1]
	SlateColor FontColor_Desc_Normal;//[Offset: 0x4d8, Size: 1]
	SlateColor FontColor_Desc_Warning;//[Offset: 0x500, Size: 1]
	UserWidget* PrevWidget;//[Offset: 0x528, Size: 1]
	void ShowWidget(UserWidget* InPrevWidget);// 0x1b122c0
	void HideWidget();// 0x1b11410
	void HandleReaction_Yes_BP();// 0x1f25360
	void HandleReaction_No_BP();// 0x1f25360

--------------------------------
Class: PopupTextSet
	FText Title;//[Offset: 0x0, Size: 1]
	FText Description;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LaserPointer.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x220, Size: 1]
	FString NIAGARASYSTEM_VISIBILITY_PARAM_NAME;//[Offset: 0x228, Size: 1]
	void OnOtherDestroyed(Actor* OtherActor);// 0x1a837a0
	void ExecDestroy();// 0x1a82d20

--------------------------------
Class: RangeMeter.Actor.Object
	void OnUpdateRangeAttackTraceHitResult_BPNE(out const HitResult OutHitResult);// 0x1be0580
	void OnOtherDestroyed(Actor* OtherActor);// 0x1a837a0

--------------------------------
Class: ScreenSpaceEffect.Object
	ScreenSpaceParticles[] ScreenSpaceEffects;//[Offset: 0x28, Size: 1]
	OP_PlayerController* OwnerPlayer;//[Offset: 0x38, Size: 1]
	MyHUD* HUD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ScreenSpaceParticles
	Vector2D Velocity;//[Offset: 0x0, Size: 1]
	Vector2D Pos;//[Offset: 0x8, Size: 1]
	Vector2D Size;//[Offset: 0x10, Size: 1]
	Texture2D* Particles;//[Offset: 0x18, Size: 1]
	MaterialInterface* MATParticles;//[Offset: 0x20, Size: 1]
	LinearColor Color;//[Offset: 0x28, Size: 1]
	float DeadTime;//[Offset: 0x38, Size: 1]
	float LifeTime;//[Offset: 0x3c, Size: 1]
	int TextureUWidth;//[Offset: 0x40, Size: 1]
	int TextureVHeight;//[Offset: 0x44, Size: 1]

--------------------------------
Class: MyHUD.HUD.Actor.Object
	<class ScreenSpaceEffect,ScreenSpaceEffect*> ScreenSpaceEffectsArray;//[Offset: 0x320, Size: 1]
	SoundBase* PointSound;//[Offset: 0x370, Size: 1]
	void SetDisableDrawing(bool boo);// 0x1a98da0
	int GetWidth();// 0x1a98d40
	int GetHeight();// 0x1a98d10

--------------------------------
Class: SkillFunction

--------------------------------
Class: Point_LaneGuide.Actor.Object
	byte TeamNum;//[Offset: 0x220, Size: 1]
	enum[] PositionTypes;//[Offset: 0x228, Size: 1]
	class Point_LaneGuide_GoalActor* GoalActorClass;//[Offset: 0x238, Size: 1]
	class Point_TutorialGuide_GoalActor* TutorialGoalActorClass;//[Offset: 0x240, Size: 1]
	Actor*[] ActorGoals;//[Offset: 0x248, Size: 1]
	void ShowPositionGuideSpline_BPNE(SplineComponent* InSplineCurve);// 0xe0e500
	void ShowPositionGuide_BPNE(Vector Finish, out const Vector[] PathList, float InDuration, int InPositionType);// 0x1bd9fe0
	void ActiveForDuration_BPNE(float InDuration);// 0x1bd8c20

--------------------------------
Class: Point_LaneGuide_GoalActor.Actor.Object
	Actor* ParentActor;//[Offset: 0x220, Size: 1]
	enum PositionType;//[Offset: 0x228, Size: 1]
	void InitLaneGuideGoal_BPNE(enum InPositionType, bool InIsMainGoal);// 0x1bd9660

--------------------------------
Class: Point_TutorialGuide_GoalActor.Actor.Object
	Actor* ParentActor;//[Offset: 0x220, Size: 1]
	class UserWidget* TutorialGuideNameWidgetClass;//[Offset: 0x250, Size: 1]

--------------------------------
Class: OPAutoPilotComponent.ActorComponent.Object
	OPMinimapWidgetStyleComponent* Minimap_SB;//[Offset: 0xf8, Size: 1]
	OPMinimapWidgetStyleComponent* Minimap_HUD;//[Offset: 0x100, Size: 1]
	OP_Character* Character;//[Offset: 0x108, Size: 1]
	OP_PlayerController* PlayerController;//[Offset: 0x110, Size: 1]
	void OnClickMinimap();// 0x1acd700
	void OnBlockingEvent();// 0x1acd630

--------------------------------
Class: OPSkillInfoWidget.UserWidget.Widget.Visual.Object
	OP_Character* CurrentCharacter;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_SkillPoint;//[Offset: 0x268, Size: 1]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	void Update();// 0x1b99780
	void ShowWidget_BP();// 0x1f25360
	void SetupSkillInfo();// 0x1b99740
	void SetPlayerSkillPoint(byte InNewPoint);// 0x1b996c0
	void OnPlayerSkillPointChanged(byte InNewPoint);// 0x1b98e00
	void OnHeroLevelChanged(byte InNewLevel);// 0x1b98d80
	void OnGlobalSkillInventoryUpdated(PSInventoryManager* InInventoryManager);// 0x1b98cf0
	void OnControllingCharacterChanged();// 0x1b98cb0
	void HideWidget_BP();// 0x1f25360

--------------------------------
Class: OPResourceLogHistory
	int MaxFrameRate;//[Offset: 0x0, Size: 1]
	int NumFrames;//[Offset: 0x4, Size: 1]
	float TotalDeltaTimes;//[Offset: 0x8, Size: 1]
	float HighestDeltaTime;//[Offset: 0xc, Size: 1]
	int LowFrameCounter;//[Offset: 0x10, Size: 1]
	int MidFrameCounter;//[Offset: 0x14, Size: 1]
	int HighFrameCounter;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ClientRecommendResult
	OP_PlayerState* GainedUser;//[Offset: 0x0, Size: 1]
	OP_PlayerState* VoteUser;//[Offset: 0x8, Size: 1]
	int8 RecommendType;//[Offset: 0x10, Size: 1]
	int8 VoteUserTeamNum;//[Offset: 0x11, Size: 1]

--------------------------------
Class: DamageHistorySync
	Actor* Attacker;//[Offset: 0x0, Size: 1]
	PlayerBase* AttackerPlayerUnit;//[Offset: 0x8, Size: 1]
	DateTime LastUpdateAt;//[Offset: 0x10, Size: 1]
	enum DamageCategory;//[Offset: 0x18, Size: 1]
	float DamageAmount;//[Offset: 0x1c, Size: 1]
	byte AttackerTeam;//[Offset: 0x20, Size: 1]
	FName AttackerHeroID;//[Offset: 0x24, Size: 1]
	FName AttackerSkinID;//[Offset: 0x2c, Size: 1]
	FString AttackerNameOverride;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ResponseClientHello
	UnitRespawnTimeInfo[] RespawnTimers;//[Offset: 0x0, Size: 1]
	PlayerInfoForRejoinedUser[] PreviousPlayerInfos;//[Offset: 0x10, Size: 1]
	FName[] ARAMSelectables;//[Offset: 0x20, Size: 1]
	enum RejoinStatus;//[Offset: 0x30, Size: 1]

--------------------------------
Class: UnitRespawnTimeInfo
	UnitBase* UnitBase;//[Offset: 0x0, Size: 1]
	float RespawnRemainTimeSecond;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PlayerInfoForRejoinedUser
	PlayerState* PlayerState;//[Offset: 0x0, Size: 1]
	FName HeroID;//[Offset: 0x8, Size: 1]
	FName HeroSkinID;//[Offset: 0x10, Size: 1]
	FString PlayerName;//[Offset: 0x18, Size: 1]
	FText PlayerBotName;//[Offset: 0x28, Size: 1]
	FName[] SpellID;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 1]
	float Priority;//[Offset: 0x760, Size: 1]
	float BlendRadius;//[Offset: 0x764, Size: 1]
	float BlendWeight;//[Offset: 0x768, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3b61850

--------------------------------
Class: OPLaneSpawnerTableRow.TableRowBase
	FName SpawnerID;//[Offset: 0x8, Size: 1]
	byte SpawnerTeam;//[Offset: 0x10, Size: 1]
	int FirstGenTime;//[Offset: 0x14, Size: 1]
	int ReGenTime;//[Offset: 0x18, Size: 1]
	int MeleeMinionQuantity;//[Offset: 0x1c, Size: 1]
	FName MeleeMinionID;//[Offset: 0x20, Size: 1]
	int RangeMinionQuantity;//[Offset: 0x28, Size: 1]
	FName RangeMinionID;//[Offset: 0x2c, Size: 1]
	int SiegeMinionWaveInterval;//[Offset: 0x34, Size: 1]
	int SiegeMinionQuantity;//[Offset: 0x38, Size: 1]
	FName SiegeMinionID;//[Offset: 0x3c, Size: 1]
	int SuperMinionQuantity;//[Offset: 0x44, Size: 1]
	FName SuperMinionID;//[Offset: 0x48, Size: 1]
	FName DunkID;//[Offset: 0x50, Size: 1]

--------------------------------
Class: OPJungleSpawnerTableRow.TableRowBase
	FName GroupID;//[Offset: 0x8, Size: 1]
	byte GroupIndex;//[Offset: 0x10, Size: 1]
	FName SpawnerID;//[Offset: 0x14, Size: 1]
	byte SpawnerTeam;//[Offset: 0x1c, Size: 1]
	enum SpawnerType;//[Offset: 0x1d, Size: 1]
	byte LevelUpType;//[Offset: 0x1e, Size: 1]
	int FirstGenTime;//[Offset: 0x20, Size: 1]
	int ReGenTime;//[Offset: 0x24, Size: 1]
	int AgroResetRadius;//[Offset: 0x28, Size: 1]
	float ReturnDelayTimer;//[Offset: 0x2c, Size: 1]
	float PreSequanceTime;//[Offset: 0x30, Size: 1]
	float PreNotiTime;//[Offset: 0x34, Size: 1]
	FName Minion;//[Offset: 0x38, Size: 1]
	FName Minion;//[Offset: 0x40, Size: 1]
	FName Minion;//[Offset: 0x48, Size: 1]
	FName Minion;//[Offset: 0x50, Size: 1]
	FName Minion;//[Offset: 0x58, Size: 1]

--------------------------------
Class: OPMapTableRow.TableRowBase
	FName MapID;//[Offset: 0x8, Size: 1]
	enum MapCode;//[Offset: 0x10, Size: 1]
	FName MapNameLocalID;//[Offset: 0x14, Size: 1]
	FName MapDescLocalID;//[Offset: 0x1c, Size: 1]
	FName LevelFile;//[Offset: 0x24, Size: 1]
	FName MapThumbnailPath;//[Offset: 0x2c, Size: 1]
	enum GameModeToUse;//[Offset: 0x34, Size: 1]
	bool UseSpell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	byte StartLevel;//[Offset: 0x36, Size: 1]
	byte StartSkillPoint;//[Offset: 0x37, Size: 1]
	byte MaxTeamLimit;//[Offset: 0x38, Size: 1]
	int StartGold;//[Offset: 0x3c, Size: 1]
	int GenGoldStartTime;//[Offset: 0x40, Size: 1]
	float GenGoldInterval;//[Offset: 0x44, Size: 1]
	int GenGoldPerInterval;//[Offset: 0x48, Size: 1]
	float InhibitorRespawnDelay;//[Offset: 0x4c, Size: 1]
	FName WorldManagerID;//[Offset: 0x50, Size: 1]
	FName TeamManagerID;//[Offset: 0x58, Size: 1]
	int Afk_Check_Time;//[Offset: 0x60, Size: 1]
	int Afk_Escape_Time;//[Offset: 0x64, Size: 1]
	int Surrender_Enable_Time;//[Offset: 0x68, Size: 1]
	int Surrender_Enable_Retry_Time;//[Offset: 0x6c, Size: 1]
	FString[] Num_Players;//[Offset: 0x70, Size: 1]
	class UserWidget* IngameHUDPath;//[Offset: 0x80, Size: 1]
	LevelSequence* StartSequence_Dawn;//[Offset: 0x88, Size: 1]
	LevelSequence* StartSequence_Dusk;//[Offset: 0x90, Size: 1]
	FString MapNameEN;//[Offset: 0x98, Size: 1]
	enum HeroSpawnZoneSelectionRule;//[Offset: 0xa8, Size: 1]
	enum GameTeamRule;//[Offset: 0xa9, Size: 1]
	FName GameTeamRuleValue;//[Offset: 0xac, Size: 1]
	enum GameWinType;//[Offset: 0xb4, Size: 1]
	FName GameWinValue;//[Offset: 0xb8, Size: 1]
	enum GameTimeCountdownType;//[Offset: 0xc0, Size: 1]
	int GameTimeCountdownValue;//[Offset: 0xc4, Size: 1]
	enum HeroSelectionType;//[Offset: 0xc8, Size: 1]
	FName HeroSelectionValue;//[Offset: 0xcc, Size: 1]
	enum TeamScoreType;//[Offset: 0xd4, Size: 1]
	enum VictoryCameraType;//[Offset: 0xd5, Size: 1]
	FName VictoryCameraValue;//[Offset: 0xd8, Size: 1]
	enum VictoryHandlingType;//[Offset: 0xe0, Size: 1]
	enum ModeSelectionType;//[Offset: 0xe1, Size: 1]
	FName ModeSelectionValue;//[Offset: 0xe4, Size: 1]
	enum[] SkillSlotToLock;//[Offset: 0xf0, Size: 1]
	enum LaneSelectionType;//[Offset: 0x100, Size: 1]
	enum ItemShopType;//[Offset: 0x101, Size: 1]
	FName ItemShopValue;//[Offset: 0x104, Size: 1]
	enum GameResultType;//[Offset: 0x10c, Size: 1]
	enum ResurrectType;//[Offset: 0x10d, Size: 1]
	FName ResurrectValue;//[Offset: 0x110, Size: 1]
	enum ResurrectPostProcessType;//[Offset: 0x118, Size: 1]
	FName ResurrectPostProcessValue;//[Offset: 0x11c, Size: 1]
	enum ResurrectPositionType;//[Offset: 0x124, Size: 1]
	FName ResurrectPositionValue;//[Offset: 0x128, Size: 1]
	enum[] GameDefeatType;//[Offset: 0x130, Size: 1]
	FName UseSkillSlotGroupID;//[Offset: 0x140, Size: 1]
	float HeroKillExpRateFinish;//[Offset: 0x148, Size: 1]
	float HeroKillExpRateAssist;//[Offset: 0x14c, Size: 1]

--------------------------------
Class: OPDamageTypeTableRow.TableRowBase
	FName DamageID;//[Offset: 0x8, Size: 1]
	enum DamageType;//[Offset: 0x10, Size: 1]
	bool CanLifeSteal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool BaseAttackGuardCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool SkillGuardCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool GenerateHitEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool CanHitStruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool CanCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	bool AlwaysCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 1]
	bool CanReflect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool ExecutionType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsDotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool AttackDirectionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool PenetrateDimension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	FName DamageIndicatorUI;//[Offset: 0x20, Size: 1]
	Texture2D* Icon;//[Offset: 0x28, Size: 1]

--------------------------------
Class: TutorialSceneRow.TableRowBase
	byte StepNum;//[Offset: 0x8, Size: 1]
	byte Group;//[Offset: 0x9, Size: 1]
	byte Index;//[Offset: 0xa, Size: 1]
	FName Title;//[Offset: 0xc, Size: 1]
	enum[] TitleArg;//[Offset: 0x18, Size: 1]
	FName Desc;//[Offset: 0x28, Size: 1]
	enum[] DescArg;//[Offset: 0x30, Size: 1]
	FName ToastDesc;//[Offset: 0x40, Size: 1]
	enum[] ToastDescArg;//[Offset: 0x48, Size: 1]
	bool BShowToastOpenAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool BGroupTypingToast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	enum Condition;//[Offset: 0x5a, Size: 1]
	int ConditionOptionInt;//[Offset: 0x5c, Size: 1]
	enum[] Behavior;//[Offset: 0x60, Size: 1]
	int[] BehaviorOptionInt;//[Offset: 0x70, Size: 1]
	FName[] Targets;//[Offset: 0x80, Size: 1]
	float InjuryTime;//[Offset: 0x90, Size: 1]
	float PauseTime;//[Offset: 0x94, Size: 1]

--------------------------------
Class: OPSkillMontageNotifyTableRow.TableRowBase
	FName SkillTableID;//[Offset: 0x8, Size: 1]
	FName SkinID;//[Offset: 0x10, Size: 1]
	float StartAt;//[Offset: 0x18, Size: 1]
	float NotifyStateDuration;//[Offset: 0x1c, Size: 1]
	enum SkillMontageType;//[Offset: 0x20, Size: 1]
	<FName,Transform> SocketTransforms;//[Offset: 0x28, Size: 1]
	FName Value;//[Offset: 0x78, Size: 1]
	FName Argument1;//[Offset: 0x80, Size: 1]
	FName Argument2;//[Offset: 0x88, Size: 1]
	FName Argument3;//[Offset: 0x90, Size: 1]
	FName Argument4;//[Offset: 0x98, Size: 1]
	FName Argument5;//[Offset: 0xa0, Size: 1]
	FName Argument6;//[Offset: 0xa8, Size: 1]
	FName Argument7;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SkillMontageTableRow.TableRowBase
	FName HeroID;//[Offset: 0x8, Size: 1]
	FName SkinID;//[Offset: 0x10, Size: 1]
	FName SkillTableID;//[Offset: 0x18, Size: 1]
	FName SkillGroupID;//[Offset: 0x20, Size: 1]
	AnimMontage* SkillReadyAnimation;//[Offset: 0x28, Size: 1]
	AnimMontage* SkillAnimation;//[Offset: 0x30, Size: 1]
	AnimMontage* SkillPreparationAnimation;//[Offset: 0x38, Size: 1]
	AnimMontage* SkillPreparationCancelAnimation;//[Offset: 0x40, Size: 1]
	AnimMontage* SkillFinishAnimation;//[Offset: 0x48, Size: 1]

--------------------------------
Class: OPBGMTableRow.TableRowBase
	FName TableID;//[Offset: 0x8, Size: 1]
	enum Map;//[Offset: 0x10, Size: 1]
	enum EventType;//[Offset: 0x11, Size: 1]
	enum BGMStopType;//[Offset: 0x12, Size: 1]
	bool StopBGMLeaveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	FName EventValue;//[Offset: 0x14, Size: 1]
	FName SoundID;//[Offset: 0x1c, Size: 1]
	float PlayAfter;//[Offset: 0x24, Size: 1]
	FName SoundChannelName;//[Offset: 0x28, Size: 1]
	float TransitionFadeIn;//[Offset: 0x30, Size: 1]
	float TransitionFadeOut;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CustomOptionRow.TableRowBase
	FString MapID;//[Offset: 0x8, Size: 1]
	enum MapType;//[Offset: 0x18, Size: 1]
	FString MapThumbnailPath;//[Offset: 0x20, Size: 1]
	FString MapStringKey;//[Offset: 0x30, Size: 1]
	enum[] PickType;//[Offset: 0x40, Size: 1]
	enum[] TeamSize;//[Offset: 0x50, Size: 1]
	enum[] TimeLimit;//[Offset: 0x60, Size: 1]
	int Min_Spectators;//[Offset: 0x70, Size: 1]
	int Max_Spectators;//[Offset: 0x74, Size: 1]
	bool MapEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: OPEmblemTableRow.TableRowBase
	enum GainedType;//[Offset: 0x8, Size: 1]
	int Arrangement;//[Offset: 0xc, Size: 1]
	FString NameKey;//[Offset: 0x10, Size: 1]
	FString DescriptionKey;//[Offset: 0x20, Size: 1]
	Texture2D* EmblemTexture;//[Offset: 0x30, Size: 1]
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ItemOutgameTableRow.TableRowBase
	enum ItemType;//[Offset: 0x8, Size: 1]
	int ItemTypeID;//[Offset: 0xc, Size: 1]
	int MaxAmount;//[Offset: 0x10, Size: 1]
	FString ItemIcon_Path_128x128;//[Offset: 0x18, Size: 1]

--------------------------------
Class: HonorGradeTableRow.TableRowBase
	enum HonorGrade_Type;//[Offset: 0x8, Size: 1]
	FString HonorGrade_StringKey;//[Offset: 0x10, Size: 1]
	int HonorGrade_MinRange;//[Offset: 0x20, Size: 1]
	int HonorGrade_MaxRange;//[Offset: 0x24, Size: 1]
	Texture2D* HonorGrade_Texture;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BattlePassLevelRow.TableRowBase
	enum BattlePass_Group;//[Offset: 0x8, Size: 1]
	int Level;//[Offset: 0xc, Size: 1]
	int64 NeedEXP;//[Offset: 0x10, Size: 1]
	int64 AccumulateExp;//[Offset: 0x18, Size: 1]
	FString Reward_ID;//[Offset: 0x20, Size: 1]
	FString Reward_NameKey;//[Offset: 0x30, Size: 1]
	FString Reward_Image_Icon;//[Offset: 0x40, Size: 1]
	FString Reward_Image_Portrait;//[Offset: 0x50, Size: 1]
	FString Reward_Image_Portrait_Texture;//[Offset: 0x60, Size: 1]

--------------------------------
Class: BattlePassMissionRow.TableRowBase
	enum BattlePass_Group;//[Offset: 0x8, Size: 1]
	int64 MissionID;//[Offset: 0x10, Size: 1]
	FString ResultMissionDesc;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPCurrencyTableRow.TableRowBase
	enum CurrencyType;//[Offset: 0x8, Size: 1]
	FString NameKey;//[Offset: 0x10, Size: 1]
	FString DescriptionKey;//[Offset: 0x20, Size: 1]
	FString Icon_Path;//[Offset: 0x30, Size: 1]

--------------------------------
Class: OPMasteryDataTableRow.TableRowBase
	FName HeroID;//[Offset: 0x8, Size: 1]
	int MasteryLevel;//[Offset: 0x10, Size: 1]
	int NeedPP;//[Offset: 0x14, Size: 1]
	int AccumulatePP;//[Offset: 0x18, Size: 1]
	FString MasteryIconImgPath;//[Offset: 0x20, Size: 1]
	int RewardID;//[Offset: 0x30, Size: 1]
	int RewardCount;//[Offset: 0x34, Size: 1]

--------------------------------
Class: OPMasteryHiddenStoryDataTableRow.TableRowBase
	FString HiddenStoryCardImgPath;//[Offset: 0x8, Size: 1]
	FString HiddenStoryTitle;//[Offset: 0x18, Size: 1]
	FString HiddenStoryDesc;//[Offset: 0x28, Size: 1]
	FString HiddenStoryKey1;//[Offset: 0x38, Size: 1]
	FString HiddenStoryKey2;//[Offset: 0x48, Size: 1]
	FString HiddenStoryKey3;//[Offset: 0x58, Size: 1]
	FString HiddenStoryKey4;//[Offset: 0x68, Size: 1]
	FString HiddenStoryKey5;//[Offset: 0x78, Size: 1]
	FString HiddenStoryKey6;//[Offset: 0x88, Size: 1]
	FString HiddenStoryKey7;//[Offset: 0x98, Size: 1]
	FString HiddenStoryKey8;//[Offset: 0xa8, Size: 1]
	FString HiddenStoryKey9;//[Offset: 0xb8, Size: 1]
	FString HiddenStoryKey10;//[Offset: 0xc8, Size: 1]
	FString HiddenStoryKey11;//[Offset: 0xd8, Size: 1]
	FString HiddenStoryKey12;//[Offset: 0xe8, Size: 1]
	FString HiddenStoryKey13;//[Offset: 0xf8, Size: 1]
	FString HiddenStoryKey14;//[Offset: 0x108, Size: 1]
	FString HiddenStoryKey15;//[Offset: 0x118, Size: 1]
	FString HiddenStoryKey16;//[Offset: 0x128, Size: 1]
	FString HiddenStoryKey17;//[Offset: 0x138, Size: 1]
	FString HiddenStoryKey18;//[Offset: 0x148, Size: 1]
	FString HiddenStoryKey19;//[Offset: 0x158, Size: 1]
	FString HiddenStoryKey20;//[Offset: 0x168, Size: 1]
	FString HiddenStoryKey21;//[Offset: 0x178, Size: 1]
	FString HiddenStoryKey22;//[Offset: 0x188, Size: 1]
	FString HiddenStoryKey23;//[Offset: 0x198, Size: 1]

--------------------------------
Class: OPMasteryStatusDataTableRow.TableRowBase
	int BaseGainPP;//[Offset: 0x8, Size: 1]
	FString BaseGainPP_String;//[Offset: 0x10, Size: 1]
	int MatchWinPP;//[Offset: 0x20, Size: 1]
	FString MatchWinPP_String;//[Offset: 0x28, Size: 1]
	int MatchDefeatPP;//[Offset: 0x38, Size: 1]
	FString MatchDefeatPP_String;//[Offset: 0x40, Size: 1]
	int PrimeSpiritPP;//[Offset: 0x50, Size: 1]
	FString PrimeSpiritPP_String;//[Offset: 0x58, Size: 1]
	int PrimeGuardianPP;//[Offset: 0x68, Size: 1]
	FString PrimeGuardianPP_String;//[Offset: 0x70, Size: 1]
	int BGradePP;//[Offset: 0x80, Size: 1]
	FString BGradePP_String;//[Offset: 0x88, Size: 1]
	int AGradePP;//[Offset: 0x98, Size: 1]
	FString AGradePP_String;//[Offset: 0xa0, Size: 1]
	int SGradePP;//[Offset: 0xb0, Size: 1]
	FString SGradePP_String;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: OPTableValidation_ActionKeyword_TableRow.TableRowBase
	FName ActionKeyword;//[Offset: 0x8, Size: 1]
	enum Argument1;//[Offset: 0x10, Size: 1]
	enum Argument2;//[Offset: 0x11, Size: 1]
	enum Argument3;//[Offset: 0x12, Size: 1]
	enum Argument4;//[Offset: 0x13, Size: 1]
	enum Argument5;//[Offset: 0x14, Size: 1]
	enum Argument6;//[Offset: 0x15, Size: 1]

--------------------------------
Class: OPServerErrorCodeTableRow.TableRowBase
	FString StringKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PositionGuideTableRow.TableRowBase
	enum MapType;//[Offset: 0x8, Size: 1]
	FString MapName;//[Offset: 0x10, Size: 1]
	int TeamNum;//[Offset: 0x20, Size: 1]
	enum PositionType;//[Offset: 0x24, Size: 1]
	Vector Finish;//[Offset: 0x28, Size: 1]
	Vector[] PathList;//[Offset: 0x38, Size: 1]

--------------------------------
Class: UserCheckPointRow.TableRowBase
	int GroupID;//[Offset: 0x8, Size: 1]
	int Step;//[Offset: 0xc, Size: 1]
	int Seq;//[Offset: 0x10, Size: 1]
	enum ProcessType;//[Offset: 0x14, Size: 1]
	FString ProcessValue;//[Offset: 0x18, Size: 1]
	bool StepCompleteDirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString SubValue;//[Offset: 0x30, Size: 1]
	FString SubValue;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NewUserDayLoginRewardInfo
	bool IsChoiceReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString Reward_Group_ID;//[Offset: 0x8, Size: 1]
	int Seq;//[Offset: 0x18, Size: 1]
	int Reward_Item_ID;//[Offset: 0x1c, Size: 1]
	int Reward_Item_Amount;//[Offset: 0x20, Size: 1]
	FString Reward_NameKey;//[Offset: 0x28, Size: 1]
	FString Reward_Image_Icon;//[Offset: 0x38, Size: 1]
	FString Reward_Image_Portrait;//[Offset: 0x48, Size: 1]
	FString Reward_Image_Portrait_Texture;//[Offset: 0x58, Size: 1]

--------------------------------
Class: NewUserDayLoginRewardTableRow.TableRowBase
	bool IsChoiceReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString Reward_Group_ID;//[Offset: 0x10, Size: 1]
	FString Reward_NameKey;//[Offset: 0x20, Size: 1]
	FString Reward_Image_Icon;//[Offset: 0x30, Size: 1]
	FString Reward_Image_Portrait;//[Offset: 0x40, Size: 1]
	FString Reward_Image_Portrait_Texture;//[Offset: 0x50, Size: 1]

--------------------------------
Class: OPLobbyMenuDataTableRow.TableRowBase
	enum TopMenuType;//[Offset: 0x8, Size: 1]
	enum TopSubMenuType;//[Offset: 0x9, Size: 1]
	int TopMenuPosition;//[Offset: 0xc, Size: 1]
	int SubMenuPosition;//[Offset: 0x10, Size: 1]
	FString NameKey;//[Offset: 0x18, Size: 1]
	enum LobbyFlowType;//[Offset: 0x28, Size: 1]
	FString LobbyFlowWidget;//[Offset: 0x30, Size: 1]
	FString LobbyFlowSubLevel;//[Offset: 0x40, Size: 1]
	FString BinkMovie;//[Offset: 0x50, Size: 1]
	enum AlertType;//[Offset: 0x60, Size: 1]
	bool isControlableMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool ActivationType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]

--------------------------------
Class: OP_CurveManager.Object
	CurveFloat* JumpShakeCurve;//[Offset: 0x28, Size: 1]
	CurveFloat* DamageHitCurve;//[Offset: 0x30, Size: 1]
	static OP_CurveManager* GetOPCurveManager(Object* InWorldContextObject);// 0x1aecad0

--------------------------------
Class: OPTutorialManager.Object
	bool bIsCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	OPLevelScriptActor* LevelScriptActor;//[Offset: 0x78, Size: 1]
	<int,FName> DefaultHeroID;//[Offset: 0x80, Size: 1]
	<int,byte> DefaultHeroLevel;//[Offset: 0xd0, Size: 1]
	<int,byte> DefaultHeroSkillPoint;//[Offset: 0x120, Size: 1]
	int[] TutorialSkillLevelUp1;//[Offset: 0x170, Size: 1]
	int[] TutorialSkillLevelUp2;//[Offset: 0x180, Size: 1]
	int[] TutorialSkillLevelUp3;//[Offset: 0x190, Size: 1]
	int[] TutorialSkillLevelUp4;//[Offset: 0x1a0, Size: 1]
	int[] TutorialSkillLevelUp5;//[Offset: 0x1b0, Size: 1]
	<int,bool> TutorialImmortalUse;//[Offset: 0x1c0, Size: 1]
	<int,FName> TutorialLevelName;//[Offset: 0x210, Size: 1]
	<int,FName> TutorialSpawnTag;//[Offset: 0x260, Size: 1]
	<int,bool> TutorialPlaceableImmortalUse;//[Offset: 0x2b0, Size: 1]
	<int,bool> TutorialShopUse;//[Offset: 0x300, Size: 1]
	<int,OPTutorialPathData> TargetRefs;//[Offset: 0x350, Size: 1]
	<int,bool> TutorialShopDoubleClickUse;//[Offset: 0x3a0, Size: 1]
	OPTutorialWall*[] TutorialWalls;//[Offset: 0x3f0, Size: 1]
	<int,OPTutorialCamera*> ActionCameras;//[Offset: 0x400, Size: 1]
	<byte,OPTutorialSpawner*> TutorialSpawners;//[Offset: 0x450, Size: 1]
	Point_LaneMinionSpawn*[] MinionSpawners;//[Offset: 0x4a0, Size: 1]
	Point_JungleMinionSpawn*[] JungleSpawners;//[Offset: 0x4b0, Size: 1]
	<int,OPTutorialCinematic*> TutorialCinematic;//[Offset: 0x4c0, Size: 1]
	OPTutorialSpawnBotData*[] TutorialSpawnBotData;//[Offset: 0x510, Size: 1]
	FName[] TutorialBuyItemId1;//[Offset: 0x520, Size: 1]
	FName[] TutorialBuyItemId2;//[Offset: 0x530, Size: 1]
	FName[] TutorialBuyItemId3;//[Offset: 0x540, Size: 1]
	FName[] TutorialBuyItemId4;//[Offset: 0x550, Size: 1]
	FName[] TutorialBuyItemId5;//[Offset: 0x560, Size: 1]
	FName[] TutorialSpellId1;//[Offset: 0x570, Size: 1]
	FName[] TutorialSpellId2;//[Offset: 0x580, Size: 1]
	FName[] TutorialSpellId3;//[Offset: 0x590, Size: 1]
	FName[] TutorialSpellId4;//[Offset: 0x5a0, Size: 1]
	<int,OPTutorialUseSkillData> UseSkillRefs;//[Offset: 0x5b0, Size: 1]
	<int,bool> TutorialAutoSprintUse;//[Offset: 0x600, Size: 1]
	<int,bool> TutorialBotRespawnUse;//[Offset: 0x650, Size: 1]
	SoundBase* SFX_TodoComplete;//[Offset: 0x6b8, Size: 1]
	SoundBase* SFX_TodoShow;//[Offset: 0x6c0, Size: 1]
	class Actor* PathGuideClass;//[Offset: 0x6c8, Size: 1]
	Actor* PathGuide;//[Offset: 0x6d0, Size: 1]
	class Actor* PathGuideGoalClass;//[Offset: 0x6d8, Size: 1]
	Actor* PathGuideGoal;//[Offset: 0x6e0, Size: 1]
	class Point_LaneGuide* PositionLaneGuideClass;//[Offset: 0x6e8, Size: 1]
	class Point_TutorialGuide_GoalActor* TutorialUseSkillActorClass;//[Offset: 0x6f0, Size: 1]
	Actor* TutorialUseSkill;//[Offset: 0x6f8, Size: 1]
	DataTable* TutorialNotUseDataTable;//[Offset: 0x700, Size: 1]
	DataTable* TutorialNotUseDataTablePS;//[Offset: 0x708, Size: 1]
	class OPTutorialGuideWidget* TutorialGuideWidgetObject;//[Offset: 0x870, Size: 1]
	class OPTutorialGuideNoticeWidget* TutorialMapGuideWidgetObject;//[Offset: 0x8a0, Size: 1]
	class OPTutorialGuideNoticeWidget* TutorialObjectGuideWidgetObject;//[Offset: 0x8a8, Size: 1]
	class OPTutorialGuideNoticeWidget* TutorialJungleGuideWidgetObject;//[Offset: 0x8b0, Size: 1]
	class OPTutorialGuideNoticeWidget* TutorialPrimeSpiritGuardianGuideWidgetObject;//[Offset: 0x8b8, Size: 1]
	class OPTutorialGuideWidget* AutoPilotGuideWidgetObject;//[Offset: 0x8c8, Size: 1]
	TimerHandle SceneInjuryTimer;//[Offset: 0x930, Size: 1]
	TimerHandle SceneNoneInjuryTimer;//[Offset: 0x938, Size: 1]
	FName[] PortalColliderId;//[Offset: 0x970, Size: 1]
	FName[] PortalCanUseColliderId;//[Offset: 0x980, Size: 1]
	int PortalUseCount;//[Offset: 0x990, Size: 1]
	FName PortalOpenKeyword;//[Offset: 0x994, Size: 1]
	FName PortalOpenKeyvalue;//[Offset: 0x99c, Size: 1]
	FName PortalRefreshKeyword1;//[Offset: 0x9a4, Size: 1]
	FName PortalRefreshKeyvalue1;//[Offset: 0x9ac, Size: 1]
	FName PortalRefreshKeyword2;//[Offset: 0x9b4, Size: 1]
	FName PortalRefreshKeyvalue2;//[Offset: 0x9bc, Size: 1]
	FName PortalSkillEffectID1;//[Offset: 0x9c4, Size: 1]
	FName PortalSkillEffectID2;//[Offset: 0x9cc, Size: 1]
	FName PortalSkillEffectID3;//[Offset: 0x9d4, Size: 1]
	FName PortalSkillEffectID4;//[Offset: 0x9dc, Size: 1]
	Point_LaneGuide* PathNav;//[Offset: 0xa50, Size: 1]
	FName AutoSprintSkillEffectID;//[Offset: 0xa58, Size: 1]
	OPTutorialHighLight* TutorialHighLight;//[Offset: 0xa60, Size: 1]
	class OPTutorialHighLight* TutorialHighLightObject;//[Offset: 0xa68, Size: 1]
	DataTable* HighlightTutorialDataTable;//[Offset: 0xa70, Size: 1]
	SoundBase* SFX_MBClear;//[Offset: 0xb38, Size: 1]
	void UnPauseSkipSec();// 0x1bb5fa0
	void ShowHighLightTutorial(FString WidgetName, bool HideEsc, bool HideMouse);// 0x1bb5e10
	void ShowCurrentTutorialToast();// 0x1bb5df0
	void SetHighLightTutorialData();// 0x1bb5b40
	void RunNextTutorial();// 0x1bb5b20
	void RunHighLightTutorial(FString Group);// 0x1bb5a20
	void ReturnPossessToPlayer();// 0x1bb5a00
	void ReleaseHighLightTutorial();// 0x1bb59e0
	void PauseSkipSec();// 0x1bb59c0
	void OnUnitDeath(UnitBase* InUnitBase);// 0x1261ce0
	void OnConditionCheckUpdate();// 0x1bb59a0
	void OnCompleteHighLightTutorial(bool NoWaitClose);// 0x1bb5910
	void OnCompleteDelay(out const enum InType, bool Immediately);// 0x1bb5830
	void OnCompleteAllHighLightTutorial();// 0x1bb5810
	void OnComplete(out const enum InType, bool Immediately);// 0x1bb5730
	void OnArrived(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1bb54d0
	void MakeHighLightTutorialWidget();// 0x1bb54b0
	bool IsUseAutoSprintSkill();// 0x1bb5480
	bool IsPlayingHighLightTutorial();// 0x1bb5450
	bool HasNotUseType(enum NotUseType, bool bIsKeyCheck);// 0x1bb5380
	bool HasCondition(out const enum InType);// 0x1bb52e0
	void HandleTutorialSpot(bool bIsOnIcon, Vector WorldPos);// 0x1bb51f0
	static OPTutorialManager* GetOPTutorialManager(Object* InWorldContextObject);// 0x1bb5160
	enum GetGameMode();// 0x1bb5140
	int GetCurrentHighLightTutorialStepIndex();// 0x1bb5120
	OPHighLightTutorialTableData GetCurrentHighLightTutorialStep();// 0x1bb5010
	OPHighLightTutorialTableRow GetCurrentHighLightTutorialGroup();// 0x1bb4f10
	int GetClearedTutorialStep();// 0x1bb4ef0
	void FinishedAnimationByGuideWidget();// 0xd9d3e0
	void EndAnimationToClose();// 0x1bb4ed0
	void EndAnimation();// 0x1bb4eb0
	void ClearTutorial();// 0x1bb4e90
	void ChangeShowBattleMode(int Index, bool bIsEnd);// 0x1bb4dc0
	void ChangeCinematicCamera(int Index, bool bIsEnd, bool bNoShowCameraAction);// 0x1bb4cb0
	bool BIsLockScoreBoard();// 0x1bb4c90
	void AfterToastTypingEffect();// 0x1bb4c70

--------------------------------
Class: OPLevelScriptActor.LevelScriptActor.Actor.Object
	class OP_Character[] WinHeroClass;//[Offset: 0x230, Size: 1]
	Point_EndCeremonyPoint*[] CeremonyPoints;//[Offset: 0x240, Size: 1]
	enum OfficialMapType;//[Offset: 0x250, Size: 1]
	enum MapType;//[Offset: 0x251, Size: 1]
	FName TableName;//[Offset: 0x254, Size: 1]
	FString MapCodeName;//[Offset: 0x260, Size: 1]
	FText MapName;//[Offset: 0x270, Size: 1]
	SlateBrush MapImage;//[Offset: 0x288, Size: 1]
	bool ShowEnteringScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool EnableFountainHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool HidePositionSelectionFromDraftMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	bool bDontConnectToMasterServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313, Size: 1]
	class UserWidget* LoadingGuardWidgetClass;//[Offset: 0x318, Size: 1]
	UserWidget* LoadingGuardWidget;//[Offset: 0x320, Size: 1]
	StudioBackground* BackgroundStudio;//[Offset: 0x328, Size: 1]
	bool ShowMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bIsReversedDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	SlateBrush MinimapImage;//[Offset: 0x338, Size: 1]
	SlateBrush MinimapImageReversed;//[Offset: 0x3c0, Size: 1]
	SlateBrush MinimapImage_Outline;//[Offset: 0x448, Size: 1]
	SlateBrush MinimapImageReversed_Outline;//[Offset: 0x4d0, Size: 1]
	Vector2D MaxCoordinate;//[Offset: 0x558, Size: 1]
	Vector2D PositionAdjust;//[Offset: 0x560, Size: 1]
	Vector2D WidgetOffset;//[Offset: 0x568, Size: 1]
	OP_GameState* OPGState;//[Offset: 0x570, Size: 1]
	CoreBaseCPP*[] Cores;//[Offset: 0x580, Size: 1]
	StaticMeshActor*[] DawnStaticMeshActors;//[Offset: 0x590, Size: 1]
	StaticMeshActor*[] DuskStaticMeshActors;//[Offset: 0x5a0, Size: 1]
	FName TeamColorTag_Dawn;//[Offset: 0x5b0, Size: 1]
	FName TeamColorTag_Dusk;//[Offset: 0x5b8, Size: 1]
	float UnloadStreamLevelDelayAfterCharacterSelect;//[Offset: 0x5c0, Size: 1]
	SoftObjectPath HeroselectBackgroundMap;//[Offset: 0x5c8, Size: 1]
	SoftObjectPath[] MapsToLoadAfterHeroSelect;//[Offset: 0x5e0, Size: 1]
	CineCameraActor* HeroSelectCameraActor;//[Offset: 0x5f0, Size: 1]
	DataTable* HeroSelectStudioDataTable;//[Offset: 0x5f8, Size: 1]
	DataTable* HeroSelectStudioDataTable_Zoom;//[Offset: 0x600, Size: 1]
	OPPlayerAIController*[] SpawnedPlayerAIControllers;//[Offset: 0x608, Size: 1]
	FName SelectedHeroID;//[Offset: 0x618, Size: 1]
	bool LastCloseUpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bCanUseSpell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	void UpdateCamera(HeroSelectStudioData InHeroSelectData);// 0x1b36d70
	void SpawnWinHeroesAndPlayWinAnimation();// 0x1b36d10
	void SetCanUseSpell();// 0x1b36940
	void PlayEndCeremony_BPNE();// 0x1b366f0
	void OnShowHeroSelectStudioSublevelChanged_BPNE(bool InShow);// 0x1a7f330
	void OnRoundStateChanged(enum InNewRoundState);// 0x1b36580
	void OnOPCharacterSpawnedOnServerSide_BPNE(OP_Character* InCharacter);// 0x1b364f0
	void OnCeremonyHeroRemovedAll_BPNE();// 0x1b35f90
	void NotifyEndCeremonyEnd();// 0x1b35f70
	void HandleRoundStarted();// 0x1b35e50
	static OPLevelScriptActor* GetOPLevelScriptActor(Object* InWorldContextObject);// 0x1b35b30
	static enum GetCurrentMapType(Object* InWorldContextObject, out bool OutIsValid);// 0x1b359d0
	CoreBaseCPP* GetCoreByTeam(byte InTeamNum);// 0x1b35910
	bool GetCanUseSpell();// 0x1b358e0
	void CheckStaticMeshTeamColors();// 0x1b35750

--------------------------------
Class: Point_EndCeremonyPoint.Actor.Object
	SceneComponent* Root;//[Offset: 0x220, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x228, Size: 1]
	ParticleSystem* RemovalParticle;//[Offset: 0x230, Size: 1]
	SoundBase* RemovalSound;//[Offset: 0x238, Size: 1]

--------------------------------
Class: StudioBackground.Actor.Object
	SceneComponent* Root;//[Offset: 0x220, Size: 1]
	ParticleSystemComponent* PortalParticle;//[Offset: 0x248, Size: 1]
	ParticleSystemComponent* SpawnParticle;//[Offset: 0x250, Size: 1]
	AudioComponent* SpawnSoundComponent;//[Offset: 0x258, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x260, Size: 1]
	OP_Character* CurrentHeroCDO;//[Offset: 0x268, Size: 1]
	Actor* CurrentViewerActor;//[Offset: 0x270, Size: 1]
	FText MapName;//[Offset: 0x278, Size: 1]
	Texture2D* MapEnteringPicture;//[Offset: 0x290, Size: 1]
	bool ShowEnteringPicture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	SlateBrush MinimapImage;//[Offset: 0x2a0, Size: 1]
	bool ShowMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	SlateBrush MinimapImageReversed;//[Offset: 0x330, Size: 1]
	Vector2D MaxCoordinate;//[Offset: 0x3b8, Size: 1]
	Vector2D PositionAdjust;//[Offset: 0x3c0, Size: 1]
	float HeroTurnRatio;//[Offset: 0x3cc, Size: 1]
	DataTable* DraftHeroSelectDataTable;//[Offset: 0x3d0, Size: 1]
	void ViewHeroViewMode_BPNE(class Actor InClass, bool InbShow, HeroSelectStudioData InHeroSelectData);// 0x1be12d0
	void RotateHero(float InAddYaw);// 0x1bd8c20
	void RemoveCurrentHero();// 0x1be0ec0
	void PlayRandomTauntAnimation();// 0x1be0710
	void ChangeHero(FName InHeroSkinID, bool EmitSpawnParticle, bool PlaySpawnSound);// 0x1bde770

--------------------------------
Class: HeroSelectStudioData.TableRowBase
	float ManualFocalLength;//[Offset: 0x8, Size: 1]
	Vector CameraDistance;//[Offset: 0xc, Size: 1]
	float CameraPitch;//[Offset: 0x18, Size: 1]
	Vector HeroScale;//[Offset: 0x1c, Size: 1]
	bool ForceFront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float HeroYaw;//[Offset: 0x2c, Size: 1]
	Vector HeroRelativeLocation;//[Offset: 0x30, Size: 1]
	class AnimInstance* WBPCharacterLobby;//[Offset: 0x40, Size: 1]
	AnimMontage* AMCharacterSelected;//[Offset: 0x48, Size: 1]
	AnimMontage* AMSkinSelected;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CoreBaseCPP.Placeable_Object.TeamActorBase.Actor.Object
	bool BattleMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bCoreAttackActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	Actor* CurrentTarget;//[Offset: 0x308, Size: 1]
	float AttackRange;//[Offset: 0x310, Size: 1]
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1be74a0
	void OnSomethingEndOverlappedInVision(Actor* Target);// 0x1be7380
	void OnRep_BattleMode();// 0x1be71c0
	void OnChangedTargetBP();// 0x1f25360
	void OnChangedTarget(Actor* InTarget);// 0x1be6950
	void OnBattleModeChanged(bool Inactive);// 0x1be6720

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 1]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 1]
	void SetMobility(byte InMobility);// 0x3ba2210

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7b0, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x318eb30

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: OPPlayerAIController.AIController.Controller.Actor.Object
	OP_Character* OPC;//[Offset: 0x328, Size: 1]
	OP_PlayerState* OPS;//[Offset: 0x330, Size: 1]
	OP_CharacterDummySkill* OPCDummySkill;//[Offset: 0x338, Size: 1]
	BlackboardData* BBAgent;//[Offset: 0x348, Size: 1]
	OPPingSystemComponent* PingSystemComponent;//[Offset: 0x350, Size: 1]
	FName SelectedHeroID;//[Offset: 0x3dc, Size: 1]
	Rotator CurrentAimOffset;//[Offset: 0x438, Size: 1]
	bool bIsLocalFacadeAIController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	void UpdateTeamInfos();// 0x1b6fae0
	void UpdateRecognitionActors(Actor*[] InActors);// 0x1b6f9e0
	void UpdateHomeLocation();// 0x1b6f9a0
	static Actor* SpawnAIToTutorial(Object* InWorldContextObject, int InTeamNum, FName InSelectedheroID, Transform SpawnTransform, bool bPossess, byte UnitLevel, enum Lane);// 0x1b6f700
	void SkillLevelUpForce(out const enum InSkillSlot);// 0x1b6f670
	void SetLane(enum NewLane);// 0x1b6f2c0
	void SetBotGameState(out const enum InBotGameState);// 0x1b6f230
	void RunItemShopping(bool InIsStart);// 0x1b6f0a0
	void PlayerAIFreeze();// 0x1b6f060
	void OnStartedAIBT();// 0x1b6ee10
	void OnSkillLevelUp(byte InNewLevel);// 0x1b6ecc0
	void OnLostTarget(Actor* InTarget);// 0x1b6e970
	void OnFountain(bool InFountain);// 0x1b6e720
	void OnAppearTarget(Actor* InTarget);// 0x1b6e230
	OP_PlayerState* GetOPPlayerState();// 0x1b6de20
	Actor* GetMaxDamageAttackerInTime();// 0x1b6ddf0
	enum GetLane();// 0x1b6ddc0
	enum GetBotGameState();// 0x1b6dd70
	void DevBuy();// 0x1b6dd50
	void AddSkillPoint(int Point);// 0x1b6dbb0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3db13d0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3db1180
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3db0c70
	void SetMoveBlockDetection(bool bEnable);// 0x3db0be0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3db09f0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1f25360
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3db06b0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3db0420
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3db01e0
	void K2_SetFocus(Actor* NewFocus);// 0x3db0040
	void K2_SetFocalPoint(Vector FP);// 0x3daffb0
	void K2_ClearFocus();// 0x3daff90
	bool HasPartialPath();// 0x3dafdb0
	PathFollowingComponent* GetPathFollowingComponent();// 0x3dafb00
	byte GetMoveStatus();// 0x3dafa40
	Vector GetImmediateMoveDestination();// 0x3daf910
	Actor* GetFocusActor();// 0x3daf8e0
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3daf830
	Vector GetFocalPoint();// 0x3daf7f0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3daf350
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3daf030

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3dbad50
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x3dbac10
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x3dbab20
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3dbaa50
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3dba980
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3dba8b0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x3dba7d0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x3dba6f0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3dba620
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3dba540
	bool IsVectorValueSet(out const FName KeyName);// 0x3dba3d0
	Vector GetValueAsVector(out const FName KeyName);// 0x3dba260
	FString GetValueAsString(out const FName KeyName);// 0x3dba180
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3dba0d0
	Object* GetValueAsObject(out const FName KeyName);// 0x3dba030
	FName GetValueAsName(out const FName KeyName);// 0x3db9f90
	int GetValueAsInt(out const FName KeyName);// 0x3db9ef0
	float GetValueAsFloat(out const FName KeyName);// 0x3db9e50
	byte GetValueAsEnum(out const FName KeyName);// 0x3db9db0
	class Object GetValueAsClass(out const FName KeyName);// 0x3db9d10
	bool GetValueAsBool(out const FName KeyName);// 0x3db9c70
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x3db9ae0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x3db99f0
	void ClearValue(out const FName KeyName);// 0x3db9930

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString Reason);// 0x3dbae40
	void StartLogic();// 0x1be6c60
	void RestartLogic();// 0x3a75950
	bool IsRunning();// 0x3dba3a0
	bool IsPaused();// 0x3dba370

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3dc9be0
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3dc9a40
	Vector GetPathDestination();// 0x3dc9630
	byte GetPathActionType();// 0x3dc9600

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2ac, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b0, Size: 1]
	uint32 DataVersion;//[Offset: 0x2b4, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionInfoUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3db0d00
	void RequestStimuliListenerUpdate();// 0x3db09d0
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3db0850
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x3dafcc0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3dafc10
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3dafb20
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3daf950
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3daf700
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3daf370
	void ForgetAll();// 0x3daf2a0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 1]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x3db5c30
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x3db59c0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x3db5680
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x3db55b0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x3db5470

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x2c2f2f0
	void AIIgnorePlayers();// 0x3a75a10

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3dba470
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x3db9bd0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x3db9810

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x3dc63f0

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x3dc6580
	Vector[] GetResultsAsLocations();// 0x3dc6370
	Actor*[] GetResultsAsActors();// 0x3dc62f0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x3dc6230
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x3dc6170
	float GetItemScore(int ItemIndex);// 0x3dc60d0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x1f25360

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x3db0780

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x3dc9e00
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x3dc9c70
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x3dc93d0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3dc9120
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3dc8f60
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3dc8d40
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3dc8b00

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x3dc9930
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x3dc9830
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3dc9790
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x3dc96f0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x3dc95e0
	void Finish(byte WithResult);// 0x3dc9560
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3dc9300

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x3cc01c0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x3cbff70

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x3cc01e0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1f25360
	void EndTask();// 0x3cbfe80

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: OP_CharacterDummySkill.PlayerBase.Character.Pawn.Actor.Object
	enum DummyType;//[Offset: 0x978, Size: 1]
	float UpdateTargetTickSecond;//[Offset: 0x97c, Size: 1]
	bool EventTakeAggroWhenOwnerAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 1]
	bool EventTakeAggroWhenOwnerHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981, Size: 1]
	float AttackRangeLimitZ;//[Offset: 0x984, Size: 1]
	MinionHealthbar* HUDHeadbarComponent;//[Offset: 0x990, Size: 1]
	float WorkingRange;//[Offset: 0x998, Size: 1]
	bool TryCastSkill(Vector CastLocation, enum CastSkillSlot);// 0x1aa2a30
	void TryBaseAttack();// 0x1aa2a10
	void SetTargetActor_S2A(Actor* InTarget);// 0x1aa2980
	void SetOwner_S2A(Actor* InOwner);// 0x1aa2730
	void OnChagneOverlapWorkingRange_S2A(bool IsInWorkingRange);// 0x1aa1910
	void OnChagneOverlapWorkingRange(bool IsInWorkingRange);// 0x1f25360
	Actor* GetTargetActor();// 0x1aa16d0
	Rotator GetRotationToTarget(out const float InDeltaTime, bool bXForward);// 0x1aa15d0
	float GetAttackRange();// 0x1aa05a0

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: OPTutorialPathData

--------------------------------
Class: OPTutorialWall.Actor.Object
	byte StepNum;//[Offset: 0x220, Size: 1]
	int OnIndex;//[Offset: 0x224, Size: 1]
	int OffIndex;//[Offset: 0x228, Size: 1]

--------------------------------
Class: OPTutorialCamera.Pawn.Actor.Object
	byte StepNum;//[Offset: 0x280, Size: 1]
	int Index;//[Offset: 0x284, Size: 1]
	Transform[] ToMoveTransforms;//[Offset: 0x288, Size: 1]
	Pawn* ToSetEndPawn;//[Offset: 0x298, Size: 1]
	float MoveSpeed;//[Offset: 0x2a0, Size: 1]
	float DelayTime;//[Offset: 0x2a4, Size: 1]
	PlayerBase* ToFollowUnit;//[Offset: 0x2a8, Size: 1]
	LevelSequence* Sequence_Tutorial;//[Offset: 0x2b0, Size: 1]
	void StartMove();// 0x1f25360
	void InitTutorialCamera();// 0x1f25360

--------------------------------
Class: OPTutorialSpawner.Actor.Object
	byte StepNum;//[Offset: 0x220, Size: 1]
	Point_MinionSpawn*[] TutorialSpawner;//[Offset: 0x228, Size: 1]

--------------------------------
Class: OPTutorialCinematic.Actor.Object
	byte StepNum;//[Offset: 0x220, Size: 1]
	byte TutorialIndex;//[Offset: 0x221, Size: 1]
	enum CinematicType;//[Offset: 0x222, Size: 1]
	OPCinematicData* SpawnMyTeamUnitsInfo;//[Offset: 0x228, Size: 1]
	OPCinematicData* SpawnEnemyTeamUnitsInfo;//[Offset: 0x230, Size: 1]
	OPTutorialCamera* TutorialCinematicCamera;//[Offset: 0x250, Size: 1]
	OPTutorialUnit* TutorialTower;//[Offset: 0x258, Size: 1]
	TowerBaseCPP* TutorialTowerBase;//[Offset: 0x260, Size: 1]
	OPTutorialUnit* TutorialCore;//[Offset: 0x288, Size: 1]
	Point_LaneMinionSpawn* MinionSpawner;//[Offset: 0x290, Size: 1]
	OPTutorialUnit*[] ArrMinion;//[Offset: 0x2a8, Size: 1]
	OPTutorialUnit*[] ArrHero;//[Offset: 0x2b8, Size: 1]
	OPTutorialUnit* MyTeamHero;//[Offset: 0x2c8, Size: 1]
	OPTutorialUnit*[] ArrEnemyMinion;//[Offset: 0x2d0, Size: 1]
	OPTutorialUnit*[] ArrEnemyHero;//[Offset: 0x2e0, Size: 1]
	OPTutorialUnit* EnemyTeamHero;//[Offset: 0x2f0, Size: 1]
	Actor* ToSeePortal;//[Offset: 0x2f8, Size: 1]
	void StartBattleCinematic();// 0x1bb0dd0
	void SpawnMyTeamUnits();// 0x1bb0db0
	void SpawnMyTeamUnit();// 0x1bb0d90
	void SpawnMyTeamCinematic();// 0x1bb0d70
	void SpawnEnemyTeamUnits();// 0x1bb0d50
	void SpawnEnemyTeamUnit();// 0x1bb0d30
	void SpawnEnemyTeamCinematic();// 0x1bb0d10
	void SpawnActorToCinematic();// 0x1bb0cf0
	void ShowPrimeSpiritCinematic();// 0x1f25360
	void ShowPrimeGuardianCinematic();// 0x1f25360
	void ShowPrimeBabyCinematic();// 0x1f25360
	void ShowCinematicByType();// 0x1bb0cd0
	void ShowBattleCinematic();// 0x1f25360
	void SetTowerTarget(Actor* Target);// 0x1bb0c40
	void SetMinionTargetToEnemyTower();// 0x1bb0a70
	void SetMinionTarget(Actor* Target);// 0x1bb09e0
	void SetHeroTarget(Actor* Target);// 0x1bb07e0
	void SetEnemyMinionTargets();// 0x1bb07c0
	void SetEnemyMinionTarget(Actor* Target);// 0x1bb0730
	void SetEnemyHeroTarget(Actor* Target);// 0x1bb06a0
	void ReleaseCinematic();// 0x1bb0640
	void PrepareCinematic();// 0x1bb0600
	void PossessInBabyPrime();// 0x1bb05e0
	void OnChanged_BabyPrimeHP(float InNewHP);// 0x1baff80
	void NextStepToPrimeSpirit();// 0x1f25360
	void NextStepToPrimeBaby();// 0x1f25360
	void NextStep();// 0x1f25360
	void InitCinematic();// 0x1bafd70
	void HandleCharacterToPortal();// 0x1bafd50
	TowerBaseCPP* GetTutorialTowerBase();// 0x1bafd20
	Point_LaneMinionSpawn* GetTutorialMinionSpawner();// 0x1bafcf0
	Transform GetSpawnTransform(Transform SpawnerPosition, Transform RelativeTransform);// 0x1bafac0
	TowerBaseCPP* GetBabyPrimeTarget();// 0x1bafa90
	void EndBattleCinematic();// 0x1bafa30
	void CalledByTutorialManager();// 0x1f25360
	void AllFreeze(bool bFreeze);// 0x1baf9a0

--------------------------------
Class: OPCinematicData.Actor.Object
	byte[] TeamNum;//[Offset: 0x220, Size: 1]
	Transform[] ObjectSpawnTransforms;//[Offset: 0x230, Size: 1]
	FName[] UnitID;//[Offset: 0x240, Size: 1]
	FString[] UnitObjectPath;//[Offset: 0x250, Size: 1]

--------------------------------
Class: OPTutorialUnit.PlayerBase.Character.Pawn.Actor.Object
	bool bIsSummonedPrime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	MinionHealthbar* HUDHeadbarComponent;//[Offset: 0x970, Size: 1]
	float PursuitTime;//[Offset: 0x988, Size: 1]
	int StuckToSelfDestructionCount;//[Offset: 0x98c, Size: 1]
	int StuckToManualWalkCount;//[Offset: 0x990, Size: 1]
	Point_MinionSpawn* MotherSpawner;//[Offset: 0x998, Size: 1]
	float EXPMultiply;//[Offset: 0x9a4, Size: 1]
	float EXPMultiplyDevideAmount;//[Offset: 0x9a8, Size: 1]
	int CardPointNoKillNPC;//[Offset: 0x9ac, Size: 1]
	int CardPointKillNPC;//[Offset: 0x9b0, Size: 1]
	float NPCInstantKillRatio;//[Offset: 0x9b4, Size: 1]
	bool MoveTo_HasDestination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	Vector MoveTo_FinalLocation;//[Offset: 0x9bc, Size: 1]
	Actor* EnemyObjectToCheck;//[Offset: 0x9c8, Size: 1]
	Actor* CurrentEnemy;//[Offset: 0x9d0, Size: 1]
	Actor* CurrentTarget;//[Offset: 0x9d8, Size: 1]
	Actor* LastEnemy;//[Offset: 0x9e0, Size: 1]
	enum CurrentEnemyMainType;//[Offset: 0x9e8, Size: 1]
	enum ActorMainType;//[Offset: 0x9e9, Size: 1]
	int EnemyLooseRange;//[Offset: 0x9fc, Size: 1]
	float DamageScaleOnObjects;//[Offset: 0xa00, Size: 1]
	float DamageScaleOnNPCs;//[Offset: 0xa04, Size: 1]
	float DamageScaleOnHeroes;//[Offset: 0xa08, Size: 1]
	bool AttackRandomPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 1]
	bool IgnoreNearbyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0d, Size: 1]
	bool SetAsEnemyWhenHitIfNoEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0e, Size: 1]
	float BroadcastAggroToNearby;//[Offset: 0xa10, Size: 1]
	bool bIsForceAttackTowerNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 1]
	float InvincibleHomeDistance;//[Offset: 0xa28, Size: 1]
	float HealthAddPerWave;//[Offset: 0xa80, Size: 1]
	float DamageAddperWave;//[Offset: 0xa84, Size: 1]
	FXSystemAsset* FX_Aggro;//[Offset: 0xaa0, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0xab8, Size: 1]
	float AttackSyncMaxDistance;//[Offset: 0xac0, Size: 1]
	float AttackDelay;//[Offset: 0xac4, Size: 1]
	enum MyLane;//[Offset: 0xad5, Size: 1]
	bool TryAttackToTarget();// 0x1bba630
	void StopMovement();// 0x1bba610
	void SetTarget(Actor* InTarget);// 0x1bba2c0
	void SetNextAttackPosition(Vector Pos, bool InMoveNow);// 0x1bba1e0
	void SetInvincibleHomeDistance(float InNewValue);// 0x1bba160
	void SetFreeze(bool InIsFreeze);// 0x1bba0d0
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1bb9e20
	void OnAggro_Internal();// 0x1bb9de0
	FString GetNPCStatus();// 0x1bb99b0
	float getgametime1();// 0x1a9e020
	Actor* GetCurrentTarget();// 0x1bb98f0
	int GetCannotMoveCount();// 0x1bb98d0
	bool CastSkill(Actor* Target, enum SkillSlot);// 0x1bb9350
	void AddTakeDamageCondition(enum SkillSlot, byte Count);// 0x1bb9030
	void AddAttackContions(enum AttackCondition, byte Count);// 0x1bb8f60
	void AddAttackCondition(enum AttackCondition);// 0x1bb8ee0

--------------------------------
Class: OPTutorialSpawnBotData.Actor.Object
	byte StepNum;//[Offset: 0x220, Size: 1]
	byte Index;//[Offset: 0x221, Size: 1]
	byte TeamNum;//[Offset: 0x222, Size: 1]
	Transform ObjectSpawnTransforms;//[Offset: 0x230, Size: 1]
	FName UnitID;//[Offset: 0x260, Size: 1]
	bool BTickDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	byte UnitLevel;//[Offset: 0x269, Size: 1]
	bool BIsImmortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	enum Lane;//[Offset: 0x26b, Size: 1]
	FName[] TutorialBuyItemId;//[Offset: 0x270, Size: 1]
	FName[] TutorialSpellId1;//[Offset: 0x280, Size: 1]
	FName[] TutorialSpellId2;//[Offset: 0x290, Size: 1]
	byte DraftOrder;//[Offset: 0x2a0, Size: 1]

--------------------------------
Class: OPTutorialUseSkillData

--------------------------------
Class: OPTutorialGuideWidget.UserWidget.Widget.Visual.Object
	void ResetTutorialAnimation();// 0x1f25360
	void OnPlayTutorialAnimation(int Index);// 0x1f25360

--------------------------------
Class: OPTutorialGuideNoticeWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	enum WidgetType;//[Offset: 0x298, Size: 1]
	byte PageCount;//[Offset: 0x299, Size: 1]
	byte CurrentPage;//[Offset: 0x29a, Size: 1]
	<byte,WidgetAnimation*> Animations;//[Offset: 0x2a0, Size: 1]
	<byte,WidgetAnimation*> LoopAnimations;//[Offset: 0x2f0, Size: 1]
	bool bIsToSpirit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	OPTextBlock* Bind_Text_Step;//[Offset: 0x398, Size: 1]
	OPTextBlock* Bind_Text_Name;//[Offset: 0x3a0, Size: 1]
	OPRichTextBlock* Bind_Text_Desc_Top;//[Offset: 0x3a8, Size: 1]
	OPRichTextBlock* Bind_Text_Desc_Bottom;//[Offset: 0x3b0, Size: 1]
	OPTextButtonBase* Bind_Button_Prev;//[Offset: 0x3b8, Size: 1]
	OPTextButtonBase* Bind_Button_Next;//[Offset: 0x3c0, Size: 1]
	OPGamepadKeyInfoWidget* Bind_Gamepad_Prev;//[Offset: 0x3c8, Size: 1]
	OPGamepadKeyInfoWidget* Bind_Gamepad_Next;//[Offset: 0x3d0, Size: 1]
	void SetText(FString Step, FString Title, FString Desc, bool bSetTop);// 0x1bb5b60
	void OnPlayTutorialAnimation(int Index);// 0x1f25360
	void OnClickPrevButton();// 0x1bb5710
	void OnClickNextButton();// 0x1bb56f0
	void CompleteTutorial();// 0x1f25360

--------------------------------
Class: OPGamepadKeyInfoWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Key;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Key;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_KeyText;//[Offset: 0x270, Size: 1]
	enum GamepadButtonType;//[Offset: 0x278, Size: 1]
	enum GamepadButtonType;//[Offset: 0x279, Size: 1]
	FText KeyText;//[Offset: 0x280, Size: 1]
	enum DeviceType;//[Offset: 0x298, Size: 1]
	enum GamepadType;//[Offset: 0x299, Size: 1]
	void Update();// 0x1b20b00
	void SynchronizeProperties_BP();// 0x1f25360
	void SetText(out const FText InText);// 0x1b20170
	void OnChangeInputDevice(enum InInputDevice, enum InGamepadType);// 0x1b1f740

--------------------------------
Class: OPTutorialHighLight.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	void ShowHighLightTutorial(FString WidgetName);// 0x1f25360
	void SetHighLightTutorialToolTip(bool HideEsc, bool HideMouse);// 0x1f25360
	void ResetHighLightTutorial();// 0x1f25360
	void PlayDescAnimation();// 0xd9d3e0
	void InitHighLights();// 0x1f25360
	void EndHighLightTutorial();// 0x1bafa50
	void CloseHighLightTutorial();// 0x1f25360
	void ChangeToolTipToConsole(bool bIsConsole);// 0x1f25360

--------------------------------
Class: OPHighLightTutorialTableData.TableRowBase
	FString Group;//[Offset: 0x8, Size: 1]
	int Step;//[Offset: 0x18, Size: 1]
	FString Widget;//[Offset: 0x20, Size: 1]
	float SkipSec;//[Offset: 0x30, Size: 1]
	enum StepProcessType;//[Offset: 0x34, Size: 1]
	bool CanESC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: OPHighLightTutorialTableRow.TableRowBase
	OPHighLightTutorialTableData[] HighLightTutorialDatas;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPUserCheckPointManager.Object
	void RunUserCheckPoint(int Step, int Seq);// 0x1bb9f30
	void RunCurrentUserCheckPoint();// 0x1bb9f10
	void ReleaseUserCheckPoint();// 0x1bb9ef0
	void ProcessWithType();// 0x1bb9ed0
	void OnCompleteUserCheckPoint();// 0x1bb9e00
	bool IsRealNewUser();// 0x1bb9db0
	bool IsNewUser();// 0x1bb9d80
	bool InitUserCheckPointManager(int GroupID, int Step);// 0x1bb9cb0
	static OPUserCheckPointManager* GetOPUserCheckPointManager(Object* InWorldContextObject);// 0x1bb9a80
	void CheckToStartUserCheckPointWhenLogin();// 0x1bb9440

--------------------------------
Class: OPTagManager.Object
	bool StartsWith(FName InTag);// 0x1bac550
	void RemoveTag(FName InTag);// 0x1bac1f0
	void RemoveAll();// 0x1bac1d0
	bool IsExisting(FName InTag);// 0x1baa110
	static OPTagManager* GetOPTagManager(Object* InWorldContextObject);// 0x1ba9fd0
	bool EndsWith(FName InTag);// 0x1ba9850
	bool Contains(FName InTag);// 0x1ba97b0
	void AddTag(FName InTag);// 0x1ba9300

--------------------------------
Class: OPGlobalDelegateManager.Object
	MulticastInlineDelegateProperty UpdateRedDotStatus;//[Size: 1]
	static OPGlobalDelegateManager* GetOPGlobalDelegateManager(Object* InWorldContextObject);// 0x1b253d0
	void Delegate_UpdateRedDotStatus__DelegateSignature(enum InTopMenu, enum InSubMenu, enum InNewAlertType, int InNotifyCount);// 0x1f25360

--------------------------------
Class: OPChatCommandManager.Object
	static OPChatCommandManager* GetChatCommandManager(Object* InWorldContextObject);// 0x1ae6890

--------------------------------
Class: OP_ConstantTableManager.Object
	DataTable* ConstantDataTable;//[Offset: 0x28, Size: 1]
	DataTable* BlueprintDataTable;//[Offset: 0x30, Size: 1]
	DataTable* ConstantColorDataTable;//[Offset: 0x38, Size: 1]
	static FString GetStringValue(Object* InWorldContextObject, FName RowID);// 0x1aecc60
	static OP_ConstantTableManager* GetOPConstantTableManager(Object* InWorldContextObject);// 0x1aeca40
	static int GetIntValue(Object* InWorldContextObject, FName RowID);// 0x1aec970
	static float GetFloatValue(Object* InWorldContextObject, FName RowID, float DefaultReturnValue);// 0x1aec860
	static LinearColor GetConstantColor(Object* InWorldContextObject, FName InConstantColorName);// 0x1aec780
	static class Object GetClass(Object* InWorldContextObject, FName RowID);// 0x1aec6b0

--------------------------------
Class: OPSkillEffectLibrary.Object
	static OPSkillEffectLibrary* GetSkillEffectLibraryInstance(Object* InWorldContextObject);// 0x1b98600

--------------------------------
Class: OP_ItemClientData.Object
	<FName,ShopItemBase*> Registered_Items;//[Offset: 0x28, Size: 1]
	static bool IsStackable(Object* InWorldContextObject, FName InTableID);// 0x1b308c0
	static bool IsEnableItem(Object* InWorldContextObject, FName InTableID);// 0x1b306b0
	static FName GetSkillID(Object* InWorldContextObject, FName InTableID);// 0x1b30280
	static ShopItemBase* GetShopItem(Object* InWorldContextObject, FName TableID, bool bShowErrorLog);// 0x1b30180
	static void GetItemsBySourceItemID(Object* InWorldContextObject, FName InItemID, out FName[] OutItemList);// 0x1b30060
	static OP_ItemClientData* GetItemClientData(Object* InWorldContextObject);// 0x1b2ffa0
	static FName GetGroupID(Object* InWorldContextObject, FName InTableID);// 0x1b2fe40
	static enum GetGrade(Object* InWorldContextObject, FName InTableID);// 0x1b2fd70
	static FText GetDescription(Object* InWorldContextObject, FName TableID);// 0x1b2fbb0
	static ShopItemBase*[] GetCombinationSourceItem(Object* InWorldContextObject, FName ItemId);// 0x1b2f740

--------------------------------
Class: OP_UserProfileClientData.Object
	UserProfileInfo* MyProfile;//[Offset: 0x28, Size: 1]
	<FString,UserProfileInfo*> UserProfiles_By_AccountID;//[Offset: 0x30, Size: 1]
	MulticastInlineDelegateProperty OnUserProfileUpdated;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnLobbyServerResponded;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUserCheckPointLobbyResponded;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_RunFirstTutorial;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnSetEscapePunishMode;//[Size: 1]
	bool HasLobbyServerResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool HasServerLoginLoadOK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	FText[] CheckMessages;//[Offset: 0x270, Size: 1]
	<FString,bool> RuntimeClientInitVarsBool;//[Offset: 0x420, Size: 1]
	<FString,FString> RuntimeClientInitVarsString;//[Offset: 0x470, Size: 1]
	<FString,int> RuntimeClientInitVarsInt32;//[Offset: 0x4c0, Size: 1]
	<FString,float> RuntimeClientInitVarsFloat;//[Offset: 0x510, Size: 1]
	OPEventBannerInfo[] CachedEventBannerInfoList;//[Offset: 0x568, Size: 1]
	void SetRecommendationTicket(bool InNewState);// 0x1bccb50
	void SendPacket_RefuseRejoinLastGame();// 0x1bcc630
	void SendPacket_RecommendPlayer(FString InTargetPlayerLoginID);// 0x1bcc530
	void SendPacket_OpenedLobbyMap();// 0x1bcc510
	void SendPacket_JoinMappedServer();// 0x1bcc4f0
	void SendPacket_ChangeRegionForUserSetting(FString InRegion);// 0x1bcc3f0
	void RunClient();// 0x1bcc1d0
	void ResetUserRankChanged();// 0x1bcc080
	void ResetPenaltyInfo();// 0x1bcc060
	void OnSetEscapePunishMode();// 0x1bcb400
	bool IsUserRankChanged(out enum OutRankBefore, out enum OutRankAfter);// 0x1bc94f0
	bool IsShowBattlePassPage(enum InPassType);// 0x1bc8ef0
	bool IsLocalUserNickname(FString InUserNickName);// 0x1bc8a60
	bool IsLocalUserID(FString InUserID);// 0x1bc8960
	bool IsChatDisabled();// 0x1bc83b0
	bool HasRecommendationTicket();// 0x1bc8270
	bool HasPenalty();// 0x1bc8240
	void HandleShowIsMappedPopup();// 0x1bc8130
	static OP_UserProfileClientData* GetUserProfileClientData(Object* InWorldContextObject);// 0x1bc7510
	int GetPenaltyLevel();// 0x1bc5970
	int GetPenaltyLeftTime();// 0x1bc5950
	int GetPenaltyGroupId();// 0x1bc5930
	UserProfileInfo* GetMyProfile();// 0x1bc55c0
	FText GetLocalUserNickname();// 0x1bc4ec0
	FString GetLocalUserLoginID();// 0x1bc4e40
	int GetLocalUserDiamondPoint();// 0x1bc3a30
	int GetLocalUserCommunityPoint();// 0x1bc4e10
	bool GetIsMappedOnOtherMatch();// 0x1bc4870
	int GetGoldAmount();// 0x1bc4490
	int GetDiamondFreeAmount();// 0x1bc3a60
	int GetDiamondAmount();// 0x1bc3a30
	float GetCanReJoinTime();// 0x1bc32c0
	bool GetCanReJoinLastGame();// 0x1bc32a0
	float GetBannedTime();// 0x1bc3080
	void CheckPenaltyInfo();// 0x1bc0d40
	void CheckForceJoinReady();// 0x1bc0d20
	bool CanRecommendTarget(FString InTargetLoginID);// 0x1bc0830
	void AddCheckMessage(FText InMessage);// 0x1bc01d0

--------------------------------
Class: UserProfileInfo.Object
	int GetAvatarID();// 0x1bc3060

--------------------------------
Class: OPEventBannerInfo
	int SortID;//[Offset: 0x0, Size: 1]
	FString BannerImageID;//[Offset: 0x8, Size: 1]
	FString BannerURL;//[Offset: 0x18, Size: 1]
	DateTime StartTime;//[Offset: 0x28, Size: 1]
	DateTime EndTime;//[Offset: 0x30, Size: 1]

--------------------------------
Class: OP_MasterServerClientData.Object
	FText[] LobbySideMessageQueue;//[Offset: 0xa0, Size: 1]
	MulticastInlineDelegateProperty OnMasterServerStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty DelegateHandle_OnCDNResponse;//[Size: 1]
	MulticastInlineDelegateProperty OnMasterServerUpdated;//[Size: 1]
	void SetIsLoggedIn(bool bNewState);// 0x1b577f0
	void SendPacket_Logout();// 0x1b575a0
	bool IsMasterServerOnline();// 0x1b57050
	bool IsClientServerDesiredNewestVersion();// 0x1b56df0
	FString GetServerDesiredNewestClientVersionCode();// 0x1b56260
	static OP_MasterServerClientData* GetMasterServerClientData(Object* InWorldContextObject);// 0x1b55b10
	bool GetIsLoggedIn();// 0x1b559d0
	void AddLobbySideMessageInQueue(FText InMessage);// 0x1b554e0

--------------------------------
Class: OP_LobbyBrowserClientData.Object
	enum LastestLobbyTopMenu;//[Offset: 0x4a, Size: 1]
	enum LastestLobbySubMenu;//[Offset: 0x4b, Size: 1]
	MulticastInlineDelegateProperty OnLobbyBrowserClientDataChanged;//[Size: 1]
	void TryGetLatency();// 0x1b3bcf0
	static OP_LobbyBrowserClientData* GetLobbyBrowserClientData(const Object* InWorldContextObject);// 0x1b3ade0

--------------------------------
Class: OP_MatchClientData.Object
	MulticastInlineDelegateProperty OnMatchClientDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnDesiredRegionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMatchMakerServerEvent;//[Size: 1]
	RankRecord[] MyRankRecordList;//[Offset: 0xc0, Size: 1]
	RankRecord[] MyRankRecordList_Before;//[Offset: 0xd0, Size: 1]
	TournamentMatchMakingInfo* TournamentMatchMakingInfo;//[Offset: 0xe0, Size: 1]
	RankSeasonInfo CachedRankSeasonInfo;//[Offset: 0x128, Size: 1]
	MatchMakingQueueInfo* MatchMakingQueueInfo;//[Offset: 0x140, Size: 1]
	MulticastInlineDelegateProperty OnChangedSelectedGameModeTypeEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnMatchMakingWaitingToastUpdated;//[Size: 1]
	enum GamePickType;//[Offset: 0x180, Size: 1]
	int TryGetLatencyResultToRegion(FString InRegionCode);// 0x1b57b40
	void ShowToastAndChatMessageForMatchRequest(bool InIsExtendRegion);// 0x1b579c0
	void SetSelectedGameModeType(enum InType);// 0x1b57920
	bool SetMatchingExtendRegion(bool InIsExtendRegion);// 0x1b57880
	void SetDesiredMatchMakingRegion(FString InRegionKey);// 0x1b576d0
	void SetAutomaticallySetDesiredMMRegion(bool NewValue);// 0x1b57640
	void SendPacket_MM_Tournament_RequestMatchMaking();// 0x1b57600
	void SendPacket_MM_Tournament_RequestJoinSpectator();// 0x1b575e0
	void SendPacket_MM_Tournament_RequestInfo();// 0x1b575c0
	void PlayAnimationForMatchExtendRegionWidget(FName InAnimationName);// 0x1b574f0
	bool IsMapLocked(FName InMapKeyName);// 0x1b56fb0
	bool IsMapAvailable(FName InMapKeyName);// 0x1b56f10
	bool IsInPlacementForRank();// 0x1b56ee0
	bool IsHotTimeNow();// 0x1b56eb0
	static bool IsFindingMatchOrWaitingStarting(Object* InWorldContextObject);// 0x1b56e20
	void HandleStopMatchMakingQueue();// 0x1b56db0
	bool HandleStartMatchMakingQueue(bool InIsRankMatch, int InDesiredNvsNCode, FString InMapKey, enum InSelectedGameMode);// 0x1b56bf0
	void HandleReceivedAbandonRequestFromDedicatedServer();// 0x1b56990
	void HandleFailedToJoinDedicatedServer();// 0x1b56950
	bool GetWaiting_mm_is_searching();// 0x1b568a0
	TournamentMatchMakingInfo* GetTournamentMatchMakingInfo();// 0x1b56880
	enum GetSelectedGameModeType();// 0x1b56240
	int GetRealmIndexByRegionName(FString InRegionName);// 0x1b56140
	int GetPlacementCountFromMyRankRecord(int InRealmID, int InTier);// 0x1b56070
	RankRecord GetMyRankRecord_PrevSeason(int InRealmID);// 0x1b55e40
	RankRecord GetMyRankRecord_Before(int InRealmID);// 0x1b55d70
	RankRecord GetMyRankRecord(int InRealmID);// 0x1b55ca0
	MatchMakingQueueInfo* GetMatchMakingQueueInfo();// 0x1b55c60
	int GetMatchMakingQueueAvailableDelay();// 0x1b55c30
	bool GetMatchingExtendRegion();// 0x1b55c80
	static OP_MatchClientData* GetMatchClientData(Object* InWorldContextObject);// 0x1b55ba0
	FName GetLastestAnimNameForMatchingStatusWidget();// 0x1b55a00
	int GetGameplayAvailableDelay();// 0x1b559a0
	int GetEstimatedState_forMatchMakingInfo();// 0x1b55970
	int GetEstimatedSeconds_forMatchMakingInfo();// 0x1b55940
	FString GetDesiredMatchMakingRegion();// 0x1b558c0

--------------------------------
Class: TournamentMatchMakingInfo.Object
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FText InTournamentName;//[Offset: 0x30, Size: 1]
	<FString,FString> Team;//[Offset: 0x48, Size: 1]
	<FString,FString> Team;//[Offset: 0x98, Size: 1]

--------------------------------
Class: RankRecord
	int SeasonID;//[Offset: 0x0, Size: 1]
	int RealmID;//[Offset: 0x4, Size: 1]
	int Tier;//[Offset: 0x8, Size: 1]
	int TierMatch;//[Offset: 0xc, Size: 1]
	int MaxTier;//[Offset: 0x10, Size: 1]
	int RP;//[Offset: 0x14, Size: 1]
	int MMR;//[Offset: 0x18, Size: 1]
	int Played;//[Offset: 0x1c, Size: 1]
	int Winned;//[Offset: 0x20, Size: 1]
	int[] Placment;//[Offset: 0x28, Size: 1]
	int[] Promotion;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatchMakingQueueInfo.Object
	bool IsSearchingMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsWaitingOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool IsStarting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool DonotCloseUI_WhenTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	int TotalPlayers;//[Offset: 0x2c, Size: 1]
	int TotalSpectators;//[Offset: 0x30, Size: 1]
	int AcceptedPlayers;//[Offset: 0x34, Size: 1]
	int DeclinedPlayers;//[Offset: 0x38, Size: 1]
	int PlayersInQueue;//[Offset: 0x3c, Size: 1]
	int WaitingTimeSecond;//[Offset: 0x40, Size: 1]
	int PlayersInSpectator;//[Offset: 0x44, Size: 1]
	bool IsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	DateTime Queue_JoinWait_Started;//[Offset: 0x50, Size: 1]
	DateTime Queue_Search_Started;//[Offset: 0x58, Size: 1]
	FString MapName;//[Offset: 0x60, Size: 1]
	bool IsRankMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int NumTeamPlayers;//[Offset: 0x74, Size: 1]
	FString Region;//[Offset: 0x78, Size: 1]
	int MatchingType;//[Offset: 0x88, Size: 1]
	int EstimateState;//[Offset: 0x8c, Size: 1]
	int EstimateSeconds;//[Offset: 0x90, Size: 1]

--------------------------------
Class: RankSeasonInfo
	int SeasonID;//[Offset: 0x0, Size: 1]
	int PrevSeasonID;//[Offset: 0x4, Size: 1]
	int SplitType;//[Offset: 0x8, Size: 1]
	DateTime EndDateTime;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OP_DedicatedServerClientData.Object
	MulticastInlineDelegateProperty OnDedicatedServerClientDataUpdated;//[Size: 1]
	<FString,bool> RuntimeServerInitVarsBool;//[Offset: 0x58, Size: 1]
	<FString,FString> RuntimeServerInitVarsString;//[Offset: 0xa8, Size: 1]
	<FString,int> RuntimeServerInitVarsInt32;//[Offset: 0xf8, Size: 1]
	<FString,float> RuntimeServerInitVarsFloat;//[Offset: 0x148, Size: 1]
	void SendPacketOnMapChanged();// 0xd9d3e0
	void OnMapChanged();// 0xd9d3e0
	static float GetPenaltyTimeRoundRatio();// 0x1b0b940

--------------------------------
Class: OP_BattleClientData.Object
	bool bSingleBotMatchModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	TimerHandle AFKTimer;//[Offset: 0x130, Size: 1]
	OP_GameState* GameState;//[Offset: 0x140, Size: 1]
	float AFKWarnTimePeriod;//[Offset: 0x154, Size: 1]
	MulticastInlineDelegateProperty AFKWarningTimerUpdate;//[Size: 1]
	void SetUseDraftMode(bool InUseDraftMode);// 0x1acebc0
	void SetUseBanMode(bool InUseBanMode);// 0x1aceb30
	void SetSpectatorsNumber(int InSpectatorsNum);// 0x1aceaa0
	void SetSingleBotMatchMode(bool bEnabled);// 0x1acea10
	void SetShouldRegisterOnLobbyServer(bool InShouldRegister);// 0x1ace980
	void SetMaxPlayers(int InMaxPlayers);// 0x1ace8f0
	void SetLobbyBrowserPassword(FString InNewPassword);// 0x1ace7f0
	void SendPacket_ReportPlayer(FString InTargetNickname, enum[] InReasonCodes, FString InReason);// 0x1ace5c0
	void SendPacket_RecommendPlayer(int InUserUID);// 0x1262030
	void ResetGameSetting();// 0x1ace5a0
	bool IsBannedMachineID(FString InMachineID);// 0x1acd420
	bool HasRecommendationAndReportTicket();// 0x1acd3d0
	static SoundBase*[] GetSoundFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1acd250
	static FXSystemAsset* GetScreenParticleFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1acd180
	float GetRemainingAFKWarningTimeSeconds();// 0x1accff0
	int GetRecentMatchID();// 0x1accfc0
	static FXSystemAsset* GetParticleFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1accef0
	FString GetGameInstanceGUID();// 0x1acce70
	static class CameraShakeBase GetCameraShakeFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1accda0
	static OP_BattleClientData* GetBattleClientData(Object* InWorldContextObject);// 0x1accd10
	static FXSystemAsset* GetAttachedParticleFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1accc40
	static SoundBase*[] Get2DSoundFromGlobalGameEventDirectionTable(Object* InWorldContextObject, FName InKeyName);// 0x1acca90
	void AddAFKSystemChatWarning(float InRemainingSeconds);// 0x1acc980

--------------------------------
Class: OP_SkillClientData.Object
	static void MakeSkillStatInfo_SkillEffect_V6(Object* InWorldContextObject, out SkillStatInfo StatInfo, SkillStatIconList Stat, FName PropertyName, FName TableID_Lv1, FName TableID_Lv2, FName TableID_Lv3, FName TableID_Lv4, FName TableID_Lv5, FName TableID_Lv6, bool Percent, float Coefficient);// 0x1b82cd0
	static void MakeSkillStatInfo_SkillEffect(Object* InWorldContextObject, out SkillStatInfo StatInfo, SkillStatIconList Stat, FName PropertyName, FName TableID_Lv1, FName TableID_Lv2, FName TableID_Lv3, FName TableID_Lv4, FName TableID_Lv5, bool Percent, float Coefficient);// 0x1b82930
	static void MakeSkillStatInfo_SkillCondition(Object* InWorldContextObject, out SkillStatInfo StatInfo, SkillStatIconList Stat, FName PropertyName, FName TableID_Lv1, FName TableID_Lv2, FName TableID_Lv3, FName TableID_Lv4, FName TableID_Lv5, bool Percent, float Coefficient);// 0x1b82590
	static void MakeSkillStatInfo_Skill(Object* InWorldContextObject, out SkillStatInfo StatInfo, SkillStatIconList Stat, FName PropertyName, FName TableID_Lv1, FName TableID_Lv2, FName TableID_Lv3, FName TableID_Lv4, FName TableID_Lv5, bool Percent, float Coefficient);// 0x1b821f0
	static void MakeSkillStatInfo_Collider(Object* InWorldContextObject, out SkillStatInfo StatInfo, SkillStatIconList Stat, FName PropertyName, FName TableID_Lv1, FName TableID_Lv2, FName TableID_Lv3, FName TableID_Lv4, FName TableID_Lv5, bool Percent, float Coefficient);// 0x1b81e50
	static FText MakeFormatArguments(SkillLocaleArgTableRow InTable, float InValue, bool IsArabic);// 0x1b81c70
	static float GetTableValue(Object* InWorldContextObject, enum Type, FName TableID, FName PropertyName);// 0x1b81b00
	static FName GetSummonSkinID(Object* InWorldContextObject, FName InSummonsGroupID, FName InSummonerSkinID);// 0x1b819f0
	static float GetSkillTableValue(Object* InWorldContextObject, FName InTableID, FName InPropertyName);// 0x1b818f0
	static void GetSkillTable(Object* InWorldContextObject, FName InTableID, out enum OutResult, out SkillTableData OutTable);// 0x1b81750
	static FName[] GetSkillSlotIDsByHeroID(Object* InWorldContextObject, FName InHeroID);// 0x1b81640
	static enum GetSkillSlotByHeroIDAndSkillGroup(Object* InWorldContextObject, FName InHeroTableID, FName InSkillGroupID);// 0x1b81540
	static int GetSkillMaxLevelBySkillTableID(Object* InWorldContextObject, FName InSkillTableID);// 0x1b81470
	static int GetSkillMaxLevelBySkillGroupID(Object* InWorldContextObject, FName InSkillGroupID);// 0x1b813a0
	static int GetSkillLevel(Object* InWorldContextObject, FName InSkillTableID);// 0x1b812d0
	static FName GetSkillGroupIDBySlotSlotAndSlot(Object* InWorldContextObject, FName InSkillSlotID, enum InSkillSlot);// 0x1b811c0
	static float GetSkillEffectTableValue(Object* InWorldContextObject, FName InTableID, FName InPropertyName);// 0x1b810c0
	static void GetSkillEffectTable(Object* InWorldContextObject, FName InTableID, out enum OutResult, out OPSkillEffectTableRow OutTable);// 0x1b80ef0
	static float GetSkillConditionTableValue(Object* InWorldContextObject, FName InTableID, FName InPropertyName);// 0x1b80df0
	static void GetSkillConditionTable(Object* InWorldContextObject, FName InTableID, out enum OutResult, out OPSkillConditionTableRow OutTable);// 0x1b80c70
	static void GetSkillColliderTable(Object* InWorldContextObject, FName InTableID, out enum OutResult, out OPSkillColliderTableRow OutTable);// 0x1b80a80
	static OP_SkillClientData* GetSkillClientData(Object* InWorldContextObject);// 0x1b809f0
	static FName GetSkillBySkillGroupID(Object* InWorldContextObject, FName InSkillGroupID, int InSkillLevel);// 0x1b808e0
	static int GetMinimumLevelForSkillSlot(Object* InWorldContextObject, FName InHeroTableID, enum InSkillSlot);// 0x1b806b0
	static int GetMaxSkillLevelByUserLevel(Object* InWorldContextObject, FName InHeroTableID, int InHeroLevel, enum InSkillSlot);// 0x1b80560
	static MaterialInterface* GetMaterialFromTable(Actor* InEffectOwner, FName InEffectTableIndex);// 0x1b80490
	static int GetLearnableLevelBySkillSlot(Object* InWorldContextObject, FName InHeroTableID, int InDesiredSkillLevel, enum InSkillSlot);// 0x1b80340
	static FName[] GetHeroSkillGroupsByHeroID(Object* InWorldContextObject, FName InHeroID);// 0x1b80230
	static bool GetEffectTableData(Actor* InEffectOwner, FName InEffectTableIndex, out FName OutSkinID, out OPEffectTableRow OutOPEffectTableRow);// 0x1b800b0
	static FXSystemAsset* GetEffectFromTable(Actor* InEffectOwner, FName InEffectTableIndex);// 0x1b7ffe0
	static FText GetDescription(Object* InWorldContextObject, FName TableID, FName HeroID, int InSkillLevel);// 0x1b7fe20
	static FName GetDefaultSkillSlotIDByHeroID(Object* InWorldContextObject, FName InHeroTableID);// 0x1b7fd50
	static float GetColliderTableValue(Object* InWorldContextObject, FName InTableID, FName InPropertyName);// 0x1b7fc50

--------------------------------
Class: SkillStatIconList
	FName Key;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkillLocaleArgTableRow.TableRowBase
	enum LocaleType;//[Offset: 0x8, Size: 1]
	FName SkillGroupID;//[Offset: 0xc, Size: 1]
	FString Tag;//[Offset: 0x18, Size: 1]
	FString StyleID;//[Offset: 0x28, Size: 1]
	FString IconID;//[Offset: 0x38, Size: 1]
	enum Table;//[Offset: 0x48, Size: 1]
	FName BaseColumn;//[Offset: 0x4c, Size: 1]
	FName Column1;//[Offset: 0x54, Size: 1]
	enum CalcType1;//[Offset: 0x5c, Size: 1]
	FName Column2;//[Offset: 0x60, Size: 1]
	enum CalcType2;//[Offset: 0x68, Size: 1]
	enum UnitType;//[Offset: 0x69, Size: 1]
	FName TargetID_Item;//[Offset: 0x6c, Size: 1]
	FName TargetID_SkillLv1;//[Offset: 0x74, Size: 1]
	FName TargetID_SkillLv2;//[Offset: 0x7c, Size: 1]
	FName TargetID_SkillLv3;//[Offset: 0x84, Size: 1]
	FName TargetID_SkillLv4;//[Offset: 0x8c, Size: 1]
	FName TargetID_SkillLv5;//[Offset: 0x94, Size: 1]
	FName TargetID_SkillLv6;//[Offset: 0x9c, Size: 1]

--------------------------------
Class: OP_BattleHistoryClientData.Object
	MulticastInlineDelegateProperty OnBattleHistoryClientDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnMatchHistoryClientDataUpdated;//[Size: 1]
	SystemInGameEvent* SystemInGameEvents;//[Offset: 0x148, Size: 1]
	UserInGameEvent* UserInGameEvents;//[Offset: 0x150, Size: 1]
	<int,MatchHistory*> MatchHistory;//[Offset: 0x1b0, Size: 1]
	MatchHistory* RecentMatchInfo;//[Offset: 0x200, Size: 1]
	int AILogCountThreshold;//[Offset: 0x2c8, Size: 1]
	int AILogCount;//[Offset: 0x2cc, Size: 1]
	FString AILogs;//[Offset: 0x2d0, Size: 1]
	bool bUseSaveToFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	FString AILogsFileName;//[Offset: 0x2e8, Size: 1]
	int AILogsFileNameIndex;//[Offset: 0x2f8, Size: 1]
	int AILogsFileNameCount;//[Offset: 0x2fc, Size: 1]
	int AILogsFileNameCountThreshold;//[Offset: 0x300, Size: 1]
	void ResetGameSetting();// 0x1ad4190
	void ResetBattleHistoryUpdateTime();// 0x1ad4170
	UserInGameEvent* GetUserInGameEvent();// 0x1ad3b10
	SystemInGameEvent* GetSystemInGameEvent();// 0x1ad3af0
	static OP_BattleHistoryClientData* GetBattleHistoryClientData(Object* InWorldContextObject);// 0x1ad39b0
	void AddChatHistory_WithCombineArg(OP_GameState* InGameState, OP_PlayerState* InPlayer, bool InIsLobbyChat, FString[] InStringKeys, FString[] CombineArgs, bool InIsTeamChat);// 0x1ad3100
	void AddChatHistory_WithArg(OP_GameState* InGameState, OP_PlayerState* InPlayer, bool InIsLobbyChat, FString[] InStringKeys, FString[] Args, bool InIsTeamChat);// 0x1ad2d80
	void AddChatHistory(OP_GameState* InGameState, OP_PlayerState* InPlayer, bool InIsLobbyChat, FString InChat, bool InIsTeamChat);// 0x1ad2b70

--------------------------------
Class: UserInGameEvent.Object
	void AddEvent_UserLevelUp(OP_PlayerState* InPlayerState, UnitBase* InUnitFrom);// 0x1ad38e0
	void AddEvent_UserDeath(OP_PlayerState* InPlayerState, FString InKillerID, int InKillerKillStreak);// 0x1ad3770
	void AddEvent_LearnSkill(OP_PlayerState* InPlayerState, int InSkillIndex);// 0x1ad36a0
	void AddEvent_Inventory_Removed(OP_PlayerState* InPlayerState, enum InSlot, FName InRemovedItem);// 0x1ad3590
	void AddEvent_Inventory_Added(OP_PlayerState* InPlayerState, enum InSlot, FName InAddedItem);// 0x1ad3480

--------------------------------
Class: SystemInGameEvent.Object

--------------------------------
Class: MatchHistory.Object
	int MatchID;//[Offset: 0x28, Size: 1]
	RoundEndResultPlayerLog[] Player_Array;//[Offset: 0x30, Size: 1]
	FString MapName;//[Offset: 0x40, Size: 1]
	byte WinTeamNum;//[Offset: 0x50, Size: 1]
	float Timelapsed;//[Offset: 0x54, Size: 1]
	bool IsEarlySurrenderGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FName[] banned_heroes;//[Offset: 0x60, Size: 1]
	byte GetUserTeam(FString InUserID);// 0x1ad3b30
	RoundEndResultPlayerLog[] GetPlayerByTeam(byte InTeamNum);// 0x1ad3a40

--------------------------------
Class: RoundEndResultPlayerLog

--------------------------------
Class: OP_ShopClientData.Object
	<int64,ShopInfo*> ShopInfoArray;//[Offset: 0x28, Size: 1]
	ShopInfo* GetShopInfo(int64 InTableIndex);// 0x1b80840
	static OP_ShopClientData* GetShopClientData(Object* InWorldContextObject);// 0x1b807b0

--------------------------------
Class: ShopInfo.Object
	int Index;//[Offset: 0x28, Size: 1]
	int CachePrice;//[Offset: 0x2c, Size: 1]
	int PointPrice;//[Offset: 0x30, Size: 1]
	FString ItemIcon;//[Offset: 0x38, Size: 1]
	FString Name;//[Offset: 0x48, Size: 1]

--------------------------------
Class: OP_HeroClientData.Object
	<FName,OP_Character*> Registered_Heroes;//[Offset: 0x28, Size: 1]
	DataTable* DraftHeroListTable;//[Offset: 0xc8, Size: 1]
	void TrySetImageAsHeroKillStreakIcon(Image* InImageWidget, FName InHeroClassName);// 0x1b26db0
	void TrySetImageAsHeroIcon(Image* InImageWidget, FName InHeroClassName);// 0x1b26ce0
	FText TryGetHeroNameWithGroupID(FName InHeroGroupID);// 0x1b26be0
	FText TryGetHeroName(FName InHeroClassName);// 0x1b26ae0
	Texture2D* TryGetHeroIconTexture(FName InHeroClassName);// 0x1b26a40
	SlateBrush TryGetHeroIcon(FName InHeroClassName);// 0x1b26920
	bool IsHeroDisabledOrBanned(FName InHeroID);// 0x1b259c0
	bool IsHeroDisabled(FName InHeroID);// 0x1b25920
	bool IsHeroBanned(FName InHeroID);// 0x1b25880
	bool IsHeroActivated(FName InHeroID);// 0x1b257e0
	static FName GetRandomHero(Object* InWorldContextObject, GetRandomHeroArgument InGetArgument);// 0x1b25460
	void GetHeroList(out FName[] OutHeroNames);// 0x1b25320
	static OP_HeroClientData* GetHeroClientData(Object* InWorldContextObject);// 0x1b25290
	class OP_Character GetHeroClassByTableName(FName InTableName);// 0x1b25200
	OP_Character* GetHeroByTableName(FName InTableName);// 0x1b25160
	OP_Character* GetHeroByClassName(FName InClassName);// 0x1b250c0

--------------------------------
Class: GetRandomHeroArgument
	FName[] ExceptHeroIDs;//[Offset: 0x0, Size: 1]
	class OP_Character[] ExceptClass;//[Offset: 0x10, Size: 1]
	FName[] SpecificHeroesOnly;//[Offset: 0x20, Size: 1]
	bool bDontIncludeSelectedHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bDontIncludePreSelectedHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bDontIncludeARAMSelectableHeroes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bIncludeDisabledCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool bIncludeBannedCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: OPHackClientData.Object
	static OPHackClientData* GetHackClientData(Object* InWorldContextObject);// 0x1b25030

--------------------------------
Class: OP_PartyClientData.Object
	PartyInfo PartyInfo;//[Offset: 0x28, Size: 1]
	PartyInvitationInfo InvitationInfo;//[Offset: 0x58, Size: 1]
	int MaxPartyPlayerCapacity;//[Offset: 0x68, Size: 1]
	UserWidget* PartyMemberContextMenu;//[Offset: 0x70, Size: 1]
	MulticastInlineDelegateProperty OnPartyClientDataEventFired;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyClientDataUpdated;//[Size: 1]
	void SendPacket_SetHeroAvatar(int InHeroSkinID);// 0x1b65570
	void SendPacket_SendInvite(FString InTargetUserID);// 0x1b65470
	void SendPacket_PartyReady(bool InIsReady);// 0x1b653e0
	void SendPacket_LeaveParty();// 0x1b653c0
	void SendPacket_KickPlayer(FString InTargetUserID);// 0x1b652c0
	void SendPacket_GivePartyMaster(FString InTargetUserID);// 0x1b651c0
	void SendPacket_DenyInvite(FString InInviteFrom);// 0x1b650c0
	void SendPacket_DenyAllInvite();// 0x1b650a0
	void SendPacket_ChangeMatchingType(enum InMatchingType);// 0x1b65020
	void SendPacket_CancelInvite(FString InInviteFrom);// 0x1b64f20
	void SendPacket_AcceptInvite(FString InInviteFrom);// 0x1b64e20
	void ResetPartyInfo();// 0x1b64e00
	bool IsPartyMember();// 0x1b648d0
	bool IsPartyMaster();// 0x1b648a0
	bool HasWaitingMemberOnParty();// 0x1b647c0
	bool HasPendingPartyInvitation();// 0x1b647a0
	bool HasParty();// 0x1b64770
	static OP_PartyClientData* GetPartyClientData(Object* InWorldContextObject);// 0x1b644e0
	bool CanTransferMasterShip(out FText OutReason);// 0x1b64390
	bool CanSendInvitation(FString InTargetUserID, out FText OutReason);// 0x1b641f0
	bool CanPlayMatchMaking(out FText OutReason);// 0x1b64110
	bool CanPlayGame();// 0x1b640e0
	bool CanKickPlayer(out FText OutReason);// 0x1b64000
	static bool CanInvitationState(enum InState);// 0x1b63f80
	bool CanCanelMatchMaking();// 0x1020290
	bool CanAcceptInvitation(out FText OutReason);// 0x1b63ea0

--------------------------------
Class: PartyInfo
	int64 PartyUID;//[Offset: 0x0, Size: 1]
	FString PartyRegion;//[Offset: 0x8, Size: 1]
	int PartyMasterIndex;//[Offset: 0x18, Size: 1]
	PartyMemberInfo[] PartyMember;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PartyMemberInfo
	FString User_ID;//[Offset: 0x0, Size: 1]
	FString User_Name;//[Offset: 0x10, Size: 1]
	FString ProfileImage;//[Offset: 0x20, Size: 1]
	int AvatarID;//[Offset: 0x30, Size: 1]
	int Tier;//[Offset: 0x34, Size: 1]
	bool IsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]

--------------------------------
Class: PartyInvitationInfo
	FString[] InvitationsFrom;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPChatClientData.Object
	void ShowWarningMessage(enum InMessageType, FString InStringKey);// 0x1ae7de0
	void ShowSystemMessage(enum InMessageType, FString InStringKey);// 0x1ae7cb0
	void SetOnOff_ChatMacro(bool InIsOn);// 0x1ae78f0
	void RequestFocus();// 0x1ae7700
	bool IsOnOff_ChatMacro();// 0x1ae6b70
	enum GetCurrentChatChannel();// 0x1ae6920
	static OPChatClientData* GetChatClientData(Object* InWorldContextObject);// 0x1ae6800
	void ClearFocus();// 0x1ae6550
	bool CanShowNoticeMessageForIngameTeamChat();// 0x1ae3ff0

--------------------------------
Class: OP_PopupClientData.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x28, Size: 1]
	OP_PopupWidgetBase*[] PopupWidgetsForMouse;//[Offset: 0x38, Size: 1]
	UserWidget* ToastMessagePopup;//[Offset: 0x50, Size: 1]
	<FName,UserWidget*> CachedPopupList;//[Offset: 0x58, Size: 1]
	UserWidget* WaitCursorPopup;//[Offset: 0xa8, Size: 1]
	void ShowWaitCursor(bool InIsShow, int InZOrder);// 0x1b73fd0
	static OP_PopupClientData* GetPopupClientData(Object* InWorldContextObject);// 0x1b732f0
	UserWidget* GetPooledWidget(class UserWidget InWidgetClass);// 0x1b73250

--------------------------------
Class: OP_InventoryClientData.Object
	bool IsActivatedForNewUserDayLoginReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 1]
	int LoginDayForNewUserDayLoginReward;//[Offset: 0x16c, Size: 1]
	int RewardDayForNewUserDayLoginReward;//[Offset: 0x170, Size: 1]
	OPNewUserDayLoginRewardResultInfo[] NewUserDayLoginRewardResultList;//[Offset: 0x178, Size: 1]
	int MaxPages;//[Offset: 0x188, Size: 1]
	int TotalSlotCountPerPage;//[Offset: 0x18c, Size: 1]
	bool bIsPlayDone_forCompletedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	void SendPacket_SelectNewUserDayLoginReward(int InDayIndex, int InRewardItemID);// 0x1b30cf0
	static void SendPacket_Buy_Diamond_Finalize(Object* InWorldContextObject, int InAppID, int64 InOrderID, int InbIsAuthorized);// 0x1b30bb0
	bool IsObtainable_forNewUserDayLoginReward(int InDayIndex);// 0x1b30820
	bool IsEnabled_forNewUserDayLoginReward(int InDayIndex);// 0x1b30780
	bool IsCompleted_forNewUserDayLoginReward(int InDayIndex);// 0x1b30610
	bool IsAllCompleted_forNewUserDayLoginReward();// 0x1b305e0
	int GetTotalDiamondAmount();// 0x1b30350
	static OP_InventoryClientData* GetInventoryClientData(Object* InWorldContextObject);// 0x1b2ff10
	int GetGoldAmount();// 0x1b2fd40
	int GetDiamondFreeAmount();// 0x1b2fd10
	int GetDiamondAmount();// 0x1b2fce0
	Texture2D* GetDayLoginRewardBannerIcon(int InDayIndex);// 0x1b2fb10
	FText GetDayLoginRewardBannerDesc(int InDayIndex);// 0x1b2fa10
	bool GetCompletedRewardID_forNewUserDayLoginReward(int InDayIndex, out int OutRewardItemID, out int OutRewardCount);// 0x1b2f850
	enum CanGetReward_forNewUserDayLoginReward();// 0x1b2f710

--------------------------------
Class: OPNewUserDayLoginRewardResultInfo
	int Day;//[Offset: 0x0, Size: 1]
	int ItemId;//[Offset: 0x4, Size: 1]
	int ItemCount;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OP_MailClientData.Object
	MulticastInlineDelegateProperty OnMailHeaderListReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateMailList;//[Size: 1]
	MulticastInlineDelegateProperty OnDeletedMail;//[Size: 1]
	MulticastInlineDelegateProperty OnChangedMailStatus;//[Size: 1]
	OPMailInfo[] CachedMailList;//[Offset: 0x98, Size: 1]
	OPMailInfo TryGetMailInfo(int InMailType, int64 InMailID);// 0x1b57cd0
	int GetTotalMailCount();// 0x1b56860
	FString GetStringFromMessageTemplateKeyValue(FString InKeyString, FString InValueString, int64 InMailID, byte InMailType);// 0x1b565f0
	FString GetStringFromMessageTemplate(FString InJsonString, int64 InMailID, byte InMailType);// 0x1b56430
	FText GetStringFromMailLink(int InMailLinkID);// 0x1b56330
	int GetNewMailCount();// 0x1b55f10
	static OP_MailClientData* GetMailClientData(Object* InWorldContextObject);// 0x1b55a80
	int GetLocalTotalUnreadMailCount();// 0x1b55a60
	int GetLocalTotalReadMailCount();// 0x1b55a40
	int GetLocalTotalHasAttachmentMailCount();// 0x1b55a20

--------------------------------
Class: OPMailInfo
	byte MailType;//[Offset: 0x0, Size: 1]
	int64 MailID;//[Offset: 0x8, Size: 1]
	FString Title;//[Offset: 0x10, Size: 1]
	FString SenderNickName;//[Offset: 0x20, Size: 1]
	DateTime CreatedTime;//[Offset: 0x30, Size: 1]
	byte Importance;//[Offset: 0x38, Size: 1]
	enum Status;//[Offset: 0x39, Size: 1]
	byte ExistItem;//[Offset: 0x3a, Size: 1]
	FString Message;//[Offset: 0x40, Size: 1]
	int Link;//[Offset: 0x50, Size: 1]
	int ItemId;//[Offset: 0x54, Size: 1]
	int ItemCount;//[Offset: 0x58, Size: 1]
	int ItemId;//[Offset: 0x5c, Size: 1]
	int ItemCount;//[Offset: 0x60, Size: 1]
	int ItemId;//[Offset: 0x64, Size: 1]
	int ItemCount;//[Offset: 0x68, Size: 1]
	int ItemId;//[Offset: 0x6c, Size: 1]
	int ItemCount;//[Offset: 0x70, Size: 1]
	int ItemId;//[Offset: 0x74, Size: 1]
	int ItemCount;//[Offset: 0x78, Size: 1]
	DateTime ExpireTime;//[Offset: 0x80, Size: 1]

--------------------------------
Class: OPNewsClientData.Object
	OPNewsInfo[] CachedNewsList;//[Offset: 0x90, Size: 1]
	static OPNewsClientData* GetNewsClientData(Object* InWorldContextObject);// 0x1b605c0

--------------------------------
Class: OPNewsInfo
	int ID;//[Offset: 0x0, Size: 1]
	int MenuSeq;//[Offset: 0x4, Size: 1]
	DateTime RegDate;//[Offset: 0x8, Size: 1]
	enum Type;//[Offset: 0x10, Size: 1]
	FString Title;//[Offset: 0x18, Size: 1]
	FString Content;//[Offset: 0x28, Size: 1]
	OPNewsAttachFileInfo[] AttachFileList;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPNewsAttachFileInfo
	FString FileId;//[Offset: 0x0, Size: 1]
	FString URL;//[Offset: 0x10, Size: 1]
	FString ImageType;//[Offset: 0x20, Size: 1]
	int Size;//[Offset: 0x30, Size: 1]
	int Width;//[Offset: 0x34, Size: 1]
	int Height;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPMissionClientData.Object
	static OPMissionClientData* GetMissionClientData(Object* InWorldContextObject);// 0x1b5ba10

--------------------------------
Class: OP_FriendClientData.Object
	MulticastInlineDelegateProperty OnFriendClientDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendClientDataEventFired;//[Size: 1]
	MulticastInlineDelegateProperty OnSearchUser;//[Size: 1]
	int MaxFriendCapacity;//[Offset: 0x1a0, Size: 1]
	bool FriendRequestBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool TryGetFriendSteamPersonaName(FString InUserNickName, out FString OutPersonaName);// 0x1b19e60
	FString TryGetFriendNickName(FString InUserID, out bool OutContainsValue);// 0x1b19cd0
	FString TryGetFriendFavHero(FString InUserID, out bool OutContainsValue);// 0x1b19b40
	void SendPacket_SteamFriendSynchronize();// 0x1b18da0
	void SendPacket_SendFriendRequest(FString InTargetUserName);// 0x1b18ca0
	void SendPacket_SearchUser(FString InSearchUserName);// 0x1b18bf0
	void SendPacket_RequestFriendList();// 0x1b18bd0
	void SendPacket_FS_StateSynchronize(enum InType);// 0x1b18ac0
	void SendPacket_FriendRequestBlock(bool bBlock);// 0x1b18b40
	void SendPacket_DenyFriendRequest(FString InTargetUserID);// 0x1b189c0
	void SendPacket_DeleteFriend(FString InTargetUserID);// 0x1b188c0
	void SendPacket_CancelFriendRequest(FString InTargetUserID);// 0x1b187c0
	void SendPacket_AcceptFriendRequest(FString InTargetUserID);// 0x1b186c0
	bool IsCapacityFull();// 0x1b16330
	bool IsAlreadyFriend(FString InUserID);// 0x1b16230
	bool HasPendingRequest();// 0x1b160d0
	int GetNumRecvFriendRequest();// 0x1b15de0
	int GetNumOnlineFriend();// 0x1b15db0
	int GetNumFriend();// 0x1b15d80
	enum GetFriendRelationship(FString InTargetUserID);// 0x1b15c80
	static OP_FriendClientData* GetFriendClientData(Object* InWorldContextObject);// 0x1b15bf0
	bool CanRequestFriend(FString InUserName, out FText OutErrorMessage);// 0x1b157f0

--------------------------------
Class: OP_StatClientData.Object
	<FName,enum> StringToStatus;//[Offset: 0x28, Size: 1]
	<enum,FName> StatusToString;//[Offset: 0x78, Size: 1]
	<enum,StatDatabase*> Registered_Stats;//[Offset: 0xc8, Size: 1]
	static enum StringToEStatusType(Object* InWorldContextObject, FName InStatusType);// 0x1ba5cc0
	StatDatabase* StatTable(enum StatToFind);// 0x1ba59c0
	static OP_StatClientData* GetStatClientData(Object* InWorldContextObject);// 0x1ba48e0
	static FName EStatusTypeToString(Object* InWorldContextObject, enum InStatusType);// 0x1ba41a0

--------------------------------
Class: StatDatabase.Object
	enum StatusType;//[Offset: 0x28, Size: 1]
	FText PrintName;//[Offset: 0x30, Size: 1]
	FText Description;//[Offset: 0x48, Size: 1]
	float MinValue;//[Offset: 0x60, Size: 1]
	float MaxValue;//[Offset: 0x64, Size: 1]
	float StatBaseFactor;//[Offset: 0x68, Size: 1]
	enum BaseUnitType;//[Offset: 0x6c, Size: 1]
	Texture2D* StatIcon;//[Offset: 0x70, Size: 1]
	int Order;//[Offset: 0x78, Size: 1]
	enum StatCategory;//[Offset: 0x7c, Size: 1]
	static StatDatabase* GetDefaultObject(class StatDatabase Class);// 0x1ba4350

--------------------------------
Class: OP_CheatClientData.Object
	<FString,bool> RuntimeCheatVars;//[Offset: 0x58, Size: 1]
	static void TestSendPacket(Object* InWorldContextObject, FString InPacket);// 0x1ae8230
	static void TestReceivePacket(Object* InWorldContextObject, FString InPacket);// 0x1ae8230
	void ShowRuntimeCheatVars();// 0x1ae7c90
	void ShowResultWidget(const Object* InWorldContextObject, out const FString[] Args);// 0x1ae7b70
	void ShowDamageFigure(const Object* InWorldContextObject, out const FString[] Args);// 0x1ae7a50
	void SendServerCheats(const Object* InWorldContextObject, out const FString[] Args);// 0x1ae7740
	void RunCustomCheatsList(const Object* InWorldContextObject, out const FString[] Args);// 0x1ae7740
	void RunCustomCheats(const Object* InWorldContextObject, out const FString[] Args);// 0x1ae7740
	static bool GetRuntimeCheatVars(Object* InWorld, FString InKey);// 0x1ae69e0
	void ClearRuntimeCheatVars();// 0xd9d3e0
	void AddRuntimeCheatVars(FString InKey, bool InValue);// 0x1ae3d30

--------------------------------
Class: OP_SoundClientData.Object
	SoundClass* SoundClass_Main;//[Offset: 0x220, Size: 1]
	SoundClass* SoundClass_SFX;//[Offset: 0x228, Size: 1]
	SoundClass* SoundClass_BGM;//[Offset: 0x230, Size: 1]
	SoundClass* SoundClass_Voice;//[Offset: 0x238, Size: 1]
	SoundClass* SoundClass_Announce;//[Offset: 0x240, Size: 1]
	SoundClass* SoundClass_UI;//[Offset: 0x248, Size: 1]
	SoundClass* SoundClass_Ambient;//[Offset: 0x250, Size: 1]
	SoundMix* SoundMix_Main;//[Offset: 0x258, Size: 1]
	SoundMix* SoundMix_SFX;//[Offset: 0x260, Size: 1]
	SoundMix* SoundMix_BGM;//[Offset: 0x268, Size: 1]
	SoundMix* SoundMix_Voice;//[Offset: 0x270, Size: 1]
	SoundMix* SoundMix_Announce;//[Offset: 0x278, Size: 1]
	SoundMix* SoundMix_UI;//[Offset: 0x280, Size: 1]
	SoundMix* SoundMix_Ambient;//[Offset: 0x288, Size: 1]
	void Transition(Object* InWorldContextObject, FName InPreviousSound, FName InNextSoundKey, SoundBase* InNextSound, float InPreviousSoundFadeOut, float InNextSoundFadeIn, float InFadeOutWhenWorldChange);// 0x1ba5d90
	void StopGlobalSound_forLobby(Object* InWorldContextObject, FName InKeyNamePrefix);// 0x1ba5bf0
	void StopGlobalSound(FName InKeyName, float InFadeOut);// 0x1ba5b20
	void StopBGMTable(Object* InWorldContextObject, enum InStopType);// 0x1ba5a50
	void SetVolumeRate(enum InType, float InRate);// 0x1ba58f0
	void SetVolume(enum InType, int InVolume);// 0x1ba5820
	void RestoreVolumeBySavedSetting();// 0x1ba5630
	void RestoreVolumeByDefaultSetting();// 0x1ba5610
	static void PlayLocalSound(Object* InWorldContextObject, FName InSoundTableID);// 0x1ba5550
	AudioComponent* PlayGlobalSound(Object* InWorldContextObject, FName InKeyName, SoundBase* InSound, float InFadeIn, float InFadeOutWhenWorldChange, bool InBRestartWhenCalled);// 0x1ba5370
	AudioComponent*[] PlayBGMTable(Object* InWorldContextObject, enum InBGMEventType);// 0x1ba5260
	static void Play3DSound(Object* InWorldContextObject, OP_Character* InTarget, FName InSoundTableID);// 0x1ba5160
	static void Play3DOrLocalSound(Object* InWorldContextObject, OP_Character* InTarget, FName In3DSoundTableID, FName InLocalSoundTableID);// 0x1ba5010
	static SoundBase* GetSoundFromSoundTable(Object* InWorldContextObject, FName InSoundTableID, FName InSkinID, Actor* InSoundRequestedBy);// 0x1ba4790
	static OP_SoundClientData* GetOPSoundClientData(Object* InWorldContextObject);// 0x1ba4620

--------------------------------
Class: OP_SkinClientData.Object
	<FName,FName> SkinClassToNameData;//[Offset: 0x78, Size: 1]
	bool IsSkinDisabledOrBanned(FName InSkinID);// 0x1b9da20
	bool IsSkinDisabled(FName InSkinID);// 0x1b9d980
	bool IsSkinBanned(FName InSkinID);// 0x1b9d8e0
	bool IsSkinActivated(FName InSkinID);// 0x1b9d840
	static FName[] GetSkinIDsFromHeroGroupID(Object* InWorldContextObject, FName InHeroGroupID);// 0x1b9d680
	static OP_SkinClientData* GetSkinClientData(Object* InWorldContextObject);// 0x1b9d5f0
	static FName GetHeroGroupIDBySkinID(Object* InWorldContextObject, FName InSkinTableID);// 0x1b9d4c0
	static Actor* GetHeroDefaultObjectBySkinID(Object* InWorldContextObject, FName InSkinID);// 0x1b9d3f0
	static class Actor GetHeroClassBySkinID(Object* InWorldContextObject, FName InSkinID);// 0x1b9d320
	static class OP_Character GetHeroCharacterClassBySkinID(Object* InWorldContextObject, FName InSkinID);// 0x1b9d250
	static FName GetDefaultSkinID(Object* InWorldContextObject, FName InHeroGroupID);// 0x1b9d180
	static Actor* GetDefaultHeroCDOBySkinID(Object* InWorldContextObject, FName InSkinID);// 0x1b9d0b0

--------------------------------
Class: OP_ProductClientData.Object
	<FName,OutGameItemBanInfo> ItemStateMap;//[Offset: 0x28, Size: 1]
	bool IsHeroSkinItem(FName InOutgameItemID);// 0x1b738f0
	bool IsHeroItem(FName InOutgameItemID);// 0x1b73850
	bool IsEmblemItem(FName InOutgameItemID);// 0x1b737b0
	bool IsDisabledOrBanned(FName InOutgameItemID);// 0x1b73710
	bool IsDisabled(FName InOutgameItemID);// 0x1b73670
	bool IsBannedHero_BP(FName InHeroID);// 0x1b735d0
	bool IsBanned(FName InOutgameItemID);// 0x1b73530
	bool IsActivated(FName InOutgameItemID);// 0x1b73490
	static OP_ProductClientData* GetProductClientData(Object* InWorldContextObject);// 0x1b733b0
	static FString GetLocalCurrencyCodeOP(Object* InWorldContextObject);// 0x1b730f0

--------------------------------
Class: OutGameItemBanInfo
	FName ItemId;//[Offset: 0x0, Size: 1]
	enum ItemType;//[Offset: 0x8, Size: 1]
	enum Activation_Type;//[Offset: 0x9, Size: 1]

--------------------------------
Class: OP_GambleClientData.Object
	static OP_GambleClientData* GetGambleClientData(Object* InWorldContextObject);// 0x1b1bbe0

--------------------------------
Class: OP_CustomMatchClientData.Object
	MulticastInlineDelegateProperty OnCustomMatchClientRoomListChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomMatchClientRoomDetailRefresh;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomMatchClientRoomDetailChanged;//[Size: 1]
	CustomMatch_RoomInfo_Simple[] RoomList;//[Offset: 0x58, Size: 1]
	CustomMatch_RoomInfo_Detail RoomDetail;//[Offset: 0x68, Size: 1]
	FString SelectedRoomID;//[Offset: 0x170, Size: 1]
	FString SelectedRoomPassword;//[Offset: 0x180, Size: 1]
	enum EventType;//[Offset: 0x190, Size: 1]
	void UpdateRoomList(JSONPacketReader* InResponse);// 0x1aaaec0
	void UpdateRoomDetail(JSONPacketReader* InResponse);// 0x1aaae30
	void UpdateFromPacket(JSONPacketReader* InResponse);// 0x1aaada0
	bool ShowError(JSONPacketReader* InResponse);// 0x1aaa9f0
	void Req_OutRoom_Search(FString findName, enum FilterType, enum pickTypeFilter, FString MapName, int roomListMaxCount);// 0x1aa9df0
	void Req_OutRoom_QuickJoin();// 0x1aa9dd0
	void Req_OutRoom_Join(FString InRoomID, FString password);// 0x1aa9c30
	void Req_OutRoom_Create(enum InpickType, int Inmaxplayer, bool InspectatorsAllow, int InspectatorsMaxNum, FString Ingamename, FString Inpassword, FString InMapName, FString Inversioncode, enum InLimitTimeType);// 0x1aa97e0
	void Req_InRoom_UserKick(FString target_id);// 0x1aa96e0
	void Req_InRoom_SlotRemove_Bot(enum team_slot_type, byte slot_index);// 0x1aa9610
	void Req_InRoom_SlotChange_Bot(enum team_slot_type, byte slot_index, int bot_hero_id, byte bot_position);// 0x1aa94b0
	void Req_InRoom_SlotChange(FString target_id, enum change_slotType);// 0x1aa9380
	void Req_InRoom_Ready();// 0x1aa9360
	void Req_InRoom_ReaderChange(FString target_id);// 0x1aa9260
	void Req_InRoom_Leave();// 0x1aa9240
	void Req_InRoom_Invite(FString target_id);// 0x1aa9140
	void Req_InRoom_GameStart();// 0x1aa9120
	void Req_CustomRoomInfo();// 0x1aa9100
	void PlayStartOnSingleMode();// 0x1aa8f40
	bool IsRoomLeaderSelf();// 0x1aa8250
	void InitRoomDetail();// 0x1aa81d0
	void GoToLobby_OnCustomSinglePlay();// 0x1aa80e0
	bool GetSelf(out CustomMatch_UserSlotInfo OutInfo);// 0x1aa7fd0
	bool GetIsUseDediServer_CustomGame();// 0x1aa79f0
	static OP_CustomMatchClientData* GetCustomMatchClientData(Object* InWorldContextObject);// 0x1aa7760
	void ClearSettingOnSingleMode();// 0x1aa7680
	void ClearAll();// 0x1aa7660

--------------------------------
Class: JSONPacketReader.Object

--------------------------------
Class: CustomMatch_UserSlotInfo

--------------------------------
Class: CustomMatch_RoomInfo_Simple

--------------------------------
Class: CustomMatch_RoomInfo_Detail

--------------------------------
Class: OP_FocusingBrowser.Object
	OP_FocusingBrowserWidget* FocusInterationWidget;//[Offset: 0x28, Size: 1]
	static UserWidget* GetFocusInteractiveWidget(Object* InWorldContextObject);// 0x1aa78d0
	static OP_FocusingBrowser* GetFocusingBrowser(Object* InWorldContextObject);// 0x1aa7960

--------------------------------
Class: OP_FocusingBrowserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: OPGameSettingWidget.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_Button_Back;//[Offset: 0x2a0, Size: 1]
	OPButtonBase* Bind_Button_GamePlay;//[Offset: 0x2a8, Size: 1]
	OPButtonBase* Bind_Button_Display;//[Offset: 0x2b0, Size: 1]
	OPButtonBase* Bind_Button_Graphic;//[Offset: 0x2b8, Size: 1]
	OPButtonBase* Bind_Button_Controls;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_Button_Sound;//[Offset: 0x2c8, Size: 1]
	OPButtonBase* Bind_Button_Accessibility;//[Offset: 0x2d0, Size: 1]
	OPButtonBase* Bind_Button_Gamepad;//[Offset: 0x2d8, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x2e0, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x2e8, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x2f0, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x2f8, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x300, Size: 1]
	Widget* Bind_MenuBar;//[Offset: 0x308, Size: 1]
	OPTextButtonBase* Bind_Button_SaveSetting;//[Offset: 0x310, Size: 1]
	OPTextButtonBase* Bind_Button_ResetSetting;//[Offset: 0x318, Size: 1]
	OPTextButtonBase* Bind_Button_CloseSetting;//[Offset: 0x320, Size: 1]
	ScrollBox* Bind_ScrollBox;//[Offset: 0x328, Size: 1]
	WidgetSwitcher* Bind_WidgetSwitcher;//[Offset: 0x330, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_GamePlay;//[Offset: 0x338, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Display;//[Offset: 0x340, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Graphic;//[Offset: 0x348, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Controls;//[Offset: 0x350, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Gamepad;//[Offset: 0x358, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Sound;//[Offset: 0x360, Size: 1]
	OPGameSettingMainCategoryWidget* Bind_Widget_Accessibility;//[Offset: 0x368, Size: 1]
	OPTextBlock* Bind_TooltipTitle;//[Offset: 0x370, Size: 1]
	OPTextBlock* Bind_TooltipDescription;//[Offset: 0x378, Size: 1]
	Overlay* Bind_TooltipWidgetSlot;//[Offset: 0x380, Size: 1]
	Image* Bind_Image_Selected;//[Offset: 0x388, Size: 1]
	Button* Bind_Button_LegacySetting;//[Offset: 0x390, Size: 1]
	WidgetAnimation* Bind_OpenAnimation;//[Offset: 0x398, Size: 1]
	WidgetAnimation* Bind_CloseAnimation;//[Offset: 0x3a0, Size: 1]
	Widget* ParentWidget;//[Offset: 0x3c8, Size: 1]
	<enum,UserSettingValue> TempSettings;//[Offset: 0x3e0, Size: 1]
	FText MESSAGE_APPLY_SETTING;//[Offset: 0x430, Size: 1]
	FText MESSAGE_APPLY_GRAPHIC;//[Offset: 0x448, Size: 1]
	FText MESSAGE_NEED_RESTART;//[Offset: 0x460, Size: 1]
	FText MESSAGE_KEY_EMPTY;//[Offset: 0x478, Size: 1]
	FText TEXT_BUTTON_SAVE;//[Offset: 0x490, Size: 1]
	FText TEXT_BUTTON_CANCEL;//[Offset: 0x4a8, Size: 1]
	enum CurrentTab;//[Offset: 0x4c0, Size: 1]
	enum NextTab;//[Offset: 0x4c1, Size: 1]
	enum[] TabList;//[Offset: 0x4c8, Size: 1]
	int CurrentTabIndex;//[Offset: 0x4d8, Size: 1]
	OPButtonBase* ClickedButton;//[Offset: 0x4e0, Size: 1]
	<enum,FText> MainTabNames;//[Offset: 0x4e8, Size: 1]
	<enum,FText> SubTabNames;//[Offset: 0x538, Size: 1]
	OP_InteractionPopup_Base* InteractionPopup;//[Offset: 0x588, Size: 1]
	<enum,Widget*> TooltipWidgetPool;//[Offset: 0x590, Size: 1]
	void UpdateWidget();// 0x1b20c30
	void UpdateButton();// 0x1b20bf0
	void SwitchWidget(enum InType, OPButtonBase* InClickedButton, bool InCheckSave);// 0x1b209e0
	void ShowWidget(bool bShow, Widget* InParentWidget);// 0x1b20910
	bool ShowWarningMessage_EmptyKey();// 0x1b208e0
	void ShowToastMessage_BP(out const FText InMessage);// 0x1f25360
	void SelectNextTab(bool bLeft);// 0x1b20060
	void SaveSettingAndApply();// 0x1b1f720
	void ResetSettings();// 0x1b20040
	void OnUserSettingSaved();// 0x1b1ff50
	void OnSettingValueChanged();// 0x1b1fd20
	void OnRoundStateChanged(enum InRoundState);// 0x1b1fc10
	void OnOpenAnim();// 0x1b1fbf0
	void OnControlHovered(enum InType);// 0x1b1f8f0
	void OnCloseAnim();// 0x1102710
	void OnClickShowLegacyWidget();// 0x1b1f850
	void OnClickSaveSetting();// 0x1b1f830
	void OnClickResetSetting();// 0x1b1f810
	void OnChangeTab_BP();// 0x1f25360
	void OnApplySettingConfirm_Yes();// 0x1b1f720
	void OnApplySettingConfirm_No();// 0x1b1f700
	bool IsSettingsModifyed(enum InType);// 0x1b1f670
	void HideWidgetOnRoundEnd();// 0x1b1f650
	UserSettingValue GetTempSetting(enum InType);// 0x1b1f570
	void GenerateWidget();// 0x1b1f520

--------------------------------
Class: OPGameSettingMainCategoryWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox;//[Offset: 0x260, Size: 1]
	OPGameSettingWidget* GameSettingWidget;//[Offset: 0x268, Size: 1]
	enum GameSettingMainType;//[Offset: 0x270, Size: 1]
	class OPGameSettingSubCategoryWidget* SubCategoryWidgetClass;//[Offset: 0x278, Size: 1]
	DataTable* GameSettingsDataTable;//[Offset: 0x280, Size: 1]
	DataTable* GameSettingsSelectorDataTable;//[Offset: 0x288, Size: 1]
	DataTable* GameSettingsSliderDataTable;//[Offset: 0x290, Size: 1]
	DataTable* GameSettingsKeyBindingDataTable;//[Offset: 0x298, Size: 1]
	void GenerateWidget();// 0x1b1f500

--------------------------------
Class: OPGameSettingSubCategoryWidget.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_SubCategory;//[Offset: 0x260, Size: 1]
	VerticalBox* Bind_VerticalBox;//[Offset: 0x268, Size: 1]
	enum GameSettingSubType;//[Offset: 0x270, Size: 1]
	<enum,FText> SubTypeNames;//[Offset: 0x278, Size: 1]
	bool IgnoreTextTransformPolicy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	OPGameSettingControlWidgetBase* AddNewControl_BP(enum DetailType);// 0x1f25360
	OPGameSettingControlWidget_GamepadPreview* AddGamepadPreview_BP();// 0x1f25360

--------------------------------
Class: OPGameSettingControlWidgetBase.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_OptionName;//[Offset: 0x278, Size: 1]
	Widget* Bind_Image_UnderBar;//[Offset: 0x280, Size: 1]
	OPGameSettingWidget* GameSettingWidget;//[Offset: 0x288, Size: 1]
	enum OptionType;//[Offset: 0x290, Size: 1]
	void SettingChange(UserSettingValue NewSetting);// 0x1b202c0
	void OnUpdateControl_BPNE(bool IsModifyed, bool IsNeedValue);// 0x1b1fe70

--------------------------------
Class: OPGameSettingControlWidget_GamepadPreview.OPGameSettingControlWidgetBase.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_L_Shoulder;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_L_Trigger;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_R_Shoulder;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_R_Trigger;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_L_Special;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_R_Special;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_L_Stick;//[Offset: 0x2c8, Size: 1]
	TextBlock* Bind_Text_R_Stick;//[Offset: 0x2d0, Size: 1]
	TextBlock* Bind_Text_DPad_Up;//[Offset: 0x2d8, Size: 1]
	TextBlock* Bind_Text_DPad_Left;//[Offset: 0x2e0, Size: 1]
	TextBlock* Bind_Text_DPad_Down;//[Offset: 0x2e8, Size: 1]
	TextBlock* Bind_Text_DPad_Right;//[Offset: 0x2f0, Size: 1]
	TextBlock* Bind_Text_Face_Top;//[Offset: 0x2f8, Size: 1]
	TextBlock* Bind_Text_Face_Left;//[Offset: 0x300, Size: 1]
	TextBlock* Bind_Text_Face_Bottom;//[Offset: 0x308, Size: 1]
	TextBlock* Bind_Text_Face_Right;//[Offset: 0x310, Size: 1]
	VerticalBox* Bind_VB_PrevList;//[Offset: 0x318, Size: 1]
	DataTable* GamepadPrevTable;//[Offset: 0x320, Size: 1]
	DataTable* GamepadPrevExTable;//[Offset: 0x328, Size: 1]
	OPGamepadPrevExSlotWidget* AddNewPrevExSlot_BP();// 0x1f25360

--------------------------------
Class: OPGamepadPrevExSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Key1;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Key2;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Key3;//[Offset: 0x270, Size: 1]
	Widget* Bind_Key2;//[Offset: 0x278, Size: 1]
	Widget* Bind_Key3;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_OptionName;//[Offset: 0x288, Size: 1]

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x316b090

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x316c610
	void SetPadding(Margin InPadding);// 0x316c020
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x316bdf0

--------------------------------
Class: OPProfilePopupWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPTextButtonBase* Bind_BTN_Stats;//[Offset: 0x298, Size: 1]
	OPTextButtonBase* Bind_BTN_MatchHistory;//[Offset: 0x2a0, Size: 1]
	WidgetSwitcher* Bind_WidgetSwitcher;//[Offset: 0x2a8, Size: 1]
	OPProfileSub_Stats* Bind_Widget_Stats;//[Offset: 0x2b0, Size: 1]
	OPProfileSub_MatchHistory* Bind_Widget_MatchHistory;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_UserName;//[Offset: 0x2c0, Size: 1]
	OPTextButtonBase* Bind_Btn_Close;//[Offset: 0x2c8, Size: 1]
	FString UserID;//[Offset: 0x2d0, Size: 1]
	void UpdatePageByUserID(FString InUserID);// 0x1b74510
	void ShowWidget_BP();// 0x1f25360
	void ShowWidget(FString InUserID, FString InRegion);// 0x1b740a0
	void OnClickedStats();// 0x1b73a80
	void OnClickedMatchHistory();// 0x1b73a40
	void OnClickedCloseButton();// 0x1b73470
	void HideWidget_BP();// 0x1f25360
	void HideWidget();// 0x1b73470

--------------------------------
Class: OPProfileSub_Stats.OPProfileSub_Base.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x288, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Tanker;//[Offset: 0x290, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Warrior;//[Offset: 0x298, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Assassin;//[Offset: 0x2a0, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Range;//[Offset: 0x2a8, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Magician;//[Offset: 0x2b0, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Role_Supporter;//[Offset: 0x2b8, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_TotalTimePlayer;//[Offset: 0x2c0, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_TotalGamePlayer;//[Offset: 0x2c8, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_TotalWins;//[Offset: 0x2d0, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_TotalTakeDowns;//[Offset: 0x2d8, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_Average;//[Offset: 0x2e0, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_MVPAwards;//[Offset: 0x2e8, Size: 1]
	OPProfile_StatInfo* Bind_Widget_Stat_HerosPlayed;//[Offset: 0x2f0, Size: 1]
	OPDropDownListButtonWidget* Bind_ModeFilter;//[Offset: 0x2f8, Size: 1]
	OPDropDownListButtonWidget* Bind_PlayFilter;//[Offset: 0x300, Size: 1]
	OPProfile_Portrait* Bind_Widget_Protrait;//[Offset: 0x308, Size: 1]
	VerticalBox* Bind_VB_PlayedHero;//[Offset: 0x310, Size: 1]
	OPProfile_MostPlayedHeroSlot* MostPlayedHeroSlot;//[Offset: 0x318, Size: 1]
	OPProfile_MostPlayedHeroSlot* MostPlayedHeroSlot;//[Offset: 0x320, Size: 1]
	OPProfile_MostPlayedHeroSlot* MostPlayedHeroSlot;//[Offset: 0x328, Size: 1]
	BattleRecord BattleRecord;//[Offset: 0x330, Size: 1]
	enum ModeFilter;//[Offset: 0x358, Size: 1]
	enum PlayFilter;//[Offset: 0x359, Size: 1]
	class OPProfile_HeroSlot* PlayedHeroSlotClass;//[Offset: 0x360, Size: 1]
	Margin SlotPadding;//[Offset: 0x368, Size: 1]
	void UpdatePlayInfo();// 0x1b77900
	void UpdateHeroInfo();// 0x1b778e0
	void OnChangePlayfilter(enum InFilter);// 0x1b77630
	void OnChangeModefilter(enum InFilter);// 0x1b775b0

--------------------------------
Class: OPProfileSub_Base.UserWidget.Widget.Visual.Object
	FString UserID;//[Offset: 0x260, Size: 1]
	FString Region;//[Offset: 0x270, Size: 1]
	bool IsMyRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void UpdatePageByUserID(FString InUserID);// 0x1b74610
	void UpdatePage();// 0x1a8ac30
	void SetUserID(FString InUserID);// 0x1b73ed0
	void SetRegion(FString InRegion);// 0x1b73dd0
	void OnShowPage_BP();// 0x1f25360

--------------------------------
Class: OPProfile_StatInfo.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Name;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Value;//[Offset: 0x270, Size: 1]
	Texture2D* StatIcon;//[Offset: 0x278, Size: 1]
	FText StatName;//[Offset: 0x280, Size: 1]
	int StatValue;//[Offset: 0x298, Size: 1]
	bool IsTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]

--------------------------------
Class: OPProfile_Portrait.UserWidget.Widget.Visual.Object
	OPIconImageWidget* Bind_Widget_Portrait;//[Offset: 0x260, Size: 1]
	OPProfileSub_HonorPoint* Bind_Widget_HonorPoint;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_CommunityEXP;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_CommunityLevel;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_NickName;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Exp;//[Offset: 0x288, Size: 1]
	OPHealthProgressBar* Bind_Widget_Exp;//[Offset: 0x290, Size: 1]
	Widget* Bind_View_Rank;//[Offset: 0x298, Size: 1]
	Image* Bind_Image_Rank;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_Tier;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_RP;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: OPProfileSub_HonorPoint.UserWidget.Widget.Visual.Object
	Image* Bind_Img_HonorGradeIcon;//[Offset: 0x260, Size: 1]
	OPTextBlock* Bind_Text_HonorGradeType;//[Offset: 0x268, Size: 1]
	OPTextBlock* Bind_Text_BestRecommendType;//[Offset: 0x270, Size: 1]
	OP_ThreeTypeBar* Bind_Widget_RecommendPercent;//[Offset: 0x278, Size: 1]
	void ShowHonorGrade_BPIE(enum InHonorGradeType, enum InBestRecommendType);// 0x1f25360

--------------------------------
Class: OP_ThreeTypeBar.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SB_Type1_Bar;//[Offset: 0x260, Size: 1]
	SizeBox* Bind_SB_Type2_Bar;//[Offset: 0x268, Size: 1]
	SizeBox* Bind_SB_Type3_Bar;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OPProfile_MostPlayedHeroSlot.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x260, Size: 1]
	enum HeroIconType;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Name;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Value;//[Offset: 0x280, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x288, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x290, Size: 1]

--------------------------------
Class: BattleRecord
	DateTime UpdatedAt;//[Offset: 0x0, Size: 1]
	UserRecord[] BattleRecord;//[Offset: 0x8, Size: 1]
	UserRecord[] HerosRecord;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UserRecord

--------------------------------
Class: OPProfile_HeroSlot.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x268, Size: 1]
	ProgressBar* Bind_ProgressBar;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Value;//[Offset: 0x278, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x280, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x288, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x290, Size: 1]
	enum HeroIconType;//[Offset: 0x300, Size: 1]
	FName GetHeroID();// 0x1b77550

--------------------------------
Class: OPProfileSub_MatchHistory.OPProfileSub_Base.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x288, Size: 1]
	OPDropDownListButtonWidget* Bind_Widget_ModeFilter;//[Offset: 0x290, Size: 1]
	VerticalBox* Bind_VerticalBox;//[Offset: 0x298, Size: 1]
	class OPProfile_MatchHistorySlot* MatchHistorySlotClass;//[Offset: 0x2a0, Size: 1]
	Margin SlotPadding;//[Offset: 0x2a8, Size: 1]
	enum CurrentModeType;//[Offset: 0x2b8, Size: 1]
	void SetModeFilter(enum InModeType);// 0x1b73d50

--------------------------------
Class: OPProfile_MatchHistorySlot.UserWidget.Widget.Visual.Object
	OPProfile_MatchHistorySlot_Portrait* Bind_Widget_Icon;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Mode;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_MapName;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_PlayTime;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Date;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Victory;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Defeat;//[Offset: 0x298, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2a0, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2a8, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2b0, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2b8, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2c0, Size: 1]
	OPShopItemIconComponent* Bind_Widget_Item;//[Offset: 0x2c8, Size: 1]
	Button* Bind_Button_ResultView;//[Offset: 0x2d0, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x2d8, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x2e0, Size: 1]
	int MatchID;//[Offset: 0x2e8, Size: 1]
	FString MyUserID;//[Offset: 0x2f0, Size: 1]
	void OnClickedResultView();// 0x1b73a60

--------------------------------
Class: OPProfile_MatchHistorySlot_Portrait.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x268, Size: 1]
	MenuAnchor* Bind_MenuAnchor;//[Offset: 0x270, Size: 1]
	class OPProfile_MatchHistory_ToolTip* TooltipWidgetClass;//[Offset: 0x278, Size: 1]
	OPProfile_MatchHistory_ToolTip* MatchHistoryTooltip;//[Offset: 0x280, Size: 1]
	enum HeroIconType;//[Offset: 0x288, Size: 1]
	UserWidget* GetTooltipWidget();// 0x1b73440

--------------------------------
Class: OPProfile_MatchHistory_ToolTip.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox;//[Offset: 0x260, Size: 1]
	class OPProfile_MatchHistory_ToolTipSlot* SlotWidgetClass;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPProfile_MatchHistory_ToolTipSlot.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_CP_Me;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_CP_MyTeam;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_CP_EnemyTeam;//[Offset: 0x270, Size: 1]
	Image* Bind_Image_MyIcon;//[Offset: 0x278, Size: 1]
	enum MyIconType;//[Offset: 0x280, Size: 1]
	Image* Bind_Image_MyTeamIcon;//[Offset: 0x288, Size: 1]
	enum MyTeamIconType;//[Offset: 0x290, Size: 1]
	Image* Bind_Image_EnemyTeamIcon;//[Offset: 0x298, Size: 1]
	enum EnemyTeamIconType;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_MyName;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_MyTeamName;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_EnemyTeamName;//[Offset: 0x2b8, Size: 1]
	SlateColor NameColor_Normal;//[Offset: 0x2c0, Size: 1]
	SlateColor NameColor_Escape;//[Offset: 0x2e8, Size: 1]
	void OnSetMyData_BP(bool IsEscape);// 0x1f25360
	void OnSetEnemyData_BP(bool IsEscape);// 0x1f25360
	void OnSetAllyData_BP(bool IsEscape);// 0x1f25360

--------------------------------
Class: OPLobbyPopupFlowComponentBase.OPUserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: OPMatchResultFlowWidget.UserWidget.Widget.Visual.Object
	<enum,class UserWidget> ResultWidgets;//[Offset: 0x260, Size: 1]
	UserWidget* ActivatedWidget;//[Offset: 0x2b0, Size: 1]
	enum CurrentFlow;//[Offset: 0x2b8, Size: 1]
	void OnHideFlowWidget();// 0x1b5bca0

--------------------------------
Class: MatchBrowserMainComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	Timespan GameDuration;//[Offset: 0x2a0, Size: 1]
	bool bIsWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	FName MapName;//[Offset: 0x2ac, Size: 1]
	TextBlock* Bind_Text_AllyScore;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_EnemyScore;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_Result;//[Offset: 0x2c8, Size: 1]
	TextBlock* Bind_Text_MapName;//[Offset: 0x2d0, Size: 1]
	TextBlock* Bind_Text_PlayTime;//[Offset: 0x2d8, Size: 1]
	OPButtonBase* Bind_Button_Leave;//[Offset: 0x2e0, Size: 1]
	OPButtonBase* Bind_Button_Ranking;//[Offset: 0x2e8, Size: 1]
	OPButtonBase* Bind_Button_Result;//[Offset: 0x2f0, Size: 1]
	OPButtonBase* Bind_Button_OverView;//[Offset: 0x2f8, Size: 1]
	OPButtonBase* Bind_Button_Stat;//[Offset: 0x300, Size: 1]
	OPButtonBase* Bind_Button_Graph;//[Offset: 0x308, Size: 1]
	Image* Bind_Image_ButtonLine;//[Offset: 0x310, Size: 1]
	Image* Bind_Image_ButtonLine;//[Offset: 0x318, Size: 1]
	Image* Bind_Image_ButtonLine;//[Offset: 0x320, Size: 1]
	Image* Bind_Image_ButtonLine;//[Offset: 0x328, Size: 1]
	CanvasPanel* Bind_MainResultScene;//[Offset: 0x330, Size: 1]
	WidgetSwitcher* Bind_WidgetSwitcher;//[Offset: 0x338, Size: 1]
	WidgetSwitcher* Bind_RankSceneSwitcher;//[Offset: 0x340, Size: 1]
	OPResultRecommendBrowserWidget* Bind_Widget_ResultRecommned;//[Offset: 0x348, Size: 1]
	OP_RankingSceneWidget* Bind_Widget_BatchProgress;//[Offset: 0x350, Size: 1]
	OP_RankingSceneWidget* Bind_Widget_RankUp;//[Offset: 0x358, Size: 1]
	OP_RankingSceneWidget* Bind_Widget_RankPromotion;//[Offset: 0x360, Size: 1]
	MB2RankingWidget* Bind_Widget_Ranking;//[Offset: 0x368, Size: 1]
	MB2_ResultComponent* Bind_Widget_Result;//[Offset: 0x370, Size: 1]
	MB2_OverViewComponent* Bind_Widget_OverView;//[Offset: 0x378, Size: 1]
	MB2_StatsComponent* Bind_Widget_Stat;//[Offset: 0x380, Size: 1]
	MB2_GraphComponent* Bind_Widget_Graph;//[Offset: 0x388, Size: 1]
	MB2_RecordRecommendComponent* Bind_Widget_RecordRecommend;//[Offset: 0x390, Size: 1]
	Widget* Bind_Widget_CloseTime;//[Offset: 0x398, Size: 1]
	OPTextBlock* Bind_Text_CloseTime;//[Offset: 0x3a0, Size: 1]
	OPMission_Slot_Complete_List* Bind_Mission_Complete_List;//[Offset: 0x3a8, Size: 1]
	SoundBase* GraphSound;//[Offset: 0x3b0, Size: 1]
	AudioComponent* GraphAudioComponent;//[Offset: 0x3b8, Size: 1]
	MatchHistory* CurrentMatchInfo;//[Offset: 0x3d0, Size: 1]
	OPButtonBase*[] TabButtons;//[Offset: 0x3f8, Size: 1]
	int CurrentTabIndex;//[Offset: 0x408, Size: 1]
	bool IsReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	void UpdateRecommendResult(HonorRecommendCountData[] InRecommendStateData);// 0x1a93220
	void ShowMainResultScene_BP();// 0x1f25360
	void ShowCommunityLevelUpWidget_BP();// 0x1f25360
	void SetMatchIDAndUserName(int InMatchID, FString InUserName);// 0x1a92e10
	void SetMatchID(int InMatchID, bool InIsReplay);// 0x1a92d40
	void OnSelectPrevTab(int Index);// 0x1a92840
	void OnSelectNextTab(int Index);// 0x1a927b0
	void OnNextRankingScene();// 0x1a92690
	void OnMatchClientDataUpdated();// 0x1a92520
	void OnHideRankingScene();// 0x1a92470
	void OnClickedLeave();// 0x1a92310
	int GetWinTeamNum();// 0x1a91f60
	FString GetUserID();// 0x1a91e90
	int GetMatchID();// 0x1a91e60
	void ChangeContent(MatchBrowserSubFlowComponent* InWidget);// 0x1a91c30
	void AddRecommendTypesToMe(int8 InRecommendedType);// 0x1a91bb0

--------------------------------
Class: OPResultRecommendBrowserWidget.UserWidget.Widget.Visual.Object
	Widget* Bind_HB_Ally;//[Offset: 0x300, Size: 1]
	Widget* Bind_HB_Enemy;//[Offset: 0x308, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Ally1;//[Offset: 0x310, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Ally2;//[Offset: 0x318, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Ally3;//[Offset: 0x320, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Ally4;//[Offset: 0x328, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Ally5;//[Offset: 0x330, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Enemy1;//[Offset: 0x338, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Enemy2;//[Offset: 0x340, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Enemy3;//[Offset: 0x348, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Enemy4;//[Offset: 0x350, Size: 1]
	OPRecommendPlayerSlot* Bind_Slot_Enemy5;//[Offset: 0x358, Size: 1]
	OPTextButtonBase* Bind_BTN_Complete;//[Offset: 0x360, Size: 1]
	byte MVPTeam;//[Offset: 0x368, Size: 1]
	FString MVPUserName;//[Offset: 0x370, Size: 1]
	void ShowWidget_BPIE(bool bHasMVP, bool bIsMyTeamMVP);// 0x1f25360
	void SetMatchInfo();// 0x1b777a0
	void SendRecommendResult();// 0x1b77780
	void OnShown();// 0x1b776d0
	void OnHidden();// 0x1b776b0
	void OnClicked_BPIE();// 0x1f25360
	void HandleReaction_Yes_BP();// 0x1f25360

--------------------------------
Class: OPRecommendPlayerSlot.OPDraftSplashScreenSlotWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* Bind_Switcher_TotalState;//[Offset: 0x2d0, Size: 1]
	WidgetSwitcher* Bind_Switcher_HoverState;//[Offset: 0x2d8, Size: 1]
	OPRecommendIconButton* Bind_Btn_TeamPlayer;//[Offset: 0x2e0, Size: 1]
	OPRecommendIconButton* Bind_Btn_Sportsmanship;//[Offset: 0x2e8, Size: 1]
	OPRecommendIconButton* Bind_Btn_Commander;//[Offset: 0x2f0, Size: 1]
	Image* Bind_Image_MVP;//[Offset: 0x2f8, Size: 1]
	void OnUnHoveredIcon_BPIE();// 0x1f25360
	void OnShowWidget_BPIE(bool InIsMe, bool InIsEscape, bool InIsEnemy, bool InIsHover);// 0x1f25360
	void OnHoveredIcon_BPIE(enum InIconType);// 0x1f25360
	void OnClickedIcon_BPIE(enum InIconType);// 0x1f25360

--------------------------------
Class: OPRecommendIconButton.OPButtonBase.UserWidget.Widget.Visual.Object
	enum IconType;//[Offset: 0x888, Size: 1]

--------------------------------
Class: OP_RankingSceneWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPTextButtonBase* Bind_Button_Leave;//[Offset: 0x278, Size: 1]
	TimerHandle TimerHandler_ReservedSceneState;//[Offset: 0x2b0, Size: 1]
	enum SceneState;//[Offset: 0x2b8, Size: 1]
	enum ReservedSceneState;//[Offset: 0x2b9, Size: 1]
	bool IsRankUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 1]
	RankRecord BeforeRecord;//[Offset: 0x2c0, Size: 1]
	RankRecord AfterRecord;//[Offset: 0x308, Size: 1]
	float NextSceneTime;//[Offset: 0x350, Size: 1]
	void SetSceneStateByTime(enum InSceneState, float InDelayTime);// 0x1a98fa0
	void SetSceneStateByAnim(enum InSceneState, WidgetAnimation* InAnim);// 0x1a98ed0
	void SetSceneState(enum InSceneState);// 0x1a98e50
	void SetReservedState();// 0x1a98e30
	void OnChangeSceneState_Showing();// 0x1f25360
	void OnChangeSceneState_Hiding();// 0x1f25360
	void OnChangeSceneState_Displaying();// 0x1f25360
	void OnChangeSceneState_Close();// 0x1f25360
	void OnChangeSceneState_BP(enum State);// 0x1f25360
	bool IsEnableInput();// 0x1a98d70
	void HandleReaction_Yes_BP();// 0x1f25360
	void BroadcastNextRankingScene();// 0x1a98ce0
	void BroadcastHideRankingScene();// 0x1a98cb0

--------------------------------
Class: MB2RankingWidget.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	Widget* Bind_TierDownShield;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_TierIcon;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_RankingPoint;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_TierName;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_RankingPointChanged;//[Offset: 0x288, Size: 1]
	OPHealthProgressBar* Bind_Progress_RankingPoint;//[Offset: 0x290, Size: 1]
	Image* Bind_Image_Hero;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_PlayerExpText;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_Renar;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_CommunityEXPChanged;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_Exp;//[Offset: 0x2c0, Size: 1]
	OPHealthProgressBar* Bind_Progress_CommunityEXP;//[Offset: 0x2c8, Size: 1]
	OPLobbyCollection_Hero_MasteryLevelWidget* Bind_Widget_MasteryLevel;//[Offset: 0x2d0, Size: 1]
	OPLobbyCollection_Hero_MasteryDetailTextBox* Bind_Widget_MasteryDetail;//[Offset: 0x2d8, Size: 1]
	enum HeroIconType;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	MatchBrowserMainComponent* Mother;//[Offset: 0x260, Size: 1]
	void OnClientDataUpdated_BPNE();// 0x1a8ac50

--------------------------------
Class: OPLobbyCollection_Hero_MasteryLevelWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Img_LevelIcon;//[Offset: 0x260, Size: 1]
	Image* Bind_Img_ExpGuage;//[Offset: 0x268, Size: 1]
	Image* Bind_Img_ExpGuageBG;//[Offset: 0x270, Size: 1]
	OPTextBlock* Bind_Txt_Exp;//[Offset: 0x278, Size: 1]
	OPTextBlock* Bind_Txt_CurrentLevel;//[Offset: 0x280, Size: 1]
	OPTextBlock* Bind_Txt_NextLevel;//[Offset: 0x288, Size: 1]
	CanvasPanel* Bind_CP_Grade;//[Offset: 0x290, Size: 1]
	OPTextBlock* Bind_Txt_Grade;//[Offset: 0x298, Size: 1]

--------------------------------
Class: OPLobbyCollection_Hero_MasteryDetailTextBox.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VB_GainedPPDetail;//[Offset: 0x260, Size: 1]
	OPTextBlock* Bind_Txt_Base;//[Offset: 0x268, Size: 1]
	OPTextBlock* Bind_Txt_Win;//[Offset: 0x270, Size: 1]
	OPTextBlock* Bind_Txt_Spirit;//[Offset: 0x278, Size: 1]
	OPTextBlock* Bind_Txt_Guardian;//[Offset: 0x280, Size: 1]
	OPTextBlock* Bind_Txt_KillGrade;//[Offset: 0x288, Size: 1]

--------------------------------
Class: MB2_ResultComponent.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Hero;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_PlayerExpText;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Renar;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_CommunityEXPChanged;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Exp;//[Offset: 0x290, Size: 1]
	OPHealthProgressBar* Bind_Progress_CommunityEXP;//[Offset: 0x298, Size: 1]
	OPLobbyCollection_Hero_MasteryLevelWidget* Bind_Widget_MasteryLevel;//[Offset: 0x2a0, Size: 1]
	OPLobbyCollection_Hero_MasteryDetailTextBox* Bind_Widget_MasteryDetail;//[Offset: 0x2a8, Size: 1]
	enum HeroIconType;//[Offset: 0x2b0, Size: 1]
	void OnSetData_BPNE(FName InMapName, int InGameDurationSecond);// 0x1a928d0

--------------------------------
Class: MB2_OverViewComponent.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VBox_Blue;//[Offset: 0x268, Size: 1]
	VerticalBox* Bind_VBox_Red;//[Offset: 0x270, Size: 1]
	MB2_OverView_PlayerSlotComponent*[] PlayerSlot_Blue;//[Offset: 0x280, Size: 1]
	MB2_OverView_PlayerSlotComponent*[] PlayerSlot_Red;//[Offset: 0x290, Size: 1]
	class OP_Character[] GetBannedHeroes();// 0x1a91ce0

--------------------------------
Class: MB2_OverView_PlayerSlotComponent.OPButtonBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_HeroName;//[Offset: 0x840, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x848, Size: 1]
	TextBlock* Bind_Text_UserName;//[Offset: 0x850, Size: 1]
	TextBlock* Bind_Text_Contribution;//[Offset: 0x858, Size: 1]
	TextBlock* Bind_Text_K;//[Offset: 0x860, Size: 1]
	TextBlock* Bind_Text_D;//[Offset: 0x868, Size: 1]
	TextBlock* Bind_Text_A;//[Offset: 0x870, Size: 1]
	TextBlock* Bind_Text_Minion;//[Offset: 0x878, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x880, Size: 1]
	OPSpellIconWidget* Bind_SpellIcon;//[Offset: 0x888, Size: 1]
	OPSpellIconWidget* Bind_SpellIcon;//[Offset: 0x890, Size: 1]
	HorizontalBox* Bind_HBox_InventroyIcons;//[Offset: 0x898, Size: 1]
	Image* Bind_Image_MVP;//[Offset: 0x8a0, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x8a8, Size: 1]
	Button* Bind_Button_Option;//[Offset: 0x8b0, Size: 1]
	Button* Bind_Button_AddFriend;//[Offset: 0x8b8, Size: 1]
	Button* Bind_Button_Report;//[Offset: 0x8c0, Size: 1]
	FString CurrentUserID;//[Offset: 0x8c8, Size: 1]
	FString CurrentNickName;//[Offset: 0x8d8, Size: 1]
	MB2_OverViewComponent* ParentWidget;//[Offset: 0x8e8, Size: 1]
	class OPDropDownButtonGroupComponent* DropDownWidgetClass;//[Offset: 0x8f0, Size: 1]
	enum HeroIconType;//[Offset: 0x900, Size: 1]
	void ReportSent(bool InIsSent);// 0x1a92c20
	void OnShowBestWarriorIcon_BPIE();// 0x1f25360
	void OnSetPlayerData_BP(enum InTeamType, bool InIsEscaped);// 0x1f25360
	void OnSetIcon_ConsolOrPC_BP();// 0x1f25360
	void OnReportPlayer(FString InReportPlayer);// 0x1a926b0
	void OnClickedReport();// 0x1a92350
	void OnClickedOption();// 0x1a92330
	void OnClickedFriend();// 0x1a922f0

--------------------------------
Class: MB2_StatsComponent.MB2_StatAndGraphBaseComponent.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	ScrollBox* Bind_Scroll_StatList;//[Offset: 0x2f0, Size: 1]

--------------------------------
Class: MB2_StatAndGraphBaseComponent.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Blue;//[Offset: 0x268, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Blue;//[Offset: 0x270, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Blue;//[Offset: 0x278, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Blue;//[Offset: 0x280, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Blue;//[Offset: 0x288, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Red;//[Offset: 0x290, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Red;//[Offset: 0x298, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Red;//[Offset: 0x2a0, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Red;//[Offset: 0x2a8, Size: 1]
	MB2_StatHeroIconComponent* Bind_Widget_Hero_Red;//[Offset: 0x2b0, Size: 1]
	MB2_StatHeroIconComponent*[] HeroIcons;//[Offset: 0x2b8, Size: 1]
	FText[] LogTexts;//[Offset: 0x2c8, Size: 1]
	enum HeroIconType;//[Offset: 0x2d8, Size: 1]
	RoundEndResultPlayerLog[] OrderedPlayerList;//[Offset: 0x2e0, Size: 1]
	FText GetLogText(int Index);// 0x1a91d60
	Widget* AddLogButton(int Index);// 0x1f25360

--------------------------------
Class: MB2_StatHeroIconComponent.UserWidget.Widget.Visual.Object
	Image* Bind_Image_HeroIcon;//[Offset: 0x260, Size: 1]
	OPTextBlock* Bind_UserName;//[Offset: 0x268, Size: 1]
	Image* Bind_TeamBar;//[Offset: 0x270, Size: 1]
	LinearColor MyselfColor;//[Offset: 0x278, Size: 1]
	LinearColor TeamColor;//[Offset: 0x288, Size: 1]
	LinearColor EnemyColor;//[Offset: 0x298, Size: 1]
	void SetTeam_BP(enum InTeamType);// 0x1f25360
	void SetIsEscaped_BP(bool InIsEscaped);// 0x1f25360

--------------------------------
Class: MB2_GraphComponent.MB2_StatAndGraphBaseComponent.MatchBrowserSubFlowComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HBox_List;//[Offset: 0x2f0, Size: 1]
	OPScrollBox* Bind_Scroll_StatCategory;//[Offset: 0x2f8, Size: 1]
	VerticalBox* Bind_FilterBox;//[Offset: 0x300, Size: 1]
	TextBlock* Bind_GraphRange;//[Offset: 0x308, Size: 1]
	TextBlock* Bind_GraphRange;//[Offset: 0x310, Size: 1]
	TextBlock* Bind_GraphRange;//[Offset: 0x318, Size: 1]
	TextBlock* Bind_GraphRange;//[Offset: 0x320, Size: 1]
	TextBlock* Bind_GraphRange;//[Offset: 0x328, Size: 1]
	void UpdateData(enum[] InDataTypes);// 0x1a93110

--------------------------------
Class: MB2_RecordRecommendComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HB_RecommendedSlots;//[Offset: 0x260, Size: 1]
	MB2_RecordRecommendIconSlot*[] RecommendedSlots;//[Offset: 0x268, Size: 1]

--------------------------------
Class: MB2_RecordRecommendIconSlot.UserWidget.Widget.Visual.Object
	void OnSetIconType_BPIE(int InIconType);// 0x1f25360

--------------------------------
Class: OPMission_Slot_Complete_List.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox;//[Offset: 0x260, Size: 1]
	class UserWidget* CompletedMissionEntrySlotClass;//[Offset: 0x268, Size: 1]
	void OnShowBP(bool InIsShow);// 0x1f25360

--------------------------------
Class: OPMouseCursor.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x260, Size: 1]
	Vector2D DefaultSize;//[Offset: 0x268, Size: 1]
	float MinScale;//[Offset: 0x270, Size: 1]
	float MaxScale;//[Offset: 0x274, Size: 1]
	void Update(Object* InWorldContextObject);// 0x1b5bf10

--------------------------------
Class: TextButton_Positive_new_C.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa00, Size: 1]
	WidgetAnimation* Press;//[Offset: 0xa08, Size: 1]
	WidgetAnimation* Hover;//[Offset: 0xa10, Size: 1]
	CanvasPanel* Bind_Hover_Object;//[Offset: 0xa18, Size: 1]
	CanvasPanel* CanvasPanel;//[Offset: 0xa20, Size: 1]
	Image* Image_Add;//[Offset: 0xa28, Size: 1]
	Image* Image_Etc_L;//[Offset: 0xa30, Size: 1]
	Image* Image_Etc_R;//[Offset: 0xa38, Size: 1]
	Image* Image_Glow_Add;//[Offset: 0xa40, Size: 1]
	Image* Image_Hover_Add;//[Offset: 0xa48, Size: 1]
	Image* Image_Hover_Bg;//[Offset: 0xa50, Size: 1]
	Image* Image_Hover_Cover;//[Offset: 0xa58, Size: 1]
	Image* Image_Inner_Glow;//[Offset: 0xa60, Size: 1]
	Image* Image_Inner_Line;//[Offset: 0xa68, Size: 1]
	Image* Image_Inner_Shadow;//[Offset: 0xa70, Size: 1]
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1f25360
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1f25360
	void OnButtonStateChanged_BPNE(bool InSelectedState, enum InNewButtonState);// 0x1f25360
	void ExecuteUbergraph_TextButton_Positive_new(int EntryPoint, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, Geometry K2Node_Event_MyGeometry, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_MouseEvent, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_InSelectedState, enum K2Node_Event_InNewButtonState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x1f25360

--------------------------------
Class: OPHorizontalBox.HorizontalBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x130, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x140, Size: 1]
	Margin Padding;//[Offset: 0x148, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x158, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bOverrideChildSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	SlateChildSize ChildSize;//[Offset: 0x15c, Size: 1]
	UserWidget* CreateWidget();// 0x1b60210
	HorizontalBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x1b5ff60

--------------------------------
Class: Common_GameGrade_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Close;//[Offset: 0x268, Size: 1]
	WidgetAnimation* Open;//[Offset: 0x270, Size: 1]
	Image* Image;//[Offset: 0x278, Size: 1]
	Image* Image;//[Offset: 0x280, Size: 1]
	Image* Image;//[Offset: 0x288, Size: 1]
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_Handled_ReturnValue);// 0x1f25360
	void Construct();// 0x1f25360
	void CustomShow();// 0x1f25360
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1f25360
	void ExecuteUbergraph_Common_GameGrade(int EntryPoint, const WidgetAnimation* K2Node_Event_Animation, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360

--------------------------------
Class: LiveAnnouncementBox_C.LiveAnnouncementComponent.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 1]
	ScrollBox* ScrollBox;//[Offset: 0x270, Size: 1]
	Title3_C* Title3;//[Offset: 0x278, Size: 1]
	SlateFontInfo AnnouncementFontStyle;//[Offset: 0x280, Size: 1]
	void Update_BP(FString InLastUpdate, out const FText[] InAnnouncements);// 0x1f25360
	void ExecuteUbergraph_LiveAnnouncementBox(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString K2Node_Event_InLastUpdate, const FText[] K2Node_Event_InAnnouncements, FText CallFunc_Array_Get_Item, TextBlock* CallFunc_SpawnObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1f25360

--------------------------------
Class: LiveAnnouncementComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_LastUpdateAt;//[Offset: 0x260, Size: 1]
	void Update_BP(FString InLastUpdate, out const FText[] InAnnouncements);// 0x1a843c0
	void TryUpdateFromClientData();// 0x1a84100
	void OnMasterServerClientDataUpdated(enum InUpdateType);// 0x1a836a0

--------------------------------
Class: Title3_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	OPTextBlock* OPTextBlock;//[Offset: 0x268, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x270, Size: 1]
	FText Title;//[Offset: 0x278, Size: 1]
	float HeightOverride;//[Offset: 0x290, Size: 1]
	int FontSize;//[Offset: 0x294, Size: 1]
	void SetTitle(FText Title);// 0x1f25360
	void PreConstruct(bool IsDesignTime);// 0x1f25360
	void Construct();// 0x1f25360
	void ExecuteUbergraph_Title3(int EntryPoint, bool K2Node_Event_IsDesignTime, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateFontInfo K2Node_MakeStruct_SlateFontInfo);// 0x1f25360

--------------------------------
Class: Server_Type_C.OPVersionDisplayer.UserWidget.Widget.Visual.Object

--------------------------------
Class: SignUpMenu_C.OP_SignupMenuComponent.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	VerticalBox* BPBind_AccountRule;//[Offset: 0x268, Size: 1]
	Border* BPBind_Border_ID;//[Offset: 0x270, Size: 1]
	Border* BPBind_Border_PW;//[Offset: 0x278, Size: 1]
	Border* BPBind_Border_PW2;//[Offset: 0x280, Size: 1]
	CategoryButton_B_C* BPBind_Button_Policy;//[Offset: 0x288, Size: 1]
	CategoryButton_B_C* BPBind_Button_Rule;//[Offset: 0x290, Size: 1]
	VerticalBox* BPBind_Policy;//[Offset: 0x298, Size: 1]
	TextBlock* BPBind_Result;//[Offset: 0x2a0, Size: 1]
	TextButton_Positive_new_C* DSWButton2;//[Offset: 0x2a8, Size: 1]
	TextButton_Positive_new_C* DSWButton2_C;//[Offset: 0x2b0, Size: 1]
	EditableText* Text_ID;//[Offset: 0x2b8, Size: 1]
	EditableText* Text_PW;//[Offset: 0x2c0, Size: 1]
	EditableText* Text_PW2;//[Offset: 0x2c8, Size: 1]
	LoginMenu_C* LoginMenu;//[Offset: 0x2d0, Size: 1]
	FText PW1;//[Offset: 0x2d8, Size: 1]
	FText PW2;//[Offset: 0x2f0, Size: 1]
	void HandlePWInput(out FText PWBuffer, FText NewPW, EditableText* PWBox, bool CallFunc_CheckPWValidity_Validity, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsEmpty_ReturnValue);// 0x1f25360
	void CheckPWValidity(FText InPW, out bool Validity, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Right_ReturnValue, int CallFunc_FindSubstring_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1f25360
	LinearColor GetStatusColor(bool Value, bool ___bool_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor K2Node_Select_Default);// 0x1f25360
	void CanSignUp(out bool CanSignUp, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_CheckProhibitedWord_forNickName_OutString, bool CallFunc_CheckProhibitedWord_forNickName_ReturnValue, FString CallFunc_IsValidAccountInfo_OutResult, bool CallFunc_IsValidAccountInfo_OutIDResult, bool CallFunc_IsValidAccountInfo_OutPWResult, bool CallFunc_IsValidAccountInfo_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue);// 0x1f25360
	void BndEvt__DSWButton2_C_0_K2Node_ComponentBoundEvent_102_OnClicked__DelegateSignature();// 0x1f25360
	void BndEvt__DSWButton2_K2Node_ComponentBoundEvent_72_OnClicked__DelegateSignature();// 0x1f25360
	void BndEvt__Text_ID_K2Node_ComponentBoundEvent_2_OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1f25360
	void BndEvt__Text_PW_K2Node_ComponentBoundEvent_4_OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1f25360
	void Check Validate();// 0x1f25360
	void Construct();// 0x1f25360
	void BndEvt__BPBind_Button_Policy_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature();// 0x1f25360
	void BndEvt__BPBind_Button_Rule_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature();// 0x1f25360
	void OnSignupResult_BP(enum InResult);// 0x1f25360
	void OnTextChanged_Event(out const FText Text);// 0x1f25360
	void OnTextChanged_Event(out const FText Text);// 0x1f25360
	void HandleWrongPWCharacterInserted();// 0x1f25360
	void ExecuteUbergraph_SignUpMenu(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, enum ___byte_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, bool CallFunc_CanSignUp_CanSignUp, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetText_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, const FText K2Node_ComponentBoundEvent_Text, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_IsValidAccountInfo_OutResult, bool CallFunc_IsValidAccountInfo_OutIDResult, bool CallFunc_IsValidAccountInfo_OutPWResult, bool CallFunc_IsValidAccountInfo_ReturnValue, LinearColor CallFunc_GetStatusColor_ReturnValue, LinearColor CallFunc_GetStatusColor_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Event_InResult, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, FText K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, OP_InteractionPopup_Alert* CallFunc_BuildPopup_Alert_BP_ReturnValue, const FText K2Node_CustomEvent_Text, const FText K2Node_CustomEvent_Text);// 0x1f25360

--------------------------------
Class: OP_SignupMenuComponent.UserWidget.Widget.Visual.Object
	void TrySignup(FText InLoginID, FText InLoginPW);// 0x1b83940
	void OnSignupResult_BP(enum InResult);// 0x1ace1a0

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x120, Size: 1]
	byte VerticalAlignment;//[Offset: 0x121, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x122, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x124, Size: 1]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x134, Size: 1]
	Margin Padding;//[Offset: 0x144, Size: 1]
	SlateBrush Background;//[Offset: 0x158, Size: 1]
	delegate BackgroundDelegate;//[Offset: 0x1e0, Size: 1]
	LinearColor BrushColor;//[Offset: 0x1f0, Size: 1]
	delegate BrushColorDelegate;//[Offset: 0x200, Size: 1]
	Vector2D DesiredSizeScale;//[Offset: 0x210, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x21c, Size: 1]
	delegate OnMouseButtonUpEvent;//[Offset: 0x22c, Size: 1]
	delegate OnMouseMoveEvent;//[Offset: 0x23c, Size: 1]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x24c, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x31608b0
	void SetPadding(Margin InPadding);// 0x3160120
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x315fa00
	void SetDesiredSizeScale(Vector2D InScale);// 0x315f880
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x315f7f0
	void SetBrushFromTexture(Texture2D* Texture);// 0x315f550
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x315f550
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x315f4c0
	void SetBrushColor(LinearColor InBrushColor);// 0x315f430
	void SetBrush(out const SlateBrush InBrush);// 0x315f320
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x315eaa0

--------------------------------
Class: CategoryButton_B_C.OPHighlightableCategoryButton.OPButtonBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x870, Size: 1]
	Image* BPBind_Highlighted;//[Offset: 0x878, Size: 1]
	Image* Image;//[Offset: 0x880, Size: 1]
	void OnHighlighted_BP(bool InHighlighted);// 0x1f25360
	void ExecuteUbergraph_CategoryButton_B(int EntryPoint, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool K2Node_Event_InHighlighted, enum K2Node_Select_Default);// 0x1f25360

--------------------------------
Class: OPHighlightableCategoryButton.OPButtonBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Text;//[Offset: 0x840, Size: 1]
	bool bAutoClickOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	FText ButtonTextOptional;//[Offset: 0x850, Size: 1]
	void OnHighlighted_BP(bool InHighlighted);// 0x1ae0870

--------------------------------
Class: UI_Common_Effect_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Idle;//[Offset: 0x268, Size: 1]
	WidgetAnimation* Open;//[Offset: 0x270, Size: 1]
	Image* Image_Triangle;//[Offset: 0x278, Size: 1]
	Image* Image_Triangle;//[Offset: 0x280, Size: 1]
	Image* Image_Triangle;//[Offset: 0x288, Size: 1]
	Image* Image_Triangle;//[Offset: 0x290, Size: 1]
	Image* Image_Triangle;//[Offset: 0x298, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2a0, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2a8, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2b0, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2b8, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2c0, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2c8, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2d0, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2d8, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2e0, Size: 1]
	Image* Image_Triangle;//[Offset: 0x2e8, Size: 1]
	Image* Image_Triangle_01;//[Offset: 0x2f0, Size: 1]
	Image* Image_Triangle_02;//[Offset: 0x2f8, Size: 1]
	Image* Image_Triangle_03;//[Offset: 0x300, Size: 1]
	Image* Image_Triangle_04;//[Offset: 0x308, Size: 1]
	Image* Image_Triangle_05;//[Offset: 0x310, Size: 1]
	Image* Image_Triangle_06;//[Offset: 0x318, Size: 1]
	Image* Image_Triangle_07;//[Offset: 0x320, Size: 1]
	Image* Image_Triangle_08;//[Offset: 0x328, Size: 1]
	Image* Image_Triangle_08;//[Offset: 0x330, Size: 1]
	Image* Image_Triangle_08;//[Offset: 0x338, Size: 1]
	Image* Image_Triangle_09;//[Offset: 0x340, Size: 1]
	void Construct();// 0x1f25360
	void ExecuteUbergraph_UI_Common_Effect(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360

--------------------------------
Class: UMG_Click_Effect_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Click;//[Offset: 0x268, Size: 1]
	Image* Image;//[Offset: 0x270, Size: 1]
	Image* Image;//[Offset: 0x278, Size: 1]
	Image* Image;//[Offset: 0x280, Size: 1]
	Image* Image;//[Offset: 0x288, Size: 1]
	void Construct();// 0x1f25360
	void PlayClickAnim();// 0x1f25360
	void ExecuteUbergraph_UMG_Click_Effect(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360

--------------------------------
Class: WB_LoadingFinishedWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	void Construct();// 0x1f25360
	void ExecuteUbergraph_WB_LoadingFinishedWidget(int EntryPoint);// 0x1f25360

--------------------------------
Class: WB_LoadingMovie_C.LoadingScreenMovieWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 1]
	BinkMediaPlayer* bmp;//[Offset: 0x278, Size: 1]
	MulticastInlineDelegateProperty MovieFinishedBP;//[Size: 1]
	bool HasBPEventDispatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float Ratio;//[Offset: 0x294, Size: 1]
	bool ChageRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply CallFunc_Handled_ReturnValue);// 0x1f25360
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, bool CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue);// 0x1f25360
	void Construct();// 0x1f25360
	void SetMovie_BPNE(FString InMovieLocation, bool IsShow);// 0x1f25360
	void Destruct();// 0x1f25360
	void OnMediaClosed_Event();// 0x1f25360
	void SetMovieCE(bool IsShow, FString InMovieLocation);// 0x1f25360
	void OnMediaReachedEnd_Event();// 0x1f25360
	void ExecuteUbergraph_WB_LoadingMovie(int EntryPoint, float CallFunc_GetLoadingScreenPlayMovieVolume_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FString K2Node_Event_InMovieLocation, bool K2Node_Event_IsShow, bool CallFunc_SetLooping_ReturnValue, bool K2Node_CustomEvent_IsShow, FString K2Node_CustomEvent_InMovieLocation, bool CallFunc_OpenUrl_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x1f25360
	void MovieFinishedBP__DelegateSignature();// 0x1f25360

--------------------------------
Class: LoadingScreenMovieWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Movie;//[Offset: 0x260, Size: 1]
	void SetMovie_BPNE(FString InMovieLocation, bool IsShow);// 0x1247150
	void MovieFinished();// 0x1247130

--------------------------------
Class: BinkMediaPlayer.Object
	MulticastInlineDelegateProperty OnMediaClosed;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaReachedEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackSuspended;//[Size: 1]
	bool Looping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool StartImmediately;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool DelayedOpen;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	Vector2D BinkDestinationUpperLeft;//[Offset: 0x74, Size: 1]
	Vector2D BinkDestinationLowerRight;//[Offset: 0x7c, Size: 1]
	FString URL;//[Offset: 0x88, Size: 1]
	byte BinkBufferMode;//[Offset: 0x98, Size: 1]
	byte BinkSoundTrack;//[Offset: 0x99, Size: 1]
	int BinkSoundTrackStart;//[Offset: 0x9c, Size: 1]
	byte BinkDrawStyle;//[Offset: 0xa0, Size: 1]
	int BinkLayerDepth;//[Offset: 0xa4, Size: 1]
	bool SupportsSeeking();// 0x1020290
	bool SupportsScrubbing();// 0x1020290
	bool SupportsRate(float Rate, bool Unthinned);// 0x10201c0
	void Stop();// 0x10201a0
	void SetVolume(float Rate);// 0x1020120
	bool SetRate(float Rate);// 0x1020090
	bool SetLooping(bool InLooping);// 0x101ff60
	bool Seek(out const Timespan InTime);// 0x101fec0
	bool Rewind();// 0x101fe90
	bool Play();// 0x101fe60
	bool Pause();// 0x101fe30
	bool OpenUrl(FString NewURL);// 0x101fd80
	bool IsStopped();// 0x101fd50
	bool IsPlaying();// 0x101fd20
	bool IsPaused();// 0x101fcf0
	bool IsLooping();// 0x101fcc0
	bool IsInitialized();// 0x101fc90
	FString GetUrl();// 0x101fc50
	Timespan GetTime();// 0x101fc10
	float GetRate();// 0x101fbe0
	Timespan GetDuration();// 0x101fba0
	void Draw(Texture* Texture, bool tonemap, int out_nits, float Alpha, bool srgb_decode, bool hdr);// 0x101f9b0
	void CloseUrl();// 0x101f990
	bool CanPlay();// 0x101f940
	bool CanPause();// 0x101f910

--------------------------------
Class: WB_Shutter_ServerResponseWait_C.OP_Shutter_ServerResponseWait.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b0, Size: 1]
	CategroyButton_A_C* CategroyButton_A;//[Offset: 0x2b8, Size: 1]
	Image* Image;//[Offset: 0x2c0, Size: 1]
	CategroyButton_A_C* OverrideButton_Development;//[Offset: 0x2c8, Size: 1]
	Throbber_Loading_C* Throbber_Loading;//[Offset: 0x2d0, Size: 1]
	MulticastInlineDelegateProperty Shutter_Override_Development;//[Size: 1]
	void Construct();// 0x1f25360
	void BndEvt__WB_Shutter_ServerResponseWait_CategroyButton_A_K2Node_ComponentBoundEvent_0_Delegate_OnOPButtonClicked__DelegateSignature();// 0x1f25360
	void BndEvt__WB_Shutter_ServerResponseWait_OverrideButton_Development_K2Node_ComponentBoundEvent_1_Delegate_OnOPButtonClicked__DelegateSignature();// 0x1f25360
	void OnClickYes_Event();// 0x1f25360
	void ExecuteUbergraph_WB_Shutter_ServerResponseWait(int EntryPoint, OP_InteractionPopup_AlertAsker* CallFunc_BuildPopup_AlertAsker_BP_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsShippingBuild_ReturnValue, bool CallFunc_IsShippingBuild_ReturnValue);// 0x1f25360
	void Shutter_Override_Development__DelegateSignature();// 0x1f25360

--------------------------------
Class: OP_Shutter_ServerResponseWait.UserWidget.Widget.Visual.Object
	WidgetAnimation* WA_ShowShutter;//[Offset: 0x280, Size: 1]
	WidgetAnimation* WA_HideShutter;//[Offset: 0x288, Size: 1]
	void UpdateShutterVisibility(bool InbVisible);// 0x1b515f0
	void ShowShutter();// 0x1b3b730
	void HideShutter();// 0x1102710

--------------------------------
Class: CategroyButton_A_C.OPHighlightableCategoryButton.OPButtonBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x870, Size: 1]
	Image* Image;//[Offset: 0x878, Size: 1]
	void OnHighlighted_BP(bool InHighlighted);// 0x1f25360
	void ExecuteUbergraph_CategroyButton_A(int EntryPoint, bool K2Node_Event_InHighlighted, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, enum K2Node_Select_Default);// 0x1f25360

--------------------------------
Class: Throbber_Loading_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Loading;//[Offset: 0x268, Size: 1]
	Image* Image_symbol;//[Offset: 0x270, Size: 1]
	void Construct();// 0x1f25360
	void ExecuteUbergraph_Throbber_Loading(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1f25360

--------------------------------
Class: MediaPlayer.Object
	MulticastInlineDelegateProperty OnEndReached;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaClosed;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaOpenFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackResumed;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackSuspended;//[Size: 1]
	MulticastInlineDelegateProperty OnSeekCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnTracksChanged;//[Size: 1]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 1]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 1]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 1]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 1]
	int PlaylistIndex;//[Offset: 0xd0, Size: 1]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 1]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 1]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 1]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 1]
	Guid PlayerGuid;//[Offset: 0x120, Size: 1]
	bool SupportsSeeking();// 0x32e23d0
	bool SupportsScrubbing();// 0x32e23a0
	bool SupportsRate(float Rate, bool Unthinned);// 0x32e22d0
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x32e21f0
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x32e20d0
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x32e1fc0
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x32e1eb0
	void SetTimeDelay(Timespan TimeDelay);// 0x32e1e30
	bool SetRate(float Rate);// 0x32e1c70
	bool SetNativeVolume(float Volume);// 0x32e1be0
	void SetMediaOptions(const MediaSource* Options);// 0x32e1a30
	bool SetLooping(bool Looping);// 0x32e1600
	void SetDesiredPlayerName(FName PlayerName);// 0x32e12e0
	void SetBlockOnTime(out const Timespan Time);// 0x32e1250
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x32e1180
	bool Seek(out const Timespan Time);// 0x32e10e0
	bool Rewind();// 0x32e10b0
	bool Reopen();// 0x32e0fb0
	bool Previous();// 0x32e0e40
	void PlayAndSeek();// 0x32e0e20
	bool Play();// 0x32e0df0
	bool Pause();// 0x32e0dc0
	bool OpenUrl(FString URL);// 0x32e0d10
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x32e0c00
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x32e0a10
	bool OpenSource(MediaSource* MediaSource);// 0x32e0970
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x32e08a0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x32e0800
	bool OpenFile(FString FilePath);// 0x32e0750
	bool Next();// 0x32e0700
	bool IsReady();// 0x32e06d0
	bool IsPreparing();// 0x32e06a0
	bool IsPlaying();// 0x32e0670
	bool IsPaused();// 0x32e0640
	bool IsLooping();// 0x32e0610
	bool IsConnecting();// 0x32e05e0
	bool IsClosed();// 0x32e05b0
	bool IsBuffering();// 0x32e0580
	bool HasError();// 0x32e0480
	Rotator GetViewRotation();// 0x32e0410
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x32e0300
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x32e0230
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x32e0160
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x32e0080
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x32dffb0
	float GetVerticalFieldOfView();// 0x32dff80
	FString GetUrl();// 0x32dfec0
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x32dfdb0
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x32dfce0
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x32dfbb0
	MediaTimeStampInfo* GetTimeStamp();// 0x32dfb80
	Timespan GetTimeDelay();// 0x32dfb40
	Timespan GetTime();// 0x32dfb00
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x32df9d0
	int GetSelectedTrack(enum TrackType);// 0x32df8c0
	float GetRate();// 0x32df890
	int GetPlaylistIndex();// 0x32df730
	MediaPlaylist* GetPlaylist();// 0x32df710
	FName GetPlayerName();// 0x32df6d0
	int GetNumTracks(enum TrackType);// 0x32df640
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x32df570
	FText GetMediaName();// 0x32df320
	float GetHorizontalFieldOfView();// 0x32df2f0
	Timespan GetDuration();// 0x32df250
	FName GetDesiredPlayerName();// 0x32df210
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x32df100
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x32df030
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x32def60
	void Close();// 0x32dea80
	bool CanPlayUrl(FString URL);// 0x32de9d0
	bool CanPlaySource(MediaSource* MediaSource);// 0x32de930
	bool CanPause();// 0x32de900

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 1]
	bool Replace(int Index, MediaSource* Replacement);// 0x32e0fe0
	bool RemoveAt(int Index);// 0x32e0f10
	bool Remove(MediaSource* MediaSource);// 0x32e0e70
	int Num();// 0x32e0730
	void Insert(MediaSource* MediaSource, int Index);// 0x32e04b0
	MediaSource* GetRandom(out int OutIndex);// 0x32df7f0
	MediaSource* GetPrevious(out int InOutIndex);// 0x32df750
	MediaSource* GetNext(out int InOutIndex);// 0x32df450
	MediaSource* Get(int Index);// 0x32dee90
	bool AddUrl(FString URL);// 0x32de600
	bool AddFile(FString FilePath);// 0x32de550
	bool Add(MediaSource* MediaSource);// 0x32de4b0

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x32e2400
	void SetMediaOptionString(out const FName Key, FString Value);// 0x32e1930
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x32e1860
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x32e1780
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x32e16a0
	FString GetUrl();// 0x32dff00

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 1]
	Timespan SeekTime;//[Offset: 0x20, Size: 1]
	enum PlayOnOpen;//[Offset: 0x28, Size: 1]
	enum Loop;//[Offset: 0x29, Size: 1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 1]
	int Caption;//[Offset: 0x4, Size: 1]
	int MetaData;//[Offset: 0x8, Size: 1]
	int Script;//[Offset: 0xc, Size: 1]
	int Subtitle;//[Offset: 0x10, Size: 1]
	int Text;//[Offset: 0x14, Size: 1]
	int Video;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 1]
	int64 SequenceIndex;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: PlayerController_Login.PlayerController.Controller.Actor.Object

--------------------------------
Class: TCPBufferHandler.Actor.Object
	OP_SocketManager* SocketManager;//[Offset: 0x228, Size: 1]

--------------------------------
