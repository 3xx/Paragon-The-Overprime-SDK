Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 1]
	GameStateBase* GameState;//[Offset: 0x120, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 1]
	Level*[] Levels;//[Offset: 0x138, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 1]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 1]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x5e0, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x678, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x39db660
	void HandleTimelineScrubbed();// 0x39db640

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1d4eb70

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x468, Size: 1]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 1]
	enum LightmapType;//[Offset: 0x20f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x250, Size: 1]
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 1]
	int VisibilityId;//[Offset: 0x258, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 1]
	float BoundsScale;//[Offset: 0x284, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 1]
	delegate OnComponentHit;//[Offset: 0x420, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x421, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x422, Size: 1]
	delegate OnComponentWake;//[Offset: 0x423, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x424, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x426, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x427, Size: 1]
	delegate OnClicked;//[Offset: 0x428, Size: 1]
	delegate OnReleased;//[Offset: 0x429, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x42a, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x42b, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x42c, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x42d, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x448, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3995750
	void WakeRigidBody(FName BoneName);// 0x39956c0
	void WakeAllRigidBodies();// 0x39956a0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x39955f0
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x3995560
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x3995490
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x3995400
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x3995380
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x39952f0
	void SetSimulatePhysics(bool bSimulate);// 0x3995260
	void SetRenderInMainPass(bool bValue);// 0x39951d0
	void SetRenderCustomDepth(bool bValue);// 0x3995140
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x39950b0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3994a30
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3994f90
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3994e70
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3994e70
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x3994d40
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3994c10
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3994ac0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3994ac0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x39949a0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x3994910
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3994880
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x39947b0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x39946e0
	void SetMassScale(FName BoneName, float InMassScale);// 0x3994600
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x39944f0
	void SetLinearDamping(float InDamping);// 0x19207d0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x39943c0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x3994330
	void SetHiddenInSceneCapture(bool bValue);// 0x39942a0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x3994210
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x3994180
	void SetEnableGravity(bool bGravityEnabled);// 0x3984e70
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x39940a0
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3993fc0
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3993ef0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3993e20
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3993d40
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3993c60
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3993b90
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3993ac0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x3993a40
	void SetCustomDepthStencilValue(int Value);// 0x39939b0
	void SetCullDistance(float NewCullDistance);// 0x3993930
	void SetConstraintMode(byte ConstraintMode);// 0x39938b0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x39937e0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x3993760
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x3993690
	void SetCollisionObjectType(byte Channel);// 0x3993610
	void SetCollisionEnabled(byte NewType);// 0x1a0c6d0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x3993530
	void SetCastShadow(bool NewCastShadow);// 0x39934a0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x3993410
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x3993380
	void SetBoundsScale(float NewBoundsScale);// 0x3993300
	void SetAngularDamping(float InDamping);// 0x3993270
	void SetAllUseCCD(bool InUseCCD);// 0x39931e0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x3993100
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x3993010
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x3992ef0
	void SetAllMassScale(float InMassScale);// 0x3992e60
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x3992d60
	void PutRigidBodyToSleep(FName BoneName);// 0x3992cd0
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3992920
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x39925c0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3992260
	bool K2_IsQueryCollisionEnabled();// 0x3992220
	bool K2_IsPhysicsCollisionEnabled();// 0x39921e0
	bool K2_IsCollisionEnabled();// 0x39921a0
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3991e30
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x3991d90
	bool IsOverlappingActor(const Actor* Other);// 0x3991cf0
	bool IsGravityEnabled();// 0x3991cc0
	bool IsAnyRigidBodyAwake();// 0x3991c90
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x3991bc0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x3991af0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x3991ac0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x39919c0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x3991910
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x3991860
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x3991790
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x3991790
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x39916e0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x39915e0
	int GetNumMaterials();// 0x39915b0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x39914d0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x3991430
	float GetMassScale(FName BoneName);// 0x3991390
	float GetMass();// 0x3991350
	float GetLinearDamping();// 0x3991310
	Vector GetInertiaTensor(FName BoneName);// 0x3991260
	bool GetGenerateOverlapEvents();// 0x3991230
	byte GetCollisionResponseToChannel(byte Channel);// 0x39911a0
	FName GetCollisionProfileName();// 0x3991160
	byte GetCollisionObjectType();// 0x3991130
	byte GetCollisionEnabled();// 0x3991100
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x3990fc0
	Vector GetCenterOfMass(FName BoneName);// 0x3990f10
	float GetAngularDamping();// 0x3990ed0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x3990db0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x3990ce0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x3990c40
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x3990bc0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x3990b40
	void ClearMoveIgnoreComponents();// 0x3990b10
	void ClearMoveIgnoreActors();// 0x3990af0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x3990a50
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x39907d0
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x3990900
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x39907d0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x39905f0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x3990410
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x39902d0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x39901a0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x3990060
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x398ff20
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x398fdf0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x398fcc0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x398fb70
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x398fa40

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x39a3f90
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x39a3ec0
	void SetWorldScale3D(Vector NewScale);// 0x39a3cd0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x39a3c00
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x39a3b70
	void SetRelativeScale3D(Vector NewScale3D);// 0x39a3ae0
	void SetMobility(byte NewMobility);// 0x39a3a60
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x39a3990
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x39a37d0
	void ResetRelativeTransform();// 0x39a37b0
	void OnRep_Visibility(bool OldValue);// 0x39a3490
	void OnRep_Transform();// 0x39a3470
	void OnRep_AttachSocketName();// 0x39a3450
	void OnRep_AttachParent();// 0x39a3450
	void OnRep_AttachChildren();// 0x39a3430
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a3220
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a3070
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2e70
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2cc0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2ab0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2900
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2700
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a2550
	Transform K2_GetComponentToWorld();// 0x39a24f0
	Vector K2_GetComponentScale();// 0x39a24b0
	Rotator K2_GetComponentRotation();// 0x39a2470
	Vector K2_GetComponentLocation();// 0x39a2430
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x39a22d0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x39a2100
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x39a1fa0
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a1d90
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a1b80
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a19d0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a1820
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a1670
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a14c0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a12b0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a1100
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x39a0f50
	bool IsVisible();// 0x39a0f20
	bool IsSimulatingPhysics(FName BoneName);// 0x39a0e80
	bool IsAnySimulatingPhysics();// 0x39a0e50
	Vector GetUpVector();// 0x39a0cb0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x39a0ba0
	Rotator GetSocketRotation(FName InSocketName);// 0x39a0af0
	Quat GetSocketQuaternion(FName InSocketName);// 0x39a0a40
	Vector GetSocketLocation(FName InSocketName);// 0x39a0990
	bool GetShouldUpdatePhysicsVolume();// 0x39a0960
	Vector GetRightVector();// 0x39a0920
	Transform GetRelativeTransform();// 0x39a08c0
	PhysicsVolume* GetPhysicsVolume();// 0x39a0890
	void GetParentComponents(out SceneComponent*[] Parents);// 0x39a07e0
	int GetNumChildrenComponents();// 0x39a07b0
	Vector GetForwardVector();// 0x397b840
	Vector GetComponentVelocity();// 0x39a0770
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x39a0670
	SceneComponent* GetChildComponent(int ChildIndex);// 0x39a05d0
	FName GetAttachSocketName();// 0x3109af0
	SceneComponent* GetAttachParent();// 0x39a05b0
	FName[] GetAllSocketNames();// 0x39a0530
	bool DoesSocketExist(FName InSocketName);// 0x39a0490
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x39a03b0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0x2fa8bf0
	void SetTickGroup(byte NewTickGroup);// 0x3862ee0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3862f60
	void SetIsReplicated(bool ShouldReplicate);// 0x3862e50
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x3862dd0
	void SetComponentTickInterval(float TickInterval);// 0x3862d50
	void SetComponentTickEnabled(bool bEnabled);// 0x3862cc0
	void SetAutoActivate(bool bNewAutoActivate);// 0x385f700
	void SetActive(bool bNewActive, bool bReset);// 0x3862be0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3862b50
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3862ac0
	void ReceiveTick(float DeltaSeconds);// 0x1d4eb70
	void ReceiveEndPlay(byte EndPlayReason);// 0x1d4eb70
	void ReceiveBeginPlay();// 0x1d4eb70
	void OnRep_IsActive();// 0x2a589c0
	void K2_DestroyComponent(Object* Object);// 0x38629b0
	bool IsComponentTickEnabled();// 0x3862980
	bool IsBeingDestroyed();// 0x3862950
	bool IsActive();// 0x3862920
	Actor* GetOwner();// 0x3862900
	float GetComponentTickInterval();// 0x38628d0
	void Deactivate();// 0x18f6930
	bool ComponentHasTag(FName Tag);// 0x3862690
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3862530
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x38624a0
	void Activate(bool bReset);// 0x2fa8ea0

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 1]
	float InitialLifeSpan;//[Offset: 0x94, Size: 1]
	float CustomTimeDilation;//[Offset: 0x98, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 1]
	Actor* Owner;//[Offset: 0xe0, Size: 1]
	FName NetDriverName;//[Offset: 0xe8, Size: 1]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 1]
	int NetTag;//[Offset: 0x104, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 1]
	float NetPriority;//[Offset: 0x110, Size: 1]
	Pawn* Instigator;//[Offset: 0x118, Size: 1]
	Actor*[] Children;//[Offset: 0x120, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 1]
	FName[] Layers;//[Offset: 0x150, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 1]
	FName[] Tags;//[Offset: 0x170, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 1]
	delegate OnClicked;//[Offset: 0x187, Size: 1]
	delegate OnReleased;//[Offset: 0x188, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x385fa00
	void UserConstructionScript();// 0x1d4eb70
	void TearOff();// 0x2a589e0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x385f930
	void SetTickGroup(byte NewTickGroup);// 0x385f820
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x385f8a0
	void SetReplicates(bool bInReplicates);// 0x385f790
	void SetReplicateMovement(bool bInReplicateMovement);// 0x385f700
	void SetOwner(Actor* NewOwner);// 0x385f670
	void SetNetDormancy(byte NewDormancy);// 0x385f5f0
	void SetLifeSpan(float InLifespan);// 0x385f560
	void SetAutoDestroyWhenFinished(bool bVal);// 0x385f4d0
	void SetActorTickInterval(float TickInterval);// 0x385f450
	void SetActorTickEnabled(bool bEnabled);// 0x385f3c0
	void SetActorScale3D(Vector NewScale3D);// 0x385f330
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x385f2a0
	void SetActorHiddenInGame(bool bNewHidden);// 0x385f210
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x385f180
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x385f0f0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x385f060
	void ReceiveTick(float DeltaSeconds);// 0x1d4eb70
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1d4eb70
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1d4eb70
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1d4eb70
	void ReceiveEndPlay(byte EndPlayReason);// 0x1d4eb70
	void ReceiveDestroyed();// 0x1d4eb70
	void ReceiveBeginPlay();// 0x1d4eb70
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1d4eb70
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1d4eb70
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1d4eb70
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1d4eb70
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1d4eb70
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1d4eb70
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1d4eb70
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1d4eb70
	void ReceiveActorEndCursorOver();// 0x1d4eb70
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1d4eb70
	void ReceiveActorBeginCursorOver();// 0x1d4eb70
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x385ef40
	void OnRep_ReplicateMovement();// 0x2a589c0
	void OnRep_ReplicatedMovement();// 0x385ef20
	void OnRep_Owner();// 0x2fa8bf0
	void OnRep_Instigator();// 0x385ef00
	void OnRep_AttachmentReplication();// 0x2a58630
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x385ed60
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x385ecc0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x385ebd0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385e9c0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x385e8d0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385e6c0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385e510
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385e360
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385e150
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385df90
	void K2_OnReset();// 0x1d4eb70
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1d4eb70
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1d4eb70
	SceneComponent* K2_GetRootComponent();// 0x385df70
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x385de90
	Rotator K2_GetActorRotation();// 0x385ddd0
	Vector K2_GetActorLocation();// 0x385dd50
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x385dc40
	void K2_DestroyComponent(ActorComponent* Component);// 0x385dbb0
	void K2_DestroyActor();// 0x385db90
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x385d9c0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x385d7f0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x385d690
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x385d530
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385d320
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385d110
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385cf60
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385cdb0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385cba0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385c9f0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x385c840
	bool IsOverlappingActor(const Actor* Other);// 0x385c7a0
	bool IsChildActor();// 0x385c770
	bool IsActorTickEnabled();// 0x385c740
	bool IsActorBeingDestroyed();// 0x385c710
	bool HasAuthority();// 0x385c6e0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x385c640
	Vector GetVelocity();// 0x385c600
	Transform GetTransform();// 0x385c5b0
	bool GetTickableWhenPaused();// 0x385c580
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x385c4e0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x385c440
	byte GetRemoteRole();// 0x385c420
	ChildActorComponent* GetParentComponent();// 0x385c3f0
	Actor* GetParentActor();// 0x385c3c0
	Actor* GetOwner();// 0x199ee00
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x385c310
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x385c210
	byte GetLocalRole();// 0x385c1f0
	float GetLifeSpan();// 0x385c1b0
	Controller* GetInstigatorController();// 0x385c180
	Pawn* GetInstigator();// 0x121cc60
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x385c070
	float GetInputAxisValue(const FName InputAxisName);// 0x385bfd0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x385bed0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x385be30
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x385bd90
	float GetGameTimeSinceCreation();// 0x385bd60
	float GetDotProductTo(const Actor* OtherActor);// 0x385bcc0
	float GetDistanceTo(const Actor* OtherActor);// 0x385bc20
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x385bb10
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x385ba30
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x385b990
	FName GetAttachParentSocketName();// 0x385b850
	Actor* GetAttachParentActor();// 0x385b820
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x385b890
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x385b720
	Vector GetActorUpVector();// 0x385b6b0
	float GetActorTimeDilation();// 0x385b680
	float GetActorTickInterval();// 0x385b650
	Vector GetActorScale3D();// 0x385b610
	Vector GetActorRightVector();// 0x385b5a0
	Vector GetActorRelativeScale3D();// 0x385b560
	Vector GetActorForwardVector();// 0x385b4f0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x385b400
	bool GetActorEnableCollision();// 0x385b3d0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x385b240
	void ForceNetUpdate();// 0x385b220
	void FlushNetDormancy();// 0x385b200
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x385b0a0
	void EnableInput(PlayerController* PlayerController);// 0x385b010
	void DisableInput(PlayerController* PlayerController);// 0x1204e90
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x385af80
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x385aef0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x385ae60
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x385aca0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x385aa90
	bool ActorHasTag(FName Tag);// 0x385a9f0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x38da730
	bool WasControllerKeyJustPressed(Key Key);// 0x38da730
	bool IsControllerKeyDown(Key Key);// 0x38da730
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x38da5b0
	Vector GetControllerVectorKeyState(Key Key);// 0x38da030
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x38d9f50
	float GetControllerKeyTimeDown(Key Key);// 0x38d9d20
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x38d9e20
	float GetControllerAnalogKeyState(Key Key);// 0x38d9d20

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x398d290
	void SetBind(FName BindName, FString Command);// 0x398cbf0
	void InvertAxisKey(const Key AxisKey);// 0x398ca50
	void InvertAxis(const FName AxisName);// 0x398c9c0
	void ClearSmoothing();// 0x398c4e0

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 1]
	Controller* LastHitBy;//[Offset: 0x250, Size: 1]
	Controller* Controller;//[Offset: 0x258, Size: 1]
	Vector ControlInputVector;//[Offset: 0x264, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 1]
	void SpawnDefaultController();// 0x19c0660
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x3978270
	void ReceiveUnpossessed(Controller* OldController);// 0x1d4eb70
	void ReceivePossessed(Controller* NewController);// 0x1d4eb70
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x3977710
	void OnRep_PlayerState();// 0xe85d10
	void OnRep_Controller();// 0x39776f0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x39774b0
	Vector K2_GetMovementInputVector();// 0x3977350
	bool IsPlayerControlled();// 0x38a2d60
	bool IsPawnControlled();// 0x3977480
	bool IsMoveInputIgnored();// 0x3977420
	bool IsLocallyControlled();// 0x39773f0
	bool IsControlled();// 0x39773c0
	bool IsBotControlled();// 0x38c5c20
	Vector GetPendingMovementInputVector();// 0x3977350
	Vector GetNavAgentLocation();// 0x3977290
	PawnMovementComponent* GetMovementComponent();// 0x38ab8c0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x3977200
	Vector GetLastMovementInputVector();// 0x39771c0
	Rotator GetControlRotation();// 0x3977090
	Controller* GetController();// 0x39770d0
	Rotator GetBaseAimRotation();// 0x3976eb0
	void DetachFromControllerPendingDestroy();// 0x3976e90
	Vector ConsumeMovementInputVector();// 0x3976e50
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x3976930
	void AddControllerYawInput(float Val);// 0x39767c0
	void AddControllerRollInput(float Val);// 0x3976730
	void AddControllerPitchInput(float Val);// 0x39766a0

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x248, Size: 1]
	Pawn* Pawn;//[Offset: 0x250, Size: 1]
	Character* Character;//[Offset: 0x260, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 1]
	Rotator ControlRotation;//[Offset: 0x288, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0x38a3360
	void StopMovement();// 0x38a3340
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x38a3250
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x38a31c0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x38a3130
	void SetControlRotation(out const Rotator NewRotation);// 0x38a30a0
	void ResetIgnoreMoveInput();// 0x38a3080
	void ResetIgnoreLookInput();// 0x19745d0
	void ResetIgnoreInputFlags();// 0x1927e60
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1d4eb70
	void ReceivePossess(Pawn* PossessedPawn);// 0x1d4eb70
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1d4eb70
	void Possess(Pawn* InPawn);// 0x38a2ff0
	void OnRep_PlayerState();// 0x1a066a0
	void OnRep_Pawn();// 0x38a2fd0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x38a2ea0
	Pawn* K2_GetPawn();// 0x38a2e70
	bool IsPlayerController();// 0x38a2e40
	bool IsMoveInputIgnored();// 0x38a2e10
	bool IsLookInputIgnored();// 0x38a2de0
	bool IsLocalPlayerController();// 0x38a2d90
	bool IsLocalController();// 0x38a2d60
	Actor* GetViewTarget();// 0x38a2d30
	Rotator GetDesiredRotation();// 0x38a2b30
	Rotator GetControlRotation();// 0x19c3630
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x38a2a00
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x38a28c0
	PlayerController* CastToPlayerController();// 0x38a2890

--------------------------------
Class: PlayerState.Info.Actor.Object
	float score;//[Offset: 0x220, Size: 1]
	int PlayerId;//[Offset: 0x224, Size: 1]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1d4eb70
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1d4eb70
	void OnRep_UniqueId();// 0xe85bd0
	void OnRep_Score();// 0x19c60b0
	void OnRep_PlayerName();// 0x196b270
	void OnRep_PlayerId();// 0x1981160
	void OnRep_bIsInactive();// 0x1981600
	bool IsOnlyASpectator();// 0x398cb30
	FString GetPlayerName();// 0x398c940

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x389a910
	void StopJumping();// 0x389a8f0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x389a860
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x389a490
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x389a320
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x389a080
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3899c80
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x38997f0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3899360
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3899020
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x3898f80
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x3898e60
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x3898cc0
	void OnRep_RootMotion();// 0x3898ca0
	void OnRep_ReplicatedBasedMovement();// 0x3898c80
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x3898c60
	void OnRep_IsCrouched();// 0x1920980
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1d4eb70
	void OnLanded(out const HitResult Hit);// 0x1d4eb70
	void OnJumped();// 0x3898c40
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3898b10
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1d4eb70
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1d4eb70
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1d4eb70
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1d4eb70
	void Jump();// 0x3898af0
	bool IsPlayingRootMotion();// 0x3898ac0
	bool IsPlayingNetworkedRootMotionMontage();// 0x3898a90
	bool IsJumpProvidingForce();// 0x3898a60
	bool HasAnyRootMotion();// 0x3898a30
	AnimMontage* GetCurrentMontage();// 0x38983a0
	Vector GetBaseTranslationOffset();// 0x3898370
	Rotator GetBaseRotationOffsetRotator();// 0x3898320
	float GetAnimRootMotionTranslationScale();// 0x38982f0
	void Crouch(bool bClientSimulation);// 0x3898260
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3897ee0
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x3897df0
	void ClientCheatWalk();// 0x3897dd0
	void ClientCheatGhost();// 0x3897db0
	void ClientCheatFly();// 0x3897d90
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x38978b0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3897580
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x38972f0
	void ClientAckGoodMove(float Timestamp);// 0x3897270
	bool CanJumpInternal();// 0x3897240
	bool CanJump();// 0x3897210
	bool CanCrouch();// 0x38971e0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x38970f0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 1]
	byte AnimationMode;//[Offset: 0x8b7, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 1]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x39ada80
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x39ad9f0
	void ToggleDisablePostProcessBlueprint();// 0x39ad9d0
	void TermBodiesBelow(FName ParentBoneName);// 0x39ad940
	void SuspendClothingSimulation();// 0x39ad920
	void Stop();// 0x39ad900
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x39ad830
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x1987390
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1987390
	void SetTeleportRotationThreshold(float Threshold);// 0x39ad7b0
	void SetTeleportDistanceThreshold(float Threshold);// 0x39ad730
	void SetPosition(float InPos, bool bFireNotifies);// 0x39ad650
	void SetPlayRate(float Rate);// 0x39ad5d0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x39ad550
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x39ad430
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x39ad310
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x39ad280
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x39ad170
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x39ad0a0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x39ad010
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x39acf80
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x39aceb0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x39acda0
	void SetClothMaxDistanceScale(float Scale);// 0x39acd20
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x39acc50
	void SetAnimClass(class Object NewClass);// 0x39acab0
	void SetAnimationMode(byte InAnimationMode);// 0x39acbd0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x39acb40
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x39ac950
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x39ac780
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x39ac850
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x39ac6f0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x39ac5c0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x39ac490
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x39ac320
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x39ac290
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x39ac1b0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x39ac080
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x39abf00
	void ResumeClothingSimulation();// 0x39abee0
	void ResetClothTeleportMode();// 0x39abec0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x39abe40
	void ResetAllowedAnimCurveEvaluation();// 0x39abe20
	void ResetAllBodiesSimulatePhysics();// 0x39abe00
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x39abd30
	void Play(bool bLooping);// 0x39abca0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);// 0x39abae0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x39aba10
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x39ab980
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x39ab780
	bool IsPlaying();// 0x39ab750
	bool IsClothingSimulationSuspended();// 0x39ab720
	bool IsBodyGravityEnabled(FName BoneName);// 0x39ab680
	bool HasValidAnimationInstance();// 0x39ab650
	float GetTeleportRotationThreshold();// 0x39ab620
	float GetTeleportDistanceThreshold();// 0x39ab620
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x39ab460
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x39ab230
	Vector GetSkeletalCenterOfMass();// 0x39ab1f0
	AnimInstance* GetPostProcessInstance();// 0x39ab1c0
	float GetPosition();// 0x39ab190
	float GetPlayRate();// 0x39ab160
	float GetMorphTarget(FName MorphTargetName);// 0x39ab0c0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x39ab020
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x39aaf80
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x39aae90
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x39aadf0
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x39aac50
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x39aaa60
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x39aa8b0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x39aa6c0
	bool GetDisablePostProcessBlueprint();// 0x39aa690
	bool GetDisableAnimCurves();// 0x39aa660
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x39aa4e0
	float GetClothMaxDistanceScale();// 0x39aa480
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x39aa4b0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x39aa3b0
	AnimInstance* GetAnimInstance();// 0x39aa350
	class Object GetAnimClass();// 0x39aa320
	byte GetAnimationMode();// 0x39aa380
	bool GetAllowRigidBodyAnimNode();// 0x39aa2c0
	bool GetAllowedAnimCurveEvaluate();// 0x39aa2f0
	void ForceClothNextUpdateTeleportAndReset();// 0x39aa2a0
	void ForceClothNextUpdateTeleport();// 0x39aa280
	FName FindConstraintBoneName(int ConstraintIndex);// 0x39aa1f0
	void ClearMorphTargets();// 0x39aa1d0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x39aa0a0
	void BindClothToMasterPoseComponent();// 0x39aa080
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x39a9fb0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x39a9e30
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x39a9cb0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x39a9b90

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x480, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x488, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x490, Size: 1]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x4a0, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a8, Size: 1]
	int ForcedLodModel;//[Offset: 0x5b0, Size: 1]
	int MinLodModel;//[Offset: 0x5b4, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x5c0, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5d0, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x604, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x606, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x606, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x606, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x606, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x606, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x607, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x607, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x607, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x607, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x607, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x607, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x607, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x607, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x608, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x608, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x608, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x609, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x609, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x60c, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x620, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x39b3430
	void UnHideBoneByName(FName BoneName);// 0x39b33a0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x39b31d0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x39b3000
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x39b2eb0
	void ShowAllMaterialSections(int LODIndex);// 0x39b2e20
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x39b2d50
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x39b2c60
	bool SetSkinWeightProfile(FName InProfileName);// 0x39b2bc0
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x39b2ad0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x39b2a00
	void SetRenderStatic(bool bNewValue);// 0x39b2970
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x39b2840
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x39b2710
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x39b2640
	void SetMinLOD(int InNewMinLOD);// 0x39b25b0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x39b24e0
	void SetForcedLOD(int InNewForcedLOD);// 0x39b2450
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x39b23c0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x39b2330
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x39b22b0
	bool IsUsingSkinWeightProfile();// 0x39b2280
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x39b21b0
	bool IsBoneHiddenByName(FName BoneName);// 0x39b2110
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x39b1f10
	int GetVertexOffsetUsage(int LODIndex);// 0x39b1e70
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x39b1d50
	FName GetSocketBoneName(FName InSocketName);// 0x39b1c10
	Vector GetRefPosePosition(int BoneIndex);// 0x39b1b60
	FName GetParentBone(FName BoneName);// 0x39b1ad0
	int GetNumLODs();// 0x39b1aa0
	int GetNumBones();// 0x39b1a70
	int GetForcedLOD();// 0x39b1a40
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x39b1940
	FName GetCurrentSkinWeightProfileName();// 0x39b1920
	FName GetBoneName(int BoneIndex);// 0x39b1890
	int GetBoneIndex(FName BoneName);// 0x39b17f0
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x39b1650
	void ClearVertexColorOverride(int LODIndex);// 0x39b15c0
	void ClearSkinWeightProfile();// 0x39b15a0
	void ClearSkinWeightOverride(int LODIndex);// 0x39b1510
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x39b1440

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x450, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x395f4c0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x395f360
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x395eea0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x395e800
	FName[] GetMaterialSlotNames();// 0x395e550
	MaterialInterface*[] GetMaterials();// 0x395e5d0
	int GetMaterialIndex(FName MaterialSlotName);// 0x395e4b0

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x386a110
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x386b7f0
	Pawn* TryGetPawnOwner();// 0x386b7c0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x386b6f0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x386b620
	void SetRootMotionMode(byte Value);// 0x385f820
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x386b590
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x386b500
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x386b430
	void SavePoseSnapshot(FName SnapshotName);// 0x386b3a0
	void ResetDynamics(enum InTeleportType);// 0x386b320
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x386b0c0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x386aef0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x386ae20
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x386ad50
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x386ac80
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x386abb0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x386aaa0
	void Montage_Resume(const AnimMontage* Montage);// 0x386aa10
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x386a860
	void Montage_Pause(const AnimMontage* Montage);// 0x386a7d0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x386a700
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x386a630
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x386a590
	bool Montage_IsActive(const AnimMontage* Montage);// 0x386a4f0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x386a450
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x386a3b0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x386a310
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x386a280
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x386a1e0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x386a110
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x386a040
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3869fb0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3869e50
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3869d80
	bool IsAnyMontagePlaying();// 0x3869d50
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3869c80
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3869b60
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3869ab0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x38699e0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3869910
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3869840
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3869770
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x38696a0
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3869670
	bool GetPropagateNotifiesToLinkedInstances();// 0x3869640
	SkeletalMeshComponent* GetOwningComponent();// 0x3869610
	Actor* GetOwningActor();// 0x38695e0
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x38694f0
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x3869420
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3869380
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x38692e0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x38691f0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3869150
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3869080
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3868fb0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3868ee0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3868e10
	float GetInstanceMachineWeight(int MachineIndex);// 0x3868d70
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3868cd0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3868c30
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3868b90
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3868af0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3868a50
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x38689b0
	float GetCurveValue(FName CurveName);// 0x3868910
	FName GetCurrentStateName(int MachineIndex);// 0x3868880
	AnimMontage* GetCurrentActiveMontage();// 0x3868850
	void GetAllCurveNames(out FName[] OutNames);// 0x38687a0
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x38686b0
	void ClearMorphTargets();// 0x3868690
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3868590
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1d4eb70
	void BlueprintPostEvaluateAnimation();// 0x1d4eb70
	void BlueprintLinkedAnimationLayersInitialized();// 0x1d4eb70
	void BlueprintInitializeAnimation();// 0x1d4eb70
	void BlueprintBeginPlay();// 0x1d4eb70

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x39b1fe0
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x39b1ca0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x3873c50

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1d4eb70
	FString GetNotifyName();// 0x310a2e0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1d4eb70
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1d4eb70
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1d4eb70
	FString GetNotifyName();// 0x310a2e0

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0x38712b0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x38a8730

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x38a2c50
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x38a2b70

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x395b450
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x395ae40
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x395ada0
	PhysicalMaterial* GetPhysicalMaterial();// 0x2fa8620
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x395ac80
	Material* GetBaseMaterial();// 0x395ac50

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	float StaticFriction;//[Offset: 0x2c, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float Restitution;//[Offset: 0x34, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float Density;//[Offset: 0x3c, Size: 1]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 1]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 1]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 1]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 1]
	byte SurfaceType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x209, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20a, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20a, Size: 1]
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20a, Size: 1]
	byte ShadingRate;//[Offset: 0x20b, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 1]
	byte BlendableLocation;//[Offset: 0x20e, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20f, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20f, Size: 1]
	byte StencilCompare;//[Offset: 0x210, Size: 1]
	byte StencilRefValue;//[Offset: 0x211, Size: 1]
	byte RefractionMode;//[Offset: 0x212, Size: 1]
	int BlendablePriority;//[Offset: 0x214, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x21c, Size: 1]
	float RefractionDepthBias;//[Offset: 0x220, Size: 1]
	Guid StateId;//[Offset: 0x224, Size: 1]
	float MaxDisplacement;//[Offset: 0x234, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x268, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0xf0, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x110, Size: 1]
	Font*[] FontValues;//[Offset: 0x120, Size: 1]
	int[] FontPageValues;//[Offset: 0x130, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 1]
	int LODBias;//[Offset: 0x78, Size: 1]
	byte CompressionSettings;//[Offset: 0x7c, Size: 1]
	byte Filter;//[Offset: 0x7d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 1]
	byte LODGroup;//[Offset: 0x7f, Size: 1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 1]
	enum DownscaleOptions;//[Offset: 0x84, Size: 1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 1]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 1]
	int StreamingIndex;//[Offset: 0x4c, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 1]
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	byte AddressX;//[Offset: 0x181, Size: 1]
	byte AddressY;//[Offset: 0x182, Size: 1]
	IntPoint ImportedSize;//[Offset: 0x184, Size: 1]
	int Blueprint_GetSizeY();// 0x39cf9c0
	int Blueprint_GetSizeX();// 0x39cf990

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 1]
	int TileSize;//[Offset: 0x2c, Size: 1]
	int TileBorderSize;//[Offset: 0x30, Size: 1]
	enum MaterialType;//[Offset: 0x34, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 1]
	byte LODGroup;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x44, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	int GetTileSize();// 0x399ba30
	int GetTileCount();// 0x399b9d0
	int GetTileBorderSize();// 0x399b990
	int GetSize();// 0x399b900
	int GetPageTableSize();// 0x399b8d0

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float PlacementJitter;//[Offset: 0x20, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 1]
	int MinLOD;//[Offset: 0x2c, Size: 1]
	enum Scaling;//[Offset: 0x30, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 1]
	float LightmapUVDensity;//[Offset: 0x98, Size: 1]
	int LightMapResolution;//[Offset: 0x9c, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 1]
	int LODForCollision;//[Offset: 0xb0, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 1]
	Object* EditableMesh;//[Offset: 0x140, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 1]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x39c9410
	void RemoveSocket(StaticMeshSocket* Socket);// 0x39c83b0
	StaticMaterial[] GetStaticMaterials();// 0x39c82d0
	int GetNumSections(int InLOD);// 0x39c80c0
	int GetNumLODs();// 0x39c8090
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x39c7f60
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x39c7ee0
	int GetMaterialIndex(FName MaterialSlotName);// 0x39c7e40
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x39c7da0
	BoxSphereBounds GetBounds();// 0x39c7bf0
	Box GetBoundingBox();// 0x39c7ba0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x39c7aa0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x39c7a10
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x39c7910
	void AddSocket(StaticMeshSocket* Socket);// 0x39c7880
	FName AddMaterial(MaterialInterface* Material);// 0x39c77f0

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 1]
	Vector BuildScale3D;//[Offset: 0x288, Size: 1]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 1]
	byte PhysicsType;//[Offset: 0x30, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 1]
	byte CollisionReponse;//[Offset: 0x32, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1e, Size: 1]
	byte CollisionEnabled;//[Offset: 0x20, Size: 1]
	enum SleepFamily;//[Offset: 0x59, Size: 1]
	byte DOFMode;//[Offset: 0x5a, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	FName CollisionProfileName;//[Offset: 0x6c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x74, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x75, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x78, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0xa8, Size: 1]
	float MassInKgOverride;//[Offset: 0xac, Size: 1]
	float LinearDamping;//[Offset: 0xb8, Size: 1]
	float AngularDamping;//[Offset: 0xbc, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0xc0, Size: 1]
	Vector COMNudge;//[Offset: 0xcc, Size: 1]
	float MassScale;//[Offset: 0xd8, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0xdc, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x108, Size: 1]
	float MaxAngularVelocity;//[Offset: 0x110, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0x114, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0x118, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x11c, Size: 1]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x30bcfa0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x30bcec0
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x30bcde0
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x30bcaa0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector position);// 0x30b4860
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x30b4740
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x30b4670
	void ReversePolygonFacing(PolygonID PolygonID);// 0x30b45f0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x30b4560
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x30b4320
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x30b44d0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x30b4440
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x30b43b0
	void ReserveNewEdges(int NumberOfNewEdges);// 0x30b4320
	bool IsVertexValid(VertexID VertexID);// 0x30b4290
	bool IsVertexOrphaned(VertexID VertexID);// 0x30b4200
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x30b4170
	bool IsTriangleValid(const TriangleID TriangleID);// 0x30b40e0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x30b4050
	bool IsPolygonValid(PolygonID PolygonID);// 0x30b3fc0
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x30b3f30
	bool IsEmpty();// 0x30b3f00
	bool IsEdgeValid(EdgeID EdgeID);// 0x30b3e70
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x30b3d90
	bool IsEdgeInternal(EdgeID EdgeID);// 0x30b3d00
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x30b3c10
	Vector GetVertexPosition(VertexID VertexID);// 0x30b3b70
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x30b3a90
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x30b39f0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x30b3910
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x30b3830
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x30b3750
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x30b3660
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x30b3570
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x30b3480
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x30b3390
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x30b32a0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x30b31b0
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x30b30c0
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x30b2fd0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x30b2ef0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x30b2e50
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x30b2db0
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x30b2cc0
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x30b2bd0
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x30b2ae0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x30b29f0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x30b2900
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x30b2860
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x30b2770
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x30b2680
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x30b2590
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x30b24a0
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x30b2410
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x30b2380
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x30b22f0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x30b2260
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x30b21d0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x30b2140
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x30b20b0
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x30b2020
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x30b1f90
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x30b1f00
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x30b1e70
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x30b1de0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x30b1cf0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x30b1c10
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x30b1b20
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x30b1a30
	void Empty();// 0x30b1a10
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x30b1920
	void DeleteVertex(VertexID VertexID);// 0x30b18a0
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x30b16e0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x30b1660
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x30b14a0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x30b13b0
	void CreateVertexWithID(VertexID VertexID);// 0x30b1330
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x30b1260
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x30b11c0
	VertexID CreateVertex();// 0x30b1180
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x30b0fd0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x30b0e60
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x30b0cb0
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x30b0c30
	PolygonGroupID CreatePolygonGroup();// 0x30b0bf0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x30b0a80
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x30b0960
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x30b0880
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x30b0800

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 1]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x39a7db0
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x39a7d00
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x39a7c50
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x1212240
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x39a7b40
	int NumSockets();// 0x39a7b10
	FString[] K2_GetAllMorphTargetNames();// 0x39a7a30
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x39a7960
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x39a78c0
	Skeleton* GetSkeleton();// 0x39a78a0
	PhysicsAsset* GetShadowPhysicsAsset();// 0x39a7880
	PhysicsAsset* GetPhysicsAsset();// 0x39a7860
	NodeMappingContainer*[] GetNodeMappingData();// 0x39a77d0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x39a7730
	MorphTarget*[] GetMorphTargets();// 0x39a7700
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x39a76d0
	SkeletalMaterial[] GetMaterials();// 0x39a76a0
	SkeletalMeshLODSettings* GetLODSettings();// 0x38f8320
	BoxSphereBounds GetImportedBounds();// 0x39a7650
	Object* GetDefaultAnimatingRig();// 0x39a75f0
	BoxSphereBounds GetBounds();// 0x39a75a0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x39a73d0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x39a72f0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x39a7250

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 1]
	enum Interpolation;//[Offset: 0x180, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 1]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 1]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 1]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	StringCurve StringCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 1]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	FString Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 1]
	int DefaultValue;//[Offset: 0x78, Size: 1]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x70, Size: 1]
	SimpleCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	enum SolverType;//[Offset: 0x7c, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 1]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 1]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 1]
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 1]
	float AngularBreakThreshold;//[Offset: 0x18, Size: 1]
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x114, Size: 1]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 1]
	int SolverIterations;//[Offset: 0x4, Size: 1]
	int JointIterations;//[Offset: 0x8, Size: 1]
	int CollisionIterations;//[Offset: 0xc, Size: 1]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 1]
	int JointPushOutIterations;//[Offset: 0x14, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 1]
	FName VariableName;//[Offset: 0x94, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x38a8940

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x38a88a0
	LinearColor GetLinearColorValue(float InTime);// 0x38a87d0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x38a7e90

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 1]
	void SetNumSubsteps(int NumSubsteps);// 0x30e6870
	void SetNumIterations(int NumIterations);// 0x30e67e0
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x30e6750
	void PhysicsAssetUpdated();// 0x18f6930
	float GetSimulationTime();// 0x30e6730
	int GetNumSubsteps();// 0x30e6710
	int GetNumKinematicParticles();// 0x30e66f0
	int GetNumIterations();// 0x30e66d0
	int GetNumDynamicParticles();// 0x30e66b0
	int GetNumCloths();// 0x30e6690
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x30e65e0
	void EnableGravityOverride(out const Vector InVector);// 0x30e6550
	void DisableGravityOverride();// 0x2a58630
	void ClothConfigUpdated();// 0xd8db80

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 1]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 1]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 1]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 1]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x389c750
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x389c6d0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x389c600
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x14279b0
	void SetGroupsToIgnore(int GroupFlags);// 0x1427920
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1427890
	void SetGroupsToAvoid(int GroupFlags);// 0x1427800
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1427430
	void SetAvoidanceGroup(int GroupFlags);// 0x14273a0
	void SetAvoidanceEnabled(bool bEnable);// 0x389c570
	float K2_GetWalkableFloorZ();// 0x389c540
	float K2_GetWalkableFloorAngle();// 0x389c510
	float K2_GetModifiedMaxAcceleration();// 0x389c4d0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x389c380
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x389c160
	bool IsWalking();// 0x389c130
	bool IsWalkable(out const HitResult Hit);// 0x389c040
	float GetValidPerchRadius();// 0x389c010
	float GetPerchRadiusThreshold();// 0x389bfe0
	PrimitiveComponent* GetMovementBase();// 0x389bfb0
	float GetMinAnalogSpeed();// 0x389bf70
	float GetMaxJumpHeightWithJumpTime();// 0x389bf30
	float GetMaxJumpHeight();// 0x389bef0
	float GetMaxBrakingDeceleration();// 0x389beb0
	float GetMaxAcceleration();// 0x389be70
	Vector GetLastUpdateVelocity();// 0x389be40
	Rotator GetLastUpdateRotation();// 0x389bdf0
	Vector GetLastUpdateLocation();// 0x389bdc0
	Vector GetImpartedMovementBaseVelocity();// 0x389bd80
	Vector GetCurrentAcceleration();// 0x389bd40
	Character* GetCharacterOwner();// 0x389bd20
	float GetAnalogInputModifier();// 0x389bcf0
	void DisableMovement();// 0x389bcd0
	void ClearAccumulatedForces();// 0x192afb0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x389bab0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x389b940
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x389b860
	void AddForce(Vector Force);// 0x389b7d0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x3977310
	bool IsMoveInputIgnored();// 0x3977450
	Vector GetPendingInputVector();// 0x3977310
	Pawn* GetPawnOwner();// 0x39772e0
	Vector GetLastInputVector();// 0x3977180
	Vector ConsumeInputVector();// 0x3976e10
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3976850

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x3962080
	void StopActiveMovement();// 0x19ce150
	bool IsSwimming();// 0x3962050
	bool IsMovingOnGround();// 0x389c130
	bool IsFlying();// 0x3962020
	bool IsFalling();// 0x387c7c0
	bool IsCrouching();// 0x3961ff0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x395f5c0
	void SnapUpdatedComponentToPlane();// 0x395f5a0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x395f430
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x395f2d0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x395f240
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x395f150
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x395f0c0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x395f040
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x395ee10
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x395e920
	float K2_GetModifiedMaxSpeed();// 0x395e8e0
	float K2_GetMaxSpeedModifier();// 0x395e8a0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x395e760
	Vector GetPlaneConstraintOrigin();// 0x395e720
	Vector GetPlaneConstraintNormal();// 0x395e6e0
	enum GetPlaneConstraintAxisSetting();// 0x395e6c0
	PhysicsVolume* GetPhysicsVolume();// 0x395e690
	float GetMaxSpeed();// 0x395e650
	float GetGravityZ();// 0x395e470
	Vector ConstrainNormalToPlane(Vector Normal);// 0x395e3c0
	Vector ConstrainLocationToPlane(Vector Location);// 0x395e310
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x395e260

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 1]
	int Priority;//[Offset: 0x25c, Size: 1]
	float FluidFriction;//[Offset: 0x260, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 1]
	int PolyFlags;//[Offset: 0x228, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x450, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x458, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 1]
	float PenetrationDepth;//[Offset: 0x54, Size: 1]
	int Item;//[Offset: 0x58, Size: 1]
	byte ElementIndex;//[Offset: 0x5c, Size: 1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x468, Size: 1]
	float CapsuleRadius;//[Offset: 0x46c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x389a740
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x389a660
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x389a580
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3898940
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3898850
	float GetUnscaledCapsuleRadius();// 0x3898830
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3898800
	float GetUnscaledCapsuleHalfHeight();// 0x38987e0
	float GetShapeScale();// 0x38986c0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x38985a0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3898490
	float GetScaledCapsuleRadius();// 0x3898450
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3898400
	float GetScaledCapsuleHalfHeight();// 0x38983d0

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x450, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x458, Size: 1]
	Color ShapeColor;//[Offset: 0x460, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 1]
	HUD* MyHUD;//[Offset: 0x2b0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 1]
	int ClientCap;//[Offset: 0x330, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3d4, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x418, Size: 1]
	float InputYawScale;//[Offset: 0x42c, Size: 1]
	float InputPitchScale;//[Offset: 0x430, Size: 1]
	float InputRollScale;//[Offset: 0x434, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x454, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	Vector SpawnLocation;//[Offset: 0x558, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x39884f0
	bool WasInputKeyJustPressed(Key Key);// 0x3988400
	void ToggleSpeaking(bool bInSpeaking);// 0x3988370
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x39882a0
	void SwitchLevel(FString URL);// 0x3988200
	void StopHapticEffect(enum Hand);// 0x3988160
	void StartFire(byte FireModeNum);// 0x3987b50
	void SetVirtualJoystickVisibility(bool bVisible);// 0x3987560
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x39873c0
	void SetName(FString S);// 0x3987320
	void SetMouseLocation(const int X, const int Y);// 0x3987250
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x3987180
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x3986f40
	void SetDisableHaptics(bool bNewDisabled);// 0x3986e90
	void SetControllerLightColor(Color Color);// 0x3986e10
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3986c30
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x3986b00
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x3986a20
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x3986930
	void ServerViewPrevPlayer();// 0x39868e0
	void ServerViewNextPlayer();// 0x3986890
	void ServerVerifyViewTarget();// 0x3986840
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x3986780
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x39866c0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x3986590
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3986430
	void ServerToggleAILogging();// 0x39863e0
	void ServerShortTimeout();// 0x3986390
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x39862d0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x3986190
	void ServerRestartPlayer();// 0x3986140
	void ServerPause();// 0x39860f0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x3986030
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x3985ed0
	void ServerExecRPC(FString Msg);// 0x3985e10
	void ServerExec(FString Msg);// 0x3985d70
	void ServerCheckClientPossessionReliable();// 0x3985d20
	void ServerCheckClientPossession();// 0x3985cd0
	void ServerChangeName(FString S);// 0x3985c10
	void ServerCamera(FName NewMode);// 0x3985b50
	void ServerAcknowledgePossession(Pawn* P);// 0x3985a90
	void SendToConsole(FString Command);// 0x39859f0
	void RestartLevel();// 0x39859d0
	void ResetControllerLightColor();// 0x39859b0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x39857d0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x3985670
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x39853c0
	void Pause();// 0x3984f00
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x3984e70
	void LocalTravel(FString URL);// 0x3984dd0
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x3984c10
	bool IsInputKeyDown(Key Key);// 0x3984b20
	void GetViewportSize(out int SizeX, out int SizeY);// 0x3984a40
	SpectatorPawn* GetSpectatorPawn();// 0x3984a20
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x3984900
	Vector GetInputVectorKeyState(Key Key);// 0x39847f0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3984660
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x3984580
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x39843f0
	float GetInputKeyTimeDown(Key Key);// 0x39842f0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x39841c0
	float GetInputAnalogKeyState(Key Key);// 0x39840c0
	HUD* GetHUD();// 0x39836b0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3983ef0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3983d40
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3983b90
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3983a00
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3983870
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x39836e0
	Vector GetFocalLocation();// 0x3983670
	void FOV(float NewFOV);// 0x39834c0
	void EnableCheats();// 0x39834a0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x3983310
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x3983210
	void ConsoleKey(Key Key);// 0x3983120
	void ClientWasKicked(const FText KickReason);// 0x3983060
	void ClientVoiceHandshakeComplete();// 0x3983040
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x3982fa0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x3982de0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3982cc0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3982b40
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x39829c0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x3982850
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x3982780
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x39826b0
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x39825e0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3982550
	void ClientStartOnlineSession();// 0x3982530
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x3982460
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x39822f0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x2fb0af0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x39821f0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x3982160
	void ClientSetHUD(class HUD NewHUDClass);// 0x39820d0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x3981fc0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x3981e40
	void ClientSetCameraMode(FName NewCamMode);// 0x3981db0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x3981ba0
	void ClientSetBlockOnAsyncLoading();// 0x3981b80
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x3981ac0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x3981a20
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xf53c70
	void ClientRestart(Pawn* NewPawn);// 0x3981990
	void ClientReset();// 0x3981970
	void ClientRepObjRef(Object* Object);// 0x39818e0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x3981740
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x39815e0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x39814c0
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x3981350
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x3981240
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x3981150
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x3980e80
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x3980d60
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x3980c30
	void ClientIgnoreMoveInput(bool bIgnore);// 0x3980ba0
	void ClientIgnoreLookInput(bool bIgnore);// 0x3980b10
	void ClientGotoState(FName NewState);// 0x3980a80
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x39809b0
	void ClientForceGarbageCollection();// 0x3980990
	void ClientFlushLevelStreaming();// 0x3980970
	void ClientEndOnlineSession();// 0x3980950
	void ClientEnableNetworkVoice(bool bEnable);// 0x39808c0
	void ClientCommitMapChange();// 0x39808a0
	void ClientClearCameraLensEffects();// 0x1a012e0
	void ClientCapBandwidth(int Cap);// 0x3980810
	void ClientCancelPendingMapChange();// 0x190f740
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x39806e0
	void ClearAudioListenerOverride();// 0x39806c0
	void ClearAudioListenerAttenuationOverride();// 0x39806a0
	bool CanRestartPlayer();// 0x3980670
	void Camera(FName NewMode);// 0x39805e0
	void AddYawInput(float Val);// 0x3980550
	void AddRollInput(float Val);// 0x39804c0
	void AddPitchInput(float Val);// 0x3980430
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x3980260

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 1]
	Canvas* Canvas;//[Offset: 0x270, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 1]
	void ShowHUD();// 0x19c60b0
	void ShowDebugToggleSubCategory(FName Category);// 0x38d55b0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x38d5520
	void ShowDebug(FName DebugType);// 0x38d5490
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x38d5270
	void RemoveAllDebugStrings();// 0x38d5250
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1d4eb70
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1d4eb70
	void ReceiveHitBoxClick(const FName BoxName);// 0x1d4eb70
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1d4eb70
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1d4eb70
	Vector Project(Vector Location);// 0x38d4da0
	void PreviousDebugTarget();// 0x38d4d80
	void NextDebugTarget();// 0x1a066c0
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x38d4260
	PlayerController* GetOwningPlayerController();// 0xdc12d0
	Pawn* GetOwningPawn();// 0x38d4230
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x38d4010
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x38d3e60
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x38d3a00
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x38d37c0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x38d3600
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x38d3310
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x38d30f0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x38d2d20
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x38d2b20
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x38d29a0
	void AddHitBox(Vector2D position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x38d2680
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x38d22c0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x38936c0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x38935d0
	Vector K2_Project(Vector WorldLocation);// 0x3893520
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x38933f0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x3893140
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x3892d80
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x3892bd0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x3892aa0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x3892860
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x3892700
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x38925a0
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x3892110
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x3891ff0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 1]
	float DefaultFOV;//[Offset: 0x238, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x14a0, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ae0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20e0, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x26e0, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26f0, Size: 1]
	float FreeCamDistance;//[Offset: 0x2700, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x2704, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x2710, Size: 1]
	MulticastInlineDelegateProperty OnAudioFadeChangeEvent;//[Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2740, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2750, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2758, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2798, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x27b8, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27c8, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x27d8, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e0, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e0, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e0, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e0, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e1, Size: 1]
	float ViewPitchMin;//[Offset: 0x27e4, Size: 1]
	float ViewPitchMax;//[Offset: 0x27e8, Size: 1]
	float ViewYawMin;//[Offset: 0x27ec, Size: 1]
	float ViewYawMax;//[Offset: 0x27f0, Size: 1]
	float ViewRollMin;//[Offset: 0x27f4, Size: 1]
	float ViewRollMax;//[Offset: 0x27f8, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2800, Size: 1]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x39881e0
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x192b780
	void StopCameraFade();// 0x3988140
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3988070
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3987f60
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3987e90
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3987dc0
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3987cf0
	void StopAllCameraShakes(bool bImmediately);// 0x3987c60
	void StopAllCameraAnims(bool bImmediate);// 0x3987bd0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3987960
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x39877e0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x39875f0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3987050
	void SetGameCameraCutThisFrame();// 0x3986f20
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3985910
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x192a840
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x39850b0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3984f20
	void OnPhotographySessionStart();// 0x1981160
	void OnPhotographySessionEnd();// 0x1981600
	void OnPhotographyMultiPartCaptureStart();// 0x196b270
	void OnPhotographyMultiPartCaptureEnd();// 0x19c60b0
	PlayerController* GetOwningPlayerController();// 0x39849f0
	float GetFOVAngle();// 0x389bf30
	Rotator GetCameraRotation();// 0x3983630
	Vector GetCameraLocation();// 0x39835f0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3983550
	void ClearCameraLensEffects();// 0x1920980
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x1d4eb70
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3980390
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x39802f0

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ShakeScale;//[Offset: 0x2c, Size: 1]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 1]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 1]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x3893d30
	CameraShakePattern* GetRootShakePattern();// 0x2a81830

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	enum PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x3894070
	void SetScale(float NewDuration);// 0x3893dc0
	void SetDuration(float NewDuration);// 0x3893a30

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	byte TemperatureType;//[Offset: 0x23, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 1]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 1]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 1]
	Vector4 ColorGain;//[Offset: 0x60, Size: 1]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 1]
	float BlueCorrection;//[Offset: 0x178, Size: 1]
	float ExpandGamut;//[Offset: 0x17c, Size: 1]
	float ToneCurveAmount;//[Offset: 0x180, Size: 1]
	float FilmSlope;//[Offset: 0x184, Size: 1]
	float FilmToe;//[Offset: 0x188, Size: 1]
	float FilmShoulder;//[Offset: 0x18c, Size: 1]
	float FilmBlackClip;//[Offset: 0x190, Size: 1]
	float FilmWhiteClip;//[Offset: 0x194, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 1]
	float FilmSaturation;//[Offset: 0x1c0, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 1]
	float FilmContrast;//[Offset: 0x1f4, Size: 1]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 1]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 1]
	float FilmDynamicRange;//[Offset: 0x200, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 1]
	float BloomIntensity;//[Offset: 0x21c, Size: 1]
	float BloomThreshold;//[Offset: 0x220, Size: 1]
	float BloomSizeScale;//[Offset: 0x224, Size: 1]
	float Bloom1Size;//[Offset: 0x228, Size: 1]
	float Bloom2Size;//[Offset: 0x22c, Size: 1]
	float Bloom3Size;//[Offset: 0x230, Size: 1]
	float Bloom4Size;//[Offset: 0x234, Size: 1]
	float Bloom5Size;//[Offset: 0x238, Size: 1]
	float Bloom6Size;//[Offset: 0x23c, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 1]
	float CameraISO;//[Offset: 0x304, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 1]
	float AutoExposureBias;//[Offset: 0x314, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x328, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x330, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x338, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x33c, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x340, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x344, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x348, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x34c, Size: 1]
	float HistogramLogMin;//[Offset: 0x350, Size: 1]
	float HistogramLogMax;//[Offset: 0x354, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x358, Size: 1]
	float LensFlareIntensity;//[Offset: 0x35c, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x360, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x370, Size: 1]
	float LensFlareThreshold;//[Offset: 0x374, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x378, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x380, Size: 8]
	float VignetteIntensity;//[Offset: 0x400, Size: 1]
	float GrainJitter;//[Offset: 0x404, Size: 1]
	float GrainIntensity;//[Offset: 0x408, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x40c, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x410, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x414, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x41c, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x420, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x424, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x428, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x42c, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x430, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x434, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x438, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x43c, Size: 1]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x440, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x448, Size: 1]
	float RayTracingAOIntensity;//[Offset: 0x44c, Size: 1]
	float RayTracingAORadius;//[Offset: 0x450, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x454, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x464, Size: 1]
	enum RayTracingGIType;//[Offset: 0x468, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x46c, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x470, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 1]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 1]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 1]
	float LPVIntensity;//[Offset: 0x4c4, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 1]
	float LPVSize;//[Offset: 0x4cc, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 1]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 1]
	enum TranslucencyType;//[Offset: 0x516, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 1]
	float PathTracingFilterWidth;//[Offset: 0x530, Size: 1]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 1]
	float PathTracingMaxPathExposure;//[Offset: 0x538, Size: 1]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 1]
	float LPVFadeRange;//[Offset: 0x540, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x544, Size: 1]
	float ScreenPercentage;//[Offset: 0x548, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x550, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f8, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x1fc, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x200, Size: 1]
	class CameraShakeBase* CameraShake;//[Offset: 0x208, Size: 1]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x3894190
	void StopAllCameraShakes(bool bImmediately);// 0x3894100
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3893ef0
	void Start();// 0x3893ed0
	float GetAttenuationFactor(out const Vector Location);// 0x3891da0

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0x2a78a50
	Actor* GetViewTarget();// 0x2fa8620
	void EnableModifier();// 0x3891d80
	void DisableModifier(bool bImmediate);// 0x3891cf0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x1d4eb70
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x1d4eb70

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x38b0770
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x38b0690
	void SetTemplate(ParticleSystem* NewTemplate);// 0x1a06980
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x38b05c0
	void SetFloatParameter(FName ParameterName, float Param);// 0x38b04f0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x38b0420
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x38b0350
	void OnRep_bCurrentlyActive();// 0x196b270
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x38b02c0
	bool IsActive();// 0x38b0290
	void Deactivate();// 0x38b0270
	void Activate();// 0x38b0250

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x450, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x458, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x468, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x479, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47a, Size: 1]
	byte LODMethod;//[Offset: 0x485, Size: 1]
	enum RequiredSignificance;//[Offset: 0x486, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x488, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	Vector OldPosition;//[Offset: 0x4dc, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x4e8, Size: 1]
	float WarmupTime;//[Offset: 0x4f4, Size: 1]
	float WarmupTickRate;//[Offset: 0x4f8, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x500, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x508, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x528, Size: 1]
	float CustomTimeDilation;//[Offset: 0x540, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x598, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x5a0, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x5a8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x5a9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x5aa, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x39735b0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3973520
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3973450
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3972f00
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3972df0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3972cd0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3972bb0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3972aa0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3972980
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x39728a0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x39725d0
	int GetNumActiveParticles();// 0x39724b0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3972410
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x39722c0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x39721a0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3972080
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3971f60
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3971e40
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3971d20
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3971c30
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3971a70
	void EndTrails();// 0x3971a50
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3971980
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3971780

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x39737a0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3973710
	void SetIntParameter(FName ParameterName, int Param);// 0x3973380
	void SetFloatParameter(FName ParameterName, float Param);// 0x39732a0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x39731d0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x39730f0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3973020
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3972700
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3972500
	void ReleaseToPool();// 0x39724e0
	FXSystemAsset* GetFXSystemAsset();// 0x39723e0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x39718e0

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x395bb40
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x395ba70
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x395b980
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x395b8b0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x395b7c0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x395b6f0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x395b330
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x395b280
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x395b1e0
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x395b130
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x395b090
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x395afe0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x395af40
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x395ae70
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x395aa90
	void CopyInterpParameters(MaterialInstance* Source);// 0x395aa00

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	byte ProjectionMode;//[Offset: 0x34, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x600, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 1]
	float FOVAngle;//[Offset: 0x248, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x3891e40

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f8, Size: 1]
	float OrthoWidth;//[Offset: 0x1fc, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x200, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x204, Size: 1]
	float AspectRatio;//[Offset: 0x208, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	byte ProjectionMode;//[Offset: 0x20d, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3893e40
	void SetProjectionMode(byte InProjectionMode);// 0x3893cb0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3893c30
	void SetOrthoWidth(float InOrthoWidth);// 0x3893bb0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3893b30
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x3893ab0
	void SetFieldOfView(float InFieldOfView);// 0x3031b30
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x38939a0
	void SetAspectRatio(float InAspectRatio);// 0x3893920
	void RemoveBlendable(interface classNone InBlendableObject);// 0x38937f0
	void OnCameraMeshHiddenChanged();// 0xd8dcf0
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3891e70
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3891ba0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 1]
	void Walk();// 0x2a58630
	void ViewSelf();// 0x38a0c60
	void ViewPlayer(FString S);// 0x38a0bc0
	void ViewClass(class Actor DesiredClass);// 0x38a0b30
	void ViewActor(FName ActorName);// 0x38a0aa0
	void UpdateSafeArea();// 0x38a0a80
	void ToggleServerStatReplicatorUpdateStatNet();// 0x38a0a60
	void ToggleServerStatReplicatorClientOverwrite();// 0x38a0a40
	void ToggleDebugCamera();// 0x38a0a20
	void ToggleAILogging();// 0x38a0a00
	void TestCollisionDistance();// 0x38a09e0
	void Teleport();// 0xd8db80
	void Summon(FString ClassName);// 0x38a0940
	void StreamLevelOut(FName PackageName);// 0x190a140
	void StreamLevelIn(FName PackageName);// 0x38a08b0
	void SpawnServerStatReplicator();// 0x38a0890
	void Slomo(float NewTimeDilation);// 0x38a0800
	void SetWorldOrigin();// 0x38a07e0
	void SetMouseSensitivityToDefault();// 0x38a07c0
	void ServerToggleAILogging();// 0x38a06e0
	void ReceiveInitCheatManager();// 0x1d4eb70
	void ReceiveEndPlay();// 0x1d4eb70
	void PlayersOnly();// 0x38a06c0
	void OnlyLoadLevel(FName PackageName);// 0x38a0630
	void LogLoc();// 0x38a0610
	void InvertMouse();// 0x38a05f0
	void God();// 0x3891d80
	void Ghost();// 0x38a05d0
	void FreezeFrame(float Delay);// 0x38a0540
	void Fly();// 0x38a0520
	void FlushLog();// 0x38a0500
	void EnableDebugCamera();// 0x1a13110
	void DumpVoiceMutingState();// 0x38a04e0
	void DumpPartyState();// 0x38a04c0
	void DumpOnlineSessionState();// 0x38a04a0
	void DumpChatState();// 0x38a0480
	void DisableDebugCamera();// 0x38a0460
	void DestroyTarget();// 0x38a0440
	void DestroyServerStatReplicator();// 0x38a0420
	void DestroyPawns(class Pawn aClass);// 0x2fa4910
	void DestroyAllPawnsExceptTarget();// 0x38a0400
	void DestroyAll(class Actor aClass);// 0x38a0370
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x38a02a0
	void DebugCapsuleSweepPawn();// 0x38a0280
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x38a01f0
	void DebugCapsuleSweepClear();// 0x38a01d0
	void DebugCapsuleSweepChannel(byte Channel);// 0x38a0150
	void DebugCapsuleSweepCapture();// 0x38a0130
	void DebugCapsuleSweep();// 0x38a0110
	void DamageTarget(float DamageAmount);// 0x38a0080
	void CheatScript(FString ScriptName);// 0x389ff90
	void ChangeSize(float F);// 0x30e6750
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x389fdd0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x389fbe0
	void BugIt(FString ScreenShotDescription);// 0x389fb40

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x570, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x570, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x570, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x570, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x570, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x578, Size: 1]
	Actor* SelectedActor;//[Offset: 0x580, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x588, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x590, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x618, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x620, Size: 1]
	float SpeedScale;//[Offset: 0x628, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x62c, Size: 1]
	float InitialAccel;//[Offset: 0x630, Size: 1]
	float InitialDecel;//[Offset: 0x634, Size: 1]
	void ToggleDisplay();// 0x38a8a60
	void ShowDebugSelectedInfo();// 0x191cb10
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x38a89e0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1d4eb70
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x1d4eb70
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1d4eb70
	Actor* GetSelectedActor();// 0x38a8870

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x450, Size: 1]
	float FrustumAngle;//[Offset: 0x454, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x458, Size: 1]
	float FrustumStartDist;//[Offset: 0x45c, Size: 1]
	float FrustumEndDist;//[Offset: 0x460, Size: 1]
	Texture* Texture;//[Offset: 0x468, Size: 1]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChanged;//[Size: 1]
	Margin Padding;//[Offset: 0x190, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 1]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 1]
	int Priority;//[Offset: 0x1e0, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 1]
	void UnregisterInputComponent();// 0x2fa63f0
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x2fa6310
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x2fa6230
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x2fa61a0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x2fa6110
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1d4eb70
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x2fa6040
	void StopListeningForAllInputActions();// 0x2fa6020
	void StopAnimationsAndLatentActions();// 0x2fa6000
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x2fa5f70
	void StopAllAnimations();// 0x2fa5f50
	void SetPositionInViewport(Vector2D position, bool bRemoveDPIScale);// 0x2fa5c50
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x2fa5b80
	void SetPadding(Margin InPadding);// 0x2fa5af0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x2fa5a60
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x2fa5990
	void SetInputActionPriority(int NewPriority);// 0x2fa5730
	void SetInputActionBlocking(bool bShouldBlock);// 0x2fa56a0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x2fa5530
	void SetDesiredSizeInViewport(Vector2D Size);// 0x2fa54b0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2fa5390
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x2fa52c0
	void SetAnchorsInViewport(Anchors Anchors);// 0x2fa5230
	void SetAlignmentInViewport(Vector2D Alignment);// 0x2fa51b0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x2fa5120
	void RemoveFromViewport();// 0x18ec320
	void RegisterInputComponent();// 0x2fa5100
	void PreConstruct(bool IsDesignTime);// 0x1d4eb70
	void PlaySound(SoundBase* SoundToPlay);// 0x2fa5070
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x2fa4e50
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x2fa4d30
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x2fa4c10
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x2fa4a40
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x2fa49a0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1d4eb70
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1d4eb70
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1d4eb70
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1d4eb70
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1d4eb70
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1d4eb70
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1d4eb70
	void OnPaint(out PaintContext Context);// 0x1d4eb70
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1d4eb70
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	void OnMouseCaptureLost();// 0x1d4eb70
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1d4eb70
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1d4eb70
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1d4eb70
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1d4eb70
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1d4eb70
	void OnInitialized();// 0x1d4eb70
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1d4eb70
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1d4eb70
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1d4eb70
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1d4eb70
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1d4eb70
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1d4eb70
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1d4eb70
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1d4eb70
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x2fa4910
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x2fa4880
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1d4eb70
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1d4eb70
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x2fa46f0
	bool IsPlayingAnimation();// 0x2fa46c0
	bool IsListeningForInputAction(FName ActionName);// 0x2fa4620
	bool IsInViewport();// 0x2fa4400
	bool IsInteractable();// 0x1d4eb70
	bool IsAnyAnimationPlaying();// 0x2fa45f0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x2fa4550
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x2fa44b0
	Pawn* GetOwningPlayerPawn();// 0x2fa4460
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x2fa4430
	bool GetIsVisible();// 0x2fa4400
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x2fa4360
	Anchors GetAnchorsInViewport();// 0x2fa4320
	Vector2D GetAlignmentInViewport();// 0x2fa42e0
	void FlushAnimations();// 0x2fa42c0
	void Destruct();// 0x1d4eb70
	void Construct();// 0x1d4eb70
	void CancelLatentActions();// 0x2fa4260
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x2fa4180
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x2fa40a0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x2fa3f20
	void AddToViewport(int ZOrder);// 0x2fa3e90
	bool AddToPlayerScreen(int ZOrder);// 0x2fa3df0

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte Cursor;//[Offset: 0xc1, Size: 1]
	enum Clipping;//[Offset: 0xc2, Size: 1]
	enum Visibility;//[Offset: 0xc3, Size: 1]
	float RenderOpacity;//[Offset: 0xc4, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 1]
	void SetVisibility(enum InVisibility);// 0x2fa9c70
	void SetUserFocus(PlayerController* PlayerController);// 0x2fa9a40
	void SetToolTipText(out const FText InToolTipText);// 0x2fa9970
	void SetToolTip(Widget* Widget);// 0x2fa98e0
	void SetRenderTranslation(Vector2D Translation);// 0x2fa97d0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x2fa9750
	void SetRenderTransformAngle(float Angle);// 0x2fa96d0
	void SetRenderTransform(WidgetTransform InTransform);// 0x2fa95f0
	void SetRenderShear(Vector2D Shear);// 0x2fa9570
	void SetRenderScale(Vector2D Scale);// 0x2fa94f0
	void SetRenderOpacity(float InOpacity);// 0x2fa9470
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x2fa9310
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x2fa9220
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x2fa9130
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x2fa9060
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x2fa8f50
	void SetKeyboardFocus();// 0x2fa8f30
	void SetIsEnabled(bool bInIsEnabled);// 0x2fa8ea0
	void SetFocus();// 0x2fa8e00
	void SetCursor(byte InCursor);// 0x2fa8d80
	void SetClipping(enum InClipping);// 0x2fa8d00
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x2fa8c30
	void ResetCursor();// 0x2fa8c10
	void RemoveFromParent();// 0x2fa8bf0
	EventReply OnReply__DelegateSignature();// 0x1d4eb70
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1d4eb70
	bool IsVisible();// 0x2fa8bc0
	bool IsHovered();// 0x2a587e0
	void InvalidateLayoutAndVolatility();// 0x2fa8ba0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x2fa8b00
	bool HasUserFocus(PlayerController* PlayerController);// 0x2fa8a60
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x2fa8990
	bool HasMouseCapture();// 0x2fa8960
	bool HasKeyboardFocus();// 0x2fa8930
	bool HasFocusedDescendants();// 0x2fa8900
	bool HasAnyUserFocus();// 0x2fa88d0
	Widget* GetWidget__DelegateSignature();// 0x1d4eb70
	enum GetVisibility();// 0x2fa88a0
	Geometry GetTickSpaceGeometry();// 0x2fa8780
	FText GetText__DelegateSignature();// 0x1d4eb70
	enum GetSlateVisibility__DelegateSignature();// 0x1d4eb70
	SlateColor GetSlateColor__DelegateSignature();// 0x1d4eb70
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1d4eb70
	float GetRenderTransformAngle();// 0x2fa8720
	float GetRenderOpacity();// 0x2fa86f0
	PanelWidget* GetParent();// 0x2fa86c0
	Geometry GetPaintSpaceGeometry();// 0x2fa8680
	PlayerController* GetOwningPlayer();// 0x2fa8650
	LocalPlayer* GetOwningLocalPlayer();// 0x2fa8620
	byte GetMouseCursor__DelegateSignature();// 0x1d4eb70
	LinearColor GetLinearColor__DelegateSignature();// 0x1d4eb70
	bool GetIsEnabled();// 0x2fa85f0
	int GetInt32__DelegateSignature();// 0x1d4eb70
	GameInstance* GetGameInstance();// 0x2fa85c0
	float GetFloat__DelegateSignature();// 0x1d4eb70
	Vector2D GetDesiredSize();// 0x2fa8550
	enum GetClipping();// 0x2fa8520
	enum GetCheckBoxState__DelegateSignature();// 0x1d4eb70
	Geometry GetCachedGeometry();// 0x2fa84e0
	bool GetBool__DelegateSignature();// 0x1d4eb70
	FText GetAccessibleText();// 0x2fa8440
	FText GetAccessibleSummaryText();// 0x2fa83a0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1d4eb70
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1d4eb70
	void ForceVolatile(bool bForce);// 0x2fa8310
	void ForceLayoutPrepass();// 0x2fa82f0

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 1]
	bool RemoveChildAt(int Index);// 0x2f95550
	bool RemoveChild(Widget* Content);// 0x2f954b0
	bool HasChild(Widget* Content);// 0x2f95320
	bool HasAnyChildren();// 0x2f952f0
	int GetChildrenCount();// 0x2f94fa0
	int GetChildIndex(const Widget* Content);// 0x2f94f00
	Widget* GetChildAt(int Index);// 0x2f94e60
	Widget*[] GetAllChildren();// 0x2f94de0
	void ClearChildren();// 0x2f94d10
	PanelSlot* AddChild(Widget* Content);// 0x2f94bd0

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString DisplayLabel;//[Offset: 0x80, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2fa9f90
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2fa9eb0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x2fa9e20
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x2fa9d90
	float GetStartTime();// 0x2fa8750
	float GetEndTime();// 0x2fa8590
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2fa8210
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2fa8130

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x2d8e450
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x2d8e3a0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 1]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 1]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 1]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 1]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 1]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 1]
	FName EvaluationGroup;//[Offset: 0x68, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 1]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 1]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 1]
	FrameNumberRange Range;//[Offset: 0x8, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 1]
	enum Flags;//[Offset: 0x1c, Size: 1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 1]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 1]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 1]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 1]
	int RowIndex;//[Offset: 0xa8, Size: 1]
	int OverlapPriority;//[Offset: 0xac, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	float StartTime;//[Offset: 0xb4, Size: 1]
	float EndTime;//[Offset: 0xb8, Size: 1]
	float PrerollTime;//[Offset: 0xbc, Size: 1]
	float PostrollTime;//[Offset: 0xc0, Size: 1]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc9, Size: 1]
	void SetRowIndex(int NewRowIndex);// 0x2d8fdc0
	void SetPreRollFrames(int InPreRollFrames);// 0x2d8fd30
	void SetPostRollFrames(int InPostRollFrames);// 0x2d8fca0
	void SetOverlapPriority(int NewPriority);// 0x2d8fa70
	void SetIsLocked(bool bInIsLocked);// 0x2d8f9e0
	void SetIsActive(bool bInIsActive);// 0x2d8f930
	void SetCompletionMode(enum InCompletionMode);// 0x2d8f680
	void SetBlendType(enum InBlendType);// 0x2d8f600
	bool IsLocked();// 0x2d8ea20
	bool IsActive();// 0x2d8e9f0
	int GetRowIndex();// 0x1463340
	int GetPreRollFrames();// 0x2d8e940
	int GetPostRollFrames();// 0x2d8e920
	int GetOverlapPriority();// 0x2d8e8d0
	enum GetCompletionMode();// 0x2d8e670
	OptionalMovieSceneBlendType GetBlendType();// 0x2d8e530

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CompletionMode;//[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 1]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 1]
	interface class None* EaseIn;//[Offset: 0x8, Size: 1]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 1]
	interface class None* EaseOut;//[Offset: 0x20, Size: 1]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	FrameNumber Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 1]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 1]
	FrameRate TickResolution;//[Offset: 0x58, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 1]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 1]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 1]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 1]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 1]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 1]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 1]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 1]
	FrameNumber End;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 1]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 1]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 1]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 1]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 1]
	uint32 EntityID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 1]
	enum Flags;//[Offset: 0x18, Size: 1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 1]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 1]
	int NumEvalPtrs;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 1]
	uint16 NumChildren;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 1]
	enum Flags;//[Offset: 0x2, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 1]
	int SequenceID;//[Offset: 0x10, Size: 1]
	int ResolveParentIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 1]
	void SetUserTag(FName InUserTag);// 0x2fa5e40
	FName GetUserTag();// 0x2fa4490

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 1]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 1]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 1]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 1]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 1]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 1]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 1]
	float Duration;//[Offset: 0x108, Size: 1]
	float MaxDistance;//[Offset: 0x10c, Size: 1]
	float TotalSamples;//[Offset: 0x110, Size: 1]
	float Priority;//[Offset: 0x114, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float LFEBleed;//[Offset: 0x10, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 1]
	float RadioFilterVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 1]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 1]
	byte OutputTarget;//[Offset: 0x68, Size: 1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 1]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 1]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 1]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 1]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	enum GainMode;//[Offset: 0x68, Size: 1]
	float OutputVolume;//[Offset: 0x6c, Size: 1]
	float WetLevel;//[Offset: 0x70, Size: 1]
	float DryLevel;//[Offset: 0x74, Size: 1]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 1]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 1]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x39bd650
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x39bd450
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x39bd3c0
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x39bd1e0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x39bd110
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x39bd080
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x39bcfb0
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x39bcec0
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x39bcbc0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x39bcad0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 1]
	int StreamingPriority;//[Offset: 0x174, Size: 1]
	enum SampleRateQuality;//[Offset: 0x178, Size: 1]
	byte SoundGroup;//[Offset: 0x17a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 1]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 1]
	FString SpokenText;//[Offset: 0x240, Size: 1]
	float SubtitlePriority;//[Offset: 0x250, Size: 1]
	float Volume;//[Offset: 0x254, Size: 1]
	float Pitch;//[Offset: 0x258, Size: 1]
	int NumChannels;//[Offset: 0x25c, Size: 1]
	int SampleRate;//[Offset: 0x260, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 1]
	CurveTable* Curves;//[Offset: 0x280, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 1]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 1]
	enum PitchRouting;//[Offset: 0x41, Size: 1]
	enum HighpassRouting;//[Offset: 0x42, Size: 1]
	enum LowpassRouting;//[Offset: 0x43, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 1]
	int AttackTimeMsec;//[Offset: 0x4, Size: 1]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 1]
	float QFactor;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float RetriggerTime;//[Offset: 0xc, Size: 1]
	float VolumeScale;//[Offset: 0x10, Size: 1]
	enum VolumeScaleMode;//[Offset: 0x14, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x18, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x20, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	enum SendStage;//[Offset: 0x1, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 1]
	float SendLevel;//[Offset: 0x18, Size: 1]
	float MinSendLevel;//[Offset: 0x1c, Size: 1]
	float MaxSendLevel;//[Offset: 0x20, Size: 1]
	float MinSendDistance;//[Offset: 0x24, Size: 1]
	float MaxSendDistance;//[Offset: 0x28, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x370, Size: 1]
	float SourceBusDuration;//[Offset: 0x374, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x2f8cac0
	void Dragged(out const PointerEvent PointerEvent);// 0x2f8c990
	void DragCancelled(out const PointerEvent PointerEvent);// 0x2f8c860

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	Margin Margin;//[Offset: 0x10, Size: 1]
	SlateColor TintColor;//[Offset: 0x20, Size: 1]
	Object* ResourceObject;//[Offset: 0x48, Size: 1]
	FName ResourceName;//[Offset: 0x50, Size: 1]
	Box2D UVRegion;//[Offset: 0x58, Size: 1]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x2a589c0
	void ShowTitleSafeArea();// 0x2a589e0
	void SetConsoleTarget(int PlayerIndex);// 0x38d5400

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	MulticastInlineDelegateProperty OnPawnControllerChangedDelegates;//[Size: 1]
	void ReceiveShutdown();// 0x1d4eb70
	void ReceiveInit();// 0x1d4eb70
	void HandleTravelError(byte FailureType);// 0x1d4eb70
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1d4eb70
	void DebugRemovePlayer(int ControllerId);// 0x38bc0c0
	void DebugCreatePlayer(int ControllerId);// 0x38bc030

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 1]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1ba8, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 1]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 1]
	World* World;//[Offset: 0x140, Size: 1]
	Package* WorldPackage;//[Offset: 0x148, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 1]
	FName NetDriverName;//[Offset: 0x190, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 1]
	float Time;//[Offset: 0x210, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x280, Size: 1]
	float BaseLookUpRate;//[Offset: 0x284, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0x38ac6f0
	void MoveUp_World(float Val);// 0x38abbf0
	void MoveRight(float Val);// 0x38abb60
	void MoveForward(float Val);// 0x38abad0
	void LookUpAtRate(float Rate);// 0x38aba40

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x468, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x39c4df0
	float GetUnscaledSphereRadius();// 0x38987e0
	float GetShapeScale();// 0x39c2fe0
	float GetScaledSphereRadius();// 0x39c2f90

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x478, Size: 1]
	int PreviousLODLevel;//[Offset: 0x47c, Size: 1]
	int MinLOD;//[Offset: 0x480, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x484, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x488, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x490, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x495, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x498, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x49c, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4a0, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x4a4, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x123efb0
	void SetReverseCulling(bool ReverseCulling);// 0x39cd1f0
	void SetForcedLodModel(int NewForcedLodModel);// 0x39ccdb0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x39ccd20
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x39ccaa0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x39cca10
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x39cc870

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 1]
	FName MatineeControllerName;//[Offset: 0x228, Size: 1]
	float PlayRate;//[Offset: 0x230, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x1981600
	void SetPosition(float NewPosition, bool bJump);// 0x395b610
	void SetLoopingState(bool bNewLooping);// 0xf5ace0
	void Reverse();// 0x1981160
	void Play();// 0x196b270
	void Pause();// 0xe85bd0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x395ab20
	void ChangePlaybackDirection();// 0x1a01f80

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 1]
	Actor* ChildActor;//[Offset: 0x200, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x38a0730

--------------------------------
Class: Interface.Object

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1d4eb70
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3942990
	bool RemoteEvent(FName EventName);// 0x39420d0
	void LevelReset();// 0x1d4eb70

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x450, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	float ScreenSize;//[Offset: 0x45c, Size: 1]
	float U;//[Offset: 0x460, Size: 1]
	float UL;//[Offset: 0x464, Size: 1]
	float V;//[Offset: 0x468, Size: 1]
	float VL;//[Offset: 0x46c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x3881960
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x3881630
	void SetSprite(Texture2D* NewSprite);// 0xf53be0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 1]
	float WorldToMeters;//[Offset: 0x240, Size: 1]
	float KillZ;//[Offset: 0x244, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 1]
	float WorldGravityZ;//[Offset: 0x250, Size: 1]
	float GlobalGravityZ;//[Offset: 0x254, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 1]
	float TimeDilation;//[Offset: 0x2e8, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 1]
	PlayerState* Pauser;//[Offset: 0x348, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 1]
	void OnRep_WorldGravityZ();// 0x19c60b0

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 1]
	class HUD* HUDClass;//[Offset: 0x250, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 1]
	GameSession* GameSession;//[Offset: 0x278, Size: 1]
	GameStateBase* GameState;//[Offset: 0x280, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0xe85cf0
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x38c9eb0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x38c9d90
	bool ShouldReset(Actor* ActorToReset);// 0x38c9860
	void ReturnToMainMenuHost();// 0x38c8780
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x38c8660
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x38c8590
	void RestartPlayer(Controller* NewPlayer);// 0x38c8500
	void ResetLevel();// 0x38c84c0
	bool PlayerCanRestart(PlayerController* Player);// 0x38c7d70
	bool MustSpectate(PlayerController* NewPlayerController);// 0x38c6b20
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1d4eb70
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1d4eb70
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1d4eb70
	void K2_OnLogout(Controller* ExitingController);// 0x1d4eb70
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1d4eb70
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x38c5fb0
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x38c5d90
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x38b02c0
	bool HasMatchStarted();// 0x38a2d60
	bool HasMatchEnded();// 0x38c5c20
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x38c5af0
	int GetNumSpectators();// 0x38c4b80
	int GetNumPlayers();// 0x38c4b50
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x38c4490
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x38c3530
	Actor* ChoosePlayerStart(Controller* Player);// 0x38c2760
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x38c2630
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x38c2540

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 1]
	int MaxPlayers;//[Offset: 0x224, Size: 1]
	int MaxPartySize;//[Offset: 0x228, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 1]
	void OnRep_SpectatorClass();// 0x1a066a0
	void OnRep_ReplicatedWorldTimeSeconds();// 0xe85cf0
	void OnRep_ReplicatedHasBegunPlay();// 0x1a066c0
	void OnRep_GameModeClass();// 0x38a2fd0
	bool HasMatchStarted();// 0xf5ab20
	bool HasMatchEnded();// 0x38cef30
	bool HasBegunPlay();// 0x38cef00
	float GetServerWorldTimeSeconds();// 0x38ceda0
	float GetPlayerStartTime(Controller* Controller);// 0x38ce8b0
	float GetPlayerRespawnDelay(Controller* Controller);// 0x38ce810

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 1]
	uint32 InRate;//[Offset: 0x228, Size: 1]
	uint32 OutRate;//[Offset: 0x22c, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 1]
	uint32 NetNumClients;//[Offset: 0x268, Size: 1]
	uint32 InPackets;//[Offset: 0x26c, Size: 1]
	uint32 OutPackets;//[Offset: 0x270, Size: 1]
	uint32 InBunches;//[Offset: 0x274, Size: 1]
	uint32 OutBunches;//[Offset: 0x278, Size: 1]
	uint32 OutLoss;//[Offset: 0x27c, Size: 1]
	uint32 InLoss;//[Offset: 0x280, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumActors;//[Offset: 0x2b8, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 1]
	int BadPingThreshold;//[Offset: 0x228, Size: 1]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 1]
	float PercentForBadPing;//[Offset: 0x258, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 1]
	float MoveRepSize;//[Offset: 0x260, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 1]
	float GainHF;//[Offset: 0x30, Size: 1]
	float ReflectionsGain;//[Offset: 0x34, Size: 1]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float LateDelay;//[Offset: 0x3c, Size: 1]
	float DecayTime;//[Offset: 0x40, Size: 1]
	float Density;//[Offset: 0x44, Size: 1]
	float Diffusion;//[Offset: 0x48, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 1]
	float DecayHFRatio;//[Offset: 0x50, Size: 1]
	float LateGain;//[Offset: 0x54, Size: 1]
	float Gain;//[Offset: 0x58, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb0, Size: 1]
	int StreamingPriority;//[Offset: 0xb4, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x128, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 1]
	bool ShouldBeLoaded();// 0x310c7e0
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x39438d0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x38ce3c0
	void SetPriority(int NewPriority);// 0x39436b0
	void SetLevelLODIndex(int LODIndex);// 0x3942fc0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x3942f30
	bool IsStreamingStatePending();// 0x3941bc0
	bool IsLevelVisible();// 0x3941b90
	bool IsLevelLoaded();// 0x3941b60
	FName GetWorldAssetPackageFName();// 0x3941af0
	Level* GetLoadedLevel();// 0x2a81e50
	LevelScriptActor* GetLevelScriptActor();// 0x3941a40
	bool GetIsRequestingUnloadAndRemoval();// 0x3941a10
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x3941930

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x26c, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Level* Level;//[Offset: 0x38, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x3881300
	int GetObjectCount();// 0x3881200
	int GetNewAvoidanceUID();// 0x38811d0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x3881120

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7b0, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x2fb8770

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7d0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x7dc, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x7e8, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x800, Size: 1]
	float CurrentFocalLength;//[Offset: 0x858, Size: 1]
	float CurrentAperture;//[Offset: 0x85c, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x860, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x870, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x880, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x890, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0x8a0, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0x8b0, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0x8c0, Size: 1]
	float DefaultLensFStop;//[Offset: 0x8c4, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x2fb8c90
	void SetFilmbackPresetByName(FString InPresetName);// 0x2fb8bf0
	void SetCurrentFocalLength(float InFocalLength);// 0x2fb8b70
	float GetVerticalFieldOfView();// 0x2fb8b40
	static NamedLensPreset[] GetLensPresetsCopy();// 0x2fb8a60
	FString GetLensPresetName();// 0x2fb89e0
	float GetHorizontalFieldOfView();// 0x2fb89b0
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x2fb88d0
	FString GetFilmbackPresetName();// 0x2fb8850
	FString GetDefaultFilmbackPresetName();// 0x2fb8790

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void ToggleEnabled();// 0x3943c90
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x3943460
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x3943340
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x3943240
	void SetLightColor(LinearColor NewLightColor);// 0x3943050
	void SetEnabled(bool bSetEnabled);// 0x3942c00
	void SetCastShadows(bool bNewValue);// 0x39427e0
	void SetBrightness(float NewBrightness);// 0x3942640
	void SetAffectTranslucentLighting(bool bNewValue);// 0x3942320
	void OnRep_bEnabled();// 0x19c60b0
	bool IsEnabled();// 0x3941b30
	LinearColor GetLightColor();// 0x3941a70
	float GetBrightness();// 0x39419e0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x228, Size: 1]
	float MaxDrawDistance;//[Offset: 0x22c, Size: 1]
	float MaxDistanceFadeRange;//[Offset: 0x230, Size: 1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	int ShadowMapChannel;//[Offset: 0x238, Size: 1]
	float MinRoughness;//[Offset: 0x240, Size: 1]
	float SpecularScale;//[Offset: 0x244, Size: 1]
	float ShadowResolutionScale;//[Offset: 0x248, Size: 1]
	float ShadowBias;//[Offset: 0x24c, Size: 1]
	float ShadowSlopeBias;//[Offset: 0x250, Size: 1]
	float ShadowSharpen;//[Offset: 0x254, Size: 1]
	float ContactShadowLength;//[Offset: 0x258, Size: 1]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25c, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x260, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x268, Size: 1]
	Vector LightFunctionScale;//[Offset: 0x270, Size: 1]
	TextureLightProfile* IESTexture;//[Offset: 0x280, Size: 1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	float IESBrightnessScale;//[Offset: 0x28c, Size: 1]
	float LightFunctionFadeDistance;//[Offset: 0x290, Size: 1]
	float DisabledBrightness;//[Offset: 0x294, Size: 1]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	float BloomScale;//[Offset: 0x29c, Size: 1]
	float BloomThreshold;//[Offset: 0x2a0, Size: 1]
	float BloomMaxBrightness;//[Offset: 0x2a4, Size: 1]
	Color BloomTint;//[Offset: 0x2a8, Size: 1]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2b0, Size: 1]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x3943c10
	void SetUseTemperature(bool bNewValue);// 0x3943b80
	void SetUseIESBrightness(bool bNewValue);// 0x3943af0
	void SetTransmission(bool bNewValue);// 0x3943a60
	void SetTemperature(float NewTemperature);// 0x39439e0
	void SetSpecularScale(float NewValue);// 0x3943960
	void SetShadowSlopeBias(float NewValue);// 0x3943850
	void SetShadowBias(float NewValue);// 0x39437d0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3943580
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x39434f0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x39433d0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x39432c0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x39431c0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x39430e0
	void SetIntensity(float NewIntensity);// 0x3942eb0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x3942e30
	void SetIESTexture(TextureLightProfile* NewValue);// 0x3942da0
	void SetIESBrightnessScale(float NewValue);// 0x3942d20
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x3942c90
	void SetEnableLightShaftBloom(bool bNewValue);// 0x3942b70
	void SetBloomTint(Color NewValue);// 0x39425c0
	void SetBloomThreshold(float NewValue);// 0x3942540
	void SetBloomScale(float NewValue);// 0x39424c0
	void SetBloomMaxBrightness(float NewValue);// 0x3942440
	void SetAffectTranslucentLighting(bool bNewValue);// 0x39423b0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x3942170

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f8, Size: 1]
	float Brightness;//[Offset: 0x208, Size: 1]
	float Intensity;//[Offset: 0x20c, Size: 1]
	Color LightColor;//[Offset: 0x210, Size: 1]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	float DeepShadowLayerDistribution;//[Offset: 0x218, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x21c, Size: 1]
	float VolumetricScatteringIntensity;//[Offset: 0x220, Size: 1]
	int SamplesPerPixel;//[Offset: 0x224, Size: 1]
	void SetSamplesPerPixel(int NewValue);// 0x3943740
	void SetCastVolumetricShadow(bool bNewValue);// 0x3942900
	void SetCastShadows(bool bNewValue);// 0x3942870
	void SetCastRaytracedShadow(bool bNewValue);// 0x3942750
	void SetCastDeepShadow(bool bNewValue);// 0x39426c0
	void SetAffectReflection(bool bNewValue);// 0x3942290
	void SetAffectGlobalIllumination(bool bNewValue);// 0x3942200
	LinearColor GetLightColor();// 0x3941ab0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x1a0, Size: 1]
	float TextureMultiplier;//[Offset: 0x1a4, Size: 1]

--------------------------------
Class: BP_Sky_Sphere_C.Actor.Object
	StaticMeshComponent* SkySphereMesh;//[Offset: 0x220, Size: 1]
	SceneComponent* Base;//[Offset: 0x228, Size: 1]
	MaterialInstanceDynamic* Sky material;//[Offset: 0x230, Size: 1]
	bool Refresh material;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	DirectionalLight* Directional light actor;//[Offset: 0x240, Size: 1]
	bool Colors determined by sun position;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float Sun height;//[Offset: 0x24c, Size: 1]
	float Sun brightness;//[Offset: 0x250, Size: 1]
	float Horizon falloff;//[Offset: 0x254, Size: 1]
	LinearColor Zenith color;//[Offset: 0x258, Size: 1]
	LinearColor Horizon color;//[Offset: 0x268, Size: 1]
	LinearColor Cloud color;//[Offset: 0x278, Size: 1]
	LinearColor Overall Color;//[Offset: 0x288, Size: 1]
	float Cloud speed;//[Offset: 0x298, Size: 1]
	float Cloud opacity;//[Offset: 0x29c, Size: 1]
	float Stars brightness;//[Offset: 0x2a0, Size: 1]
	CurveLinearColor* Horizon color curve;//[Offset: 0x2a8, Size: 1]
	CurveLinearColor* Zenith color curve;//[Offset: 0x2b0, Size: 1]
	CurveLinearColor* Cloud color curve;//[Offset: 0x2b8, Size: 1]
	void RefreshMaterial(float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_Conv_RotatorToVector_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0x1d4eb70
	void UpdateSunDirection(bool CallFunc_Less_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue);// 0x1d4eb70
	void UserConstructionScript(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x1d4eb70

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 1]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 1]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 1]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 1]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 1]
	void OnRep_ReplicatedPhysAsset();// 0x196b270
	void OnRep_ReplicatedMesh();// 0x19c60b0
	void OnRep_ReplicatedMaterial1();// 0x1981160
	void OnRep_ReplicatedMaterial0();// 0x1981600

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 1]
	float Priority;//[Offset: 0x7c0, Size: 1]
	float BlendRadius;//[Offset: 0x7c4, Size: 1]
	float BlendWeight;//[Offset: 0x7c8, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x398c240

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x270, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x278, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x280, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x290, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x298, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	void ShowBurnin();// 0x311b3c0
	void SetSequence(LevelSequence* InSequence);// 0x311b330
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x311b2a0
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x311b070
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x311af10
	void ResetBindings();// 0x311aef0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x311ae30
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x311ad60
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x311ac60
	void OnLevelSequenceLoaded__DelegateSignature();// 0x1d4eb70
	LevelSequence* LoadSequence();// 0x311abf0
	void HideBurnin();// 0x311abd0
	LevelSequencePlayer* GetSequencePlayer();// 0x311ab60
	LevelSequence* GetSequence();// 0x311aae0
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x311a600
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x311a550
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x311a240
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x311a0f0

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 1]
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x199f8d0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x311a350
	Object* FindMetaDataByClass(class Object InClass);// 0x311a350
	Object* CopyMetaData(Object* InMetaData);// 0x311a350

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x311a6e0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x311a3d0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte Status;//[Offset: 0x2b0, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x2b8, Size: 1]
	FrameNumber StartTime;//[Offset: 0x2c0, Size: 1]
	int DurationFrames;//[Offset: 0x2c4, Size: 1]
	float DurationSubFrames;//[Offset: 0x2c8, Size: 1]
	int CurrentNumLoops;//[Offset: 0x2cc, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2d0, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e8, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x438, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x448, Size: 1]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x458, Size: 1]
	void StopAtCurrentTime();// 0x2d8ff40
	void Stop();// 0x2d8ff20
	void SetTimeRange(float StartTime, float Duration);// 0x2d8fe50
	void SetPlayRate(float PlayRate);// 0x2d8fb00
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2d8fb80
	void SetFrameRate(FrameRate FrameRate);// 0x2d8f8a0
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x2d8f790
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x2d8f700
	void ScrubToSeconds(float TimeInSeconds);// 0x2d8f550
	bool ScrubToMarkedFrame(FString InLabel);// 0x2d8f440
	void ScrubToFrame(FrameTime NewPosition);// 0x2d8f390
	void Scrub();// 0x2d8f370
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x2d8f2b0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x2d8f1d0
	void RestoreState();// 0x2d8f350
	void PlayToSeconds(float TimeInSeconds);// 0x2d8f120
	bool PlayToMarkedFrame(FString InLabel);// 0x2d8f010
	void PlayToFrame(FrameTime NewPosition);// 0x2d8ef60
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2d8ee40
	void PlayReverse();// 0x2d8ee20
	void PlayLooping(int NumLoops);// 0x2d8ed90
	void Play();// 0x2d8ed70
	void Pause();// 0x2d8ed50
	void JumpToSeconds(float TimeInSeconds);// 0x2d8eca0
	bool JumpToMarkedFrame(FString InLabel);// 0x2d8eb90
	void JumpToFrame(FrameTime NewPosition);// 0x2d8eae0
	bool IsReversed();// 0x2d8eab0
	bool IsPlaying();// 0x2d8ea80
	bool IsPaused();// 0x2d8ea50
	void GoToEndAndStop();// 0x2d8e9d0
	QualifiedFrameTime GetStartTime();// 0x2d8e980
	MovieSceneSequence* GetSequence();// 0x2d8e960
	float GetPlayRate();// 0x2d8e8f0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x2d8e7f0
	FrameRate GetFrameRate();// 0x2d8e7d0
	int GetFrameDuration();// 0x2d8e7a0
	QualifiedFrameTime GetEndTime();// 0x2d8e740
	QualifiedFrameTime GetDuration();// 0x2d8e700
	bool GetDisableCameraCuts();// 0x2d8e6d0
	QualifiedFrameTime GetCurrentTime();// 0x2d8e690
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x2d8e560
	void ChangePlaybackDirection();// 0x2d8e380

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 1]
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	FString MarkedFrame;//[Offset: 0x10, Size: 1]
	enum PositionType;//[Offset: 0x20, Size: 1]
	enum UpdateMethod;//[Offset: 0x21, Size: 1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x311b1a0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 1]
	void SetSettings(Object* InSettings);// 0x1d4eb70
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x311ab90

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LobbyGameModeBP_C.OPLobbyGameMode.OP_GameModeBase.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: OPLobbyGameMode.OP_GameModeBase.GameModeBase.Info.Actor.Object
	MainLobbyComponent* LobbyMenu;//[Offset: 0x2c0, Size: 1]
	class MainLobbyComponent* LobbyMenuClass;//[Offset: 0x2c8, Size: 1]
	static MainLobbyComponent* GetLobbyMenu_Static(Object* InWorldContextObject);// 0x198a500
	MainLobbyComponent* GetLobbyMenu();// 0x198a4d0

--------------------------------
Class: OP_GameModeBase.GameModeBase.Info.Actor.Object

--------------------------------
Class: MainLobbyComponent.UserWidget.Widget.Visual.Object
	OP_InteractionPopup_Alert* Popup_Purchase_WebProcess;//[Offset: 0x308, Size: 1]
	OPLobbyFlowComponentBase* CurrentFlow;//[Offset: 0x310, Size: 1]
	DataTable* LobbyFlowDataTable;//[Offset: 0x318, Size: 1]
	DataTable* LobbyPopupFlowDataTable;//[Offset: 0x320, Size: 1]
	class OPUserAttendancePopup* OPUserAttendancePopup;//[Offset: 0x328, Size: 1]
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x330, Size: 1]
	CanvasPanel* Bind_Canvas_PopupContainer;//[Offset: 0x338, Size: 1]
	MainLobbyTopUserInfoComponent* Bind_View_LobbyTopUserInfo;//[Offset: 0x340, Size: 1]
	OPLobbyMainBottomBarWidget* Bind_EntryMenuBottomBar;//[Offset: 0x348, Size: 1]
	OPLobbyMailPopupWidget* Bind_MailList;//[Offset: 0x350, Size: 1]
	FriendMenuComponent* Bind_FriendList;//[Offset: 0x358, Size: 1]
	OPLobbyMissionPopupWidget* Bind_MissionList;//[Offset: 0x360, Size: 1]
	OPPartyRequestWidget* Bind_Widget_PartyRequested;//[Offset: 0x368, Size: 1]
	CanvasPanel* Bind_Hero_View;//[Offset: 0x370, Size: 1]
	TextBlock* Bind_Text_CurrentVersion;//[Offset: 0x378, Size: 1]
	MainLobbySideMessageComponent* Bind_Widget_SideMessage;//[Offset: 0x380, Size: 1]
	OP_Shutter_ServerResponseWait* Bind_WB_Shutter_ServerResponseWait;//[Offset: 0x388, Size: 1]
	WidgetAnimation* Open;//[Offset: 0x390, Size: 1]
	OPLobbyPopupFlowComponentBase* Popup_MatchMaking;//[Offset: 0x398, Size: 1]
	OPLobbyMailPopupWidget* Popup_MailList;//[Offset: 0x3a0, Size: 1]
	FriendMenuComponent* Popup_FriendList;//[Offset: 0x3a8, Size: 1]
	OPLobbyMissionPopupWidget* Popup_MissionList;//[Offset: 0x3b0, Size: 1]
	CanvasPanel* Bind_Canvas_PopupList;//[Offset: 0x3b8, Size: 1]
	HorizontalBox* Bind_Horizontal_Box_FriendList;//[Offset: 0x3c0, Size: 1]
	class OPLobbyMailPopupWidget* PopupMailListClass;//[Offset: 0x3c8, Size: 1]
	class FriendMenuComponent* PopupFriendListClass;//[Offset: 0x3d0, Size: 1]
	class OPLobbyMissionPopupWidget* PopupMissionListClass;//[Offset: 0x3d8, Size: 1]
	static void TryShowStringMessage(Object* InWorldContextObject, FString inString);// 0x19a0560
	static void TryShowMessage(Object* InWorldContextObject, FString InLocalKey);// 0x19a0430
	static MainLobbyComponent* TryGetLobbyMenu(Object* InWorldContextObject);// 0x19a0150
	static OPLobbyFlowComponentBase* TryChangeLobbyFlow(Object* InWorldContextObject, enum InFlowType);// 0x199fdf0
	void StopMatchMaking();// 0x199fdd0
	void ShowWarningMessage_BP(out const FText InMessage);// 0x1d4eb70
	void ShowSDKWebview();// 0x199fdb0
	void SendRequestStarterPassPacket();// 0x199fb50
	OPLobbyPopupFlowComponentBase* OpenPopup(enum InFlowType);// 0x199fa40
	void OnUserProfileClientDataUpdated(FString InUserID);// 0x199f940
	void OnPartyClientEventFire_BP(enum InEventType);// 0x1930b90
	void OnMatchClientDataUpdated_BP(MatchMakingQueueInfo* InUpdatedInfo);// 0x199f8d0
	void OnMatchClientDataUpdated();// 0xd8dcf0
	void OnMatchClientDataEvent_BP(enum InUpdateType, MatchMakingQueueInfo* InUpdatedInfo);// 0x199f820
	void OnMatchClientDataEvent(enum InEventType);// 0x199f7a0
	void OnMasterServerStateChanged(bool InNewState);// 0x1987390
	void OnMasterServerClientDataUpdated_BP(enum InUpdateType);// 0x1930b90
	void OnMasterServerClientDataUpdated(enum InUpdateType);// 0x199f720
	void OnFriendClientDataUpdated_BP();// 0x18f8420
	void OnFriendClientDataEventFired_BP(enum Type, FString InUserID, FString InUserName);// 0x199f5f0
	void OnChangedTopSubMenu_BP(enum InTopMenu, enum InSubMenu);// 0x1d4eb70
	void HandleServerResponseReceived();// 0x199f1c0
	void HandleSDKPurchaseResult(int InErrorCode, int InDetailCode, FString InProductID, FString InTransactionData);// 0x199efa0
	void HandleFirstUserStartTutorial();// 0x199ef80
	void GoToMenu(enum InTopMenu, enum InSubMenu);// 0x199eeb0
	void GoToCollectionPage(int InHeroSkinID);// 0x199ee20
	OPLobbyPopupFlowComponentBase* GetOpenedPopup(enum InFlowType);// 0x199e530
	enum GetNextLobbyFlowType();// 0x193fec0
	void ClosePopup(enum InFlowType);// 0x199df40
	void CheckGameVersion();// 0x199df20
	void ChangeTopSubMenu(enum InTopMenu, enum InSubMenu);// 0x199de50
	OPLobbyFlowComponentBase* ChangeFlow(enum InFlowType);// 0x199ddc0

--------------------------------
Class: OP_InteractionPopup_Alert.OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnClickYes;//[Size: 1]
	OPTextButtonBase* Bind_BTN_Yes;//[Offset: 0x330, Size: 1]
	void HandleReaction_Yes();// 0x197bd70
	static OP_InteractionPopup_Alert* BuildPopup_Alert_ButtonNameChange_BP(Object* InWorldContextObject, FText InButtonText, FText InMessage, Widget* InParentwidget, FName InOpKey);// 0x197b270
	static OP_InteractionPopup_Alert* BuildPopup_Alert_BP(Object* InWorldContextObject, FText InMessage, Widget* InParentwidget, FName InOpKey);// 0x197b0c0

--------------------------------
Class: OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Text;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_TXT_Title;//[Offset: 0x2a0, Size: 1]
	bool IsOutsideAreaEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	bool bProessNoButtonClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	Button* Bind_BTN_OutsideArea_Close;//[Offset: 0x2b0, Size: 1]
	bool bConsumeESCInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bRecoverFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	void SetTitleText(FText InText);// 0x197d080
	void SetTextArray_BPNE(out const FText[] InTextArray);// 0x197cf70
	void SetText(FText InText);// 0x197ce90
	void SetOutsideAreaClickable(bool InIsEnabled);// 0x197cc40
	void SetConsumeESCInput(bool InConsume);// 0x197c980
	void OnOutsideAreaPressed();// 0x197c460
	void IgnoreESCPressed(bool bIgnore);// 0x197bdf0
	void HandleButtonPressed_BPNE(bool bIsYes);// 0x18f8960
	Widget* GetOwingWidget();// 0x197bc80
	void DoRemovePopupProcedure();// 0x197bc30

--------------------------------
Class: OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	bool bShowMouseOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	enum MouseFocusType;//[Offset: 0x289, Size: 1]
	void RequestRemoveMouseFocus();// 0x19b3e80
	void RequestMouseFocus();// 0x19b3e60

--------------------------------
Class: OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	UserWidget* OwnerWidget;//[Offset: 0x270, Size: 1]
	bool bIsControlledByWidgetManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	FName OPWM_WidgetName;//[Offset: 0x27c, Size: 1]
	bool OPWM_bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	enum OPWM_eMouseFocusType;//[Offset: 0x285, Size: 1]
	FName GetOPUserData();// 0x19eb800

--------------------------------
Class: OPUserWidgetBase.UserWidget.Widget.Visual.Object
	void SynchronizeProperties_BP();// 0x1d4eb70

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	delegate TextDelegate;//[Offset: 0x140, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 1]
	SlateFontInfo Font;//[Offset: 0x188, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 1]
	float MinDesiredWidth;//[Offset: 0x290, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x296, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x2f9f4a0
	void SetText(FText InText);// 0x2f9f3b0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x2f9f2b0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x2f9f010
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x2f9ef80
	void SetOpacity(float InOpacity);// 0x2f9ef00
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x2f9ebe0
	void SetFont(SlateFontInfo InFontInfo);// 0x2f9e620
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x2f9e3b0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x2f9e320
	FText GetText();// 0x2f9df40
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x2f9dd00
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x2f9dcd0

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 1]
	byte Justification;//[Offset: 0x10b, Size: 1]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 1]
	float WrapTextAt;//[Offset: 0x110, Size: 1]
	Margin Margin;//[Offset: 0x114, Size: 1]
	float LineHeightPercentage;//[Offset: 0x124, Size: 1]
	void SetJustification(byte InJustification);// 0x2f9e8c0

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x48, Size: 1]
	int LetterSpacing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Text;//[Offset: 0x818, Size: 1]
	FText ButtonText;//[Offset: 0x820, Size: 1]
	SlateFontInfo Font;//[Offset: 0x838, Size: 1]
	bool bUseButtonColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	SlateColor Normal_UnSelected;//[Offset: 0x898, Size: 1]
	SlateColor Hover_UnSelected;//[Offset: 0x8c0, Size: 1]
	SlateColor Press_UnSelected;//[Offset: 0x8e8, Size: 1]
	SlateColor Disable_UnSelected;//[Offset: 0x910, Size: 1]
	SlateColor Normal_Selected;//[Offset: 0x938, Size: 1]
	SlateColor Hover_Selected;//[Offset: 0x960, Size: 1]
	SlateColor Press_Selected;//[Offset: 0x988, Size: 1]
	SlateColor Disable_Selected;//[Offset: 0x9b0, Size: 1]
	void SetButtonText(FText InNewButtonText);// 0x19408f0
	void SetButtonFont(SlateFontInfo InNewFont);// 0x19406c0
	void SetButtonColor(SlateColor InColor);// 0x1940540
	void OnButtonStateDisabled_BPNE(bool InIsDisabled);// 0x18ed700

--------------------------------
Class: OPButtonBase.UserWidget.Widget.Visual.Object
	enum ButtonState;//[Offset: 0x260, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	OPButtonBaseSlotChild* MotherSlotChild;//[Offset: 0x268, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnClickedWithIndex;//[Size: 1]
	int ClickIndex;//[Offset: 0x290, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x308, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x310, Size: 1]
	ButtonStateImages ButtonStateImages;//[Offset: 0x318, Size: 1]
	ButtonStateColors FButtonStateColors;//[Offset: 0x758, Size: 1]
	float ReclickDelay;//[Offset: 0x7d8, Size: 1]
	bool bSelectOnParentPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 1]
	bool bClickOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dd, Size: 1]
	bool bToggleSelectionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7de, Size: 1]
	bool bIsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7df, Size: 1]
	enum DefaultButtonState;//[Offset: 0x7e0, Size: 1]
	Widget* Bind_View_PressShrinker;//[Offset: 0x7e8, Size: 1]
	Image* Bind_Image_Background;//[Offset: 0x7f0, Size: 1]
	Widget* Bind_View_SelectedOverlay;//[Offset: 0x7f8, Size: 1]
	Widget* Bind_View_HoverOverlay;//[Offset: 0x800, Size: 1]
	Widget* Bind_View_SelectedHoverOverlay;//[Offset: 0x808, Size: 1]
	Widget* Bind_View_PressOverlay;//[Offset: 0x810, Size: 1]
	void SetButtonState(enum InNewState);// 0x1940870
	void SetButtonSelectedState(bool InIsSelected);// 0x19407e0
	void SetButtonEnabled(bool InIsEnabled);// 0x1940630
	void PlayClickedSound();// 0x19400f0
	void OnNativeClicked_BPNE();// 0x18ebe90
	void OnClicked_forSelectOnParentPanel_Buttons(bool InIsSelected);// 0x193ffb0
	void OnButtonUnselected_BP();// 0x1d4eb70
	void OnButtonStateChanged_BPNE(bool InSelectedState, enum InNewButtonState);// 0x193ff00
	void OnButtonSelected_BP();// 0x1d4eb70
	void OnButtonChildOrderNotify_BPNE(int InOrder);// 0x1930c90
	bool IsButtonSelected();// 0x193fee0
	bool IsButtonEnabled();// 0x193fec0
	SoundBase* GetSound_forHover();// 0x193fe40
	SoundBase* GetSound_forClickUp();// 0x193fe20
	SlateBrush GetButtonStateImage();// 0x193fb30
	LinearColor GetButtonStateColor();// 0x193faf0
	void DoClick();// 0x193f800

--------------------------------
Class: OPButtonBaseSlotChild.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_View_ButtonBase;//[Offset: 0x260, Size: 1]

--------------------------------
Class: ButtonStateImages
	SlateBrush Normal_UnSelected;//[Offset: 0x0, Size: 1]
	SlateBrush Hover_UnSelected;//[Offset: 0x88, Size: 1]
	SlateBrush Press_UnSelected;//[Offset: 0x110, Size: 1]
	SlateBrush Disable_UnSelected;//[Offset: 0x198, Size: 1]
	SlateBrush Normal_Selected;//[Offset: 0x220, Size: 1]
	SlateBrush Hover_Selected;//[Offset: 0x2a8, Size: 1]
	SlateBrush Press_Selected;//[Offset: 0x330, Size: 1]
	SlateBrush Disable_Selected;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: ButtonStateColors
	LinearColor Normal_UnSelected;//[Offset: 0x0, Size: 1]
	LinearColor Hover_UnSelected;//[Offset: 0x10, Size: 1]
	LinearColor Press_UnSelected;//[Offset: 0x20, Size: 1]
	LinearColor Disable_UnSelected;//[Offset: 0x30, Size: 1]
	LinearColor Normal_Selected;//[Offset: 0x40, Size: 1]
	LinearColor Hover_Selected;//[Offset: 0x50, Size: 1]
	LinearColor Press_Selected;//[Offset: 0x60, Size: 1]
	LinearColor Disable_Selected;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 1]
	delegate BrushDelegate;//[Offset: 0x190, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 1]
	void SetOpacity(float InOpacity);// 0x2f91bd0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2f91560
	void SetBrushTintColor(SlateColor TintColor);// 0x2f913e0
	void SetBrushSize(Vector2D DesiredSize);// 0x2f91360
	void SetBrushResourceObject(Object* ResourceObject);// 0x2f912d0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x1205250
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x1205180
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x1205030
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x1204f20
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x1204e90
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x1204da0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x1204d10
	void SetBrush(out const SlateBrush InBrush);// 0x1204c00
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x2f90aa0

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 1]
	byte ClickMethod;//[Offset: 0x3c0, Size: 1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 1]
	byte PressMethod;//[Offset: 0x3c2, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnHovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x2f8a280
	void SetStyle(out const ButtonStyle InStyle);// 0x2f8a1a0
	void SetPressMethod(byte InPressMethod);// 0x2f89fa0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2f89330
	void SetClickMethod(byte InClickMethod);// 0x2f89230
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x2f88d40
	bool IsPressed();// 0x2f88ab0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x2f8d440
	PanelSlot* GetContentSlot();// 0x2f8cd60
	Widget* GetContent();// 0x2f8cd30

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0x90, Size: 1]
	SlateBrush Pressed;//[Offset: 0x118, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 1]
	Margin NormalPadding;//[Offset: 0x228, Size: 1]
	Margin PressedPadding;//[Offset: 0x238, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPLobbyFlowComponentBase.UserWidget.Widget.Visual.Object
	byte CurrentDepth;//[Offset: 0x261, Size: 1]

--------------------------------
Class: OPLobbyPopupFlowComponentBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: MatchMakingQueueInfo.Object
	bool IsSearchingMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsWaitingOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool IsStarting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool DonotCloseUI_WhenTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	int TotalPlayers;//[Offset: 0x2c, Size: 1]
	int TotalSpectators;//[Offset: 0x30, Size: 1]
	int AcceptedPlayers;//[Offset: 0x34, Size: 1]
	int DeclinedPlayers;//[Offset: 0x38, Size: 1]
	int PlayersInQueue;//[Offset: 0x3c, Size: 1]
	int WaitingTimeSecond;//[Offset: 0x40, Size: 1]
	int PlayersInSpectator;//[Offset: 0x44, Size: 1]
	bool IsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	DateTime Queue_JoinWait_Started;//[Offset: 0x50, Size: 1]
	DateTime Queue_Search_Started;//[Offset: 0x58, Size: 1]
	FString MapName;//[Offset: 0x60, Size: 1]
	bool IsRankMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int NumTeamPlayers;//[Offset: 0x74, Size: 1]
	FString Region;//[Offset: 0x78, Size: 1]
	int MatchingType;//[Offset: 0x88, Size: 1]
	int EstimateState;//[Offset: 0x8c, Size: 1]
	int EstimateSeconds;//[Offset: 0x90, Size: 1]

--------------------------------
Class: DateTime

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: OPUserAttendancePopup.UserWidget.Widget.Visual.Object
	void SetAttendanceInfo_BPNE(int InDays, bool bIsClaimed);// 0x19ec010

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x2f88400

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 1]
	void SetZOrder(int InZOrder);// 0x2f8a600
	void SetSize(Vector2D InSize);// 0x2f8a120
	void SetPosition(Vector2D InPosition);// 0x2f89f20
	void SetOffsets(Margin InOffset);// 0x2f89b40
	void SetMinimum(Vector2D InMinimumAnchors);// 0x2f89a30
	void SetMaximum(Vector2D InMaximumAnchors);// 0x2f899b0
	void SetLayout(out const AnchorData InLayoutData);// 0x2f897e0
	void SetAutoSize(bool InbAutoSize);// 0x2f88cb0
	void SetAnchors(Anchors InAnchors);// 0x2f88b90
	void SetAlignment(Vector2D InAlignment);// 0x2f88b10
	int GetZOrder();// 0x2f88a50
	Vector2D GetSize();// 0x2f887b0
	Vector2D GetPosition();// 0x2f88770
	Margin GetOffsets();// 0x2f88730
	AnchorData GetLayout();// 0x2f886a0
	bool GetAutoSize();// 0x2f88610
	Anchors GetAnchors();// 0x2f885d0
	Vector2D GetAlignment();// 0x2f88590

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	Vector2D Alignment;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MainLobbyTopUserInfoComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Gold_Amount;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_TXT_Diamond_Amount;//[Offset: 0x290, Size: 1]
	OPButtonBase* Bind_BTN_Back;//[Offset: 0x298, Size: 1]
	OPButtonBase* Bind_BTN_Mail;//[Offset: 0x2b8, Size: 1]
	OPNotifyType_SuperScript* Bind_Notify_MailStatus;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_BTN_Friend;//[Offset: 0x2c8, Size: 1]
	OPNotifyType_SuperScript* Bind_Notify_FriendStatus;//[Offset: 0x2d0, Size: 1]
	OPButtonBase* Bind_BTN_Mission;//[Offset: 0x2d8, Size: 1]
	OPNotifyType_SuperScript* Bind_Notify_MissionStatus;//[Offset: 0x2e0, Size: 1]
	OPButtonBase* Bind_BTN_Setting;//[Offset: 0x2e8, Size: 1]
	MatchMakingRegionGroupComponent* Bind_MatchMakingRegionGroup;//[Offset: 0x2f0, Size: 1]
	OPSettingContextMenuWidget* Bind_WBP_SettingMenu;//[Offset: 0x2f8, Size: 1]
	void ShowRedDot_forMission(bool InIsShow);// 0x18ffdb0
	void ShowRedDot_forMail(int InMailCount);// 0x18ffd20
	void OnUpdated_Currency_Info();// 0x18ff9e0
	void OnShow_BackButton(enum InTopMenu, enum InSubMenu, bool InIsShow);// 0x18ff8c0
	void OnFriendDataUpdated();// 0x18ff610
	void OnClickedButton(OPButtonBase* InButton);// 0x18ff420

--------------------------------
Class: OPNotifyType_SuperScript.UserWidget.Widget.Visual.Object
	WidgetAnimation* NewAlert;//[Offset: 0x268, Size: 1]
	void UpdateNotifyStatus_BPNE(enum InNewAlertType, int InNotifyCount, bool InbIsTemportalNotify);// 0x19a5390

--------------------------------
Class: MatchMakingRegionGroupComponent.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	OPVerticalBox* Bind_VBox_Scroll;//[Offset: 0x2b8, Size: 1]
	void UpdateListFromClientData();// 0x18fff30
	void OnDesiredMatchMakingRegionUpdated();// 0x18ff510

--------------------------------
Class: OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnRemovedByModalessInputProcessor;//[Size: 1]
	enum ModalessWidgetRemovalType;//[Offset: 0x2b0, Size: 1]
	bool bAddModalessOnConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	void RemoveModalessWidget();// 0x197c730
	void OnShow(bool InIsShow);// 0x1d4eb70
	void AddModalessWidget();// 0x197a240

--------------------------------
Class: OPVerticalBox.VerticalBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x130, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x140, Size: 1]
	Margin Padding;//[Offset: 0x148, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x158, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	UserWidget* CreateWidget();// 0x19a4c10
	VerticalBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x19a4990

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x2fa8090

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2fa9ad0
	void SetSize(SlateChildSize InSize);// 0x2fa9850
	void SetPadding(Margin InPadding);// 0x2fa93e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2fa8e20

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPSettingContextMenuWidget.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* RelatedMenuButton;//[Offset: 0x2b8, Size: 1]
	enum SettingMenuType;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_BTN_BugReport;//[Offset: 0x2c8, Size: 1]
	OPButtonBase* Bind_BTN_Tutorial;//[Offset: 0x2d0, Size: 1]
	OPButtonBase* Bind_BTN_Options;//[Offset: 0x2d8, Size: 1]
	OPButtonBase* Bind_BTN_VisitHomepage;//[Offset: 0x2e0, Size: 1]
	OPButtonBase* Bind_BTN_Account;//[Offset: 0x2e8, Size: 1]
	OPButtonBase* Bind_BTN_LogOut;//[Offset: 0x2f0, Size: 1]
	OPButtonBase* Bind_BTN_ExitGame;//[Offset: 0x2f8, Size: 1]
	MulticastInlineDelegateProperty OnSelectedSettingContextMenuDelegate;//[Size: 1]
	void OnChangedSettingMenuType(enum InMenuType);// 0x1d4eb70

--------------------------------
Class: OPLobbyMainBottomBarWidget.UserWidget.Widget.Visual.Object
	OPPartyMemberSlotWidget*[] MemberSlots;//[Offset: 0x278, Size: 1]
	OPTextButtonBase* Bind_BTN_Start;//[Offset: 0x288, Size: 1]
	OPTextButtonBase* Bind_BTN_CancelReady;//[Offset: 0x290, Size: 1]
	OPPartyLeaveWidget* Bind_PartyLeave;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_CommunityLevel;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_NickName;//[Offset: 0x2a8, Size: 1]
	OPHealthProgressBar* Bind_Widget_Exp;//[Offset: 0x2b0, Size: 1]
	HorizontalBox* Bind_MemberSlotBox;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_TXT_ServerRegion;//[Offset: 0x2c0, Size: 1]
	CanvasPanel* Bind_CanvasPannel_PlayButton;//[Offset: 0x2c8, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Line;//[Offset: 0x2d0, Size: 1]
	OPLobbySelectGameModeWidget* Bind_SelectButton_Mode;//[Offset: 0x2d8, Size: 1]
	TextBlock* Bind_Text_Region;//[Offset: 0x2e0, Size: 1]
	CanvasPanel* Bind_Canvas_Etc_Object;//[Offset: 0x2e8, Size: 1]
	HorizontalBox* Bind_HorizontalBox_Menu_Buttons;//[Offset: 0x2f0, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Chat;//[Offset: 0x2f8, Size: 1]
	OPChatComponent* Bind_WBP_ChatBox;//[Offset: 0x300, Size: 1]
	TimerHandle SearchingTimerHandle;//[Offset: 0x308, Size: 1]
	TextBlock* Bind_TXT_SelectedMap;//[Offset: 0x318, Size: 1]
	TextBlock* Bind_TXT_Searching;//[Offset: 0x320, Size: 1]
	TextBlock* Bind_TXT_Searching_Time;//[Offset: 0x328, Size: 1]
	bool IsBanMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	void ShowPlayButton(bool InIsShow);// 0x198f060
	void Show_LobbyPlayButton_BP(bool InIsShow, bool InIsEnabled);// 0x1d4eb70
	void Show_LobbyPlayButton(bool InIsShow, bool InIsEnabled);// 0x198f1c0
	void Show_CancelReadyButton_BP(bool InIsShow, bool InIsShowPlayButton);// 0x1d4eb70
	void Show_CancelReadyButton(bool InIsShow, bool InIsShowPlayButton);// 0x198f0f0
	void SetDisabled_LobbyPlayButton(bool InIsDisabled);// 0x198ee00
	void ResizeBanMessage_BPNE(bool InbShrink);// 0x10d0980
	void OnShowPlayBtnMapSelectMenu(bool bIsVisible);// 0x1d4eb70
	void OnResetButtonState(OPButtonBase* InButton);// 0x198eb70
	void OnPartyClientDataEventFired(enum InEventType);// 0x198eaf0
	void OnMatchMakingClientDataUpdated(enum InType);// 0x198ea70
	void OnDesiredMatchMakingRegionUpdated();// 0x198e650
	void OnClickedCancelReadyButton();// 0x198e520
	void OnClickedButton(OPButtonBase* InButton);// 0x198e490
	bool GetPartyMemberInfoForRankDuoPlay(out PartyMemberInfo OutPartyMemberInfo);// 0x198dfb0
	OPTextTooltipComponent* CreateTextToolTipWidget_BP(FName InToolTipTextKey);// 0x1d4eb70
	void ChangeLobbyTopMenu(enum InTopMenu);// 0x198dee0
	bool CanShowPlayButton(out bool IsShow, out bool IsHideSelectMapButton);// 0x198ddf0
	bool CanShowPenaltyNotice();// 0x198ddc0
	bool CanShowCancelReadyButtonBP();// 0x198dd90
	bool CanDuoPlayForRank(out bool IsShow);// 0x198dcf0

--------------------------------
Class: OPPartyMemberSlotWidget.UserWidget.Widget.Visual.Object
	PartyMemberInfo PartyMemberInfo;//[Offset: 0x260, Size: 1]
	Button* Bind_Button_MemberSlot;//[Offset: 0x2a8, Size: 1]
	Image* Bind_Image_Plus;//[Offset: 0x2b0, Size: 1]
	Image* Bind_Image_Hover;//[Offset: 0x2b8, Size: 1]
	Image* Bind_Image_HeroBG;//[Offset: 0x2c0, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x2c8, Size: 1]
	Image* Bind_Image_MySlot;//[Offset: 0x2d0, Size: 1]
	Image* Bind_Image_FriendSlot;//[Offset: 0x2d8, Size: 1]
	Image* Bind_Image_Master;//[Offset: 0x2e0, Size: 1]
	CircularThrobber* Bind_Image_Waiting;//[Offset: 0x2e8, Size: 1]
	OPPartyContextWidget* Bind_PartyContextWidget;//[Offset: 0x2f0, Size: 1]
	bool IsMySlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	OPLobbyMainBottomBarWidget* ParentWidget;//[Offset: 0x300, Size: 1]
	void ShowInviteButton(bool InIsShow);// 0x19a9e30
	void ShowContextMenu_BP(enum InContextType);// 0x1d4eb70
	void SetToolTipText_BP(out const FText InText);// 0x1d4eb70
	void SetPartyMemberInfo(out const PartyMemberInfo InPartyMemberInfo);// 0x19a9ce0
	void SetHeroIcon(FString HeroKey);// 0x19a9940
	void SetDefaultHeroIcon();// 0x19a9920
	void Reset();// 0x19a9100
	void OnSendInviteParty(int InPlayerID);// 0x19a8fe0
	void OnReleased();// 0x19a8fc0
	void OnPressed();// 0x19a8f80
	void Init_BP();// 0x1d4eb70
	void HideContextMenu_BP();// 0x1d4eb70
	void HandleClickOperation();// 0x19a8990
	PartyMemberInfo GetPartyMemberInfo();// 0x19a87e0

--------------------------------
Class: PartyMemberInfo
	FString User_ID;//[Offset: 0x0, Size: 1]
	FString User_Name;//[Offset: 0x10, Size: 1]
	FString ProfileImage;//[Offset: 0x20, Size: 1]
	int AvatarID;//[Offset: 0x30, Size: 1]
	int Tier;//[Offset: 0x34, Size: 1]
	bool IsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 1]
	float Period;//[Offset: 0x10c, Size: 1]
	float Radius;//[Offset: 0x110, Size: 1]
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 1]
	SlateBrush Image;//[Offset: 0x120, Size: 1]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	void SetRadius(float InRadius);// 0x2f8a0a0
	void SetPeriod(float InPeriod);// 0x2f89ea0
	void SetNumberOfPieces(int InNumberOfPieces);// 0x2f89ab0

--------------------------------
Class: OPPartyContextWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Name;//[Offset: 0x260, Size: 1]
	ListView* Bind_Panel_Friends;//[Offset: 0x268, Size: 1]
	VerticalBox* Bind_Panel_ContextMenu;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_NoFriend;//[Offset: 0x278, Size: 1]
	enum ContextType;//[Offset: 0x280, Size: 1]
	class OPDropDownListItemWidget* ContextChildClass;//[Offset: 0x288, Size: 1]
	OPPartyMemberSlotWidget* PartyMemberSlotWidget;//[Offset: 0x298, Size: 1]
	bool bIsClickedRightMouseButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool SetIsHiddenWidget(bool InIsHidden);// 0x19a9b40
	void RemoveFromParentForPartyContextmenu(bool InIsShow);// 0x19a9070
	void OnPartyClientDataEventFired(enum InEventType);// 0x19a8de0
	void OnMatchMakingClientDataUpdated(enum InType);// 0x19a8c20
	void OnHiddenWidget_BP();// 0x1d4eb70
	void OnFriendClientDataUpdated();// 0x19a8be0
	void HideWidget(bool ForceHide);// 0x19a8a80
	bool HasOptions();// 0x19a89b0
	bool GetIsHiddenWidget();// 0x19a8730
	void CloseContext();// 0x19a8710
	bool CheckTagForShowing();// 0x19a86e0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 1]
	byte SelectionMode;//[Offset: 0x2d9, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float EntrySpacing;//[Offset: 0x2e0, Size: 1]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Object*[] ListItems;//[Offset: 0x2e8, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryInitialized;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemDoubleClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemIsHoveredChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemSelectionChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemScrolledIntoView;//[Size: 1]
	void SetSelectionMode(byte SelectionMode);// 0x2f92110
	void SetSelectedIndex(int Index);// 0x2f91f90
	void ScrollIndexIntoView(int Index);// 0x2f910e0
	void RemoveItem(Object* Item);// 0x2f91030
	void NavigateToIndex(int Index);// 0x2f90f80
	bool IsRefreshPending();// 0x2f90f50
	int GetNumItems();// 0x2f90d10
	Object*[] GetListItems();// 0x2f90ce0
	Object* GetItemAt(int Index);// 0x2f90ba0
	int GetIndexForItem(Object* Item);// 0x2f90ad0
	void ClearListItems();// 0x2f909c0
	void BP_SetSelectedItem(Object* Item);// 0x2f90930
	void BP_SetListItems(out const Object*[] InListItems);// 0x2f90880
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x2f907b0
	void BP_ScrollItemIntoView(Object* Item);// 0x2f90720
	void BP_NavigateToItem(Object* Item);// 0x2f90690
	bool BP_IsItemVisible(Object* Item);// 0x2f905f0
	bool BP_GetSelectedItems(out Object*[] Items);// 0x2f90530
	Object* BP_GetSelectedItem();// 0x2f90500
	int BP_GetNumItemsSelected();// 0x2f904d0
	void BP_ClearSelection();// 0x2f904b0
	void BP_CancelScrollIntoView();// 0x2f90490
	void AddItem(Object* Item);// 0x2f90400

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 1]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryGenerated;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryReleased;//[Size: 1]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x2f923a0
	void SetScrollOffset(const float InScrollOffset);// 0x2f91e90
	void SetScrollbarVisibility(enum InVisibility);// 0x2f91f10
	void ScrollToTop();// 0x2f91190
	void ScrollToBottom();// 0x2f91170
	void RequestRefresh();// 0x2f910c0
	void RegenerateAllEntries();// 0x2f91010
	UserWidget*[] GetDisplayedEntryWidgets();// 0x2f90a10

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 1]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPDropDownListItemWidget.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	int Index;//[Offset: 0x9d8, Size: 1]

--------------------------------
Class: OPPartyLeaveWidget.UserWidget.Widget.Visual.Object
	Button* Bind_BTN_PartyLeave;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Leave;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Hover;//[Offset: 0x270, Size: 1]
	OPLobbyMainBottomBarWidget* ParentWidget;//[Offset: 0x278, Size: 1]
	void Update();// 0x19a9ee0
	void SetToolTipText_BP(out const FText InText);// 0x1d4eb70
	void OnPartyClientDataEventFired(enum InEventType);// 0x19a8d20
	void OnMatchMakingClientDataUpdated(enum InType);// 0x19a8d20
	void OnButtonStateDisabled_BP(bool InIsDisabled);// 0x1d4eb70
	void HandleClickOperation();// 0x19a8950

--------------------------------
Class: OPHealthProgressBar.UserWidget.Widget.Visual.Object
	float Percent;//[Offset: 0x260, Size: 1]
	Vector2D HorizontalSizeRatio;//[Offset: 0x264, Size: 1]
	Vector2D VerticalSizeRatio;//[Offset: 0x26c, Size: 1]
	SlateBrush BackgroundBrush;//[Offset: 0x278, Size: 1]
	SlateBrush ProgressbarBrush;//[Offset: 0x300, Size: 1]
	bool bAutoGlowColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	SlateBrush ProgressBarVerticalGlowBrush;//[Offset: 0x390, Size: 1]
	SlateBrush ShieldBarBrush;//[Offset: 0x418, Size: 1]
	SlateBrush MagicShieldBarBrush;//[Offset: 0x4a0, Size: 1]
	SlateBrush DeltaBarBrush;//[Offset: 0x528, Size: 1]
	SlateBrush ScrollBarThumbBrush;//[Offset: 0x5b0, Size: 1]
	float GlowAmountOffet;//[Offset: 0x644, Size: 1]
	Vector2D ShieldAmount;//[Offset: 0x648, Size: 1]
	Vector2D MagicalShieldAmount;//[Offset: 0x650, Size: 1]
	float DeltaLerpPower;//[Offset: 0x658, Size: 1]
	void SetProgressBarBrush(SlateBrush InNewBrush);// 0x19755c0
	void SetPercent(float InPercent);// 0x1975540
	void SetFromUnitBase(UnitBase* InUnitBase);// 0x19754b0

--------------------------------
Class: UnitBase.ActorComponent.Object
	MulticastInlineDelegateProperty OnHealthChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnManaChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectExpChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDeathEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitDeathAsUnitBase;//[Size: 1]
	Actor* MySummonOwner;//[Offset: 0x1a0, Size: 1]
	FString MySummonOwnerClientID;//[Offset: 0x1a8, Size: 1]
	FName CharacterEventDirectionID;//[Offset: 0x1b8, Size: 1]
	FName CharacterEventDirectionSkinID;//[Offset: 0x1c0, Size: 1]
	FName CharacterID;//[Offset: 0x1c8, Size: 1]
	FName CharacterSkinID;//[Offset: 0x1d0, Size: 1]
	bool bIsWorldUnit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool IsSummon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bIsDeadFlagSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	uint16 ReplicatedHealth;//[Offset: 0x21a, Size: 1]
	uint16 ReplicatedMaxHealth;//[Offset: 0x21c, Size: 1]
	uint16 ReplicatedMana;//[Offset: 0x21e, Size: 1]
	uint16 ReplicatedMaxMana;//[Offset: 0x220, Size: 1]
	uint16 ReplicatedShield;//[Offset: 0x222, Size: 1]
	uint16 ReplicatedMaxShield;//[Offset: 0x224, Size: 1]
	uint16 ReplicatedMagicShield;//[Offset: 0x226, Size: 1]
	uint16 ReplicatedMaxMagicShield;//[Offset: 0x228, Size: 1]
	float MaxHealth;//[Offset: 0x22c, Size: 1]
	UnitVisionComponent* UnitVision;//[Offset: 0x230, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x238, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x240, Size: 1]
	UnitStatComponent* StatComponent;//[Offset: 0x248, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x250, Size: 1]
	LocationSnapshotComponent* LocationSnapshotManagerComponent;//[Offset: 0x258, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x260, Size: 1]
	OPCharacterMovementComponent* OPCharacterMovementComponent;//[Offset: 0x268, Size: 1]
	PrimitiveComponent*[] CameraSummonIgnorable;//[Offset: 0x270, Size: 1]
	UnitBase*[] MoveIgnoreUnit;//[Offset: 0x280, Size: 1]
	Actor*[] MoveIgnoreActor;//[Offset: 0x290, Size: 1]
	Pawn* MyPawn;//[Offset: 0x2a0, Size: 1]
	ShapeComponent* MyCollisionComponent;//[Offset: 0x2a8, Size: 1]
	bool bIsGhostState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	<FName> GhostTokens;//[Offset: 0x2b8, Size: 1]
	FText UnitName;//[Offset: 0x3b0, Size: 1]
	byte TeamNum;//[Offset: 0x3c8, Size: 1]
	byte Level;//[Offset: 0x3c9, Size: 1]
	float Exp;//[Offset: 0x3cc, Size: 1]
	SlateBrush UnitIcon;//[Offset: 0x3d0, Size: 1]
	SlateBrush UnitIconEnemy;//[Offset: 0x458, Size: 1]
	SlateBrush UnitKillStreakIcon;//[Offset: 0x4e0, Size: 1]
	SlateBrush UnitKillStreakIconEnemy;//[Offset: 0x568, Size: 1]
	float DamageResistance_WithNoMinions;//[Offset: 0x5f0, Size: 1]
	CurveFloat* DamageAnimationCurve;//[Offset: 0x608, Size: 1]
	Material* InvisibleMaterialEffect;//[Offset: 0x620, Size: 1]
	void SucideByWorld(bool bIsDeathByCheat);// 0x1a14520
	void SpawnAddExpEffect(enum ActorType, Vector SourceLocation, float EffectDuration);// 0x1a14400
	bool ShouldTakeDamageBP();// 0x1a13de0
	void SetTeamNum(byte NewTeam);// 0x1a13c10
	void SetPrimitiveValue(enum InPrimitiveType, float InValue);// 0x1a13b40
	void SetMaxMana(float NewMaxMana);// 0x1a13ac0
	void SetMaxHealth(float MaxHP);// 0x1a13a40
	float SetManaPercent(float Amount);// 0x1a139a0
	void SetManaAndMaxMana(float NewMana, float NewMaxMana);// 0x1a138d0
	void SetMana(float NewMana);// 0x1a13850
	float SetHealthPercent(float Amount);// 0x1a137b0
	void SetHealthAndMaxHealth(float NewHealth, float NewMaxHealth);// 0x1a136e0
	void SetHealth(float HP);// 0x1a13660
	void RemovePrimitiveValueToken(enum InPrimitiveType, FName InTokenName);// 0x1a13590
	void OverrideSkinID(FName InNewSkinID);// 0x1a133c0
	void OverrideHeroEventCharacter(FName InCharacterID, FName InCharacterSkinID);// 0x1a132f0
	void OnReplicatedHealthChanged();// 0x1a132d0
	void OnRep_TeamNum();// 0x1a132b0
	void OnRep_Shield();// 0x1a13290
	void OnRep_MaxMana();// 0x1a13270
	void OnRep_MaxHealth();// 0x1a13250
	void OnRep_Mana();// 0x1a13230
	void OnRep_Level();// 0x1a13210
	void OnRep_IsSummon();// 0x1a131f0
	void OnRep_Health();// 0x1a131b0
	void OnRep_GhostState();// 0x1a13190
	void OnRep_Exp();// 0x1a13150
	void OnDimensionChanged();// 0x1a13130
	void OnDead_S2A();// 0x1a13110
	void OnAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a12bd0
	void NotifyRespawn_S2C_Reliable(const Transform InSpawnTransform);// 0x1a12b00
	void NotifyDeath_S2C_Reliable(float InRespawnTime, Actor* InLastAffectedAttacker);// 0x1a12a20
	void LevelUp(byte InLevelIncrease, bool InWithLevelUpEffect);// 0x1a12950
	bool IsMaxLevel();// 0x1a12880
	bool IsInvincible();// 0x1a12850
	bool IsEnemy(Actor* Target, bool IgnoreSelfDead, bool DoHidingCheck);// 0x1a12610
	static bool IsDeadUnit(Actor* InActor);// 0x1a12580
	static UnitBase* GetWorldUnitBase(Object* InWorldContextObject);// 0x1a122d0
	float GetShield();// 0x1a121d0
	enum GetMonsterType();// 0x1a11e00
	float GetMaxShield();// 0x1a11dd0
	float GetMaxMana();// 0x1a11db0
	float GetMaxMagicalShield();// 0x1a11d80
	int GetMaxLevel();// 0x1a11d50
	float GetMaxHealth();// 0x1a11d30
	float GetManaPercent();// 0x1a11cf0
	float GetMana();// 0x1a11cd0
	float GetMagicalShield();// 0x1a11ca0
	float GetLostMana();// 0x1a11c70
	float GetLostHealth();// 0x1a11c40
	FName GetHeroEventCharacterSkinID();// 0x1a11bd0
	FName GetHeroEventCharacterID();// 0x1a11b90
	float GetHealthPercent();// 0x1a11b50
	float GetHealth();// 0x19eb840
	float GetEXPPercent();// 0x1a11960
	static float GetExpNeededForNextLevel(Object* InWorldContextObject, byte InNextLevel);// 0x1a11990
	static float GetClosetDistanceToPoint(Actor* InActor, Vector InPoint);// 0x1a11710
	enum GetActorTypeSub();// 0x1a11550
	enum GetActorTypeMain();// 0x1a11520
	void BroadcastInGameObjectivePopup_S2C(FName InCausedBy, FString InUserNickName, byte InArgument1, byte InArgument2, FName InInGameObjectPopupTableIndex);// 0x1a11240
	void AddPrimitiveValueToken(enum InPrimitiveType, float InValue, FName InTokenName);// 0x1a11120
	float AddMana(float Amount);// 0x1a10ff0
	float AddHP(float Amount);// 0x1a10ec0

--------------------------------
Class: UnitVisionComponent.ActorComponent.Object
	UnitVisionRange VisionRange;//[Offset: 0xc0, Size: 1]
	float OwnerRadius;//[Offset: 0xcc, Size: 1]
	enum VisionShape;//[Offset: 0xd0, Size: 1]
	bool bPassTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bIgnoreWallCheckFromMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bIsHeimdall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	MulticastInlineDelegateProperty OnOPActorBeginOverlap;//[Size: 1]
	MulticastInlineDelegateProperty OnOPActorEndOverlap;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitExposedStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHidingFlagChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBeginOverlapedByOther;//[Size: 1]
	MulticastInlineDelegateProperty OnEndOverlapedByOther;//[Size: 1]
	bool IsHidingFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	byte ExposedFlag;//[Offset: 0x139, Size: 1]
	bool bGenerateOverlapEventByOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	<UnitVisionComponent*> LastOverlaps;//[Offset: 0x150, Size: 1]
	<UnitVisionComponent*> NewOverlaps;//[Offset: 0x1a0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x200, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x208, Size: 1]
	bool bIgnoreVisionCalculationOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bIgnoreTeamMateOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	float BlockingCheckHeight;//[Offset: 0x214, Size: 1]
	bool SimulateIsOverlappedInSphere(Vector InSphereOrigin, float InSphereRadius);// 0x1a14310
	bool SimulateIsOverlappedInCylinder(Vector InSphereOrigin, float InCylinderRadius, float InCylinderHeight);// 0x1a141e0
	bool SimulateActorIsInVision(Actor* InTarget);// 0x1a13e10
	void SetVisionSphereRange_BP(float InSphereRadius);// 0x1a13d60
	void SetVisionCylinderRange_BP(float InCylinderRadius, float InCylinderHeight);// 0x1a13c90
	void RemoveMeshHideRequest(FName InRequestID);// 0x1a13500
	void RemoveHiddenToken(FName InTokenName);// 0x1a13470
	void OnRep_Hiding();// 0x1a131d0
	void OnRep_Exposed();// 0x1a13170
	void OnAppearEnemyBP();// 0x1d4eb70
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a12e70
	bool IsUnitVisionComponentInVision(UnitVisionComponent* InTarget);// 0x1a128b0
	bool IsHidingAndNotExposedOnLocal();// 0x1a12820
	bool IsHiding();// 0x1a127f0
	bool IsExposedByAnyone();// 0x1a127c0
	bool IsExposedBy(byte InUnitTeamNum);// 0x1a12730
	bool IsBlockedByStaticObjects(Actor* InTarget, Vector InOwnerLocation);// 0x1a12490
	bool IsActorInVision(Actor* InTarget);// 0x1a123f0
	bool HasEnemyTeamNPCsInSight(byte MyTeamNum);// 0x1a12360
	enum GetVisionShape();// 0x1a122b0
	float GetVisionRange();// 0x1463360
	float GetVisionHeight();// 0x1a12290
	float GetUnitHeight();// 0x1a12260
	CapsuleComponent* GetUnitBorderCapsule();// 0x1a12230
	float GetUnitBorder();// 0x1a12200
	Actor* GetNearstUnitInRangeWithTag(Actor* InMyTowerActor, float InRangeOverride, bool InbAllowDifferentDimensions, Vector InRangeCenter, bool bIncludeAlly, bool bIncludeEnemy, FName InActorTag);// 0x1a11ef0
	Actor* GetNearestEnemyInSightByTower();// 0x1a11e30
	Actor* GetNearestEnemyInSight_IgnoreInvincible();// 0x1a11ec0
	Actor* GetNearestEnemyInSight_EnemyPlaceable();// 0x1a11e90
	Actor* GetNearestEnemyInSight_EnemyMinion();// 0x1a11e60
	Actor* GetInSightByTutorialTower();// 0x1a11c10
	Actor* GetFirstEnemyInSight();// 0x1a11b20
	UnitVisionComponent*[] GetAllUnitVisionsInRange();// 0x1a11600
	Actor*[] GetAllEnemysInSight();// 0x1a11580
	enum CheckExposedRenderState(bool IsTeam, bool IsTargetExposed, bool IsTargetHiding);// 0x1a113f0
	void AddMeshHideRequest(FName InRequestID);// 0x1a11090
	void AddHiddenToken(FName InTokenName);// 0x1a10f60

--------------------------------
Class: UnitVisionRange
	float VisionRange;//[Offset: 0x0, Size: 1]
	float VisionHeight;//[Offset: 0x4, Size: 1]
	enum VisionShape;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPAbnormalStateComponent.ActorComponent.Object
	OPDamageIndicatorTypeComponent* LastIndicator;//[Offset: 0xb0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x188, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x190, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x198, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x1a0, Size: 1]
	OPAbnormalStateEffectObject*[] AbnormalStateEffectObjects;//[Offset: 0x1a8, Size: 1]
	OPAbnormalStateEffectObject*[] AbnormalStateEffectTickableObjects;//[Offset: 0x1b8, Size: 1]
	byte Dimension;//[Offset: 0x1e8, Size: 1]
	float BodyExpansionScale;//[Offset: 0x1ec, Size: 1]
	bool bPlayTravelModeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateInHerit;//[Size: 1]
	float TryGetDurationLeftBySkillEffectID(FName InSkillEffectTableID);// 0x192bb50
	OPAbnormalStateEffectObject* TryGetAbnormalStateEffectObjectByKeywordType(FName InExpansionKeyword);// 0x192bab0
	OPAbnormalStateEffectObject* TryGetAbnormalStateEffectObject(class OPAbnormalStateEffectObject InClass);// 0x192ba10
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x192a970
	void OnRespawnEvent();// 0x192a910
	void OnRep_BodyExpansionScale();// 0xd8dcf0
	void OnLockInSphereStatusChanged_S2C_Reliable(Vector InCenter, float InRadius, float InHeight);// 0x192a720
	void OnKeywordStateChangedFromAbnormalComponent_S2C_Unreliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x192a4e0
	void OnKeywordStateChangedFromAbnormalComponent_S2C_Reliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x192a2a0
	void OnKeywordStateChangedFromAbnormalComponent_S2AC_Unreliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom, const PlayerState*[] InExcept);// 0x192a000
	void OnKeywordStateChangedFromAbnormalComponent_S2AC_Reliable(int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom, const PlayerState*[] InExcept);// 0x1929d60
	void OnHidingStateChanged();// 0x1929bc0
	void OnDeathEventGlobal(UnitBase* InUnitBase);// 0x1929960
	void OnDeathEvent(Actor* InLastAffectedAttacker);// 0x19298d0
	static bool IsTwoUnitsInSameDimention_Static(Actor* InActorA, Actor* InActorB);// 0x1929100
	bool IsStructure();// 0x19290d0
	bool IsInSameDimensionWithLocal();// 0x19290a0
	static bool IsInSameDimensionIndexWithLocal(Object* InWorldContextObject, byte InTargetDimension);// 0x1928fd0
	static bool IsInCustomDimension(byte InDimensionCode);// 0x1928f50
	bool HasAnyAbnormalStateInfoFrom(FName InKeyName, Actor* InAppliedFrom);// 0x1928d00
	bool HasAnyAbnormalStateInfo(FName InKeyName);// 0x1928c60
	static bool HasAbnormalStateInfoFromPlayerBase(PlayerBase* PlayerBase, FName InKeywordType, FName InKeyName);// 0x1928b60
	bool HasAbnormalStateInfo(FName InKeywordType, FName InKeyName);// 0x1928a90
	static OPAbnormalStateComponent* GetWorldAbnormalStateComponent(Object* InWorldContextObject);// 0x1928a00
	static Object* GetUITextResourceObjectByAssetName(Object* InWorldContextObject, FName InAssetName);// 0x19288f0
	int GetTotalStacks(FName InKeywordType);// 0x1928850
	float GetTimeSinceFirstAdded(FName InExpansionKeyword);// 0x19287b0
	static SlotData GetSlotFrom(Object* InWorldContextObject, AbnormalStateChangedEventPayload InPayload);// 0x19285f0
	static FName GetSkillEffectFrom(Object* InWorldContextObject, AbnormalStateChangedEventPayload InPayload);// 0x1928470
	float GetMaxCCDurationLeft(FName InKeywordType);// 0x19281d0
	float GetHighestAbnormalStateValue(FName InKeywordType);// 0x1928130
	bool GetCurrentAbnormalStateFlagByBaseKeyword(FName InBaseKeywordType);// 0x1928060
	float GetAbnormalStateValue(FName InKeywordType);// 0x1927fc0
	bool ContainsStackZero(FName InKeywordType);// 0x1927f20
	bool ContainsAbnormalStateKeyword(FName InKeywordType);// 0x1927e80
	bool CC_ShouldCancelPreviousMovementForce(FName InKeywordType);// 0x1927ba0
	bool CC_ShouldBlockCameraAngleControl();// 0x1927b70
	bool CC_CanMove();// 0x1927b40
	bool CC_CanLockSkill(bool InIsMovableTypeSkill);// 0x1927aa0
	void CC_Apply_Simple(FName InKey, Actor* InCausedBy, FName InKeywordName, float InDuration, float AbsoluteValue, enum InCalculationRule, int InStack, bool InIsPermanent);// 0x1927840
	void BroadcastDimensionChangedEvent();// 0x19275c0
	void ApplyStatBuff_Simple(FName InKey, Actor* InCausedBy, FName InKeywordType, float InAmount, float InDuration, enum InCalculationRule, int InMaxStack, int InStack, bool InIsPermanent);// 0x1927280

--------------------------------
Class: OPAbnormalStateEffectObject.Object
	FName KeywordType;//[Offset: 0x28, Size: 1]
	Actor* CausedBy;//[Offset: 0x30, Size: 1]
	FName KeyName;//[Offset: 0x38, Size: 1]
	DateTime CreatedAt;//[Offset: 0x40, Size: 1]
	AbnormalStateChangedEventPayload Payload;//[Offset: 0x48, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	delegate OnDestroyed;//[Offset: 0xd9, Size: 1]
	void OnUpdated_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x192ad50
	void OnTick_BPNE(float InDeltaTime, OPAbnormalStateComponent* InOwnerAbnormalStateComponent);// 0x192ac70
	void OnStarted_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x192aaa0
	void OnHidingStatusChanged_BPNE(bool InHiding, Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController);// 0x1929be0
	void OnFinished_BPNE(Actor* InOwner, Character* InLocalCharacter, Controller* InLocalController, Transform InOwnerTransform);// 0x19299f0
	float GetTimeSinceCreation();// 0x1928780
	OP_GameState* GetOPGameState(Object* InWorldContextObject);// 0x1928270
	enum GetHideDirectionInStealth();// 0x1928100

--------------------------------
Class: AbnormalStateChangedEventPayload
	int SkillEffectTableFrom;//[Offset: 0x0, Size: 1]
	SlotData SlotFrom;//[Offset: 0x4, Size: 1]
	bool bQueuedStackAboutToApplyAgain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte KeyNameUniqueIndex;//[Offset: 0x21, Size: 1]
	float Duration;//[Offset: 0x24, Size: 1]
	float DisplayDuration;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlotData
	int ItemTableTableUniqueIndex;//[Offset: 0x0, Size: 1]
	int SkillTableTableUniqueIndex;//[Offset: 0x4, Size: 1]
	enum Slot;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OP_GameState.GameStateBase.Info.Actor.Object
	OPGameEventDispatcher* GameEventDispatcher;//[Offset: 0x270, Size: 1]
	OPRoundHandlerComponent* RoundHandlerComponent;//[Offset: 0x278, Size: 1]
	OPUnitManager* UnitManager;//[Offset: 0x280, Size: 1]
	OPSkillColliderManager* SkillColliderManager;//[Offset: 0x288, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x290, Size: 1]
	OPSkillComponent* WorldSkillComponent;//[Offset: 0x298, Size: 1]
	OPAbnormalStateComponent* WorldAbnormalComponent;//[Offset: 0x2a0, Size: 1]
	UnitBase* WorldUnitBase;//[Offset: 0x2a8, Size: 1]
	PSCoolTimeManager* WorldCoolTimeManager;//[Offset: 0x2b0, Size: 1]
	PSInventoryManager* WorldInventoryManager;//[Offset: 0x2b8, Size: 1]
	UnitStatComponent* WorldStatComponent;//[Offset: 0x2c0, Size: 1]
	OPDirectionComponent* WorldDirectionComponent;//[Offset: 0x2c8, Size: 1]
	bool bCanBuyRefillableItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	FText GameModeName;//[Offset: 0x2d8, Size: 1]
	FText[] GameModeDescriptions;//[Offset: 0x2f0, Size: 1]
	int ReadyTimerForObserverSelect;//[Offset: 0x300, Size: 1]
	int Draft_ReadyWaitingTime;//[Offset: 0x304, Size: 1]
	int AutoBalancingWaitingTime;//[Offset: 0x308, Size: 1]
	byte MaxPlayersLimitation;//[Offset: 0x30c, Size: 1]
	byte MaxPlayersLimitationByForce;//[Offset: 0x30d, Size: 1]
	enum RoundScoreMethod;//[Offset: 0x30e, Size: 1]
	enum TeamSetRules;//[Offset: 0x30f, Size: 1]
	float GameStartMinionActivationDelay;//[Offset: 0x310, Size: 1]
	float GameStartJungleMinionActivationDelay;//[Offset: 0x314, Size: 1]
	enum HeroSpawnZoneSelectionRule;//[Offset: 0x318, Size: 1]
	int CustomScoreToWin;//[Offset: 0x31c, Size: 1]
	int StartLevel;//[Offset: 0x320, Size: 1]
	int StartSkillPoint;//[Offset: 0x324, Size: 1]
	int StartGold;//[Offset: 0x328, Size: 1]
	float ManaGenMutiplier;//[Offset: 0x32c, Size: 1]
	float GlobalCoolDownScaleMutiplier;//[Offset: 0x330, Size: 1]
	float EXPMultiplier;//[Offset: 0x334, Size: 1]
	float SkillDamageMultiplier;//[Offset: 0x338, Size: 1]
	int MaxCardPoint;//[Offset: 0x33c, Size: 1]
	bool EnableFountainRegen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool SendMatchDataToServerWhenEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool HidePlayerHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool HidePlayerOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	bool PreventPortalUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool HidePlayerRespawnEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	<byte,SurrenderInfo> SurrenderInfoArray;//[Offset: 0x360, Size: 1]
	<byte,SurrenderInfo> SurrenderInfoArray_forEarlySurrender;//[Offset: 0x3e0, Size: 1]
	bool IsDedicatedServerMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float EXPAdjustmentStartTimeMinute;//[Offset: 0x434, Size: 1]
	int MaxSpectators;//[Offset: 0x438, Size: 1]
	OP_PlayerController* LocalOPC;//[Offset: 0x4a8, Size: 1]
	bool OpenShopOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	<enum,FName> AvailableTeamObjectives;//[Offset: 0x4c0, Size: 1]
	void UpdateTeamObjectives(bool InIsAdded, enum InObjectiveType, FName CharacterID);// 0x1922e00
	void TimeLimitMode_Start();// 0x1922af0
	void TimeLimitMode_NotifyTime();// 0x1922ad0
	void TimeLimitMode_End();// 0x1922ab0
	void SyncSurrenderStatus(enum Status, byte TeamNum, byte NumPlayersAll, byte NumAccepted, byte NumDenied, OP_PlayerState* RequestedBy);// 0x1922620
	void SyncLaneSelectionAndCommunityLevel();// 0x19224f0
	void RequestBroadcastRoundEndResult(byte WinTeam, float TimeLapsed, Vector InLookAtPos, bool IsTestPurpose);// 0x191e940
	void OnLiveMessageAllUsers(FString InGMMessage, int InDuration);// 0x191dae0
	void Notify_PlayerJoined_S2C(PlayerState* ply);// 0x191d470
	void Notify_PlayerDisconnected_S2C(PlayerState* ply);// 0x191d3e0
	bool IsDraftModeEnabled();// 0xfec1f0
	float GetPlayerRespawnTime(float InPlayerLevel);// 0x191c330
	Vector GetPlayerPositionByTeamNum(byte TeamNum);// 0x191c290
	int GetNumSpectators();// 0x191c170
	int GetNumPlayersByTeam(byte TeamNum);// 0x191c0e0
	int GetNumPlayersByNotTeam(byte TeamNum);// 0x191c050
	int GetNumPlayers1_2Team();// 0x191c020
	void GetKDAM(byte TeamNum, out int Kills, out int Deaths, out int Assists, out int CSs);// 0x191be10
	void GetEXPSTDEV(out float OutAverage, out float OutSigma);// 0x191bd00
	bool CanAddSpectators();// 0x1919db0
	void BroadcastSystemChat(const FText Message, LinearColor ChatColor, enum InSysMsgLevel);// 0x19198d0
	void BroadcastSurfaceSoundPath(FName SoundPath);// 0x1919840
	void BroadcastSurfaceSound(SoundBase* Sound);// 0x19197b0
	void BroadcastRoundEndResult(byte WinTeam, float TimeLapsed, Vector InLookAtPos);// 0x1919690
	void BroadcastResponseHeroTrade(OP_PlayerState* Sender, OP_PlayerState* Reciever, bool IsSuccess);// 0x1919580
	void BroadcastRequestHeroTrade(OP_PlayerState* Sender, OP_PlayerState* Reciever);// 0x19194b0
	void BroadcastPlayerChangeName(PlayerState* Player, FString NewName);// 0x19193c0
	void BroadcastPlayerBoughtItem(OP_PlayerState* Player, class ItemBase Item);// 0x19192f0
	void BroadcastMatchInfo(FString PacketString);// 0x1919240
	void BroadcastKillStreakData(const KillStreakData InData);// 0x1919110
	void BroadcastKillStreakAllKill(byte InKillerTeamNum, byte InDeadTeamNum);// 0x1919040
	void BroadcastChangeTeamStatus(OP_PlayerState* Changer);// 0x1918fb0

--------------------------------
Class: OP_PlayerState.PlayerState.Info.Actor.Object
	FString ClientLoginID;//[Offset: 0x328, Size: 1]
	bool IsAnonymousMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int MMR;//[Offset: 0x33c, Size: 1]
	int CommunityLevel;//[Offset: 0x340, Size: 1]
	int LanePos;//[Offset: 0x344, Size: 1]
	OPTimerManager* TimerManager;//[Offset: 0x368, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0x370, Size: 1]
	MulticastInlineDelegateProperty OnPlayerKDACSPointChanged;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnControllingCharacterChanged;//[Size: 1]
	byte Kills;//[Offset: 0x3a9, Size: 1]
	byte Deaths;//[Offset: 0x3aa, Size: 1]
	byte Assists;//[Offset: 0x3ab, Size: 1]
	byte BuildingKills;//[Offset: 0x3ac, Size: 1]
	int CreepScore;//[Offset: 0x3b0, Size: 1]
	byte KillStreak;//[Offset: 0x3b4, Size: 1]
	byte MaxConsecutiveKills;//[Offset: 0x3b5, Size: 1]
	byte ConsecutiveKills;//[Offset: 0x3b6, Size: 1]
	byte ConsecutiveDeaths;//[Offset: 0x3b7, Size: 1]
	bool ChatMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	byte TeamNum;//[Offset: 0x3b9, Size: 1]
	float Gold;//[Offset: 0x3bc, Size: 1]
	float TotalGold;//[Offset: 0x3c0, Size: 1]
	int MaxItemPoint;//[Offset: 0x3c4, Size: 1]
	DateTime LastHistoryTime;//[Offset: 0x3c8, Size: 1]
	byte MaxKillStreak;//[Offset: 0x3d0, Size: 1]
	Vector LastDeadPosition;//[Offset: 0x3d4, Size: 1]
	OP_Character* ControllingCharacter;//[Offset: 0x3e0, Size: 1]
	class OP_Character* SelectedHeroClass;//[Offset: 0x3e8, Size: 1]
	class OP_Character* PreSelectedHeroClass;//[Offset: 0x3f0, Size: 1]
	FName SelectedHeroSkinID;//[Offset: 0x3f8, Size: 1]
	bool bIsOPSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bIsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	int CrowdControlCount;//[Offset: 0x404, Size: 1]
	int PlayerDamage;//[Offset: 0x408, Size: 1]
	int MinionKillCount;//[Offset: 0x40c, Size: 1]
	int MinionDamage;//[Offset: 0x410, Size: 1]
	int MonsterKillCount;//[Offset: 0x414, Size: 1]
	int MonsterDamage;//[Offset: 0x418, Size: 1]
	float DamageTaken;//[Offset: 0x41c, Size: 1]
	float DamageTaken_Minion;//[Offset: 0x420, Size: 1]
	float DamageTaken_Hero;//[Offset: 0x424, Size: 1]
	float DamageTaken_Monster;//[Offset: 0x428, Size: 1]
	float DamageTaken_Structure;//[Offset: 0x42c, Size: 1]
	float DamageMitigated;//[Offset: 0x430, Size: 1]
	float BuildingDamageGiven;//[Offset: 0x434, Size: 1]
	float PlayerHealing;//[Offset: 0x438, Size: 1]
	float HealingTaken;//[Offset: 0x43c, Size: 1]
	FName SelectedHeroID;//[Offset: 0x440, Size: 1]
	int PlayerIndex;//[Offset: 0x448, Size: 1]
	int DraftOrder;//[Offset: 0x44c, Size: 1]
	enum DesiredLanePosition;//[Offset: 0x450, Size: 1]
	enum SelectedLanePosition;//[Offset: 0x451, Size: 1]
	int CurrentStep;//[Offset: 0x468, Size: 1]
	FName[] RecommendItems;//[Offset: 0x470, Size: 1]
	FName[] AutoItemGuideList;//[Offset: 0x480, Size: 1]
	ShopItemHistory[] ShopItemHistory;//[Offset: 0x490, Size: 1]
	MulticastInlineDelegateProperty OnIntoFountain;//[Size: 1]
	MaterialParameterCollection* TeamMPC;//[Offset: 0x510, Size: 1]
	Vector[] BattleAlertLocationStack;//[Offset: 0x580, Size: 1]
	int RankTier;//[Offset: 0x5a8, Size: 1]
	FName[] HeroIDsForDediServer;//[Offset: 0x5b0, Size: 1]
	void UpdatePlayerIndex(int InIndex);// 0x192bce0
	void UpdateCommunityLevel(int InCommunityLevel);// 0x192bc50
	int TryGetLevel();// 0x192bc20
	float TryGetExp();// 0x192bbf0
	void SetUseCustomPlayerNames(bool bUse);// 0x192b920
	void SetTraining(FName InHeroID, FName InSkinID);// 0x192b850
	void SetPreSelectedHero(class OP_Character NewHero, bool bReplicateNow);// 0x192b780
	void SetPlayerBotName(const FText InBotName);// 0x192b6c0
	void SetLanePosition(enum NewPosition, bool IsFixed);// 0x192b5e0
	void SetIsOPSpectator(bool InbIsOPSpectator, PlayerController* APC);// 0x192b510
	void SetHeroIDs_C2S(const FName[] NewHasHeroIDs);// 0x192b470
	void ReceiveShowGotOrbPing(uint32 InPlayerID, FString InClientLoginID);// 0x192b2f0
	void ReceiveRemovePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder);// 0x192b1c0
	void ReceivePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder, const Vector2D InPosByMinimap, const Vector InPosByWorld, byte InPingSystemMsg);// 0x192afd0
	void ReceiveHideGotOrbPing();// 0x192afb0
	void OverridePlayerName(FString NewName);// 0x192af00
	void OnTeamChanged();// 0x192ac50
	void OnShopItemHistoryCleared();// 0x192a950
	void OnSelectedHeroClassChanged();// 0x192a930
	void OnRep_ControllingCharacter();// 0x192a8f0
	void OnPreSelectedHeroClassChanged();// 0x192a8d0
	void OnPossessToBattleCharacter(OP_Character* InCharacter);// 0x192a840
	void OnKDACSPointChanged();// 0x1929d40
	void OnGoldChanged();// 0x1929ba0
	void OnControllingCharacterStatChanged();// 0x19298b0
	void OnControllingCharacterLevelChanged(byte InNewLevel);// 0x1929830
	void OnChangeOtherClientLoginID_S2C(const int InPlayerID, FString InClientLoginID);// 0x19293c0
	void OnChangeClientLoginID_S2C(FString InClientLoginID);// 0x1929310
	void OnChangeClientLoginID_S2A(FString InClientLoginID);// 0x1929260
	void OnBattleAlert(Vector InLocation);// 0x19291d0
	void IntoFountain_S2C(bool IsIn);// 0x1928ec0
	void InitAutoLearnSkillInfo(FName AutoSkillID);// 0x1928e30
	bool HasValidAutoSkillSettings();// 0x1928e00
	bool HasValidAutoItemSettings();// 0x1928dd0
	class OP_Character GetUnselectedRandomHero();// 0x19289c0
	FText GetSelectedHeroName();// 0x19283d0
	FName GetSelectedHeroID();// 0x1928390
	class OP_Character GetSelectedHeroClass();// 0x1928350
	FName GetPreSelectedHeroID();// 0x1928310
	void ClearShopItemHistory();// 0x1927e60
	void CheckRefillableItems();// 0x1927e40
	void ChangePlayerName(FString NewName);// 0x1927d70
	void ChangeDisconnected(bool InIsDisconnected);// 0x1927ce0
	bool CanBuyItem(FName ItemName);// 0x1927c40
	void BroadcastSelectedHero(class OP_Character InHeroClass, FName InSkinID);// 0x1927770
	void BroadcastKillStreak(const KillStreakData InKillstreakData, float InRespawnTime);// 0x19275e0
	void AutoLearnSkill(bool bIsForceLearn);// 0x1927530
	void AddGoldNotice(float Amount, bool NeedReplicate, bool IsRecording, Actor* InHitTarget, Actor* InAttacker);// 0x19270b0
	void AddGold(float Amount, bool NeedReplicate, bool IsRecording, Actor* InHitTarget, Actor* InAttacker);// 0x1926ee0

--------------------------------
Class: OP_Character.PlayerBase.Character.Pawn.Actor.Object
	Vector SpawnedLocation;//[Offset: 0xa18, Size: 1]
	enum LaneAtSpawnedByEditorOnly;//[Offset: 0xa38, Size: 1]
	OPSpringArmComponent* SpringArmCameraBoom;//[Offset: 0xa58, Size: 1]
	SpringArmComponent* ViewPivotSpringArmComponent;//[Offset: 0xa60, Size: 1]
	CameraComponent* FollowCamera;//[Offset: 0xa68, Size: 1]
	DecalComponent* Decal_RangedDistance;//[Offset: 0xa70, Size: 1]
	class OPEnemyNotifyActorComponent* NearbyEnemyNotifyActorComponentClass;//[Offset: 0xa78, Size: 1]
	NPCBase*[] AggroCheck_NPC;//[Offset: 0xa98, Size: 1]
	TowerBaseCPP*[] AggroCheck_Tower;//[Offset: 0xaa8, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0xab8, Size: 1]
	bool EnableDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	bool CantJumpKeyFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad1, Size: 1]
	MulticastInlineDelegateProperty OnStackBonusChanged;//[Size: 1]
	HeroHealthbar* HUDHeadbarComponent;//[Offset: 0xae8, Size: 1]
	BillboardComponent* ExposedSign;//[Offset: 0xaf0, Size: 1]
	PointLightComponent* CharacterLightComponent;//[Offset: 0xaf8, Size: 1]
	bool bUse2xPitchResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	Material* Material_RangedAttackIndicator;//[Offset: 0xb18, Size: 1]
	LocationSnapshotComponent* LocationSnapshotManagerComponent;//[Offset: 0xb20, Size: 1]
	AnimMontage* WinCeremonyAnimation;//[Offset: 0xb28, Size: 1]
	float RangedAttackTraceSpeed;//[Offset: 0xb30, Size: 1]
	float CardPointWhenKill;//[Offset: 0xb38, Size: 1]
	float BaseTurnRate;//[Offset: 0xb3c, Size: 1]
	float BaseLookUpRate;//[Offset: 0xb40, Size: 1]
	bool AttackMontageHitDetectionStartTimeInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	float LengthFromCenterToShoulder;//[Offset: 0xbb8, Size: 1]
	float MeleeAttackCapsuleIncludeRatio;//[Offset: 0xbbc, Size: 1]
	class CameraShakeBase* CameraShakeWhenHit;//[Offset: 0xbc0, Size: 1]
	float CameraShakeScaleWhenHit;//[Offset: 0xbc8, Size: 1]
	bool InFountainGuard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcc, Size: 1]
	OP_PlayerController* CachedControllerForDunk;//[Offset: 0xbd0, Size: 1]
	Vector SoundListenerOffset;//[Offset: 0xbd8, Size: 1]
	bool bIsDummyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	OverprimeObserverPawn*[] Observers;//[Offset: 0xbf8, Size: 1]
	void UpdateSettingValues();// 0x1911b00
	void UpdateAttackMontageStartTime(float InAttackMontagePlayRate);// 0x19118d0
	bool UpdateAttackMontageHitDetectionTimeInfo(float InAttackMontageHitDetectionPlayTime);// 0x1911840
	void SetObserver(OverprimeObserverPawn* InObserver, bool bIsAdd);// 0x19113a0
	void SetInFountainGuard(bool InInFountainGuard);// 0x1911220
	void SetCameraLag(float LagValue, float Duration);// 0x1910eb0
	void PlayLevelupEffect();// 0x190fae0
	void PlayerCharacterUpdateValue(float InValue);// 0x190fb20
	void PlayDefaultCameraShake_BP(bool bIgnoreUserSettings);// 0x190fa50
	void PlayCameraShake(class CameraShakeBase InCameraShakeClass, float InScale, bool bIgnoreUserSettings);// 0x190f930
	void OnUpdateLocalOtherPlayerItems(int OtherPlayerID);// 0x190f8a0
	void OnSomethingOverlappedInVision(Actor* Target);// 0x190f810
	void OnSomethingEndOverlappedInVision(Actor* Target);// 0x190f780
	void OnSetScarecrow();// 0x190f760
	void OnPossessedByClient();// 0x190f740
	void OnPlayerUsePortal(bool Activation);// 0x190f6b0
	void OnPlayerHiddenStateChangedBP(bool IsTeam, bool IsExposed, bool IsHiding);// 0x190f590
	bool IsEnemyAndInvincible(Actor* Target, bool DoHidingCheck, bool IgnoreInvincibleCheck);// 0x190ef90
	SkillStatInfo[] GetSkillStatInfo_RMB(Object* InWorldContextObject);// 0x1d4eb70
	SkillStatInfo[] GetSkillStatInfo_R(Object* InWorldContextObject);// 0x1d4eb70
	SkillStatInfo[] GetSkillStatInfo_Q(Object* InWorldContextObject);// 0x1d4eb70
	SkillStatInfo[] GetSkillStatInfo_LMB(Object* InWorldContextObject);// 0x1d4eb70
	SkillStatInfo[] GetSkillStatInfo_E(Object* InWorldContextObject);// 0x1d4eb70
	FText GetSkillDescription_RMB(Object* InWorldContextObject, int InLevel);// 0x1d4eb70
	FText GetSkillDescription_R(Object* InWorldContextObject, int InLevel);// 0x1d4eb70
	FText GetSkillDescription_Q(Object* InWorldContextObject, int InLevel);// 0x1d4eb70
	FText GetSkillDescription_LMB(Object* InWorldContextObject);// 0x1d4eb70
	FText GetSkillDescription_E(Object* InWorldContextObject, int InLevel);// 0x1d4eb70
	OP_PlayerState* GetOP_PlayerState();// 0x190ee10
	OP_PlayerController* GetOP_PlayerController();// 0x190ede0
	static OP_Character* GetLocalOPCharacter(Object* InWorldContextObject);// 0x190ed50
	Vector GetEyeTraceHitPos(float Distance);// 0x190eaf0
	HitResult GetEyeTrace(float Distance);// 0x190e900
	static OP_Character* GetCharacterDefaultObject(class OP_Character Class, out enum Out);// 0x190e600
	Rotator GetAutoLockedTargetRotationBP();// 0x190e5c0
	float GetAttackRange();// 0x190e590
	void EndOverlapWithUnitComponentTarget(Actor* InOtherActor);// 0x190e500
	bool CanPlayerAttackBP();// 0x190e4b0
	void BeginOverlapWithUnitComponentTarget(Actor* InOtherActor);// 0x190e1c0
	void AddCameraBoomLength(float InAddLength);// 0x190e070

--------------------------------
Class: PlayerBase.Character.Pawn.Actor.Object
	bool BeginPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	float FoliageRenderTargetDrawSize;//[Offset: 0x544, Size: 1]
	class PawnDeadBody* RagdollClass;//[Offset: 0x560, Size: 1]
	MulticastInlineDelegateProperty OnNetworkValueChanged;//[Size: 1]
	bool IgnoreDeathEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	byte TeamNum;//[Offset: 0x579, Size: 1]
	bool IsSkillActivationPreparationRooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	float ReplicatedAirControl;//[Offset: 0x770, Size: 1]
	float ReplicatedMovespeed;//[Offset: 0x774, Size: 1]
	float ReplicatedJumpZVelocity;//[Offset: 0x778, Size: 1]
	float ReplicatedGravity;//[Offset: 0x77c, Size: 1]
	bool ReplicatedZeroFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	bool ReplicatedHighAirFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 1]
	enum AttackCategory;//[Offset: 0x783, Size: 1]
	enum DifficultyType;//[Offset: 0x784, Size: 1]
	enum ActorType_Main;//[Offset: 0x785, Size: 1]
	enum ActorType_Sub;//[Offset: 0x786, Size: 1]
	<FName,bool> NWBools;//[Offset: 0x788, Size: 1]
	FXSystemAsset* SpawnEffect;//[Offset: 0x828, Size: 1]
	SoundBase* SpawnSound;//[Offset: 0x830, Size: 1]
	bool ActivateWallDepthRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	ParticleSystem* DeathEffectCommon;//[Offset: 0x840, Size: 1]
	float DeathEffectCommonPlayTime;//[Offset: 0x848, Size: 1]
	bool AttackTypeIsMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	int NumAttackPatterns;//[Offset: 0x850, Size: 1]
	UnitStatComponent* UnitStatComponent;//[Offset: 0x858, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x860, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x868, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x870, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x878, Size: 1]
	OPRewardComponent* OPRewardComponent;//[Offset: 0x880, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x888, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x890, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x898, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x8a0, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x8a8, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x8b0, Size: 1]
	AnimMontage* CurrentHitAnimation;//[Offset: 0x8b8, Size: 1]
	<enum,AnimMontage*> DirectionalHitAnimation;//[Offset: 0x8c0, Size: 1]
	float HitStopVectorForce;//[Offset: 0x970, Size: 1]
	Actor* LastAttacker;//[Offset: 0xa10, Size: 1]
	void ZeroGravityPlayerNonReplicating(bool boo, FName ID);// 0x1a02210
	void ZeroGravityPlayer(bool boo, FName ID);// 0x1a02140
	void ZeroFrictionPlayer(bool boo, FName ID);// 0x1a02070
	void UpdateLastAttacker_BeforeDestroy_S2OC(Actor* InLastAttacker);// 0xf53b50
	static PlayerBase* TryGetPlayerUnit(Actor* InActor);// 0x1a01fc0
	void SyncNWBool(FName Index, bool boo);// 0x1a01eb0
	void SuppressAirFrictionPlayer(bool boo, FName ID);// 0x1a01de0
	void SetReplicatedMovement_BP(Vector InNewVector);// 0x1a01d50
	void SetNWBool(FName Index, bool boo, bool IgnoreSync);// 0x1a01c40
	void SetHexSkinID(FName InSkinTableID, bool InIsReplicatedCall);// 0x1a01b70
	void SetHexMesh(class Actor InClassToChange);// 0x1a01ae0
	void SetFallingLateralFriction_UntilLand(bool boo, float InValue, FName ID);// 0x1a019c0
	void SetCanMoveInAir_S2C(bool InValue);// 0x1a01930
	void SetActorLocationWithNoAccelerationWithReplicationSV(Vector InNewLocation);// 0x1a018a0
	void SendC2BMode(int Mode, bool Bool, int Integer, float Float, Vector Vector, Actor* Actor, FName Name);// 0x1a01670
	void RecoverHitStopReaction_BP();// 0x1a01650
	void PrepareDestroyActor_S2OC();// 0x1a01630
	void OnUnitLevelChanged(byte InNewLevel);// 0x1a015b0
	void OnRespawnEvent();// 0x1a01590
	void OnRep_ZeroFriction();// 0x1a01570
	void OnRep_MoveSpeed();// 0x1a01550
	void OnRep_JumpSpeed();// 0x1a01530
	void OnRep_GravityScale();// 0x1a01510
	void OnRep_AirFriction();// 0x1a014f0
	void OnRep_AirControl();// 0x1a014d0
	void OnReceivePlayerBaseNotify(FName NotifyName);// 0x1a01440
	void OnPlayerDeath(Actor* Attacker);// 0x1a013b0
	void OnNetworkValueChanged_BPNE(FName InName);// 0x1a01320
	void OnNativeHidingStateChanged();// 0x1a01300
	void OnDimensionChanged();// 0xd8dcf0
	void OnDeathEvent_BPNE();// 0x1a012e0
	void OnDeathEvent(Actor* InLastAffectedAttacker);// 0x1a01250
	void OnCharacterHit(Vector InHitDirection, float InTimeHitStop);// 0x1a01170
	void OnCapsuleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, out const HitResult Hit);// 0x1a00f90
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a00d00
	void MaxAccelerationPlayer(bool boo, FName ID);// 0x1a009a0
	void LaunchCharacterWithReplicationSV(Vector Speed, bool OverrideXY, bool OverrideZ);// 0x1a00880
	void LaunchCharacterBroadcast(Vector Speed, bool OverrideXY, bool OverrideZ);// 0x1a00750
	bool IsGroundHeightIsInRange(float InMaxDetectionHeight);// 0x1a006c0
	bool IsEnemy(Actor* Target, bool IgnoreSelfDead, bool DoHidingCheck);// 0x1a005a0
	void HexSkinIDBroadcast(FName InHexSkinID);// 0x1a00440
	bool HasGravityPlayer(FName ID);// 0x1a003a0
	AnimMontage* GetStunAnimation_BPNE();// 0x1a002e0
	float GetStat(enum StatType);// 0x1a00250
	Transform GetShootPosTransform();// 0x1a001e0
	Vector GetShootPos();// 0x1a001a0
	Transform GetRootSphereGroundTransform();// 0x1a00130
	Vector GetReplicatedMovement_BP();// 0x1a00080
	bool GetNWBool(FName Index);// 0x19fffe0
	OP_PlayerState* GetLastPlayerState();// 0x19fffb0
	OP_PlayerController* GetLastPlayerController();// 0x19fff80
	Transform GetGroundTransform();// 0x19ffef0
	Vector GetGroundLocation();// 0x19ffe40
	bool GetGroundHeight(out float OutGroundHeight, float InMaxDetectionHeight);// 0x19ffd50
	float GetDamage();// 0x19ffcf0
	FName GetCharacterSkinID(Object* InWorldContextObject);// 0x19ffc60
	FName GetCharacterID();// 0x19ffc20
	Vector GetC2BVector(int Mode);// 0x19ffb30
	bool GetC2BBool(int Mode);// 0x19ffa90
	Actor* GetC2BActor(int Mode);// 0x19ff9f0
	Vector GetActorLocationRandomBounds(float tolerence);// 0x19ff950
	void GatherCurrentMovement_BP();// 0x19ff890
	void EmitSound_CL(SoundBase* Sound, float Radius, float Volume, float Pitch, float InStartTime, SoundClass* InSoundClassOverrride);// 0x19ff6b0
	void DoHitStopReaction_BP(float InTime);// 0x19ff580
	void AirFrictionPlayer(bool boo, FName ID);// 0x19ff4b0
	void AirControlPlayer(float InValue, FName ID);// 0x19ff3e0

--------------------------------
Class: OverprimeObserverPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x2a8, Size: 1]
	OP_Character* TargetCharacter;//[Offset: 0x2b0, Size: 1]
	OP_PlayerController* OPC;//[Offset: 0x2b8, Size: 1]
	OP_PlayerState* OPS;//[Offset: 0x2c0, Size: 1]
	bool bIsPureObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float ObserverMovementTolerance;//[Offset: 0x2cc, Size: 1]
	float ObserverCameraZHeight;//[Offset: 0x2d0, Size: 1]
	float ObserverSpringArmDoCollisionTestDist;//[Offset: 0x2d4, Size: 1]
	CameraComponent* FollowCameraComponent;//[Offset: 0x2e8, Size: 1]
	SpringArmComponent* SpringArmComponent;//[Offset: 0x2f0, Size: 1]
	bool bShowNPCHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bShowTowerHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float ZoomInOutSpeed;//[Offset: 0x35c, Size: 1]
	float FlyingSpeed;//[Offset: 0x360, Size: 1]
	float FastFlyingRatio;//[Offset: 0x364, Size: 1]
	float SlowFlyingRatio;//[Offset: 0x368, Size: 1]
	bool bFreeViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	bool bPersonalViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 1]
	bool bHeroFocusFreeRotationViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e, Size: 1]
	float RotationInterpSpeed;//[Offset: 0x370, Size: 1]
	float MoveInterpSpeed;//[Offset: 0x374, Size: 1]
	bool bShowWorldMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	Actor* AllyCore;//[Offset: 0x388, Size: 1]
	Actor* EnemyCore;//[Offset: 0x390, Size: 1]
	Actor* CoreActor;//[Offset: 0x398, Size: 1]
	float CameraEventMoveTime;//[Offset: 0x3a0, Size: 1]
	float MoveUpCameraRate;//[Offset: 0x3a4, Size: 1]
	void UpdateSettingValues();// 0x1922de0
	void TargetDeathEvent(Actor* InLastAffectedAttacker);// 0x1922a20
	void ShowPlayerInfoUI();// 0x1921dc0
	void SetPlayerControllerInObserver_C2S(OP_Character* InCharacter, OverprimeObserverPawn* InObserver, bool bInAdd);// 0x19209a0
	void SetObserverPlayerType();// 0x1920980
	void SetMaxFlySpeed_C2S(float InNewRatio);// 0x19207d0
	void Observer_ToggleVolume_BPNE(bool IsMute);// 0x18ed700
	void Observer_ShowHelpMenu_BPNE(bool IsShow);// 0x18ed700
	void InitObserver(bool InBPureObserver, Actor* InAttacker);// 0x191cf40
	OP_Character* GetNearCharacterFromPureObserver();// 0x191bff0
	void DeathCamEvent(Actor* InLastAffectedAttacker);// 0x191b080

--------------------------------
Class: OP_PlayerController.PlayerController.Controller.Actor.Object
	float DeadTime;//[Offset: 0x59c, Size: 1]
	OP_CameraManager* CurrentCameraManager;//[Offset: 0x5a8, Size: 1]
	<FName,AudioComponent*> ToggleableSurfaceSounds;//[Offset: 0x5b0, Size: 1]
	OPUnitRadar* UnitRadar;//[Offset: 0x670, Size: 1]
	OP_CheatTerminalComponent* CheatTerimal;//[Offset: 0x678, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x680, Size: 1]
	OPSkillSystemReplicationTerminal* SkillSystemReplicationTerminal;//[Offset: 0x688, Size: 1]
	OPSkillCrosshairManager* SkillCrosshairManager;//[Offset: 0x690, Size: 1]
	float AutoAttackDelay;//[Offset: 0x698, Size: 1]
	class OverprimeObserverPawn* ObserverPawnClass;//[Offset: 0x6a0, Size: 1]
	class OPBattleDraftMenuComponent* DraftMenuClass;//[Offset: 0x6a8, Size: 1]
	class MainBattleUIComponent* BattleUIWidgetClass;//[Offset: 0x6b0, Size: 1]
	class MainBattleUIElement_RoundEndResultComponent* RoundEndWidgetClass;//[Offset: 0x6b8, Size: 1]
	class MainBattleUIElement_RoundEndResultComponent* RoundEndDefeatWidgetClass;//[Offset: 0x6c0, Size: 1]
	class OPESCMenuComponent* ESCMenuClass;//[Offset: 0x6c8, Size: 1]
	OPBattleDraftMenuComponent* BattleDraftMenu;//[Offset: 0x6d0, Size: 1]
	OPESCMenuComponent* ESCMenu;//[Offset: 0x6d8, Size: 1]
	class LaserPointer* RangeMeterClass;//[Offset: 0x6e0, Size: 1]
	LaserPointer* RangeMeter;//[Offset: 0x6e8, Size: 1]
	Actor* AimingEnemyTarget;//[Offset: 0x6f8, Size: 1]
	MainBattleUIComponent* MyBattleUI;//[Offset: 0x708, Size: 1]
	AudioComponent* TravelModeStartSound;//[Offset: 0x710, Size: 1]
	AudioComponent* TravelModeFinishSound;//[Offset: 0x718, Size: 1]
	AudioComponent* TravelModeStopSound;//[Offset: 0x720, Size: 1]
	AudioComponent* TravelModeLoopSound;//[Offset: 0x728, Size: 1]
	OPPingSystemComponent* PingSystemComponent;//[Offset: 0x730, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x738, Size: 1]
	FString[] ChatBanList;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty OnCharacterHit_Delegate;//[Size: 1]
	UserWidget* QMenuUMG;//[Offset: 0x7c0, Size: 1]
	UserWidget* ObserverHUD;//[Offset: 0x7c8, Size: 1]
	class UserWidget* FadeoutWidget;//[Offset: 0x7d0, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x7d8, Size: 1]
	bool bIgnoreAxisUnitButCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	bool bIsQuickChatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 1]
	float GamepadMouseSpeed;//[Offset: 0x7ec, Size: 1]
	float CameraShakeWeight;//[Offset: 0x7f8, Size: 1]
	bool EnableAutoattackCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc, Size: 1]
	SkillFunction SkillFunction_SelectionData;//[Offset: 0x800, Size: 1]
	MulticastInlineDelegateProperty OnAddItemHistory;//[Size: 1]
	MulticastInlineDelegateProperty OnAddItemUpdateUI;//[Size: 1]
	class OP_Character* LastPlayerHeroClass;//[Offset: 0x8e0, Size: 1]
	class Point_LaneGuide* PositionLaneGuideClass;//[Offset: 0x8f0, Size: 1]
	Point_JungleMinionSpawn*[] CachedJungleSpawners;//[Offset: 0x8f8, Size: 1]
	OPAutoPilotComponent* AutoPilotSystem;//[Offset: 0x970, Size: 1]
	int DraftPhase;//[Offset: 0x978, Size: 1]
	bool IsWaitingHeroTrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 1]
	OverprimeObserverPawn* PureObserver;//[Offset: 0x980, Size: 1]
	void UpdateVirtualCursor_BPNE(bool IsShow);// 0x18ed700
	void UpdateViewDirection(Rotator InNewDirection);// 0x1922f20
	void UpdateRangeAimEffect(NiagaraComponent* InNiagaraComponent);// 0x1922d50
	void UpdateMotionBlurSetting();// 0x1922d30
	void UnLockMoveForward_S2OC();// 0x1922cf0
	void UnbindKeysForObserver();// 0x1922d10
	void TryGetTargetStatInfos_C2S(Actor* InTargetPlayerBase);// 0x1922c30
	void TryClientTravel(FString URL);// 0x1922b30
	void ToggleRangeAimEffect();// 0x1922b10
	void SyncSurrenderStatus_forEarlySurrender_S2C(enum Status, byte TeamNum, byte NumPlayersAll, byte NumAccepted, byte NumDenied, OP_PlayerState* RequestedBy, bool InCanVote);// 0x1922800
	void SyncSelectedGameModeType_S2C(enum InModeType);// 0x19225a0
	void SyncRoundStartedTime(float InSinceStarted);// 0x1922510
	void SurrenderResult_S2C(enum ResultCode, int TimeLeft);// 0x1922420
	void StopFreeAxisCameraState();// 0x1922400
	void StartFreeAxisCameraState();// 0x19223e0
	void SpawnOPSpectatorPawn();// 0x19223c0
	void ShowTextIndicator_S20C(Vector_NetQuantize Pos, FString InText, Actor* InActor);// 0x1922280
	void ShowScreenSpaceEffect(bool Activation, class ScreenSpaceEffect Type, float Duration);// 0x1922160
	void ShowScreenAlert_S2C(const FText Text, const FText Title);// 0x1922010
	bool ShowRangeAimEffect();// 0x1921fe0
	void ShowPointHUD(const FText Name, const FText Value, LinearColor NameColor, LinearColor ValueColor);// 0x1921de0
	void ShowMouseCursorForWidget_BP(UserWidget* InTargetWidget);// 0x1921d30
	void ShowInGameObjectivePopup_S2C(FName InCausedBy, FString InUserNickName, byte InArgument1, byte InArgument2, FName InTargetID, FName InInGameObjectPopupTableIndex);// 0x1921b30
	void ShowHealIndicator_S2OC_Unreliable(float InAmount, enum InHealType);// 0x1921a60
	void ShowGoldIndicator_S2C_Unreliable(Vector_NetQuantize Pos, float InGold, bool InIsNotice);// 0x1921930
	void ShowGoldIndicator_S2C_Reliable(Vector_NetQuantize Pos, float InGold, bool InIsNotice);// 0x1921800
	void ShowESCMenu(UserWidget* InPrevWidget);// 0x19216b0
	void ShowErrorMessage_S2C(const FText Message);// 0x1921740
	void ShowDamageIndicator_S20C_Unreliable(Vector_NetQuantize Pos, byte InDamageIndicatorUniqueID, int InDamageTableUniqueIndex, int InDamage, Actor* HitTarget, Actor* InAttacker, int InAttackSkillTableUniqueID, float InAttackerStiffTime, float InVictimStiffTime);// 0x19213f0
	void ShowDamageIndicator_S20C(Vector_NetQuantize Pos, byte InDamageIndicatorUniqueID, int InDamageTableUniqueIndex, int InDamage, Actor* HitTarget, Actor* InAttacker, int InAttackSkillTableUniqueID, float InAttackerStiffTime, float InVictimStiffTime);// 0x1921130
	void ShowDamageEventIndicator_S20C(Vector_NetQuantize Pos, enum InEventType, int InNumberValue, Actor* HitTarget, Actor* InAttacker);// 0x1920f60
	void ShowBattleSystemChatMessage(FText InMessage, enum InSysMsgLevel);// 0x1920e30
	void ShowAlertNotify_BP_S2C(const FText InGMMessage);// 0x1920d70
	void ShopItemUndo();// 0x1920d20
	void SetShowDamageFiguresReplicated(bool InbNewValue);// 0x1920c90
	void SetRotationInput(Rotator InRotation);// 0x1920c00
	void SetPreSelectedHeroHandle(class OP_Character InHero);// 0x1920b40
	void SetPreSelectedHero(class OP_Character InHero);// 0x1920ab0
	void SetMotionBlur(CameraComponent* InCamera, bool bIsActive, float InAmount);// 0x1920860
	void SetLowPassFilterToken(bool InActivation, FName InToken);// 0x1920700
	void SetIgnoreQuickSlotInput(bool boo);// 0x1920670
	void SetClientTravelDelayTime(float InFloat);// 0x19205c0
	void ServerTravelCommandBP(FString CommandLine);// 0x191fe90
	void Server_SendWhisperChat(FString Message, FString InSenderID, FString InReceiverName);// 0x1920450
	void Server_SendReport(FString InReporterLoginID, FString InTargetNickname, enum InReportType, FString InReportReason);// 0x1920270
	void Server_SendChat_StringKey(enum InChatType, FString InSenderID, FString InStringKey, bool InIgnoreTeam);// 0x19200e0
	void Server_SendChat(enum InChatType, FString InSenderID, FString InMessage);// 0x191ff90
	void SendUnbalancedTeamChangeRequest_C2S();// 0x191fe40
	void SendTradeHeroList_C2S(const FName[] InHeroIDs);// 0x191fda0
	void SendSystemChat_S2C(const FText Message, LinearColor ChatColor, bool ShowOnLobbyMenu);// 0x191fc40
	void SendSurrenderSignal_S2C(enum SignalType);// 0x191fb90
	void SendSTCMessage(const byte[] InData);// 0x191faf0
	void SendNotifySignal_S2C(enum Signal, int Value);// 0x191fa20
	void SendEndClient();// 0x191fa00
	void SendCTSTombstone(FString InReason);// 0x191f810
	void SendCTSMessage(const byte[] InData);// 0x191f770
	void SendCSNotify(Vector_NetQuantize Pos, enum Type);// 0x191f690
	void SendChatMessage_S2C(PlayerState* Sender, FString Message, bool IsTeamChat);// 0x191f8c0
	void SellItem(enum OriginSlot);// 0x191f5e0
	void ResponseTargetStatInfo_S2OC(Actor* InTargetPlayerBase, const enum[] InStatMap_Key, const float[] InStatMap_Value);// 0x191f4a0
	void RequestSwapItem(enum OriginSlot, enum TargetSlot);// 0x191f3a0
	void RequestShowGotOrbPing(int InPlayerID, FString InClientLoginID);// 0x191f2b0
	void RequestShowDroppedOrbPing(const Vector InPosition);// 0x191f230
	void RequestSendPingSystemMessage(int InPlayerID, FString InClientLoginID, byte InTeamNum, byte InOrder, const Vector2D InPosByMinimap, const Vector InPosByWorld, bool InUseLimitTime, byte InPingSystemMsg);// 0x191efb0
	void RequestRemovePing(int InPlayerID, FString InClientLoginID, byte InTeamNum, byte InOrder);// 0x191ee40
	void RequestMoveToTeam(int NewTeam);// 0x191ed80
	void RequestHideGotOrbPing();// 0x191ed60
	void RequestHideDroppedOrbPing();// 0x191ed40
	void RequestForceRoundStartDraft();// 0x191ecf0
	void RequestForceRoundStart();// 0x191eca0
	void RequestForceChangeRoundState(enum InStatus, int InTime);// 0x191ebd0
	void RequestDunkPing(bool InIsShow);// 0x191eb40
	float RequestChangeUnbalancedTeam();// 0x191eb10
	void RequestChangeTeam();// 0x191eac0
	void RequestBanHero(FName InHeroID);// 0x191e880
	void RequestAdjustWaitingTime(int InAdjust);// 0x191e7f0
	void RemovePostprocessEffect(FName Slot, FName InToken);// 0x191e720
	void RemoveLocalPing(byte OrderType);// 0x191e6a0
	void RefreshStatInfo_S2C();// 0x191e680
	void RefreshRespawnInfo_S2C(DateTime InNextRespawnTime, DateTime InLastDeathTime);// 0x191e5c0
	void RefreshPreNotificationInfo_S2C(Point_JungleMinionSpawn* InJungleSpawnerActor, float InTimeRemain, enum InSpiritType);// 0x191e4b0
	void RefreshJungleSpawnStatInfo_S2C(Point_JungleMinionSpawn* InJungleSpawnerActor, float InRemaining);// 0x191e3d0
	void RefreshInhibitorInfo_S2C(Point_InhibitorSpawn* InInhibitorSpawner, float InRemaining);// 0x191e2f0
	void RecallCameraUpdate(float InPitch, float Yaw);// 0x1d4eb70
	void PressAttack();// 0x191e2d0
	void PossessToMyCharacter_Internal();// 0x191e280
	void PossessToMyCharacter();// 0x191e260
	void PlayToggleableSurfaceSound(FName Slot, bool Activation, FName SoundPath, float Pitch, float Volume);// 0x191e0b0
	void PlaySurfaceSound(FName SoundPath, float Volume, float Pitch);// 0x191dfa0
	void PingSystem_PingWorldGood_BP(bool IsPressed);// 0x1d4eb70
	void PingSystem_PingWorldBad_BP(bool IsPressed);// 0x1d4eb70
	void PingSystem_Escape_BP();// 0x1d4eb70
	void PingSystem_Emotion_BP(bool IsPressed);// 0x1d4eb70
	void OpenShopAnywhere_Cheat();// 0xd8dcf0
	void OnTakingDamage_BPNE(Actor* InAttacker);// 0x191df10
	void OnStartedRecallCamera();// 0x1d4eb70
	void OnShowShopMenu();// 0xd8dcf0
	void OnSelectPositionOnDraft_S2OC(bool EnableSelect);// 0x191de80
	void OnRecieveNotifySignal_BP(enum Signal, int Value);// 0x191dd30
	void OnRecieveCSNotify_BP(Vector Pos, enum Type);// 0x191dc50
	void OnQuickSlotKeyPressed_BPHelper(enum InSkillSlot);// 0x191dbd0
	void OnLearnSkill_Client(enum InSkillSlot, int InLevel);// 0x191d9d0
	void OnHideShopMenu();// 0x191d9b0
	void OnFinishedRecallCamera();// 0x1d4eb70
	void OnControllingCharacterStatChanged();// 0x191d6d0
	void OnControllingCharacterSkillSlotChanged();// 0x191d6b0
	void OnControllingCharacterDestroyed(Actor* DestroyedActor);// 0x191d620
	void OnControllingCharacter_AbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x191d6f0
	void OnClientSideAttack(float NextAttack);// 0x191d590
	void OnAggroFromNPC_S2C(Actor* InNPCActor);// 0x191d500
	void LearnSkill(enum InSkillSlot);// 0x191d330
	void JoinBattle(bool FromRespawn, bool InReConnected);// 0x191d220
	bool IsSpectator();// 0x191d0d0
	bool IsShowSkillInfo();// 0x191d0a0
	bool IsShowScoreBoard();// 0x191d070
	bool IsShowPing();// 0x191d040
	bool IsShowBattleShop();// 0x191d010
	bool IsFreeAxisCameraState();// 0x14665c0
	void HideRangeAimEffect();// 0x191cf20
	void HideMouseCursorForWidget_BP(UserWidget* InTargetWidget, bool InbForceHideMouse);// 0x191ce50
	void HideESCMenu();// 0x191ce30
	void HarvesterInfo_S2C(Actor* InHarvester, float InRemainTime, enum InOccupyState);// 0x191cd20
	void HandleRequestGetPlayerInfo(float InValue);// 0x191cc90
	void HandleRequestDraftTrade_S2OC(OP_PlayerState* Sender);// 0x191cc00
	void HandleRequestDraftTrade_C2S(OP_PlayerState* Sender, OP_PlayerState* Reciever);// 0x191cb30
	void HandleRequestDisconnect_S2OC();// 0x191cb10
	void HandleRequestBanHero(FName InHeroID);// 0x191ca80
	void HandleRejoinLocal_S2OC();// 0x191ca60
	void HandleForceShowLobbyMenuBP();// 0x191c970
	void HandleDraftTrade_C2S(OP_PlayerState* Sender, OP_PlayerState* Reciever, bool IsSuccess);// 0x191c860
	void HandleDodgeUser(FString InContextData);// 0x191c7b0
	void HandleDeathScreen_S2C_Reliable(float RespawnDelay, const DamageHistorySync[] DamageHistorys, bool bIsDeathByCheat);// 0x191c650
	void HadServerRevisionCheck(FString InServerRevision, enum InServerRoundStatus, const ResponseClientHello InServerData);// 0x191c500
	OPSkillSystemReplicationTerminal* GetPSSkillReplicationTerminal();// 0x191c1a0
	PostProcessComponent* GetPostprocessEffect(FName Slot);// 0x191c3d0
	float GetPlayerMouseSensivityBP();// 0x191c260
	float GetPlayerMouseSensivity();// 0x191c260
	void GetPlayerInfo(OP_PlayerState* InTargetPS);// 0x191c1d0
	OP_Character* GetCurrentCharacter();// 0x191bcd0
	Vector GetAttackDirection_BPNE(Vector InVector);// 0x191bbf0
	void EnableShopping();// 0x191bbd0
	void EditorReqAddAIToAllEmptySlot_C2S();// 0x191bbb0
	void DrawDebugPoint_S2OC(const World* InWorld, const Vector position, float Size, const Color PointColor, bool bPersistentLines, float LifeTime, byte DepthPriority);// 0x191b9a0
	void DrawDebugLine_S2OC(const World* InWorld, const Vector LineStart, const Vector LineEnd, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x191b740
	void DrawDebugCone_S2OC(const World* InWorld, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x191b3d0
	void DrawDebugBox_S2OC(const World* InWorld, const Vector Center, const Vector Extent, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x191b130
	void DestroyDestructibleItems();// 0x191b110
	void CombineItem(FName InTopItemName, enum InToInventorySlot);// 0x191af70
	void ClientTravel_WithLoadingScreen_Test_BP(FString InMapName, enum LoadingType);// 0x191a710
	void ClientSyncID(FString LoginID, FString ClientName);// 0x191a5d0
	void ClientHello(FString ClientVersion, FString ClientName, FString LoginID, int ClientToken, bool IsAnonymousMode, FString MachineID, int MyMMR, int MyRankTier, int CommunityLevel, FString InClientRevision);// 0x191a200
	void Client_SendWhisperChat(FString Message, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, int InSenderPlayerId);// 0x191ad60
	void Client_SendChat_StringKey(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, FString InStringKey, int InSenderTeamNum, int InSenderPlayerId);// 0x191aad0
	void Client_SendChat(enum InChatType, FString InSenderID, FString InSenderPlayerName, FString InSenderHeroID, FString InMessage, int InSenderTeamNum, int InSenderPlayerId);// 0x191a840
	void ChangeHeroHandle(class OP_Character NewHero, FName InSkinID, bool DontShowNotify, enum ChangeMethod);// 0x191a060
	void ChangeHero(class OP_Character NewHero, FName InSkinID, bool DontShowNotify, enum ChangeMethod);// 0x1919f00
	void ChangeDesiredPosition(enum InPosition, bool IsFixed);// 0x1919e00
	void CaptureTargetForInfo();// 0x1919de0
	void BuyItems(<enum,FName> InBulkInfo, bool InSilent, bool InAddOnHistory, bool bReplicateNow);// 0x1919b30
	void BuyItem(FName ItemName, enum InToInventory);// 0x1919a20
	void BP_ToggleShowUI();// 0x1918f90
	void BP_ToggleShowHUD();// 0x1918f70
	void AppliedItemSlotKeyPressed(enum InItemSlot);// 0x1918ef0
	PostProcessComponent* AddPostprocessEffect(FName Slot, FName InToken);// 0x1918e20
	void AddLocalPing(byte OrderType, const Vector InPosByWorld);// 0x1918d60
	void AddItemUpdateUI_S2OC(enum SlotIndex);// 0x1918ce0
	void AddItemHistory_S2OC(FName ItemName, enum HistoryType);// 0x1918c10

--------------------------------
Class: OP_CameraManager.PlayerCameraManager.Actor.Object
	CurveFloat* SpeedCurve;//[Offset: 0x2818, Size: 1]
	CameraComponent* CurrentActiveCameraComponent;//[Offset: 0x2828, Size: 1]
	static void PlayWorldCameraShake_Internal(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float InShakeScale);// 0x190a550
	HitResult GetEyeTraceToDirectionWithStructureCollider(Vector InDirection, float Distance, bool IgnorePawn);// 0x1909570
	HitResult GetEyeTraceToDirection(Vector InDirection, float Distance, bool IgnorePawn);// 0x19093d0
	HitResult GetEyeTrace(float Distance, bool IgnorePawn);// 0x1909280
	Vector GetEyeForwardPos(float Distance);// 0x19091e0
	HitResult GetCircleEdgePosition(Vector CenterPos, float Radius, Vector PointAiming, float ZUP, bool IgnorePawn);// 0x1908f30

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 1]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 1]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 1]
	float PitchModulationMin;//[Offset: 0x228, Size: 1]
	float PitchModulationMax;//[Offset: 0x22c, Size: 1]
	float VolumeModulationMin;//[Offset: 0x230, Size: 1]
	float VolumeModulationMax;//[Offset: 0x234, Size: 1]
	float VolumeMultiplier;//[Offset: 0x238, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 1]
	float Priority;//[Offset: 0x244, Size: 1]
	float SubtitlePriority;//[Offset: 0x248, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 1]
	float PitchMultiplier;//[Offset: 0x258, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 1]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 1]
	MulticastInlineDelegateProperty OnAudioPlayStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioVirtualizationChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioPlaybackPercent;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioSingleEnvelopeValue;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioMultiEnvelopeValue;//[Size: 1]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 1]
	void StopDelayed(float DelayTime);// 0x387dd60
	void Stop();// 0x387dd40
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x387dc70
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x387dbf0
	void SetUISound(bool bInUISound);// 0x387db60
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x387da10
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x387d8c0
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x387d7f0
	void SetSound(SoundBase* NewSound);// 0x387d760
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x387d5c0
	void SetPaused(bool bPause);// 0x387d530
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x387d4a0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x387d420
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x387d390
	void SetIntParameter(FName InName, int inInt);// 0x387d2c0
	void SetFloatParameter(FName InName, float InFloat);// 0x387d170
	void SetBoolParameter(FName InName, bool InBool);// 0x387cd90
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x387ccc0
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x387cbf0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x387c8b0
	void Play(float StartTime);// 0x387c820
	bool IsVirtualized();// 0x387c7f0
	bool IsPlaying();// 0x387c7c0
	bool HasCookedFFTData();// 0x387c790
	bool HasCookedAmplitudeEnvelopeData();// 0x387c760
	enum GetPlayState();// 0x387c730
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x387c650
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x387c530
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x387c470
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x387c3c0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x387c2a0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x387c140
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x387bf50
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x387b360
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x387b290

--------------------------------
Class: QuartzClockHandle.Object
	QuartzSubsystem* QuartzSubsystem;//[Offset: 0x168, Size: 1]
	World* WorldPtr;//[Offset: 0x188, Size: 1]
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x3033910
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3033830
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x3033600
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x30334c0
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x3033170
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x3032d30
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x30314a0
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x30327c0
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x30325d0
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x3031e40
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x3031bc0
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x30316d0
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x30314a0
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x3031300
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x3031210
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3030a00
	bool IsClockRunning(const Object* WorldContextObject);// 0x30302e0
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x3030170
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x30300d0
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x3030030
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x302fb50
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x302f710
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x302f390
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x302f2f0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x302f170

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0xfec1f0
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x3030380
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x302ff90
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x302fef0
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x302fe50
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x302f8f0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x302f850
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x302f850
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x302f7b0
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x302f630
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x302f4b0
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x302f210
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x302f140
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x302f110
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x302f0e0
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x302f010
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x302ef40
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x302ee60
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x302ec90

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 1]
	int Beat;//[Offset: 0x4, Size: 1]
	float BeatFraction;//[Offset: 0x8, Size: 1]
	float Seconds;//[Offset: 0xc, Size: 1]

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 1]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 1]
	enum BeatType;//[Offset: 0x4, Size: 1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 1]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 1]
	enum PulseDuration;//[Offset: 0x4, Size: 1]

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x4, Size: 1]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 1]
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 1]
	float FloatParam;//[Offset: 0x8, Size: 1]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int IntParam;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 1]
	float Magnitude;//[Offset: 0x4, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x4, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OPUnitRadar.ActorComponent.Object
	HUDHeadbarComponent*[] Nearby_Headbar_Previous;//[Offset: 0xb8, Size: 1]
	HUDHeadbarComponent*[] Nearby_Headbar;//[Offset: 0xc8, Size: 1]
	OPMinimapExposableComponent*[] MinimapExposableActors;//[Offset: 0xd8, Size: 1]
	HUDHeadbarComponent*[] HUDHeadbarActors;//[Offset: 0xe8, Size: 1]
	Placeable_Object*[] TopBuildHealthInfoArray;//[Offset: 0xf8, Size: 1]
	NPCBase*[] TopEpicHealthInfoArray;//[Offset: 0x108, Size: 1]
	void CheckNearByActors();// 0x19eb110

--------------------------------
Class: HUDHeadbarComponent.SceneComponent.ActorComponent.Object
	OPHeadbarComponent* MyHeadbarComponent;//[Offset: 0x1f8, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x200, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x208, Size: 1]
	bool IgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	bool HideWhenHealthFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 1]
	bool IgnoreVisionBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 1]
	bool IgnoreTeamCheckOrExposedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float MaxDrawDistanceOverride;//[Offset: 0x228, Size: 1]
	float MinDrawDistanceOverride;//[Offset: 0x22c, Size: 1]
	float FullScaleDistance;//[Offset: 0x230, Size: 1]
	bool bDrawHealthBarOnTopScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	int DrawOnTopScreen_Priority;//[Offset: 0x238, Size: 1]
	void StopExtraPercentBar();// 0x18ed880
	void SetMaxDrawDistanceOverride(float InNewOverride);// 0x18ed490
	void SetHideFromScreen(FName InToken, bool InShouldHide);// 0x18ed3c0
	void OnUpdateBleedingInfo(float InBleedMarkCount);// 0x18ed240
	void OnNativeHidingStateChanged();// 0x18eceb0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x18ebee0
	float GetPostDuration();// 0x18ebdc0
	bool GetHideFromScreen();// 0x18ebcc0
	float GetDuration();// 0x18ebca0
	void ActivateExtraPercentBar(float LifeTime);// 0x18ebc00

--------------------------------
Class: OPHeadbarComponent.UserWidget.Widget.Visual.Object
	float ScaleByDistMin;//[Offset: 0x260, Size: 1]
	float ScaleByDistMax;//[Offset: 0x264, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x268, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Self;//[Offset: 0x270, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Enemy;//[Offset: 0x278, Size: 1]
	ProgressBar* Bind_PBar_Mana;//[Offset: 0x280, Size: 1]
	OPRetainerBox* Bind_OPRetainerBox_UnitName;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_UnitName;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_UnitLevel;//[Offset: 0x298, Size: 1]
	Widget* Bind_View_Aimmed;//[Offset: 0x2a0, Size: 1]
	Image* Bind_Image_Image;//[Offset: 0x2a8, Size: 1]
	OPCCDurationWidget* Bind_Widget_CCWidget;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* CCActive;//[Offset: 0x2b8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Small;//[Offset: 0x2c0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Medium;//[Offset: 0x2c8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x2d0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Tiny;//[Offset: 0x2d8, Size: 1]
	Widget* Bind_View_Self;//[Offset: 0x2e0, Size: 1]
	Widget* Bind_View_Ally;//[Offset: 0x2e8, Size: 1]
	Widget* Bind_View_Enemy;//[Offset: 0x2f0, Size: 1]
	CanvasPanel* Bind_Bleeding;//[Offset: 0x2f8, Size: 1]
	CanvasPanel* Bind_Use_item;//[Offset: 0x300, Size: 1]
	OPShopItemIconComponent* Bind_ShopItemIcon;//[Offset: 0x308, Size: 1]
	CanvasPanel* Bind_Panel_Harvester;//[Offset: 0x310, Size: 1]
	ProgressBar* Bind_PBar_HarvesterGauge;//[Offset: 0x318, Size: 1]
	TextBlock* Bind_Text_HarvesterGauge;//[Offset: 0x320, Size: 1]
	TextBlock* Bind_Text_Health;//[Offset: 0x330, Size: 1]
	CanvasPanel* Bind_Panel_DeathTimer;//[Offset: 0x338, Size: 1]
	ProgressBar* Bind_PBar_DeathTimer;//[Offset: 0x340, Size: 1]
	UMGSequencePlayer* CCActiveSequencePlayer;//[Offset: 0x368, Size: 1]
	FName HeadBarMagnification_Key;//[Offset: 0x370, Size: 1]
	SlateBrush SelfHealthbarBrush;//[Offset: 0x378, Size: 1]
	SlateBrush TeamHealthbarBrush;//[Offset: 0x400, Size: 1]
	SlateBrush EnemyHealthbarBrush;//[Offset: 0x488, Size: 1]
	SlateBrush EnemyMinionExecutableBrush;//[Offset: 0x510, Size: 1]
	float CCActiveAnimationSpeedScale;//[Offset: 0x598, Size: 1]
	HUDHeadbarComponent* MyHeadbarComponent;//[Offset: 0x5a0, Size: 1]
	void UpdateTeamColor();// 0x18ed9e0
	void ShowUseItem_BPNE(bool InIsShow);// 0x18ed700
	void ShowProgressBar_BPNE(float InPostDuration, float InDuration);// 0x18ed630
	void SetTeamState_BPNE(bool InIsSameTeam);// 0x10d0980
	void SetFocusAnimation(bool IsFocusOn);// 0x1d4eb70
	void SetEmotion(enum InOrderType, bool InOpen, float InLifeTime, Vector InLocation, bool bAlly);// 0x1d4eb70
	void RefreshEmotionAnimation();// 0x1d4eb70
	void OnUnitHealthChanged(float InNewHealth);// 0x18ed1c0
	void OnPercentChanged_BPNE(float InNewPercent, float InPreviousPercent);// 0x18ed070
	void OnChangedPatiensProgressVisible(bool InVisibled);// 0x1d4eb70
	void OnChangedPatiensProgressValue(float InValue, float InMax);// 0x1d4eb70
	void OnChangedPatiensProgressPlay(bool InIsPlaying);// 0x1d4eb70
	void HideProgressBar_BPNE();// 0x18ebe90
	float GetPatiensValue();// 0x18ebd70

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 1]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 1]
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 1]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 1]
	float Percent;//[Offset: 0x2c8, Size: 1]
	byte BarFillType;//[Offset: 0x2cc, Size: 1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 1]
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 1]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 1]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 1]
	void SetPercent(float InPercent);// 0x2f95c90
	void SetIsMarquee(bool InbIsMarquee);// 0x2f95a50
	void SetFillColorAndOpacity(LinearColor InColor);// 0x2f95780

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush FillImage;//[Offset: 0x90, Size: 1]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 1]

--------------------------------
Class: OPRetainerBox.RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor VectorParameterValue;//[Offset: 0x150, Size: 1]
	<FName,LinearColor> VectorParameterInjection;//[Offset: 0x160, Size: 1]
	void SetVectorParameterValue(FName InVectorParameterName, LinearColor InVectorParameterValue);// 0x19b7770

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int phase;//[Offset: 0x124, Size: 1]
	int PhaseCount;//[Offset: 0x128, Size: 1]
	MaterialInterface* EffectMaterial;//[Offset: 0x130, Size: 1]
	FName TextureParameter;//[Offset: 0x138, Size: 1]
	void SetTextureParameter(FName TextureParameter);// 0x2f96160
	void SetRetainRendering(bool bInRetainRendering);// 0x2f95e60
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x2f95d90
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x2f95610
	void RequestRender();// 0x2f955f0
	MaterialInstanceDynamic* GetEffectMaterial();// 0x2f94fd0

--------------------------------
Class: OPCCDurationWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Type;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_TypeUserName;//[Offset: 0x270, Size: 1]
	void OnStopCCActiveAnimation_BPNE();// 0x10d0450
	void OnCCTypeSet_BPNE(FName InKeywordType, float InDuration, float InExpired, Object* InIconResource, bool InPlayFillUp);// 0x18ec180

--------------------------------
Class: OPUnitDividerWidget.UserWidget.Widget.Visual.Object
	float DivideSpacing;//[Offset: 0x260, Size: 1]
	float Size;//[Offset: 0x264, Size: 1]
	float DividerWidth;//[Offset: 0x268, Size: 1]
	float[] IgnoreSpacing;//[Offset: 0x270, Size: 1]
	SlateBrush DividerBrush;//[Offset: 0x288, Size: 1]
	SlateBrush DividerBrush2;//[Offset: 0x310, Size: 1]

--------------------------------
Class: OPShopItemIconComponent.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x260, Size: 1]
	OPIconImageWidget* Bind_Item_Icon;//[Offset: 0x268, Size: 1]
	OPIconImageWidget* Bind_Item_Background;//[Offset: 0x270, Size: 1]
	Image* Bind_Item_Cover;//[Offset: 0x278, Size: 1]
	int HoverImagePlayCount;//[Offset: 0x280, Size: 1]
	WidgetAnimation* Bind_HoverAnimation;//[Offset: 0x288, Size: 1]
	WidgetAnimation* Bind_SelectAnimation;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Bind_HoverEndAnimation;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Bind_SelectEndAnimation;//[Offset: 0x2a0, Size: 1]
	Vector2D IconSize;//[Offset: 0x2a8, Size: 1]
	Texture2D* Background_Normal;//[Offset: 0x2b0, Size: 1]
	Texture2D* Background_Magic;//[Offset: 0x2b8, Size: 1]
	Texture2D* Background_Rare;//[Offset: 0x2c0, Size: 1]
	Texture2D* Background_Disable;//[Offset: 0x2c8, Size: 1]
	Texture2D* Cover_Normal;//[Offset: 0x2d0, Size: 1]
	Texture2D* Cover_Magic;//[Offset: 0x2d8, Size: 1]
	Texture2D* Cover_Rare;//[Offset: 0x2e0, Size: 1]
	Texture2D* Cover_Disable;//[Offset: 0x2e8, Size: 1]
	ShopItemBase* Cached_ItemInfo;//[Offset: 0x2f0, Size: 1]
	enum ItemGrade;//[Offset: 0x2f8, Size: 1]
	enum ItemSlotType;//[Offset: 0x2f9, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x300, Size: 1]
	SoundBase* PressedSound;//[Offset: 0x310, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x318, Size: 1]
	void UnselectSlot();// 0x1981da0
	void ToolTipUpdate();// 0x1981d80
	void SetItem(ShopItemBase* InItem, enum InSlotType, bool InMakeToolTip);// 0x1981a70
	void SetGreyScale(bool InIsGrey);// 0x19817a0
	void SelectSlot();// 0x1981640
	void Init();// 0x1980f80

--------------------------------
Class: ShopItemBase.ItemBase.Object
	bool DestroyItemWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	enum ItemGrade;//[Offset: 0xf1, Size: 1]
	bool UnSellable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	float SellBlockTime;//[Offset: 0xf4, Size: 1]
	int ItemPrice;//[Offset: 0xf8, Size: 1]
	int Refillable;//[Offset: 0xfc, Size: 1]
	int MaxStack;//[Offset: 0x100, Size: 1]
	bool IsStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool IsActiveItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	ParticleSystem* Effect_OnActive;//[Offset: 0x108, Size: 1]
	FName SOCKET_NAME_ACTIVE_EFFECT_ATTACH;//[Offset: 0x110, Size: 1]
	SoundData Sound_OnActive;//[Offset: 0x118, Size: 1]

--------------------------------
Class: ItemBase.Object
	FName TableName;//[Offset: 0x28, Size: 1]
	FName TableGroupID;//[Offset: 0x30, Size: 1]
	FName SkillDamageType;//[Offset: 0x38, Size: 1]
	FText PrintName;//[Offset: 0x40, Size: 1]
	FText Description;//[Offset: 0x58, Size: 1]
	FText ItemSaying;//[Offset: 0x70, Size: 1]
	byte MaxItemAmount;//[Offset: 0x88, Size: 1]
	Texture2D* Icon;//[Offset: 0x90, Size: 1]
	<enum,ItemStatInfo> ItemStats;//[Offset: 0x98, Size: 1]
	enum ENum_SkillActivationType;//[Offset: 0xe8, Size: 1]
	bool HideFromItemShop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	enum GetItemType();// 0xd8dcc0
	float GetItemSimulatedCoolTime(OP_PlayerState* Owner, int LevelOverride);// 0x18f6f30
	float GetItemCoolTime(OP_PlayerState* Owner);// 0x18f6e90
	Texture2D* GetIcon();// 0x18f6e60

--------------------------------
Class: ItemStatInfo
	float Amount;//[Offset: 0x0, Size: 1]
	enum UnitType;//[Offset: 0x4, Size: 1]
	FName UniqueId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundData
	float FadeOutDelay;//[Offset: 0x0, Size: 1]
	FName SoundTableID;//[Offset: 0x4, Size: 1]
	SoundBase* Sound;//[Offset: 0x10, Size: 1]
	enum PlaySoundRule;//[Offset: 0x18, Size: 1]
	float SoundVolume;//[Offset: 0x1c, Size: 1]
	float SoundPitch;//[Offset: 0x20, Size: 1]
	float Radius;//[Offset: 0x24, Size: 1]
	float StartDelay;//[Offset: 0x28, Size: 1]
	FName LocalSoundTableID;//[Offset: 0x2c, Size: 1]
	SoundBase* LocalSound;//[Offset: 0x38, Size: 1]
	float LocalSoundVolume;//[Offset: 0x40, Size: 1]
	float LocalSoundPitch;//[Offset: 0x44, Size: 1]
	float LocalStartDelay;//[Offset: 0x48, Size: 1]
	bool bPlayClientOwnerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bForcePlayBothSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	SoundClass* SoundClassOverride;//[Offset: 0x50, Size: 1]
	SoundClass* LocalSoundClassOverride;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 1]
	float HeightOverride;//[Offset: 0x134, Size: 1]
	float MinDesiredWidth;//[Offset: 0x138, Size: 1]
	float MinDesiredHeight;//[Offset: 0x13c, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x140, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x144, Size: 1]
	float MinAspectRatio;//[Offset: 0x148, Size: 1]
	float MaxAspectRatio;//[Offset: 0x14c, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x2f9b580
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x2f9a8f0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x2f9a7f0
	void SetMinAspectRatio(float InMinAspectRatio);// 0x2f9a770
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x2f9a6f0
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x2f9a670
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x2f9a5f0
	void SetHeightOverride(float InHeightOverride);// 0x2f9a3e0
	void ClearWidthOverride();// 0x2f98c40
	void ClearMinDesiredWidth();// 0x2f98c20
	void ClearMinDesiredHeight();// 0x2f98c00
	void ClearMinAspectRatio();// 0x2f98be0
	void ClearMaxDesiredWidth();// 0x2f98bc0
	void ClearMaxDesiredHeight();// 0x2f98ba0
	void ClearMaxAspectRatio();// 0x2f98b80
	void ClearHeightOverride();// 0x2f98b60

--------------------------------
Class: OPIconImageWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Icon;//[Offset: 0x260, Size: 1]
	Widget* Bind_Deactivate;//[Offset: 0x268, Size: 1]
	Texture2D* Texture;//[Offset: 0x270, Size: 1]
	Texture2D* Mask;//[Offset: 0x278, Size: 1]
	LinearColor ColorAndOpacity_Normal;//[Offset: 0x280, Size: 1]
	LinearColor ColorAndOpacity_Grey;//[Offset: 0x290, Size: 1]
	bool IsGreyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x2a8, Size: 1]
	MaterialInstanceDynamic* MaterialInstanceDynamic;//[Offset: 0x2b0, Size: 1]
	bool UseSprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	void SetTexture(Texture2D* InTexture);// 0x197c860
	void SetSprite(FString InSpritePath);// 0x197cde0
	void SetMask(Texture2D* InTexture);// 0x197caa0
	void SetGreyScale(bool InIsGreyScale);// 0x197ca10
	void SetBrushFromTexture(Texture2D* InTexture);// 0x197c860
	void SetBrush(out const SlateBrush InBrush);// 0x197c750
	void CheckMaterialInstanceDynamic();// 0x197bb60

--------------------------------
Class: OPMinimapExposableComponent.ActorComponent.Object
	SlateBrush Cached_MinimapIcon;//[Offset: 0xb8, Size: 1]
	bool bShouldHideOnMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bAlwaysExposed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	enum IconType;//[Offset: 0x142, Size: 1]
	bool bOverrideMinimapIconColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	LinearColor ColorOverride;//[Offset: 0x144, Size: 1]
	bool bIsRotatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bShowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]

--------------------------------
Class: Placeable_Object.TeamActorBase.Actor.Object
	CapsuleComponent* RootSphereBorder;//[Offset: 0x228, Size: 1]
	StaticMeshComponent* RootMesh;//[Offset: 0x230, Size: 1]
	OPRewardComponent* OPRewardComponent;//[Offset: 0x238, Size: 1]
	bool EnableTimedThink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ServerSideOnlyThink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	float NextThink;//[Offset: 0x24c, Size: 1]
	ParticleSystem*[] DestructionEffect;//[Offset: 0x250, Size: 1]
	float GlobalExpWhenDestroyed;//[Offset: 0x260, Size: 1]
	Vector WaypointOffset;//[Offset: 0x264, Size: 1]
	Actor*[] Invincible_Factors;//[Offset: 0x280, Size: 1]
	bool bEnableAdjustFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	UnitStatComponent* UnitStatComponent;//[Offset: 0x298, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x2a0, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x2a8, Size: 1]
	OPTimerManager* OPTimerManager;//[Offset: 0x2b0, Size: 1]
	BuildingHealthbar* HUDHeadbarComponent;//[Offset: 0x2b8, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x2c0, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x2c8, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x2d0, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x2d8, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x2e0, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x2e8, Size: 1]
	enum ActorType;//[Offset: 0x2f0, Size: 1]
	void Think();// 0x1a01f80
	bool ShouldTakeDamageBP();// 0xf5ab20
	void OnDimensionChanged();// 0xd8dcf0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1a00a70
	bool IsEnemy(Actor* Target, bool DoHidingCheck);// 0x1a004d0
	void HandleDestruction(Actor* Actor);// 0x1a00310
	void HandleDeathBP();// 0xe85bd0
	Transform GetRootSphereGroundTransform();// 0x1a000c0
	float GetHealthPercent();// 0x19fff50
	Transform GetGroundTransform();// 0x19ffe80
	FName GetCharacterID();// 0x19ffbe0
	Vector GetActorLocationRandomBounds(float tolerence);// 0x19ff8b0
	float AdjustFinalDamage_BPNE(enum InStatusType, float InFinalDamage);// 0x19ff300

--------------------------------
Class: TeamActorBase.Actor.Object
	void HandleTeamChanged(byte NewTeam);// 0x1a0c6d0

--------------------------------
Class: OPRewardComponent.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0xb0, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0xb8, Size: 1]
	float ExpCheckTime;//[Offset: 0xc0, Size: 1]
	RewardTableData[] ExpDatas;//[Offset: 0xc8, Size: 1]
	RewardTableData[] GoldDatas;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: RewardTableData
	float Reward;//[Offset: 0x0, Size: 1]
	enum RewardGainedType;//[Offset: 0x4, Size: 1]
	float AssisteReviseRate;//[Offset: 0x8, Size: 1]
	float GainedRange;//[Offset: 0xc, Size: 1]
	float GainedTime;//[Offset: 0x10, Size: 1]
	float STDEV_Ratio;//[Offset: 0x14, Size: 1]
	float STDEV_Ratio_BlockTime;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UnitStatComponent.ActorComponent.Object
	<enum,DefaultStatDataSet> DefaultStats;//[Offset: 0xb0, Size: 1]
	<enum,float> Calculated_Stats_PreviousFrame;//[Offset: 0x100, Size: 1]
	<enum,float> Calculated_Stats;//[Offset: 0x150, Size: 1]
	<enum,float> Calculated_Stats_Synced;//[Offset: 0x1a0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x240, Size: 1]
	MulticastInlineDelegateProperty OnPlayerStatChanged;//[Size: 1]
	void SyncStats(const OPSyncStatData[] Values);// 0x1a145b0
	static float SimulateFinalStat(OP_PlayerState* InPlayerState, enum InStatusType, ItemBase* InAdditionalItem);// 0x1a140e0
	static float SimulateDefaultStatWithItem(OP_PlayerState* InPlayerState, enum InStatusType);// 0x1a14010
	static float SimulateDefaultStat(OP_PlayerState* InPlayerState, enum InStatusType, bool IgnoreBuff, bool InWithHandleStatsEffectedByStat);// 0x1a13eb0
	void PrintCurrentStat();// 0x1a13450
	float GetPreviousFinalStat(enum InStatusType);// 0x1a12140
	float GetFinalStat(enum InStatusType);// 0x1a11a90
	float GetFinalAttackSpeed();// 0x1a11a60
	float GetDefaultStat(enum InStatusType, int InOwnerLevel);// 0x1a11890
	float GetCoolTimeByCDR(float InCoolTime);// 0x1a117f0
	<enum,float> GetCalculatedStats_ServerSide();// 0x1a116e0
	<enum,float> GetCalculatedStats_ClientSide();// 0x1a116b0
	float GetAttackSpeed();// 0x1a11680

--------------------------------
Class: DefaultStatDataSet
	float FirstValue;//[Offset: 0x0, Size: 1]
	float AddPerLevel;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPSyncStatData
	enum StatusType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: OPTimerManager.ActorComponent.Object
	<FName,SimpleTimerDataSet> SimpleTimers;//[Offset: 0x100, Size: 1]
	<FName,CountableTimerDataSet> CountableTimers;//[Offset: 0x150, Size: 1]

--------------------------------
Class: SimpleTimerDataSet
	TimerHandle TimerHandler;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CountableTimerDataSet
	enum Type;//[Offset: 0x0, Size: 1]
	TimerHandle TimerHandler;//[Offset: 0x8, Size: 1]
	int CurrentCount;//[Offset: 0x10, Size: 1]
	int MaxCount;//[Offset: 0x14, Size: 1]
	float Delay;//[Offset: 0x18, Size: 1]
	bool CallFailOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool CallWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool CancelWhenHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	float[] CustomSteps;//[Offset: 0x20, Size: 1]
	int StopWhenCancelLevel;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BuildingHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: OPSkillComponent.ActorComponent.Object
	OPSkillComponent* WorldSkillComponent;//[Offset: 0x128, Size: 1]
	bool bIsGlobalSkillComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	enum bIsInBattleState;//[Offset: 0x1a9, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x1b0, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x1b8, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x1c0, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0x1c8, Size: 1]
	OPCharacterMovementComponent* CharacterMovementComponent;//[Offset: 0x1d0, Size: 1]
	PSCoolTimeManager* CoolTimeManager;//[Offset: 0x1d8, Size: 1]
	PSInventoryManager* InventoryManager;//[Offset: 0x1e0, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x1e8, Size: 1]
	LocationSnapshotComponent* LocationSnapshotComponent;//[Offset: 0x1f0, Size: 1]
	SkeletalMeshComponent*[] BoneTransformCalculationMeshes;//[Offset: 0x1f8, Size: 1]
	OPSkillDecalActor* PreviewSkillDecalActor;//[Offset: 0x208, Size: 1]
	FName AnimationState;//[Offset: 0x338, Size: 1]
	AnimMontage*[] IgnoreBlendOutSkillFinishedUnNormally;//[Offset: 0x4a8, Size: 1]
	OPSkillActionKeywordState*[] KeywordStates;//[Offset: 0x5d8, Size: 1]
	MulticastInlineDelegateProperty OnSkillInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillSlotChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBattleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerTryCastSkill;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillMontagePlayStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPreparationStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPreparationTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillColliderCreated;//[Size: 1]
	MulticastInlineDelegateProperty OnPreApplyBuff;//[Size: 1]
	MulticastInlineDelegateProperty OnActionKeywordStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnActionKeywordFinished;//[Size: 1]
	int DisabledSkillSlot;//[Offset: 0x758, Size: 1]
	int DisabledSkillSlotNoneNoti;//[Offset: 0x75c, Size: 1]
	enum TryGetSkillStateBySkillGroupID(FName InGroupID, out bool OutFound);// 0x19d0740
	enum TryGetSkillSlotBySkillTableID(FName InSkillTableID);// 0x19d06a0
	int TryGetOwnerLevelRealTime();// 0x19d0670
	int TryGetOwnerLevelAtMoment();// 0x19d0640
	Vector TryGetAimingDirection();// 0x19d0600
	void SyncEffectActorAttach_S2C(FName InEffectActorName, bool Inactive);// 0x19d0530
	void SyncDirectionMontage_S2C(AnimMontage* InMontage);// 0x19d04a0
	void SyncBlinkEvent_S2C(Vector InLocation, bool InEnableInertia);// 0x19d03c0
	void SyncActionLikeKeywordOnPendingKillGlobally_S2C_UnReliable(Vector_NetQuantize InOwnerLastPosition, Actor* InCausedBy, int InEffectKeywordTableUniqueIndex, SlotData InCausedSlotFrom);// 0x19d0230
	void SyncActionLikeKeywordOnPendingKillGlobally_S2C_Reliable(Vector_NetQuantize InOwnerLastPosition, Actor* InCausedBy, int InEffectKeywordTableUniqueIndex, SlotData InCausedSlotFrom);// 0x19d00a0
	void SendRangeBaseAttackHitResult_C2S(float InTimeChecksum, SlotData InSlot, int InColliderTableUniqueIndex, Actor* InTarget, Vector_NetQuantize InHitLocation, Vector_NetQuantizeNormal InHitNormal, byte InHitSurface);// 0x19cfe30
	void SendNextSkillCircleActivationBar_S2C(float InDuration, FName InCausedSkillID, FName InNextSkillID);// 0x19cfd20
	void SendCastCancelRequest_C2S(const SlotData[] InSkillID);// 0x19cfc80
	void ResetLearnedSkills();// 0x19cfc60
	static void RequestReplicateActorNow(Actor* InActor);// 0x19cfbe0
	void RequestPlaySoundTable_S2C_Reliable(FName InSoundTableID);// 0x19cfb50
	void RequestForceActivation_S2C(SlotData InSlotData);// 0x19cfa90
	void RequestCancelAttackFunction_S2C_Reliable(int InSkillTableUniqueIndex);// 0x19cfa00
	void RequestActivateSkillIndex_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x19cf720
	void RequestActivateSkill_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x19cf890
	void PreGlobalAbnormalStateChanged(OPAbnormalStateComponent* InCausedBy, bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, Actor* InAbnormalCausedBy);// 0x19cf1d0
	void PlaySkillNetworkError_S2C();// 0x19cf1b0
	void OnSpawnSkillColliderFromSkillComponent_S2AC_Reliable(Actor* InCreateTarget, int InColliderTableUniqueIndex, SpawnSkillColliderClientSyncData InSpawnSyncData, SkillColliderClientSyncData InSyncData);// 0x19cef60
	void OnSkillActionKeywordStateBroadcastArgument_S2C(FName InActionKeyword, const BroadcastedActionKeywordStateArgument InBroadcastingArgument);// 0x19cee90
	void OnServerSideCastSkillFailed_S2C_Reliable(SlotData InSlotData, const SkillCanUseResult InResult);// 0x19ced20
	void OnReplicateSkillActionKeywordStateDestroyed_S2C(FName InActionKeyword);// 0x19ceb10
	void OnReplicateSkillActionKeywordState_S2C(FName InActionKeyword, const SkillColliderClientSyncData InSyncData, const FName[] InArguments);// 0x19ceba0
	void OnReplicateSkillActionKeywordNotifyState_S2C(FName InActionKeyword, const SkillColliderClientSyncData InSyncData, const FName[] InArguments, float InLifespan);// 0x19ce950
	void OnRepAnimationStateChanged();// 0x19ce910
	void OnRep_BattleState();// 0x19ce930
	void OnMontageEnded(AnimMontage* InMontage, bool InInterrupted);// 0x19ce840
	void OnGlobalUnitCreated(UnitBase* InUnit);// 0x19ce7b0
	void OnGlobalSkillStateChanged(OPSkillComponent* InSkillComponent, SlotData InChangedSlot, enum InSkillState);// 0x19ce680
	void OnGlobalColliderDestroyed(OPSkillColliderActor* InDestroyedActor);// 0x19ce5f0
	void OnGlobalAbnormalStateChanged(OPAbnormalStateComponent* InCausedBy, bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InAbnormalCausedBy);// 0x19ce310
	void OnEvent_SkillInventoryChanged();// 0x19ce2f0
	void OnEvent_OwnerDeathEvent(Actor* InLastAffectedAttacker);// 0x19ce260
	void OnEvent_OnOwnerOPCharacterExposedStateChanged();// 0x19ce240
	void OnEvent_GameTimeChanged(int InPreviousGameTimeLapsedSeconds, int InGameTimeLapsedSeconds);// 0x19ce170
	void OnEvent_DimensionChanged();// 0x19ce150
	void OnEvent_CoolTimeSet_Server(FName InCoolTimeName, float InPreviousCoolTime, float InNewCoolTime);// 0x19cdfb0
	void OnEvent_CoolTimerReady_Server(FName InCoolTimeName);// 0x19ce0c0
	void OnEvent_AbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x19cdd20
	void OnCharacterRespawned();// 0x19cda30
	void OnAbnormalStateChanged_UnitOnly(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x19cd7a0
	void NotifySkillPreparationState_C2S(SlotData InSlotData, bool InState, bool InIsCasted);// 0x19cd650
	void NotifyChargeOverTime_S2C(SlotData InSlotData);// 0x19cd590
	bool IsSkillBlocked(enum InSkillSlot, out bool OutNotiNeeded);// 0x19cd300
	static bool IsInventorySlot(enum InSlotType);// 0x19cd280
	static bool IsCoolTimeIgnoreSlot(enum InSlotType);// 0x19cd200
	bool IsAnySkillInCastAction();// 0x19cd1d0
	void HandleStiffBroadcast_S2C_UnReliable(Actor* InVictim, float InCasterStiff, float InVictimStiff);// 0x19cd0c0
	void HandleActionLikeEffectKeyword_S2C_Unreliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x19ccf90
	void HandleActionLikeEffectKeyword_S2C_Reliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x19cce60
	void HandleActionLikeEffectKeyword_S2C_Owner_Unreliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x19ccd30
	void HandleActionLikeEffectKeyword_S2C_Owner_Reliable(int InEffectKeywordTableUniqueIndex, Actor* InCausedBy, SlotData InCausedSlotFrom);// 0x19ccc00
	static Actor* GetWorldSkillComponentOwnerActor(Object* InWorldContextObject);// 0x19ccb70
	static OPSkillComponent* GetWorldSkillComponent(Object* InWorldContextObject);// 0x19ccae0
	static Transform GetSocketLocationAtSequenceTime(AnimSequence* InSequence, FName InSocketName, float InTime, out Transform OutSocketRelativeTransform);// 0x19cc900
	static FName GetSkillTableIDFromSlotData(Object* InWorldContextObject, SlotData InSlotData);// 0x19cc7f0
	FName GetSkillTableIDBySkillSlot(enum InSkillSlot);// 0x19cc750
	static FName GetSkillTableGroupIDBySkillTableIndex(Object* InWorldContextObject, FName InSkillTableIndex);// 0x19cc680
	static enum GetSkillSlotFromSlotData(out const SlotData InSlotData);// 0x19cc5e0
	int GetSkillLevel(enum InSlot);// 0x19cc550
	static float GetSkillActionDuration(Object* InWorldContextObject, FName InSkillTableID, float InSkillAcceleration);// 0x19cc0b0
	OPSkillColliderActor*[] GetSCAByClass(class OPSkillColliderActor SCAClass);// 0x19cbfd0
	static enum GetLocalInBattleState(Object* InWorldContextObject);// 0x19cb950
	static FName GetItemTableIDFromSlotData(Object* InWorldContextObject, SlotData InSlotData);// 0x19cb840
	bool GetIsControlledByBot();// 0x19cb810
	static int GetInventorySlotIndex(enum InSlotType);// 0x19cb790
	static enum GetInventorySlotBySlotNumber(int InSlotNumberStartingOne);// 0x19cb700
	static FName GetHoldingValue(Object* InWorldContextObject, FName InSkillEffectID);// 0x19cb630
	FName GetEffectStartTimeValue(FName InSkillEffectTableID);// 0x19cb5a0
	static Transform GetBoneLocationAtSequenceTime(SkeletalMeshComponent* InSimulationMesh, AnimSequence* InSequence, FName InBoneName, float InTime, out Transform[] OutStackArray);// 0x19cb3b0
	void FireChargingSkill_C2S(SlotData InSlotData, Vector Pos, OPCastSkillC2SArgument InC2SArgument);// 0x19cb160
	bool ContainsSkillEffect(FName InSkillEffectID);// 0x19caf20
	void CastSkill_BPHelper(enum InSkillSlotFrom, Actor* InMainTarget);// 0x19cae50
	static Vector CalculateDestinationOnCrosshairLine(Vector InOriginOfTheLine, Vector InCenterOfSphere, Vector InCameraForward, float InAttackRange);// 0x19cacc0
	void BroadcastRangeBaseAttackHitResult_S2C(int InColliderTableUniqueIndex, SlotData InSlotFrom, Vector_NetQuantize InHitLocation, Vector_NetQuantizeNormal InHitNormal, byte InHitSurface);// 0x19caae0
	void ApplyClientSideSkillEffect_S2C(FName InSkillEffectID, SlotData InSlotFrom, bool Inactive);// 0x19ca9b0
	void AddBoneTransformCalculationMesh(SkeletalMeshComponent* InSkeletalMesh);// 0x19ca920

--------------------------------
Class: OPCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ServerMovePacketDelay;//[Offset: 0xb08, Size: 1]
	CapsuleComponent* ColliderStuckFixTargetCapsuleComponent;//[Offset: 0xb18, Size: 1]
	OPSkillColliderActor*[] CollidersNeedToFixStuck;//[Offset: 0xb20, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0xb30, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0xb38, Size: 1]
	UnitBase* UnitBase;//[Offset: 0xb40, Size: 1]
	void SetServerClientSyncedMovementData_ServerSide(FName InToken, enum InDataType, float InNewValue, bool InForceSync);// 0x1911590
	void SetServerClientSyncedMovementData_Override(FName InToken, enum InDataType, float InNewValue);// 0x1911470
	void SetIgnoreMovementCorrectionToken(bool InAdd, FName InToken);// 0x1911150
	void SetDash(bool Inactive, Vector InSpeed, float InMoveDistance);// 0x1910f80
	void SendServerClientSyncedMovementData_S2C(enum InDataType, int InIndex, float InMovementSpeed);// 0x1910da0
	void SendAckServerClientSyncedMovementData_S2C(enum InDataType, int InAckIndex);// 0x1910c90
	void RemoveServerClientSyncedMovementData_ServerSide(FName InToken, enum InDataType);// 0x190fc80
	void RemoveServerClientSyncedMovementData_Override(FName InToken, enum InDataType);// 0x190fbb0
	void OnHitPlayerBaseCapsuleComponent(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x190f3b0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x190f110
	bool IsMovingBySkill();// 0x190f0b0
	Vector GetCurrentUserMovementInput();// 0x190e6e0
	bool CanCharacterMove();// 0x190e480
	bool CanCharacterJump();// 0x190e450
	void BroadcastBlackholeState_S2C(int InUniqueID, Vector InLocation, float InPower, float InMaxScaleDistance);// 0x190e2e0
	void BroadcastBlackholeRemoval_S2C(int InUniqueID);// 0x190e250
	void AddPinPointToken(bool InAdd, FName InToken);// 0x190e0f0

--------------------------------
Class: OPSkillColliderActor.Actor.Object
	PrimitiveComponent*[] CustomColliderShapes;//[Offset: 0x220, Size: 1]
	Actor*[] CustomOverlapCounter;//[Offset: 0x230, Size: 1]
	OPSkillColliderActor* MyNextCollider;//[Offset: 0x370, Size: 1]
	OPSkillColliderActor* MyPreviousCollider;//[Offset: 0x378, Size: 1]
	OPColliderSkillComponent* SkillComponent;//[Offset: 0x380, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x388, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x390, Size: 1]
	UnitVisionComponent* OwnerUnitVisionComponent;//[Offset: 0x398, Size: 1]
	Actor* ColliderAttachTarget;//[Offset: 0x3a0, Size: 1]
	Actor* SyncTarget;//[Offset: 0x3a8, Size: 1]
	Actor* SelectedTarget;//[Offset: 0x3b0, Size: 1]
	Actor* CachedTargetFromSkill;//[Offset: 0x3b8, Size: 1]
	FName ColliderTableID;//[Offset: 0x3c0, Size: 1]
	FName ColliderSkinID;//[Offset: 0x3c8, Size: 1]
	byte Dimension;//[Offset: 0x3d0, Size: 1]
	int ColliderID;//[Offset: 0x3d4, Size: 1]
	byte SkillColliderTeam;//[Offset: 0x3d8, Size: 1]
	<Actor*,int> HitHistory;//[Offset: 0x480, Size: 1]
	<Actor*,int> HitCheckPassHistory;//[Offset: 0x4d0, Size: 1]
	OP_PlayerController*[] RejoinSyncedTargets;//[Offset: 0x5a0, Size: 1]
	OPSkillDecalActor* AttachedColliderDecalActor;//[Offset: 0x5d0, Size: 1]
	Actor* SkillColliderOwner;//[Offset: 0x5d8, Size: 1]
	Actor* SkillColliderHolder;//[Offset: 0x5e0, Size: 1]
	UnitBase* SkillColliderOwnerUnit;//[Offset: 0x5e8, Size: 1]
	SkillColliderMovement* ColliderMovementComponent;//[Offset: 0x5f8, Size: 1]
	Actor* FollowingTarget;//[Offset: 0x600, Size: 1]
	Vector LastFollowingTargetLocation;//[Offset: 0x608, Size: 1]
	Actor*[] OverlapAffectedActorHistory;//[Offset: 0x618, Size: 1]
	Actor* NearestOverlapAffectableActorOnBeginPlay;//[Offset: 0x638, Size: 1]
	Actor*[] OverlappedActors;//[Offset: 0x640, Size: 1]
	Actor*[] OverlapAffectedActors;//[Offset: 0x650, Size: 1]
	OPSkillColliderActor*[] OverlappedColliders;//[Offset: 0x660, Size: 1]
	SceneComponent* SceneRootComponent;//[Offset: 0x690, Size: 1]
	SplineComponent* SplineComponentForVine;//[Offset: 0x698, Size: 1]
	BoxComponent* BoxCollision;//[Offset: 0x6a0, Size: 1]
	SphereComponent* SphereCollision;//[Offset: 0x6a8, Size: 1]
	CapsuleComponent* CapsuleCollision;//[Offset: 0x6b0, Size: 1]
	ProceduralMeshComponent* ProceduralMeshComponent;//[Offset: 0x6b8, Size: 1]
	FName BounceSound3D;//[Offset: 0x6c4, Size: 1]
	bool bUseGetter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	CurveFloat* HybridHoming_SpeedCurve;//[Offset: 0x6d0, Size: 1]
	CurveFloat* HybridHoming_WeightCurve;//[Offset: 0x6d8, Size: 1]
	CurveFloat* HybridHoming_NoiseStrengthCurve;//[Offset: 0x6e0, Size: 1]
	float HybridHoming_DefaultSpeed;//[Offset: 0x6e8, Size: 1]
	float HybridHoming_NoiseHardness;//[Offset: 0x6ec, Size: 1]
	Vector HybridHoming_CustomForwardVector;//[Offset: 0x6f0, Size: 1]
	FName HybridHoming_TargetLostTag;//[Offset: 0x710, Size: 1]
	enum HybridHoming_TargetLostDestroyReason;//[Offset: 0x718, Size: 1]
	bool bIsTutorialPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	FName PortalOpenKeyword;//[Offset: 0x754, Size: 1]
	FName PortalOpenKeyvalue;//[Offset: 0x75c, Size: 1]
	FName PortalRefreshKeyword;//[Offset: 0x764, Size: 1]
	FName PortalRefreshKeyvalue;//[Offset: 0x76c, Size: 1]
	void UpdateOverlaps_BP();// 0x19c65a0
	float TryGetLongest2DLengthFromTableShape(out bool OutIsError);// 0x19c6370
	HitResult SimulateHitTestAtLocation(Vector InLocation, out bool OutSuccess);// 0x19c6210
	void SetColliderDeactivated(bool InIsDeactivated);// 0x19c6180
	Vector ProjectLocationToBaseLine(Actor* InActor);// 0x19c60d0
	void PostHandleDestroy_BP();// 0x19c60b0
	float OverrideSpawnSoundStartPoint();// 0x19c6070
	void OnTeamChanged_BP(byte InNewTeam);// 0x19c5fd0
	void OnSyncedTargetRespawn();// 0x19c5ea0
	void OnSyncedTargetDestroyed(Actor* Actor, byte EndPlayReason);// 0x19c5dd0
	void OnSyncedTargetDeath(Actor* InLastAffectedAttacker);// 0x19c5d40
	void OnRep_SkillColliderTeam();// 0x19c5d20
	void OnRep_Dimension();// 0x19c5d00
	void OnRemoveOverlapAffectedActor(Actor* InActor);// 0x19c5c70
	void OnReceiveDestroySyncronizationFromServer_BP(out const enum[] InDestroyReasons);// 0x19c5bc0
	void OnRangeBaseAttackNotify_BP(Actor* InShooter, FName InShootSocket, Vector InHitLocation, Vector InHitImpactNormal, byte InImpactSurface);// 0x19c5a10
	void OnOwnerExposedStateChanged();// 0x19c59f0
	void OnOwnerDimensionChanged();// 0x19c59d0
	void OnOwnerDestoyed(Actor* InDestroyedActor);// 0x19c5940
	void OnHolderDimensionChanged();// 0x19c5900
	void OnHitPlaceableCollider(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x19c5720
	void OnGetHybridHomingInfo(out CurveFloat* OutSpeedCurve, out CurveFloat* OutWeightCurve, out CurveFloat* OutNoiseStrengthCurve, out float OutDefaultSpeed, out SceneComponent* OutAttachTo, out FName OutAttachSocketName, out float OutAttachDuration, out float OutNoiseHardness, out Vector OutCustomForwardVector);// 0x19c53f0
	void OnEndOverlapPlaceableCollider(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x19c52a0
	void OnColliderHitTarget_BP(Actor* InHitTarget, Vector InHitLocation);// 0x19c51c0
	void OnBeingRemovedAndSpawningNextCollider_BPNE(Actor* InColliderOwner, OPSkillColliderActor* InNextCollider);// 0x19c50f0
	void OnBeginPlayFromPreviousCollider_BPNE(Actor* InColliderOwner, OPSkillColliderActor* InPreviousCollider);// 0x19c5020
	void OnBeginOverlapPlaceableCollider(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x19c4e00
	void OnApplyMovement_BP();// 0x1981160
	void OnAddOverlapAffectedActor(Actor* InActor);// 0x19c4d70
	static bool IsProjectileType(enum InColliderType);// 0x19c3b70
	void IsHybridHomingLostTarget(out bool bTargetLost, out bool bEverReceivedDestroyReasons, out enum[] DestroyReasons);// 0x19c3a20
	static bool IsGroundType(enum InColliderType);// 0x19c39a0
	bool IsAffectedActor(Actor* InTarget);// 0x19c3900
	float GetWorldHitShapeZm();// 0x19c3700
	float GetWorldHitShapeZ();// 0x19c36d0
	float GetWorldHitShapeY();// 0x19c36a0
	float GetWorldHitShapeX();// 0x19c3670
	static bool GetWorld_ShapeFromTable(Object* InWorldContextObject, out Vector4 World_Shape, FName InSkillColliderTableID);// 0x19c37e0
	bool GetWorld_Shape(out Vector4 World_Shape);// 0x19c3730
	Vector GetTargetPoint();// 0x19c3630
	FName GetSpawnSocketName();// 0x19c3390
	static bool GetSkillColliderShapeFromTable(Object* InWorldContextObject, out enum SkillColliderShape, FName InSkillColliderTableID);// 0x19c23c0
	Actor* GetSkillColliderOwner();// 0x19c23a0
	float GetShapeZMinus();// 0x19c22e0
	float GetRightSize();// 0x19c22b0
	Actor*[] GetOverlapAffectedActors();// 0x19c2230
	int GetNumOverlapAffectedActors();// 0x19c2200
	Vector GetLocationDataFromSyncData();// 0x19c1ea0
	float GetLengthBetweenBaseAndTarget();// 0x19c1e70
	float GetHitShapeZm();// 0x19c1cf0
	float GetHitShapeZ();// 0x19c1cc0
	float GetHitShapeY();// 0x19c1c90
	float GetHitShapeX();// 0x19c1c60
	enum GetHideDirectionInStealth();// 0x19c1c30
	static FName GetFirstDestroyType(Object* InWorldContextObject, FName InSkillColliderTableID, enum InDestroyType);// 0x19c1a10
	float GetDuration();// 0x19c1790
	float GetDistanceFromBaseLine(Actor* InActor);// 0x19c16f0
	Vector GetDirectionDataFromSyncData();// 0x19c16b0
	enum GetDestroyTypeByConditionIndex(enum InConditionIndex);// 0x19c1620
	enum GetColliderShape();// 0x19c1260
	bool GetColliderMoveValue(out Vector2D ColliderMoveValue);// 0x19c11c0
	Vector GetCenterPoint();// 0x19c1180
	static bool GetBehit_ShapeFromTable(Object* InWorldContextObject, out Vector4 Behit_Shape, FName InSkillColliderTableID);// 0x19c1060
	bool GetBehit_Shape(out Vector4 Behit_Shape);// 0x19c0fb0
	Vector GetBasePoint();// 0x19c0f70
	enum GetBaseAttackDirection();// 0x19c0f40
	float GetAngleFromBaseLine(Actor* InActor);// 0x19c0ea0
	Vector GetAimDirectionFromStraightMovement();// 0x19c0e60
	void DestroyTicker();// 0x19c0e40
	void CreateSectorProceduralMesh(float InRadius, float InHeighZUp, float InHeightZMinus, float InAngle360, int InDensity);// 0x19c0c80
	void CreateCylinderProceduralMesh(float InRadius, float InHeighZUp, float InHeightZMinus, int InDensity);// 0x19c0b10
	void CreateCapsuleCollisionForDome(float InRadius, float CenterCylinderZUp, float CenterCylinderZMinus);// 0x19c09f0
	void CreateBoxVineCollision(float InWidth, float InDepth, float InHeightZUp, float InHeightZMinus);// 0x19c0890
	void CreateBoxCollision(float InWidth, float InDepth, float InHeightZUp, float InHeightZMinus);// 0x19c0730
	bool ContainsBlocking(enum InBlockType);// 0x19c06a0
	void ColliderDestroyed();// 0x19c0680
	void ColliderBeginPlay();// 0x19c0660
	static float CalculateMaximumReachableDistanceForStraight(Object* InWorldContextObject, Vector InAimDirection, FName InSkillColliderTableID);// 0x19c0540
	void AddCustomColliderShape(PrimitiveComponent* InShapeComponent);// 0x19c04b0

--------------------------------
Class: OPColliderSkillComponent.OPSkillComponent.ActorComponent.Object
	OPAbnormalStateComponent* ColliderAbnormalStateComponent;//[Offset: 0x7f8, Size: 1]
	Actor* SkillColliderOwner;//[Offset: 0x800, Size: 1]
	void OnColliderAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1947c40

--------------------------------
Class: OPDirectionComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnSwitchingToInvisibleMaterial;//[Size: 1]
	MulticastInlineDelegateProperty PostSwitchingToInvisibleMaterial;//[Size: 1]
	Point_CameraPivotActor* CameraPivotActor;//[Offset: 0xd8, Size: 1]
	class Point_CameraPivotActor* CameraPivotActorClass;//[Offset: 0xe0, Size: 1]
	bool bLevelSequenceInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	LevelSequenceActor* LevelSequenceActorPlaying;//[Offset: 0xf0, Size: 1]
	LevelSequencePlayer* LevelSequencePlaying;//[Offset: 0xf8, Size: 1]
	UserWidget* LevelSequenceOverlayWidget;//[Offset: 0x100, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x338, Size: 1]
	UnitBase* UnitBase;//[Offset: 0x340, Size: 1]
	OPSkillComponent* OwnerSkillComponent;//[Offset: 0x348, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x350, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x358, Size: 1]
	OPAbnormalStateComponent* OwnerAbnormalStateComponent;//[Offset: 0x360, Size: 1]
	OPFXEventReceiver*[] AttachedOPFXEventReceivers;//[Offset: 0x368, Size: 1]
	PrimitiveComponent*[] OutlineableComponents;//[Offset: 0x378, Size: 1]
	InvisableComponentsInfo[] InvisableComponents;//[Offset: 0x388, Size: 1]
	PrimitiveComponent*[] RenderBoundsOverrideableComponents;//[Offset: 0x398, Size: 1]
	Material* InvisibleMaterialEffect;//[Offset: 0x408, Size: 1]
	bool bDrawSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bDrawAimOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	AudioComponent* SystemVoiceComponent;//[Offset: 0x748, Size: 1]
	void UnregisterHeroMotionPlaybleMesh(SkeletalMeshComponent* InSkeletalMesh);// 0x1964000
	void StopLevelSequenceInstantly(bool InIsInterrupt);// 0x1963f70
	void StopEffortSound();// 0x1963f50
	void SpawnCameraPivotActorClass();// 0x1963f30
	void ShowCastBar_S2C(enum InCastBarType, enum InCastBarCategory, float InDuration, float InOverchargeTime, FString InStringKey);// 0x1963d70
	void SetStealthHidingStateIgnorable(Object* InTarget, bool Inset);// 0x1963ca0
	void SetSoundOrigin(Vector InRelativeLocation);// 0x1963c10
	void SetRenderBoundsOverrideToken(bool IsSet, FName InTokenName, float InMaxValue);// 0x1963af0
	void SetParticlePauseToken(bool Inset, FName InTokenName);// 0x1963a20
	void SetOutlineToken(bool IsSet, FName InOutlineTokenName);// 0x1963950
	void SetInvisToken(bool Inset, FName InTokenName);// 0x1963720
	void SetInvisableComponentSuppressedDefaultMaterial(PrimitiveComponent* InComponent, int InMaterialArrayIndex, MaterialInterface* InMaterial, bool InRecalculateCurrentState);// 0x19637f0
	void SetElementHiddenFlag(FName InKeyName, bool Inset);// 0x1963650
	void SetAudioComponentCenterRelativeLocation(Vector InAudioComponentRelativeLocation);// 0x19635c0
	void RemoveSoundAttached(FName InKeyName);// 0x1963530
	void RemoveScreenParticleAttached(FName Slot);// 0x19634a0
	void RemoveParticleAttached(FName InSlot);// 0x1963410
	void RemoveOutlineableComponent(PrimitiveComponent* InComponent);// 0x1963380
	void RemoveInvisableComponent(PrimitiveComponent* InComponent);// 0x19632f0
	void RemoveElementAttached(FName InSlot);// 0x1963260
	void RemoveCastBar_S2C(enum InCastBarType, enum InCastBarCategory);// 0x1963190
	void RegisterHeroMotionPlayableMesh(SkeletalMeshComponent* InSkeletalMesh, FName InCharacterID, FName InSkinID);// 0x1963080
	void RecheckStencilState_Internal();// 0x1963060
	void PlaySystemVoiceAnnounceType_S2C(enum InShowType, OPSystemVoiceAnnounceArgument InArgument);// 0x1962b20
	void PlaySystemVoiceAnnounce_S2C(FName InSystemVoiceAnnounceTableID, const OPSystemVoiceAnnounceArgument InArgument);// 0x1962f30
	void PlaySystemVoiceAnnounce_S2AC(FName InSystemVoiceAnnounceTableID, const OPSystemVoiceAnnounceArgument InArgument);// 0x1962e00
	void PlaySystemVoiceAnnounce_BP(enum InShowType);// 0x1962d80
	AudioComponent* PlaySoundAtLocation(SoundBase* InSound, OPAddSoundArgument InArgument, FName InKeyName, Vector InLocation, float InPitchOverride, float InVolumeOverride, bool InIsLocal, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, SoundClass* InSoundClassOverride, Actor* InCausedBy, enum InPlaySoundRule);// 0x1962750
	void PlayLevelSequenceCamera(LevelSequence* InLevelSequence, class UserWidget InOverlayWidget);// 0x1962680
	static void PlayGlobalGameEventDirection(Object* InWorldContextObject, OPDirectionComponent* InDirectionComponent, FName InGlobalEventDirectionTableIndex, DirectionEffectArgument InDirectionEffectArgument);// 0x1962500
	void PlayDirectionEffect_S2C(FName InDirectionTableIndex, float InFloatValue);// 0x1962420
	void OnSkillPreparationStateChanged(SlotData InSlotFrom, FName InSkillGroupID, bool InActivated, bool InCasted);// 0x1962290
	void OnOwnerDimensionChanged();// 0x1962270
	void OnOwnerDeathEvent(Actor* InLastAffectedAttacker);// 0x19621e0
	void OnOwnerAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x1961f40
	void OnLevelSequenceFinished();// 0x1961f20
	void OnGlobalUnitRespawned(UnitBase* InSpawnedUnit);// 0x1961e00
	void OnGlobalUnitDestroyed(UnitBase* InSpawnedUnit);// 0x1961e90
	void OnGlobalUnitDeath(UnitBase* InSpawnedUnit);// 0x1961e90
	void OnGlobalUnitCreated(UnitBase* InSpawnedUnit);// 0x1961e00
	void OnGlobalRoundStatusChanged(enum InNewRoundStatus);// 0x1961d80
	void OnGlobalGameTimeChanged(int InPreviousTimeSinceRoundStarted, int InTimeSinceRoundStarted);// 0x1961cb0
	void OnGlobalExposedStateChanged(UnitVisionComponent* InChangedTarget);// 0x1961c20
	void OnExposedStateChanged();// 0x1961c00
	void MarkLevelSequenceInterrupted(bool InIsInterrupted);// 0x1961b70
	bool IsSoundPlaying(FName InSoundKeyName);// 0x1961ad0
	static bool IsLocalSoundPlayTarget(Actor* InTargetCharacter);// 0x1961a40
	static OPDirectionComponent* GetWorldDirectionComponent(Object* InWorldContextObject);// 0x19619b0
	bool GetStealthHidingState();// 0x1961990
	FName[] GetObjectKeyNames();// 0x19618e0
	Object* GetObjectByKeyName(FName InKeyName);// 0x1961840
	static OPDirectionComponent* GetLocalPlayerControllerDirectionComponent(Object* InWorldContextObject);// 0x19617b0
	SkeletalMeshComponent* GetHeroMotionPlayableMesh(int InIndex);// 0x1961710
	void FadeOutSoundAttached(FName InKeyName, float InFadeOut);// 0x1961640
	void DestroyCameraPivotActor();// 0x1961620
	bool ContainsElementAttachedByKeyName(FName InKeyName);// 0x1961580
	void ClearInvisableComponentSuppressedDefaultMaterials(PrimitiveComponent* InComponent, bool InRecalculateCurrentState);// 0x19614b0
	void ClearAllSounds();// 0x1961490
	void CleanUpOPFXEventReceiver(OPFXEventReceiver* OPFXEventReceiver);// 0x1961400
	void CleanUp();// 0x19613e0
	void BroadcastRecalArriveEventDirection_S2AC(Vector_NetQuantize InArriveLocation);// 0x1961350
	void BroadcastGlobalEventDirection_S2AC(FName InGlobalEventDirectionTableIndex);// 0x19612c0
	AudioComponent* AddSoundAttached(SoundBase* InSound, OPAddSoundArgument InArgument, FName InKeyName, float InPitchOverride, float InVolumeOverride, bool InIsLocal, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, SoundClass* InSoundClassOverride, enum InvisibleRuleType, Actor* InCausedBy, enum InPlaySoundRule);// 0x1960f00
	void AddSound(AudioComponent* InAudioComponent, DirectionComponentElementArgument InElementArgument, OPAddSoundArgument InArgument, FName InKeyName, bool InStopOnDestroy, AnimSequenceBase* InFromMontageNotify, enum InInvisibleRule, Actor* InCausedBy, enum InPlaySoundRule);// 0x1960ba0
	void AddScreenParticleAttached_S2C(bool Activation, FName Slot, ParticleSystem* Particle, float RotationYaw, float DestroyAfter);// 0x19609f0
	ParticleSystemComponent* AddScreenParticleAttached(OP_PlayerController* InPlayerController, FName Slot, ParticleSystem* Particle, float RotationYaw, float DestroyAfter, float InForward);// 0x1960810
	void AddSceneComponent(SceneComponent* InPrimitiveComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x19605d0
	void AddRenderBoundsOverrideableComponent(PrimitiveComponent* InComponent);// 0x1960540
	ParticleSystemComponent* AddParticleAssetAttached(FName InSlot, SceneComponent* AttachToComponent, ParticleSystem* InParticle, float InDestroyAfter, Transform SpawnTransform, FName AttachTo, byte InAttachLocation, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x19601d0
	void AddParticle(FXSystemComponent* InParticleComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x195ff90
	void AddOutlineableComponent(PrimitiveComponent* InComponent);// 0x195ff00
	void AddOPFXEventReceiver(OPFXEventReceiver* OPFXEventReceiver);// 0x195fe70
	NiagaraComponent* AddNiagaraAssetAttached(FName InSlot, SceneComponent* AttachToComponent, NiagaraSystem* InParticle, float InDestroyAfter, Transform SpawnTransform, FName AttachTo, byte InAttachLocation);// 0x195fbf0
	void AddInvisableComponent(PrimitiveComponent* InComponent, bool InRegisterSceneComponentToo);// 0x195fb20
	void AddFXActor(OPFXActor* InFXActor, DirectionComponentElementArgument InElementArgument, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x195f920
	void AddDecal(DecalComponent* InDecalComponent, DirectionComponentElementArgument InElementArgument, FName InKeyName, enum InShouldHideOnStealth, bool InShouldHideOnInvisibleMaterial, Actor* InCausedBy);// 0x195f6e0

--------------------------------
Class: Point_CameraPivotActor.Actor.Object
	SpringArmComponent* CameraBoom;//[Offset: 0x220, Size: 1]
	SceneComponent* LookTarget;//[Offset: 0x228, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f8, Size: 1]
	Vector SocketOffset;//[Offset: 0x1fc, Size: 1]
	Vector TargetOffset;//[Offset: 0x208, Size: 1]
	float ProbeSize;//[Offset: 0x214, Size: 1]
	byte ProbeChannel;//[Offset: 0x218, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x220, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x224, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x228, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x22c, Size: 1]
	bool IsCollisionFixApplied();// 0x39c8380
	Vector GetUnfixedCameraPosition();// 0x39c8340
	Rotator GetTargetRotation();// 0x39c8300

--------------------------------
Class: OPFXEventReceiver.Object
	OPDirectionComponent* DirectionComponent;//[Offset: 0x40, Size: 1]
	World* World;//[Offset: 0x48, Size: 1]
	FXSystemComponent* FXSystemComponent;//[Offset: 0x50, Size: 1]
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0x196c660
	void OnSystemFinished_PS(ParticleSystemComponent* PSystem);// 0x196baf0
	void OnSystemFinished_NS(NiagaraComponent* PSystem);// 0x196baf0
	void OnParticleSpawn(FName EventName, float EmitterTime, Vector Location, Vector Velocity);// 0x196b8d0
	void OnParticleDeath(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction);// 0x196b6c0
	void OnParticleCollided(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x196b3e0
	void OnParticleBurst(FName EventName, float EmitterTime, int ParticleCount);// 0x196b2d0

--------------------------------
Class: BasicParticleData
	Vector position;//[Offset: 0x0, Size: 1]
	float Size;//[Offset: 0xc, Size: 1]
	Vector Velocity;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 1]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 1]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 1]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 1]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 1]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 1]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 1]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 1]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 1]
	Box FixedBounds;//[Offset: 0x388, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float WarmupTime;//[Offset: 0x3a8, Size: 1]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 1]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 1]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 1]
	enum CullReaction;//[Offset: 0x2c, Size: 1]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 1]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 1]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 1]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 1]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 1]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 1]
	Guid PerfBaselineVersion;//[Offset: 0x88, Size: 1]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	float MaxDistance;//[Offset: 0x34, Size: 1]
	int MaxInstances;//[Offset: 0x38, Size: 1]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 1]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 1]
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 1]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 1]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 1]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 1]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 1]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int MinInt;//[Offset: 0xc, Size: 1]
	int MaxInt;//[Offset: 0x10, Size: 1]
	float MinFloat;//[Offset: 0x14, Size: 1]
	float MaxFloat;//[Offset: 0x18, Size: 1]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float SpawnCountScale;//[Offset: 0x34, Size: 1]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 1]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 1]
	NiagaraSystem* System;//[Offset: 0x40, Size: 1]
	bool OnTickTest();// 0xd8dcc0
	void OnOwnerTick(float DeltaTime);// 0xd8dc30
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0xd8dba0
	void OnBeginTest();// 0xd8db80
	NiagaraSystem* GetSystem();// 0xd8db20

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x220, Size: 1]
	TextRenderComponent* Label;//[Offset: 0x228, Size: 1]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x450, Size: 1]
	MaterialInterface* TextMaterial;//[Offset: 0x468, Size: 1]
	Font* Font;//[Offset: 0x470, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x478, Size: 1]
	byte VerticalAlignment;//[Offset: 0x479, Size: 1]
	Color TextRenderColor;//[Offset: 0x47c, Size: 1]
	float XScale;//[Offset: 0x480, Size: 1]
	float YScale;//[Offset: 0x484, Size: 1]
	float WorldSize;//[Offset: 0x488, Size: 1]
	float InvDefaultSize;//[Offset: 0x48c, Size: 1]
	float HorizSpacingAdjust;//[Offset: 0x490, Size: 1]
	float VertSpacingAdjust;//[Offset: 0x494, Size: 1]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	void SetYScale(float Value);// 0x39d0450
	void SetXScale(float Value);// 0x39d03d0
	void SetWorldSize(float Value);// 0x39d0350
	void SetVertSpacingAdjust(float Value);// 0x39d0250
	void SetVerticalAlignment(byte Value);// 0x39d02d0
	void SetTextRenderColor(Color Value);// 0x39d01d0
	void SetTextMaterial(MaterialInterface* Material);// 0x39d0140
	void SetText(FString Value);// 0x39d00a0
	void SetHorizSpacingAdjust(float Value);// 0x39cffa0
	void SetHorizontalAlignment(byte Value);// 0x39d0020
	void SetFont(Font* Value);// 0x39cff10
	void K2_SetText(out const FText Value);// 0x39cfe40
	Vector GetTextWorldSize();// 0x39cfd30
	Vector GetTextLocalSize();// 0x39cfcf0

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 1]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 1]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 1]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 1]
	FName IdName;//[Offset: 0x10, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FName Name;//[Offset: 0x1c, Size: 1]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 1]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int RandomSeed;//[Offset: 0x2c, Size: 1]
	enum AllocationMode;//[Offset: 0x30, Size: 1]
	int PreAllocationCount;//[Offset: 0x34, Size: 1]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 1]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 1]
	enum SimTarget;//[Offset: 0x88, Size: 1]
	Box FixedBounds;//[Offset: 0x8c, Size: 1]
	int MinDetailLevel;//[Offset: 0xa8, Size: 1]
	int MaxDetailLevel;//[Offset: 0xac, Size: 1]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 1]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 1]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 1]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 1]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 1]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 1]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 1]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 1]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 1]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 1]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 1]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 1]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 1]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 1]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 1]
	Guid UsageId;//[Offset: 0x2c, Size: 1]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 1]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 1]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 1]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 1]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 1]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 1]
	void RaiseOnGPUCompilationComplete();// 0xd8dcf0

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 1]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 1]
	byte[] ParameterData;//[Offset: 0x20, Size: 1]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 1]
	Object*[] UObjects;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 1]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 1]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 1]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 1]
	uint16 DestOffset;//[Offset: 0x2, Size: 1]
	uint16 SrcSize;//[Offset: 0x4, Size: 1]
	uint16 DestSize;//[Offset: 0x6, Size: 1]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 1]
	int SrcOffset;//[Offset: 0x20, Size: 1]
	int DestOffset;//[Offset: 0x24, Size: 1]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 1]
	enum ScriptUsageType;//[Offset: 0x10, Size: 1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 1]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 1]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 1]
	Guid ScriptVersionID;//[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 1]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 1]
	int NumTempRegisters;//[Offset: 0x20, Size: 1]
	int NumUserPtrs;//[Offset: 0x24, Size: 1]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 1]
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 1]
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 1]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 1]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 1]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 1]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 1]
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 1]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 1]
	enum LastCompileStatus;//[Offset: 0xd0, Size: 1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 1]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 1]
	FString StringValue;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	int UserPtrIdx;//[Offset: 0x8, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 1]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 1]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 1]
	FName OwnerName;//[Offset: 0x8, Size: 1]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 1]
	int NumOutputs;//[Offset: 0x20, Size: 1]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 1]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 1]
	FName Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 1]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 1]
	FName FriendlyName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 1]
	FString DIClassName;//[Offset: 0x10, Size: 1]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 1]
	FName IterationSource;//[Offset: 0x8, Size: 1]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 1]
	int MinStage;//[Offset: 0x28, Size: 1]
	int MaxStage;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 1]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 1]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 1]
	Guid CompileId;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 1]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 1]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xd89320
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xd89230
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xd89150
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xd88cf0
	void SetIntParameter(FString InVariableName, int InValue);// 0xd88c10
	void SetFloatParameter(FString InVariableName, float InValue);// 0xd88b20
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xd88a30
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xd88950
	Vector GetVectorParameter(FString InVariableName);// 0xd88530
	Vector4 GetVector4Parameter(FString InVariableName);// 0xd88470
	Vector2D GetVector2DParameter(FString InVariableName);// 0xd883b0
	Quat GetQuatParameter(FString InVariableName);// 0xd882f0
	int GetIntParameter(FString InVariableName);// 0xd88170
	float GetFloatParameter(FString InVariableName);// 0xd880c0
	LinearColor GetColorParameter(FString InVariableName);// 0xd88000
	bool GetBoolParameter(FString InVariableName);// 0xd87f50

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 1]
	FName Name;//[Offset: 0x8, Size: 1]
	int UserPtrIdx;//[Offset: 0x10, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 1]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 1]
	FName SourceEmitter;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 1]
	FName ID;//[Offset: 0x4, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 1]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 1]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 1]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 1]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 1]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	enum SimTarget;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 1]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 1]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 1]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 1]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 1]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 1]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 1]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 1]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 1]
	float Medium;//[Offset: 0x4, Size: 1]
	float High;//[Offset: 0x8, Size: 1]
	float Epic;//[Offset: 0xc, Size: 1]
	float Cine;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 1]
	int SortOrderHint;//[Offset: 0x58, Size: 1]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 1]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 1]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 1]
	FName SourceEventName;//[Offset: 0x44, Size: 1]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 1]
	FName SimulationStageName;//[Offset: 0x30, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 1]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 1]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 1]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 1]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 1]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 1]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 1]

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x450, Size: 1]
	enum TickBehavior;//[Offset: 0x458, Size: 1]
	int RandomSeedOffset;//[Offset: 0x45c, Size: 1]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x460, Size: 1]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x558, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x558, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x55c, Size: 1]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x560, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x588, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x590, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x598, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x599, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x59a, Size: 1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0xd78c70
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0xd78b90
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0xd78ac0
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0xd789f0
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0xd78920
	void SetVariableObject(FName InVariableName, Object* Object);// 0xd78850
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0xd78780
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0xd786b0
	void SetVariableInt(FName InVariableName, int InValue);// 0xd785e0
	void SetVariableFloat(FName InVariableName, float InValue);// 0xd78510
	void SetVariableBool(FName InVariableName, bool InValue);// 0xd78440
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0xd78370
	void SetTickBehavior(enum NewTickBehavior);// 0xd782f0
	void SetSeekDelta(float InSeekDelta);// 0xd78270
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0xd781e0
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0xd78150
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0xd78080
	void SetPaused(bool bInPaused);// 0xd77ff0
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0xd77f00
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0xd77e10
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0xd77d30
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0xd77c40
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0xd777c0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0xd77b50
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0xd77a70
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0xd77980
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0xd778a0
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0xd777c0
	void SetMaxSimTime(float InMaxTime);// 0xd77740
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0xd776b0
	void SetGpuComputeDebug(bool bEnableDebug);// 0xd77620
	void SetForceSolo(bool bInForceSolo);// 0xd77590
	void SetDesiredAge(float InDesiredAge);// 0xd77510
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0xd77480
	void SetAutoDestroy(bool bInAutoDestroy);// 0xd773f0
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0xd77320
	void SetAllowScalability(bool bAllow);// 0xd77290
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0xd77210
	void SeekToDesiredAge(float InDesiredAge);// 0xd77190
	void ResetSystem();// 0xd77170
	void ReinitializeSystem();// 0xd77150
	bool IsPaused();// 0xd77120
	void InitForPerformanceBaseline();// 0xd77100
	enum GetTickBehavior();// 0xd770e0
	float GetSeekDelta();// 0xd770b0
	int GetRandomSeedOffset();// 0xd77090
	bool GetPreviewLODDistanceEnabled();// 0xd77070
	float GetPreviewLODDistance();// 0xd77050
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0xd76db0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0xd76f00
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0xd76cc0
	float GetMaxSimTime();// 0xd76c90
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0xd76c60
	bool GetForceSolo();// 0xd76c30
	float GetDesiredAge();// 0xd76c00
	NiagaraDataInterface* GetDataInterface(FString Name);// 0xd76b50
	NiagaraSystem* GetAsset();// 0xd76b30
	enum GetAgeUpdateMode();// 0xd76b00
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0xd76a30
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0xd76960

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 1]

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 1]
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 1]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 1]

--------------------------------
Class: InvisableComponentsInfo
	MaterialInstanceDynamic*[] UnitDefaultMaterials;//[Offset: 0x8, Size: 1]
	MaterialInterface*[] SuppressdUnitDefaultMaterials;//[Offset: 0x18, Size: 1]

--------------------------------
Class: OPSystemVoiceAnnounceArgument
	FString StringArgument1;//[Offset: 0x0, Size: 1]
	FString StringArgument2;//[Offset: 0x10, Size: 1]
	FString NameArgument1;//[Offset: 0x20, Size: 1]
	FString NameArgument2;//[Offset: 0x30, Size: 1]
	int ShowTypeValue1;//[Offset: 0x40, Size: 1]
	byte NumArgument1;//[Offset: 0x44, Size: 1]
	byte NumArgument2;//[Offset: 0x45, Size: 1]
	PlayerState* LocalTarget;//[Offset: 0x48, Size: 1]

--------------------------------
Class: OPAddSoundArgument
	float FadeOutDelay;//[Offset: 0x0, Size: 1]
	bool StopSoundOnLinkedAnimationCCStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float StartPoint;//[Offset: 0x8, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FadeInTime;//[Offset: 0x10, Size: 1]
	float FadeInVolume;//[Offset: 0x14, Size: 1]

--------------------------------
Class: DirectionEffectArgument
	float SoundVolumeMultiplier;//[Offset: 0x0, Size: 1]
	bool bForceLocalSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bSupressLocalSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bPlayOnLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bSoundAsEffortSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bOverrideLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Vector OverridedLocation;//[Offset: 0xc, Size: 1]
	float CameraShakeMultiplier;//[Offset: 0x18, Size: 1]
	AnimSequenceBase* MontageFrom;//[Offset: 0x20, Size: 1]
	Actor* SoundPlayRequestedBy;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DirectionComponentElementArgument
	FName[] Tags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPFXActor.Actor.Object
	float[] FloatArg;//[Offset: 0x230, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x250, Size: 1]
	bool bDestroyOnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bAutoDeactivateComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bAutoRegist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bWasDeactivateCalled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	bool bWasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	Actor* DirectionComponentOwner;//[Offset: 0x260, Size: 1]
	Actor* CausedBy;//[Offset: 0x268, Size: 1]
	enum ShouldHideOnStealth;//[Offset: 0x270, Size: 1]
	OPDirectionComponent* AutoRegisteredOnDirectionComponent;//[Offset: 0x278, Size: 1]
	static OPFXActor* SpawnOPFXActor(Object* WorldContextObject, out enum Branches, Actor* inDirectionComponentOwner, class OPFXActor Class, Transform SpawnTransform, Actor* InOwner, out const float[] InFloatArg, DirectionComponentElementArgument InDirectionComponentElementArg, bool AttachToOwner, FName AttachSocketName, enum LocationRule, enum RotationRule, enum ScaleRule, enum InShouldHideOnStealth, Actor* InCausedBy);// 0x196d4c0
	void RegistAgainToOtherDirectionComponentOwner(Actor* InOtherDirectionComponentOwner);// 0x196c760
	void PlayDestroySound(FName[] InDestroySound, FName[] InDestroySoundLocal, FName InSkinID);// 0x196bff0
	FName PlayColliderSpawnSound(FName[] InSpawnSound, FName[] InSpawnSoundLocal, bool InStopSpawnSoundOnDestroy);// 0x196be20
	void PlayColliderDestroySound(FName[] InDestroySound, FName[] InDestroySoundLocal);// 0x196bca0
	void OnFinishedInternal();// 0x196b290
	void OnFinished();// 0x196b270
	void OnFadeOutTimerFinished();// 0x196b250
	void OnDeactivate(int intarg);// 0x196b1c0
	bool GetFloatArg(int Index, out float outFloat, float DefaultValue);// 0x196a290
	float GetFadeOutTime();// 0x196a270
	void Deactivate(float FadeOutTime, int intarg);// 0x196a180

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 1]
	int SortOrder;//[Offset: 0x200, Size: 1]
	float FadeScreenSize;//[Offset: 0x204, Size: 1]
	float FadeStartDelay;//[Offset: 0x208, Size: 1]
	float FadeDuration;//[Offset: 0x20c, Size: 1]
	float FadeInDuration;//[Offset: 0x210, Size: 1]
	float FadeInStartDelay;//[Offset: 0x214, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	Vector DecalSize;//[Offset: 0x21c, Size: 1]
	void SetSortOrder(int Value);// 0x38ac660
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x38ac3d0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x38ac2b0
	void SetFadeIn(float StartDelay, float Duaration);// 0x38ac1e0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x38abf30
	float GetFadeStartDelay();// 0x38aba10
	float GetFadeInStartDelay();// 0x38ab9e0
	float GetFadeInDuration();// 0x38ab9b0
	float GetFadeDuration();// 0x38ab980
	MaterialInterface* GetDecalMaterial();// 0x38ab950
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x38ab8f0

--------------------------------
Class: OPSkillDecalActor.Actor.Object
	SceneComponent* Root;//[Offset: 0x220, Size: 1]
	DecalComponent* Decal_Range;//[Offset: 0x228, Size: 1]
	NiagaraComponent* Decal_Canopy;//[Offset: 0x230, Size: 1]
	Actor* DecalActorOwner;//[Offset: 0x238, Size: 1]
	OP_Character* DecalActorOwnerCharacter;//[Offset: 0x240, Size: 1]
	FName DefaultDecalDepth_TableKey;//[Offset: 0x25c, Size: 1]
	bool bDrawCanopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool RotationLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool bAutoDecalColorByTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 1]
	bool bAutoDecalSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267, Size: 1]
	FName DecalSizeParamName;//[Offset: 0x268, Size: 1]
	void SetDecalSize(DecalComponent* InDecalComponent, Vector NewDecalSize);// 0x19d5dc0
	void PreSetDecalSizeFromTable(out const enum inSkillCollderShape, out const Vector4 inBehit_Shape, out enum outSkillCollderShape, out Vector4 outBehit_Shape);// 0x19d5bf0
	bool OnGetNativeUpdate();// 0x19d4840
	bool IsSameTeam(Actor* InDecalOwner);// 0x19d4400
	float GetSkillUpperMostChargeTime();// 0x19d43d0
	float GetSkillMaxChargeTime();// 0x19d43a0
	float GetLocalSkillPrepareChargeRate();// 0x19d42e0
	float GetLocalRealSkillPrepareChargeRate();// 0x19d4210

--------------------------------
Class: SkillColliderMovement.Object
	OPSkillColliderActor* Mother;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x450, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x4c0, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d8, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4f0, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x508, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x524, Size: 1]
	float Duration;//[Offset: 0x528, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 1]
	float LoopPosition;//[Offset: 0x534, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x538, Size: 1]
	void UpdateSpline();// 0x1a01300
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x39c5720
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x39c55b0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x19a5130
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x39c53e0
	void SetTangentColor(out const LinearColor TangentColor);// 0x19a5130
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x39c5270
	void SetSplineWorldPoints(out const Vector[] Points);// 0x39c51c0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x39c4f80
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x39c5090
	void SetSplineLocalPoints(out const Vector[] Points);// 0x39c4ed0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x19a5130
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x39c4ce0
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x39c4b70
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x39c4a00
	void SetDrawDebug(bool bShow);// 0x39c4970
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x39c4890
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x39c4770
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x39c46a0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x39c45d0
	bool IsClosedLoop();// 0x39c45a0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x39c44f0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x39c4400
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x39c4350
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x39c4260
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x39c41b0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x39c4100
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x39c4010
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x39c3f60
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x39c3e80
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x39c3da0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c3c70
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c3b90
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c3aa0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c39b0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x39c3810
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x39c36c0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x39c3560
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x39c3400
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c32d0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c1940
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c31e0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c30f0
	byte GetSplinePointType(int PointIndex);// 0x39c3050
	float GetSplineLength();// 0x39c3020
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x39c2ea0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x39c2df0
	Vector GetScaleAtSplineInputKey(float InKey);// 0x39c2d50
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x39c2cb0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c2b80
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c2aa0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c29b0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c28c0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c27a0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c26d0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c25f0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c2510
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c23e0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c2300
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c2210
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c2120
	int GetNumberOfSplineSegments();// 0x39c20f0
	int GetNumberOfSplinePoints();// 0x39c20c0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c1f90
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c1eb0
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c1dc0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c1cd0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x39c1b50
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x39c1a20
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c1940
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x39c18a0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x39c17d0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x39c1700
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x39c1660
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x39c15c0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x39c1490
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c13b0
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x39c12c0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x39c11d0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x39c1130
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x39c1050
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c0f60
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x39c0e00
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c0d10
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x39c0c60
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c0b70
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c0a90
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c09a0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c08b0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x39c0810
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x39c0720
	void ClearSplinePoints(bool bUpdateSpline);// 0x39c0690
	void AddSplineWorldPoint(out const Vector position);// 0x39c05f0
	void AddSplinePointAtIndex(out const Vector position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x39c0480
	void AddSplinePoint(out const Vector position, byte CoordinateSpace, bool bUpdateSpline);// 0x39c0360
	void AddSplineLocalPoint(out const Vector position);// 0x39c02d0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x39c01d0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x39c00c0

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SplineCurves
	InterpCurveVector position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]
	uint32 Version;//[Offset: 0x68, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x468, Size: 1]
	float LineThickness;//[Offset: 0x474, Size: 1]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x388e350
	Vector GetUnscaledBoxExtent();// 0x388e320
	Vector GetScaledBoxExtent();// 0x388e2c0

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x488, Size: 1]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x490, Size: 1]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x4a0, Size: 1]
	BoxSphereBounds LocalBounds;//[Offset: 0x4b0, Size: 1]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4d0, Size: 1]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x1335b70
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x13358b0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1335590
	bool IsMeshSectionVisible(int SectionIndex);// 0x13354f0
	int GetNumSections();// 0x1334f00
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x1334800
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x13344a0
	void ClearMeshSection(int SectionIndex);// 0x1333ad0
	void ClearCollisionConvexMeshes();// 0x1333ab0
	void ClearAllMeshSections();// 0x1333a90
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x1333760

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 1]
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 1]
	Box SectionLocalBox;//[Offset: 0x20, Size: 1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: ProcMeshVertex
	Vector position;//[Offset: 0x0, Size: 1]
	Vector Normal;//[Offset: 0xc, Size: 1]
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 1]
	Color Color;//[Offset: 0x28, Size: 1]
	Vector2D UV0;//[Offset: 0x2c, Size: 1]
	Vector2D UV1;//[Offset: 0x34, Size: 1]
	Vector2D UV2;//[Offset: 0x3c, Size: 1]
	Vector2D UV3;//[Offset: 0x44, Size: 1]

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 1]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PSCoolTimeManager.ActorComponent.Object
	OPSkillComponent* SkillComponent;//[Offset: 0xb0, Size: 1]
	UnitBase* UnitBase;//[Offset: 0xb8, Size: 1]
	MulticastInlineDelegateProperty OnSkillReadStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCoolTimeReady_Server;//[Size: 1]
	MulticastInlineDelegateProperty OnCoolTimeSet_Server;//[Size: 1]
	byte SkillReadyStatusBitFlag;//[Offset: 0xf1, Size: 1]
	<FName,CoolTimeInfo> CoolTimes;//[Offset: 0xf8, Size: 1]
	static FName SkillSlotToCoolTimeName(enum InSkillSlot);// 0x1a06bc0
	void OnSkillReadyStatusChanged();// 0x1a06680
	bool GetPreviousSkillReadyStateFlag(enum InSkillSlot);// 0x1a05ad0
	static PSCoolTimeManager* GetLocalCoolTimeManager(Object* InWorldContextObject);// 0x1a05980
	bool GetCurrentSkillReadyStateFlag(enum InSkillSlot);// 0x1a05860
	static PSCoolTimeManager* GetCoolTimeManager(OP_PlayerState* InPlayerState);// 0x1a057d0
	float GetCoolTimeLeftPer(FName ElementName);// 0x1a05730
	float GetCoolTimeLeftBP(FName ItemName);// 0x1a05690
	float GetCoolTimeLeft(FName ElementName);// 0x1a055f0
	static enum CoolTimeNameToSkillSlot(FName InCoolTimeName);// 0x1a05490
	float CoolTimeLeftPer(FName ElementName);// 0x1a053f0
	float CoolTimeLeft(FName ElementName);// 0x1a05350
	static bool CanCDR(enum InSkillCategory);// 0x1a052d0

--------------------------------
Class: CoolTimeInfo

--------------------------------
Class: PSInventoryManager.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnItemChargeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillInventoryUpdated;//[Size: 1]
	<enum,int> SkillInventory;//[Offset: 0x138, Size: 1]
	byte SkillPoint;//[Offset: 0x188, Size: 1]
	int TryGetItemAmount(ItemBase* ITB);// 0x1a073f0
	void SyncInventoryAll_S2C_Internal(const ItemInventoryInfoSync[] ItemsList);// 0x1a07350
	void OnUnitRespawn();// 0x1a06800
	void OnRep_SkillPoint();// 0x1a06550
	void LearnSkillsMaximum(enum InSkillSlot);// 0x1a06110
	void LearnAllSkillsMaximumOf(OPSkillComponent* InSkillComponentOwner);// 0x1a06080
	void INV_SyncItem_S2C(ItemInventoryInfoSync ItemInfo, bool IsRemoving);// 0x1a05e90
	bool HasItemInInventorySlot(enum InInventorySlot);// 0x1a05e00
	bool HasItemByItemGroupID(FName InItemTableGroupID);// 0x1a05d60
	bool HasItem(FName InItemTableName);// 0x1a05cc0
	int GetSkillLevel(enum InSkillSlot);// 0x1a05b60
	static PSInventoryManager* GetLocalInventoryManager(Object* InWorldContextObject);// 0x1a05a10
	static PSInventoryManager* GetInventoryManager(OP_PlayerState* InPlayerState);// 0x1a058f0
	int GetAllPricesOfMyItems();// 0x1a055c0
	int AmountItem(FName ItemName);// 0x1a05120

--------------------------------
Class: ItemInventoryInfoSync
	FName ItemName;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x8, Size: 1]
	int SkillEffectUniqueID;//[Offset: 0xc, Size: 1]
	enum InventorySlot;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocationSnapshotComponent.ActorComponent.Object
	bool HasMovedInSecond(float InSecond);// 0x18f73e0
	Vector GetLocationAtTimeSince(float InTime, out bool OutIsValid);// 0x18f7000

--------------------------------
Class: OPSkillActionKeywordState.Object
	OPSkillComponent* Mother;//[Offset: 0x28, Size: 1]
	FName ActionKeyword;//[Offset: 0x30, Size: 1]
	FName[] Arguments;//[Offset: 0x38, Size: 1]

--------------------------------
Class: OPCastSkillC2SArgument
	bool bIsSmartKeyActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Actor* MainTarget;//[Offset: 0x8, Size: 1]
	Actor* Target;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpawnSkillColliderClientSyncData
	Actor* CachedTarget;//[Offset: 0x0, Size: 1]
	int ColliderUniqueID;//[Offset: 0x8, Size: 1]
	int PreviousColliderUniqueID;//[Offset: 0xc, Size: 1]
	enum[] PreviousColliderDestroyReasons;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkillColliderClientSyncData
	SlotData SlotData;//[Offset: 0x0, Size: 1]
	Vector_NetQuantizeNormal DirectionData;//[Offset: 0x1c, Size: 1]
	Vector_NetQuantize LocationData;//[Offset: 0x28, Size: 1]
	Actor* ActorData;//[Offset: 0x38, Size: 1]
	float SkillAcceleration;//[Offset: 0x40, Size: 1]
	byte ColliderDimension;//[Offset: 0x44, Size: 1]

--------------------------------
Class: BroadcastedActionKeywordStateArgument
	bool BooleanArgument;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkillCanUseResult
	CanUseSkillResult[] CantUseReaons;//[Offset: 0x0, Size: 1]
	FName Result;//[Offset: 0x10, Size: 1]
	float ResultValue;//[Offset: 0x18, Size: 1]
	FText ResultStringOverride;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CanUseSkillResult
	enum ReasonType;//[Offset: 0x0, Size: 1]
	SlotData ReasonArgument;//[Offset: 0x4, Size: 1]

--------------------------------
Class: NPCBase.PlayerBase.Character.Pawn.Actor.Object
	FString[] Debug_NPCStateHistory;//[Offset: 0xa38, Size: 1]
	bool bIsSummonedPrime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 1]
	MinionHealthbar* HUDHeadbarComponent;//[Offset: 0xa68, Size: 1]
	float PursuitTime;//[Offset: 0xa80, Size: 1]
	int StuckToSelfDestructionCount;//[Offset: 0xa84, Size: 1]
	int StuckToManualWalkCount;//[Offset: 0xa88, Size: 1]
	Point_MinionSpawn* MotherSpawner;//[Offset: 0xa90, Size: 1]
	Point_JungleMinionSpawn* MotherSpawnerAsJungle;//[Offset: 0xa98, Size: 1]
	float EXPMultiply;//[Offset: 0xaa4, Size: 1]
	float EXPMultiplyDevideAmount;//[Offset: 0xaa8, Size: 1]
	int CardPointNoKillNPC;//[Offset: 0xaac, Size: 1]
	int CardPointKillNPC;//[Offset: 0xab0, Size: 1]
	float NPCInstantKillRatio;//[Offset: 0xab4, Size: 1]
	bool MoveTo_HasDestination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	Vector MoveTo_FinalLocation;//[Offset: 0xabc, Size: 1]
	Actor* EnemyObjectToCheck;//[Offset: 0xac8, Size: 1]
	Actor* CurrentEnemy;//[Offset: 0xad0, Size: 1]
	Actor* LastEnemy;//[Offset: 0xad8, Size: 1]
	enum CurrentEnemyMainType;//[Offset: 0xae0, Size: 1]
	int EnemyLooseRange;//[Offset: 0xb08, Size: 1]
	float DamageScaleOnObjects;//[Offset: 0xb0c, Size: 1]
	float DamageScaleOnNPCs;//[Offset: 0xb10, Size: 1]
	float DamageScaleOnHeroes;//[Offset: 0xb14, Size: 1]
	bool AttackRandomPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	bool IgnoreNearbyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19, Size: 1]
	bool SetAsEnemyWhenHitIfNoEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1a, Size: 1]
	float BroadcastAggroToNearby;//[Offset: 0xb1c, Size: 1]
	bool bIsForceAttackTowerNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	float InvincibleHomeDistance;//[Offset: 0xb34, Size: 1]
	float HealthAddPerWave;//[Offset: 0xb90, Size: 1]
	float DamageAddperWave;//[Offset: 0xb94, Size: 1]
	FXSystemAsset* FX_Aggro;//[Offset: 0xbb0, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0xbc8, Size: 1]
	float AttackSyncMaxDistance;//[Offset: 0xbd0, Size: 1]
	float AttackDelay;//[Offset: 0xbd4, Size: 1]
	enum MyLane;//[Offset: 0xbe5, Size: 1]
	void StopMovement();// 0x19058c0
	void SetNextAttackPosition(Vector Pos, bool InMoveNow);// 0x19055a0
	void SetInvincibleHomeDistance(float InNewValue);// 0x1905520
	void PursuitEnemy(Actor* InAttacker, enum InVictimType);// 0x19053c0
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1905330
	void OnAggro_Internal();// 0x1904ed0
	bool IsInstantKillCondition(float InDamage);// 0x1904e40
	FString GetNPCStatus();// 0x1904cd0
	float GetInstantKillDamage();// 0x1904ca0
	float getgametime1();// 0x19058e0
	Actor* GetCurrentEnemy();// 0x1904c40
	int GetCannotMoveCount();// 0x1904c20

--------------------------------
Class: MinionHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: Point_MinionSpawn.TeamActorBase.Actor.Object
	FName Index;//[Offset: 0x220, Size: 1]
	FName TrainingSpiritID;//[Offset: 0x228, Size: 1]
	enum TrainingSpiritType;//[Offset: 0x230, Size: 1]
	enum SpawnActorType;//[Offset: 0x231, Size: 1]
	enum SpawnSpilitType;//[Offset: 0x232, Size: 1]
	float AddHealthPerWave;//[Offset: 0x234, Size: 1]
	float AddPhysicalDamagePerWave;//[Offset: 0x238, Size: 1]
	OPMinimapExposableComponent* MinimapExposableComponent;//[Offset: 0x240, Size: 1]
	UnitVisionComponent* UnitVisionComponent;//[Offset: 0x248, Size: 1]
	bool SpawnFirstNPCOnCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Transform[] ObjectSpawnTransforms;//[Offset: 0x258, Size: 1]
	int TeamNum;//[Offset: 0x268, Size: 1]
	SphereComponent* SpawnRadius;//[Offset: 0x2b0, Size: 1]
	SphereComponent* VisionCollider;//[Offset: 0x2b8, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x2c0, Size: 1]
	void OnSpawnedChildNPC(const Actor* SpawnedChild);// 0x1a066e0
	void OnRestartingRespawnTimer(float TimeLeft);// 0x1a06570
	void OnPostCreationNotify(float InTimeAfter);// 0x1a063f0
	static Point_MinionSpawn* GetSpawnerBySpawnerID(Object* InWorldContextObject, FName InSpawnerID);// 0x1a05bf0
	OPMinimapExposableComponent* GetMinimapExposable();// 0x1a05aa0
	void BroadcastTableInfo(enum InSpawnerTypeByTable);// 0x1a05250
	void BroadcastRespawnEvent(float InNextRespawnDelay);// 0x1a051c0

--------------------------------
Class: OPUROComponent.ActorComponent.Object
	int[] LODToFrameSkipMap;//[Offset: 0xb0, Size: 1]
	float DesiredTickInterval;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: Point_JungleMinionSpawn.Point_MinionSpawn.TeamActorBase.Actor.Object
	FName SpawnerGroupID;//[Offset: 0x2c8, Size: 1]
	Vector[] BattleFieldRange;//[Offset: 0x350, Size: 1]
	int TeamLocaitonNumber;//[Offset: 0x360, Size: 1]
	bool bNotUseRespawnSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	byte NumActiveMinions;//[Offset: 0x365, Size: 1]
	class ActorFloatingWidget* ActorFloatingWidget_Class;//[Offset: 0x368, Size: 1]
	Actor*[] SpawnedMinions_Jungle;//[Offset: 0x430, Size: 1]
	enum PatiensState;//[Offset: 0x44c, Size: 1]
	void OnSyncFromServerData(float InPatiensTime);// 0x1a06770
	void OnSelcectedSpiritNotify_S2AC(enum InSpiritType);// 0x1a06600
	void OnPostCreationNotify_S2AC(float InTimeRemain, enum InSpiritType);// 0x1a06480
	void OnNumActiveMinionChanged();// 0x1a06340
	void OnDestoryForBabyPrime_Temp();// 0x1a062d0
	void OnChangedExposable(bool InTeam1, bool InTeam2);// 0x1a061f0
	void OnChagnedPatiens_Client();// 0x1a061d0
	void NextFirstGenTimer();// 0x1a061b0
	void MainHUDNotifyJob();// 0x1a06190
	void ForceSpawnByEditor();// 0x1a055a0
	NPCBase*[] CustomSpawnJungleMinion();// 0x1a05520

--------------------------------
Class: ActorFloatingWidget.UserWidget.Widget.Visual.Object
	Actor* CachedParentActor;//[Offset: 0x260, Size: 1]
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x268, Size: 1]
	PlayerController* CachedSelfPlayerController;//[Offset: 0x270, Size: 1]
	MainBattleUIComponent* CachedMainHUD;//[Offset: 0x278, Size: 1]
	void OnAppear3D();// 0x1d4eb70

--------------------------------
Class: MainBattleUIComponent.UserWidget.Widget.Visual.Object
	Vector2D ScreenOverOffsetValueMin;//[Offset: 0x260, Size: 1]
	Vector2D ScreenOverOffsetValueMax;//[Offset: 0x268, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Kill;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Death;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Assist;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_CS;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_Score_MyTeam;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_Score_Enemy;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_BlackScore_MyTeam;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_BlackScore_Enemy;//[Offset: 0x2b8, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_R;//[Offset: 0x2c0, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_Passive;//[Offset: 0x2c8, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_Q;//[Offset: 0x2d0, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_E;//[Offset: 0x2d8, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_RMB;//[Offset: 0x2e0, Size: 1]
	MainBattleUIElement_QuickSlotIcon* Bind_QIcon_LMB;//[Offset: 0x2e8, Size: 1]
	CanvasPanel* Bottom_Object;//[Offset: 0x340, Size: 1]
	TextBlock* Bind_Text_Ping;//[Offset: 0x348, Size: 1]
	TextBlock* Bind_Text_FPS;//[Offset: 0x350, Size: 1]
	CanvasPanel* Bind_Widget_Root_Panel;//[Offset: 0x358, Size: 1]
	CanvasPanel* not_InvalidationBox_depth;//[Offset: 0x360, Size: 1]
	CanvasPanel* Bind_LB_ProFile;//[Offset: 0x368, Size: 1]
	MainBattleUIElement_HealthInfoComponent* Bind_Widget_HealthInfo;//[Offset: 0x370, Size: 1]
	MainBattleUIElement_HealthAndManaInfoWidget* Bind_Widget_HealthAndManaInfo;//[Offset: 0x378, Size: 1]
	CanvasPanel* Skill_Object;//[Offset: 0x380, Size: 1]
	MainBattleUIElement_InventoryComponent* Bind_Widget_Inventory;//[Offset: 0x388, Size: 1]
	OPQueuedBattlePopupHolderWidget* Bind_Widget_QueuedPopupHolder;//[Offset: 0x390, Size: 1]
	OPSkillActivationHelperComponent* Bind_Widget_SkillActivationHelper;//[Offset: 0x398, Size: 1]
	MainBattleUIElement_AutoRunNoticeWidget* Bind_Widget_Notice_AutoRun_Message;//[Offset: 0x3a0, Size: 1]
	MainBattleUIElement_SkillLevelUpErrorWidget* Bind_SkillLevelUpErrorWidget;//[Offset: 0x3a8, Size: 1]
	MainBattleUIElement_CastBarComponent* Bind_Widget_CastBar;//[Offset: 0x3b0, Size: 1]
	MainBattleUIElement_CrosshairComponent* Bind_View_Crosshair;//[Offset: 0x3b8, Size: 1]
	OPTrainingCheatMenuKeyGuide* Bind_Ingame_HUD_Training_Key_Guide;//[Offset: 0x3c0, Size: 1]
	OPTrainingCheatMenuToast* Bind_ToolTip_Training_Message;//[Offset: 0x3c8, Size: 1]
	OPTrainingCheatMenu* Bind_Ingame_Training;//[Offset: 0x3d0, Size: 1]
	OPBattleShopWidget* Bind_Widget_ShopMenu;//[Offset: 0x3d8, Size: 1]
	MainBattleUIElement_TopHealthInfoComponent* Bind_Widget_TopBuildingHealthInfo;//[Offset: 0x3e0, Size: 1]
	MainBattleUIElement_TopHealthInfoComponent* Bind_Widget_TopEpicHealthInfo;//[Offset: 0x3e8, Size: 1]
	OPChatComponent* Bind_Chat;//[Offset: 0x3f0, Size: 1]
	OPMinimapWidgetStyleComponent* Bind_WidgetStyle_Minimap;//[Offset: 0x3f8, Size: 1]
	MainBattleUIElement_LevelUpComponent* Bind_Widget_LevelUpPopup;//[Offset: 0x400, Size: 1]
	MainBattleUIElement_TeamPlayerListComponent* UMGHUD_TeamPlayerLister;//[Offset: 0x408, Size: 1]
	MainBattleUIElement_TeamPlayerListComponent* UMGHUD_TeamPlayerListerEnemy_C;//[Offset: 0x410, Size: 1]
	CanvasPanel* Bind_Top_Player;//[Offset: 0x418, Size: 1]
	MainBattleUIElement_CoreHealthComponent* Bind_Widget_Core_Team;//[Offset: 0x420, Size: 1]
	MainBattleUIElement_CoreHealthComponent* Bind_Widget_Core_Enemy;//[Offset: 0x428, Size: 1]
	OPSurrenderComponent* Bind_Popup_Surrender;//[Offset: 0x430, Size: 1]
	OPSurrenderComponent* Bind_Popup_Surrender_Early;//[Offset: 0x438, Size: 1]
	OPDeathscreenComponent* Bind_Widget_DeathScreen;//[Offset: 0x440, Size: 1]
	OPBattleScoreBoardComponent* Bind_Widget_ScoreBoard;//[Offset: 0x448, Size: 1]
	MainBattleUIElement_AbnormalListWidget* Bind_Widget_AbnormalList;//[Offset: 0x450, Size: 1]
	OPDamageIndicatorBaseComponent* Bind_Widget_IndicatorBase;//[Offset: 0x458, Size: 1]
	OPHeadbarManagerComponent* Bind_Widget_HeadbarManager;//[Offset: 0x460, Size: 1]
	MainBattleUIElement_NetworkError* Bind_Widget_NetworkError;//[Offset: 0x468, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToOpenShop;//[Offset: 0x470, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToLearnSkill;//[Offset: 0x478, Size: 1]
	HUD_NotificationWidget* Bind_Notification_PressToBabyPrime;//[Offset: 0x480, Size: 1]
	VerticalBox* Bind_VBox_TeamObjectives;//[Offset: 0x488, Size: 1]
	OPVerticalBoxKillStreak* Bind_VBox_KillStreaks;//[Offset: 0x490, Size: 1]
	OPPingSystemOrder_Widget* Bind_Widget_PingSystem;//[Offset: 0x498, Size: 1]
	OPPingSystemAnswer_Widget* Bind_Widget_PingSystem_Answer;//[Offset: 0x4a0, Size: 1]
	OPPingSystemEmotion_Widget* Bind_Widget_PingSystem_Emotion;//[Offset: 0x4a8, Size: 1]
	OPStatAndSkillInfoComponent* Bind_Widget_StatAndSkillInfo;//[Offset: 0x4b0, Size: 1]
	MainBattleUIElement_AutoSkillUpgradeNotice* Bind_Widget_AutoSkillUpgradeNotice;//[Offset: 0x4b8, Size: 1]
	MainBattleUIElement_AutoSkillButton* Bind_Widget_AutoSkillButton;//[Offset: 0x4c0, Size: 1]
	MainBattleUIElement_TrainingGuideComponent* Bind_Widget_TrainingGuide;//[Offset: 0x4c8, Size: 1]
	MainBattleUIElement_TrainingToastComponent* Bind_Widget_TrainingToast;//[Offset: 0x4d0, Size: 1]
	MainBattleUIElement_TutorialToastComponent* Bind_ToolTip_Practice_Message;//[Offset: 0x4d8, Size: 1]
	bool bToggleHUDStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	OPStatSlotWidget* Stats_Physical;//[Offset: 0x548, Size: 1]
	OPStatSlotWidget* Stats_Physical_Def;//[Offset: 0x550, Size: 1]
	OPStatSlotWidget* Stats_AttackSpeed;//[Offset: 0x558, Size: 1]
	OPStatSlotWidget* Stats_CriticalChance;//[Offset: 0x560, Size: 1]
	OPStatSlotWidget* Stats_Magical;//[Offset: 0x568, Size: 1]
	OPStatSlotWidget* Stats_Magical_Def;//[Offset: 0x570, Size: 1]
	OPStatSlotWidget* Stats_CoolTime;//[Offset: 0x578, Size: 1]
	Actor*[] VisionActorArray;//[Offset: 0x580, Size: 1]
	void UpdateKDACG_Observer();// 0x18fad20
	void UpdateKDACG();// 0x18fad00
	void UpdateGold_Observer(float InNewGold);// 0x18fab00
	void UpdateGold(float InNewGold);// 0x18faa80
	void ToggleHideHUD_BP();// 0x18ebe90
	void ShowWarningMessage_BP(out const FText InMessage);// 0x18fa610
	void SetupUMGHUDForPureObserver_BPNE();// 0x18fa3d0
	void SetupUMGHUDForPureObserver();// 0x18fa3b0
	void SetStatInfo_Observer();// 0x18fa310
	void SetStatInfo();// 0x18fa2f0
	void SetScoreboardState(bool InVisible);// 0x1d4eb70
	void PlayBlindAnimation_BPNE(float InDuration);// 0x18f9810
	void OnUniversalInventoryUpdated_Observer();// 0x18f97f0
	void OnUniversalInventoryUpdated();// 0x18f97b0
	void OnTeamScoreChanged(byte InTeamNum);// 0x18f9590
	void OnSkillStateChanged_Observer(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x18f9380
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x18f9250
	void OnSkillStackChanged_Observer(FName InStackID);// 0x18f91c0
	void OnSkillStackChanged(FName InStackID);// 0x18f9130
	void OnSkillSlotChanged_Observer();// 0x18f9110
	void OnSkillSlotChanged();// 0x18f90f0
	void OnSkillInfoUpdated_BPNE(bool InbActivated);// 0x18f86b0
	void OnShopStateChanged(bool InIsIn);// 0x18f9040
	void OnPlayerSkillPointChanged_Observer(byte InNewPoint);// 0x18f8fc0
	void OnPlayerSkillPointChanged(byte InNewPoint);// 0x18f8f40
	void OnPlayerLevelUp_Observer(byte InNewLevel);// 0x18f8ec0
	void OnPlayerLevelUp(byte InNewLevel);// 0x18f8e40
	void OnInventoryUpdated(OP_PlayerState* InPlayerState);// 0x1212240
	void OnControllingCharacterManaChanged_Observer(float InNewMana);// 0x18f83a0
	void OnControllingCharacterManaChanged(float InNewMana);// 0x18f8320
	void OnControllingCharacterDestroyed(Actor* InLastAffectedAttacker);// 0x18f8290
	void OnChangedPotalState(bool InUsable, out const FName InTableID);// 0x18f80b0
	void OnBlackScoreChanged(byte InTeamNum);// 0x18f7f60
	void OnAbnormalStateChanged_Observer(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x18f7ac0
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x18f7820
	bool IsShowTrainingCheatWidget();// 0x18f7760
	bool IsShowStatAndSkillInfoWidget();// 0x18f7730
	static MainBattleUIComponent* GetBattleUIComponent(Object* InWorldContextObject);// 0x18f6a20
	void CleanUp_beforeResultScene();// 0x18f6860

--------------------------------
Class: MainBattleUIElement_QuickSlotIcon.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Mana;//[Offset: 0x260, Size: 1]
	Widget* Bind_Widget_ManaDivider;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_CoolDownOverlay;//[Offset: 0x270, Size: 1]
	Widget* Bind_Image_CoolDownBorder;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Lock;//[Offset: 0x280, Size: 1]
	WidgetAnimation* UnLock;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Key;//[Offset: 0x290, Size: 1]
	OPItemIconComponent* Bind_Icon_Main;//[Offset: 0x298, Size: 1]
	OPHorizontalBox* Bind_HBox_Level;//[Offset: 0x2a0, Size: 1]
	OPSkillLevelWidget* Bind_Skill_Level;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_CoolTime;//[Offset: 0x2b0, Size: 1]
	Widget* Bind_View_Stack;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_Stack;//[Offset: 0x2c0, Size: 1]
	Widget* Bind_View_ToggleState;//[Offset: 0x2c8, Size: 1]
	Image* Bind_Image_ActivationIcon;//[Offset: 0x2d0, Size: 1]
	Widget* Bind_View_Lock;//[Offset: 0x2d8, Size: 1]
	enum CurrentSkillSlotType;//[Offset: 0x2e0, Size: 1]
	FName CurrentSkillTableID;//[Offset: 0x2e4, Size: 1]
	LinearColor Color_KeyBG_OnCoolDown;//[Offset: 0x2f8, Size: 1]
	LinearColor Color_KeyBG_OnAvailable;//[Offset: 0x308, Size: 1]
	bool bUsingCustomCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bIsIconValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	void UpdateLevel_Observer(OP_Character* InCharacter);// 0x18fad80
	void UpdateLevel();// 0x18fad60
	void SetSkill_Observer(FName InSkillName, OP_Character* InCharacter);// 0x18fa220
	void SetSkill(FName InSkillName);// 0x18fa190
	void SetPercentDynamic_BPNE(float InValue);// 0x18f9810
	void SetCustomCoolDown(float InCoolDown);// 0x18f9d80
	void PlayCantUseAnimation_BPNE(bool InPlay);// 0x18f86b0
	void OnSkillToggleStateChanged_BPNE(bool InToggleON);// 0x18f8960
	void OnSkillLevelUp_BPIE();// 0x1d4eb70
	void OnCanLearnSkill_BPNE(bool InCanLearn);// 0x10d0aa0
	float GetCustomCoolDownTimeLeft();// 0x18f6e30
	float GetCustomCoolDownPercent();// 0x18f6e00
	void GetCoolDownTimeLeft_Master_Observer(out float OutTimeLeft, out float OutTimeLeftPer, OP_PlayerState* InPlayerState);// 0x18f6b90
	void GetCoolDownTimeLeft_Master(out float OutTimeLeft, out float OutTimeLeftPer);// 0x18f6ab0
	void CheckCurrentState_Observer_Internal(OP_Character* InCharacter);// 0x18f67d0
	void CheckCurrentState_Internal();// 0x18f67b0

--------------------------------
Class: OPItemIconComponent.UserWidget.Widget.Visual.Object
	Image* Bind_Image_IconImage;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_CoolDownOverlay;//[Offset: 0x268, Size: 1]
	Widget* Bind_Image_CoolDownBorder;//[Offset: 0x270, Size: 1]
	MulticastInlineDelegateProperty OnItemIconSet;//[Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x288, Size: 1]
	FName CurrentItemName;//[Offset: 0x290, Size: 1]
	ShopItemBase* CurrentItem;//[Offset: 0x298, Size: 1]
	ShopItemBase* SetItem(FName InItemTableName);// 0x19819d0
	void SetIconTexture(Texture2D* InTexture);// 0x1981940
	void SetIconBrush(SlateBrush InBrush);// 0x1981830
	void RemoveItem();// 0x1981620
	FName GetCurrentItemName();// 0x1980650
	ShopItemBase* GetCurrentItem();// 0x1980630
	float GetCoolTimePercent();// 0x1980600
	float GetCoolTimeLeft();// 0x19805d0

--------------------------------
Class: OPHorizontalBox.HorizontalBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x130, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x140, Size: 1]
	Margin Padding;//[Offset: 0x148, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x158, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bOverrideChildSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	SlateChildSize ChildSize;//[Offset: 0x15c, Size: 1]
	UserWidget* CreateWidget();// 0x19a4c10
	HorizontalBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x19a47b0

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x2f90360

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2f92320
	void SetSize(SlateChildSize InSize);// 0x2f92190
	void SetPadding(Margin InPadding);// 0x2f91ce0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2f91880

--------------------------------
Class: OPSkillLevelWidget.UserWidget.Widget.Visual.Object
	int MaxLevel;//[Offset: 0x260, Size: 1]
	SlateBrush LevelTexture_On;//[Offset: 0x268, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x2f0, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x300, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x310, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x320, Size: 1]
	SlateBrush[] LevelTexture_On;//[Offset: 0x330, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x340, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x350, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x360, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x370, Size: 1]
	SlateBrush[] LevelTexture_Off;//[Offset: 0x380, Size: 1]
	Image* Bind_Image;//[Offset: 0x390, Size: 1]
	Image* Bind_Image_2;//[Offset: 0x398, Size: 1]
	Image* Bind_Image_2;//[Offset: 0x3a0, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x3a8, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x3b0, Size: 1]
	Image* Bind_Image_3;//[Offset: 0x3b8, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x3c0, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x3c8, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x3d0, Size: 1]
	Image* Bind_Image_4;//[Offset: 0x3d8, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x3e0, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x3e8, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x3f0, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x3f8, Size: 1]
	Image* Bind_Image_5;//[Offset: 0x400, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x408, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x410, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x418, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x420, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x428, Size: 1]
	Image* Bind_Image_6;//[Offset: 0x430, Size: 1]
	void SetMaxLevel(int InMaxLevel, bool IsInTrainingLevel);// 0x19d5ea0
	void SetCurrentLevel(int InLevel);// 0x19d5d30

--------------------------------
Class: MainBattleUIElement_HealthInfoComponent.UserWidget.Widget.Visual.Object
	OP_Character* CurrentHero;//[Offset: 0x260, Size: 1]
	OP_PlayerState* CurrentHeroPlayerState;//[Offset: 0x268, Size: 1]
	float ExpLerpScale;//[Offset: 0x27c, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x288, Size: 1]
	Image* Bind_PBar_EXP_Material;//[Offset: 0x290, Size: 1]
	Image* Bind_PBar_EXP_Material_Delta;//[Offset: 0x298, Size: 1]
	PanelWidget* Bind_Panel_Stat;//[Offset: 0x2a0, Size: 1]
	enum HeroIconType;//[Offset: 0x2a8, Size: 1]
	void UpdateInfo_Observer(OP_PlayerState* InPlayerState);// 0x18fac70
	void UpdateInfo();// 0x18fac50
	void UpdateHeroStat_Observer(OP_PlayerState* InPlayerState);// 0x18faba0
	void UpdateHeroStat();// 0x18fab80
	void SetMyHero_Observer(OP_Character* InCharacter);// 0x18f9ff0
	void SetMyHero(OP_Character* InMyHero);// 0x18f9f60
	void PlayHeartBeatSound_BPNE(bool InPlay, float InHealthPercent);// 0x18f9930
	void OnPlayerLevelUpBP();// 0x1d4eb70
	void OnPlayerEXPChanged_Observer(float InNewEXP);// 0x18f8dc0
	void OnPlayerEXPChanged(float InNewEXP);// 0x18f8d40
	void OnLevelChanged_BPNE(int InNewLevel);// 0x18f87d0
	void OnHeroStatChanged_Observer();// 0x18f8690
	void OnHeroStatChanged();// 0x18f8670
	void OnDestroyed(Actor* InActor);// 0x18f8440

--------------------------------
Class: MainBattleUIElement_HealthAndManaInfoWidget.UserWidget.Widget.Visual.Object
	OP_Character* CurrentHero;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentHP;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_MaxHP;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_HPGen;//[Offset: 0x278, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_CurrentMP;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_MaxMP;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_MPGen;//[Offset: 0x298, Size: 1]
	OPHealthProgressBar* Bind_PBar_Mana;//[Offset: 0x2a0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Small;//[Offset: 0x2a8, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Medium;//[Offset: 0x2b0, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x2b8, Size: 1]
	AudioComponent* MyHeatBearSoundComponent;//[Offset: 0x2c0, Size: 1]
	void UpdateInfo();// 0x18fac30
	void SetMyHero(OP_Character* InMyHero);// 0x18f9ed0
	void PlayHeartBeatSound_BPNE(bool InPlay, float InHealthPercent);// 0x18f9930
	void OnHeroStatChanged();// 0x18f8650
	void OnHeroHealthChanged(float InNewValue);// 0x18f85d0

--------------------------------
Class: MainBattleUIElement_InventoryComponent.UserWidget.Widget.Visual.Object
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x260, Size: 1]
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x268, Size: 1]
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x278, Size: 1]
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x280, Size: 1]
	MainBattleUIElement_InventoryIconComponent* Bind_Icon_Inventory;//[Offset: 0x288, Size: 1]
	void Update(OP_PlayerState* InPlayerState);// 0x18fa9b0
	void OnUniversalInventoryUpdated();// 0x18f97d0
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x18f8740

--------------------------------
Class: MainBattleUIElement_InventoryIconComponent.UserWidget.Widget.Visual.Object
	Image* Bind_Image_IconBackground;//[Offset: 0x260, Size: 1]
	OPItemIconComponent* Bind_Icon_Item;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_CoolDown;//[Offset: 0x270, Size: 1]
	Image* Bind_Image_Dimmed;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_Border;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_Key;//[Offset: 0x288, Size: 1]
	Widget* Bind_View_Key;//[Offset: 0x290, Size: 1]
	Widget* Bind_View_KeyLine;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x2a0, Size: 1]
	Widget* Bind_Amount_Item;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_AmountItem;//[Offset: 0x2b0, Size: 1]
	Widget* Bind_View_AmountZeroBG;//[Offset: 0x2b8, Size: 1]
	Texture2D* Background_Normal;//[Offset: 0x2c0, Size: 1]
	Texture2D* Background_Magic;//[Offset: 0x2c8, Size: 1]
	Texture2D* Background_Rare;//[Offset: 0x2d0, Size: 1]
	Texture2D* Background_Disable;//[Offset: 0x2d8, Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x2e0, Size: 1]
	MaterialInstanceDynamic* BackPanelDynMat;//[Offset: 0x2e8, Size: 1]
	SlateBrush BG_None;//[Offset: 0x2f0, Size: 1]
	SlateBrush BG_WithItem;//[Offset: 0x378, Size: 1]
	int InventorySlot;//[Offset: 0x400, Size: 1]
	bool bShowActivationKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	void UpdateKeyInfo();// 0x18fad40
	void InventoryItemSlotUpdated_BPNE(bool InbHasItem, bool InbIsActiveItem, enum InItemGrade);// 0x18f7490

--------------------------------
Class: OPQueuedBattlePopupHolderWidget.UserWidget.Widget.Visual.Object
	OPKillStreakComponent* Bind_Widget_KillStreakWidget;//[Offset: 0x268, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_First;//[Offset: 0x270, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Double;//[Offset: 0x278, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Triple;//[Offset: 0x280, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Quadra;//[Offset: 0x288, Size: 1]
	OPKillStreakComponent* Bind_Widget_KillStreak_Penta;//[Offset: 0x290, Size: 1]
	WidgetSwitcher* Bind_Widget_KillStreak_Switcher;//[Offset: 0x298, Size: 1]
	WidgetSwitcher* Bind_Widget_ObjectKill_Switcher;//[Offset: 0x2a0, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Red;//[Offset: 0x2a8, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Blue;//[Offset: 0x2b0, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Ally;//[Offset: 0x2b8, Size: 1]
	BattlePopupWidget_ObjectiveKill* Bind_Widget_ObjectKill_Enemy;//[Offset: 0x2c0, Size: 1]
	OPQueuedBattlePopupHolderElement* CurrentWidget;//[Offset: 0x2e0, Size: 1]
	void NotifyOnAnimationFinished();// 0xd8dcf0

--------------------------------
Class: OPKillStreakComponent.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* Animation_SameTeam;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Animation_DifferentTeam;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_KillStreakSituation;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_KillerName;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_VictimName;//[Offset: 0x2b0, Size: 1]
	Image* Bind_Image_KillerIcon;//[Offset: 0x2b8, Size: 1]
	Image* Bind_Image_VictimIcon;//[Offset: 0x2c0, Size: 1]
	OPIconImageWidget* Bind_Image_Hero_Victim;//[Offset: 0x2c8, Size: 1]
	OPIconImageWidget* Bind_Image_Hero_Killer;//[Offset: 0x2d0, Size: 1]
	OPIconImageWidget* Bind_Image_VictimGreyIcon;//[Offset: 0x2d8, Size: 1]
	Image* Bind_Image_BG_Left;//[Offset: 0x2e0, Size: 1]
	Image* Bind_Image_BG_Right;//[Offset: 0x2e8, Size: 1]
	Widget* Bind_View_Reverseable;//[Offset: 0x2f0, Size: 1]
	LinearColor Color_BG_Ally;//[Offset: 0x2f8, Size: 1]
	LinearColor Color_BG_Enemy;//[Offset: 0x308, Size: 1]
	enum HeroIconType;//[Offset: 0x318, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x319, Size: 1]
	void OnSet_BP(enum InKillerType, enum InVictimType);// 0x1981510
	void OnMark();// 0xd8dcf0

--------------------------------
Class: OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* CurrentAnimation;//[Offset: 0x260, Size: 1]
	float PauseTime;//[Offset: 0x280, Size: 1]

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x120, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0x2fb3d70
	void SetActiveWidget(Widget* Widget);// 0x1204e90
	Widget* GetWidgetAtIndex(int Index);// 0x2fb3350
	int GetNumWidgets();// 0x2fb30a0
	int GetActiveWidgetIndex();// 0x2fb2dd0
	Widget* GetActiveWidget();// 0x2fb2da0

--------------------------------
Class: BattlePopupWidget_ObjectiveKill.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	WidgetAnimation* Start;//[Offset: 0x290, Size: 1]
	Image* Bind_Image_SymbolIcon;//[Offset: 0x298, Size: 1]
	Image* Bind_Image_SymbolIconAdd;//[Offset: 0x2a0, Size: 1]
	BattlePopupWidget_ObjectiveKillSubIcon* Bind_Image_NoticeElement;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_StackBuff;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_StackBuff2;//[Offset: 0x2b8, Size: 1]
	Widget* Bind_View_Gold;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x2c8, Size: 1]
	TextBlock* Bind_Text_Title;//[Offset: 0x2d0, Size: 1]
	LinearColor Color_Ally;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: BattlePopupWidget_ObjectiveKillSubIcon.OPQueuedBattlePopupHolderElement.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x290, Size: 1]

--------------------------------
Class: OPSkillActivationHelperComponent.UserWidget.Widget.Visual.Object
	SlotData CurrentSkillSlotForActivation;//[Offset: 0x260, Size: 1]
	TargetSelectionModeData TargetSelectionModeData;//[Offset: 0x290, Size: 1]
	Actor* NearbyEnemy;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_ActivationName;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_UnitName;//[Offset: 0x2b0, Size: 1]
	TextBlock* Bind_Text_PressRToCastYourself;//[Offset: 0x2b8, Size: 1]
	TextBlock* Bind_Text_DistanceToTarget;//[Offset: 0x2c0, Size: 1]
	CanvasPanel* Bind_Canvas_ActivationHelperSlot;//[Offset: 0x2c8, Size: 1]
	SoundBase* Sound_LockOn;//[Offset: 0x2d0, Size: 1]
	SoundBase* Sound_LockOff;//[Offset: 0x2d8, Size: 1]
	MainBattleUIElement_CrosshairMode* ActivationHelperCrosshair;//[Offset: 0x2e0, Size: 1]
	void OnUserSettingSaved();// 0x19c6050
	void OnTargetSelectionMode_TargetUpdated_BP(Actor* InNewTarget, UserWidget* CrosshairMode, bool InIsTeamMate);// 0x19c5ec0
	void OnOutlinedTargetChanged();// 0x19c5920
	void OnActivated_BPNE(bool InIsActivated, enum InActivationType, UserWidget* CrosshairMode);// 0x19c4c50

--------------------------------
Class: TargetSelectionModeData
	bool Activated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum TargetSelectionType;//[Offset: 0x9, Size: 1]

--------------------------------
Class: MainBattleUIElement_CrosshairMode.UserWidget.Widget.Visual.Object
	enum TargetSelectionType;//[Offset: 0x270, Size: 1]
	int MaxRange;//[Offset: 0x274, Size: 1]
	bool Activated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	WidgetAnimation* Aimed_Enemy;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Aimed_Enemy_Target;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* Aimed_Ally;//[Offset: 0x2a8, Size: 1]
	WidgetAnimation* Aimed_Ally_Target;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* In;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* In_Loop;//[Offset: 0x2c0, Size: 1]
	float AnimationPlaySpeed;//[Offset: 0x2c8, Size: 1]
	float AnimationPlaySpeed_Reverse;//[Offset: 0x2cc, Size: 1]
	void ResetAimAnimation(bool InIsEnemy);// 0x1d4eb70
	void OnLoopAnimation_BPNE();// 0x18f8420
	void AfterInAnimationEvent();// 0x18f6760

--------------------------------
Class: MainBattleUIElement_AutoRunNoticeWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Notice;//[Offset: 0x260, Size: 1]
	void OnShow();// 0x1d4eb70
	void OnHide();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_SkillLevelUpErrorWidget.UserWidget.Widget.Visual.Object
	void ShowErrorText(FName InText, float InValue);// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_CastBarComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_CastName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentTime;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_CastTime;//[Offset: 0x270, Size: 1]
	bool IsStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	float TimeStartDecimal;//[Offset: 0x2a0, Size: 1]
	int DecimalPoints;//[Offset: 0x2a4, Size: 1]
	void StartCast(FString InPrintNameLocalKey, float TimeLapsed, float InSeconds, bool InIsReverse, float InOverCharge, enum InCategory);// 0x18fa710
	void OnUpdatePercent_BP(float InPercent);// 0x18f9810
	void OnStarted_BP(bool InIsStarted, float InDuration);// 0x18f94b0
	void OnOvercharge_BP(bool InOverCharge);// 0x18f8960

--------------------------------
Class: MainBattleUIElement_CrosshairComponent.UserWidget.Widget.Visual.Object
	MainBattleUIComponent_CrosshairMainComponent* CrosshairMain;//[Offset: 0x260, Size: 1]
	MainBattleUIElement_CrosshairMode* CurrentCrosshairMode;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_Canvas_CrosshairSlot;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_TextBox_Distance;//[Offset: 0x278, Size: 1]
	Vector2D AutoLockStartBoundarySize;//[Offset: 0x288, Size: 1]
	Vector2D AutoLockedRatio;//[Offset: 0x290, Size: 1]
	Vector2D AutoLockTargetLossBoundarySize;//[Offset: 0x298, Size: 1]
	float AutoLockBoxSizeAnimationInterpSpeed;//[Offset: 0x2a0, Size: 1]
	CanvasPanel* BPBind_Canvas_Boundary;//[Offset: 0x2a8, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	PlayerBase* LockedTarget;//[Offset: 0x2c0, Size: 1]
	void UnLockTarget();// 0x18fa990
	void OnLockStatusChanged_BPNE();// 0x18f8420
	void OnLockedTargetEnemyStateChanged_BPNE(bool InIsEnemy);// 0x18ed700
	void OnDistanceDisplaytextCanAttackTarget_BPNE(bool IsAttackable);// 0x18ed700
	bool IsIn(PlayerController* InController, PlayerBase* InTargetActor, Vector2D InFirstPoint, Vector2D InSecondPoint);// 0x18f75b0
	void DisplayDebugMessage_BPNE(out const FText DebugMessage);// 0x18f6950
	bool CanCrosshairAutoLock();// 0x18f6780

--------------------------------
Class: MainBattleUIComponent_CrosshairMainComponent.UserWidget.Widget.Visual.Object
	float AimAnimationPlaySpeed;//[Offset: 0x260, Size: 1]
	float AimAnimationPlaySpeed_Reverse;//[Offset: 0x264, Size: 1]
	float AimAnimationHoldTime;//[Offset: 0x268, Size: 1]
	float HitAnimationPlaySpeed;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Hit;//[Offset: 0x288, Size: 1]
	WidgetAnimation* Aimed;//[Offset: 0x290, Size: 1]
	WidgetAnimation* Base_Range;//[Offset: 0x298, Size: 1]
	WidgetAnimation* Base_Melee;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* Aimed_Enemy_Target;//[Offset: 0x2a8, Size: 1]
	void SendC2BMode_BPNE(int InMode, bool InBoolean, float InFloat, Vector InVector);// 0x18f9b70
	void ResetAimAnimation();// 0x1d4eb70
	void OnShootTarget_BPNE();// 0x18ebe90
	void OnHitTarget_BPNE(bool InBIsCritical);// 0x18f86b0
	void OnCreateCrosshair_BPNE();// 0x18f8420
	void OnAimSomething_BPNE(bool InIsAiming, bool InIsEnemy);// 0x18f7e80
	void OnActivated_BPNE(bool InIsActivated);// 0x18f7d60

--------------------------------
Class: OPTrainingCheatMenuKeyGuide.UserWidget.Widget.Visual.Object
	void SetTextBP();// 0x1d4eb70

--------------------------------
Class: OPTrainingCheatMenuToast.UserWidget.Widget.Visual.Object
	OPRichTextBlock* Bind_Description;//[Offset: 0x260, Size: 1]
	WidgetAnimation* OpenAnimation;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	enum TextTransformPolicy2;//[Offset: 0x678, Size: 1]
	void SetWrapTextAt(float InPixelLength);// 0x19bc9e0

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 1]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x2f9b300
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x2f9b270
	void SetText(out const FText InText);// 0x2f9b1a0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x2f9a870
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x2f9a330
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x2f9a220
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x2f9a1a0
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x2f9a110
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x2f99ff0
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x2f99f00
	void SetAutoWrapText(bool InAutoTextWrap);// 0x2f99df0
	FText GetText();// 0x2f991a0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x2f98f20
	void ClearAllDefaultStyleOverrides();// 0x2f98b40

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: OPTrainingCheatMenu.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	enum HeroIconType;//[Offset: 0x298, Size: 1]
	OPTrainingCheatMenuCategorySlotMenu* Bind_Training_Slot_Menu;//[Offset: 0x2a0, Size: 1]
	ListView* Bind_ListView_Cheat;//[Offset: 0x2a8, Size: 1]
	OPTextButtonBase* Bind_TextButton_CheatRefresh;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* OpenAnimation;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* CloseAnimation;//[Offset: 0x2c0, Size: 1]
	class UserWidget* HeroIconSlotClass;//[Offset: 0x2c8, Size: 1]
	OPTextBlock* Bind_Select_Hero_Name;//[Offset: 0x2e0, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x2e8, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x2f0, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x2f8, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x300, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x308, Size: 1]
	OPRoleSelectWidget* Bind_RoleIcon;//[Offset: 0x310, Size: 1]
	WrapBox* Bind_Hero_List;//[Offset: 0x318, Size: 1]
	OPTextButtonBase* Bind_TextButton_ChangeHero;//[Offset: 0x320, Size: 1]
	OPTextButtonBase* Bind_TextButton_ChangeHero_Negative;//[Offset: 0x328, Size: 1]
	FName DefaultHeroSkinIndex;//[Offset: 0x334, Size: 1]
	FName SelectHeroSkinIndex;//[Offset: 0x33c, Size: 1]
	FName[] PrimeBuffKeyword;//[Offset: 0x348, Size: 1]
	FName[] PrimeGuardianBuffKeyword;//[Offset: 0x358, Size: 1]
	FName[] PrimeGuardianBuffKeyName;//[Offset: 0x368, Size: 1]
	bool bPlayRefreshAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	void SetTextBP();// 0x1d4eb70
	void SetHeroRoleList();// 0x19e2590
	void SetHeroList();// 0x19e2570
	void SetCheatMenu(enum NewCatogory, bool ForceRefresh, bool PlayRefreshAnimation);// 0x19e2450
	void RefreshDeadSignal(enum npcType, enum spiritType);// 0x19e22b0
	void OnSelectedHero(FName InSelectedheroID);// 0x19e2060
	void OnClickRightButton();// 0x19e1ee0
	void OnClickLeftButton();// 0x19e1ec0
	static OPTrainingCheatMenu* GetTrainingCheatUI(Object* InWorldContextObject);// 0x19e0d30
	bool GetPlayRefreshAnimation();// 0x19e0d10
	bool GetIsInfinityTowerHealth();// 0x19e0c50
	bool GetIsInfinityHeroMP();// 0x19e0c20
	bool GetIsInfinityHeroHealth();// 0x19e0bf0
	void CloseCheatMenu();// 0x19e0440
	void CheatDeActive(enum CheatType, TrainingCheatTableRow CheatData, bool ShowToast, bool DeleteUsingData);// 0x19e0270
	void CheatActive(enum CheatType, TrainingCheatTableRow CheatData, bool ShowToast);// 0x19e00f0
	void ChangeHero();// 0x19e00d0
	void AllCheatDeActive();// 0x19e00b0

--------------------------------
Class: OPTrainingCheatMenuCategorySlotMenu.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_Text_Value;//[Offset: 0x260, Size: 1]
	Button* Bind_Button_Left;//[Offset: 0x268, Size: 1]
	Button* Bind_Button_Right;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OPTextBlock.TextBlock.TextLayoutWidget.Widget.Visual.Object
	enum TextTransformPolicy2;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: OPRoleSelectWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	<enum,TitleDescTextGroup> RoleDescription;//[Offset: 0x2c8, Size: 1]
	enum RoleType;//[Offset: 0x318, Size: 1]

--------------------------------
Class: OPSelectableButton.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_CP_Normal;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_CP_Hover;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_CP_Selected;//[Offset: 0x270, Size: 1]
	CanvasPanel* Bind_CP_Selected_Hover;//[Offset: 0x278, Size: 1]
	CanvasPanel* Bind_CP_Disable;//[Offset: 0x280, Size: 1]
	Image* Bind_Imgae_NormalIcon;//[Offset: 0x288, Size: 1]
	Image* Bind_Imgae_HoverIcon;//[Offset: 0x290, Size: 1]
	Image* Bind_Imgae_SelectedIcon;//[Offset: 0x298, Size: 1]
	enum SelectableState;//[Offset: 0x2a0, Size: 1]
	Texture2D* ButtonIcon;//[Offset: 0x2a8, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x2b0, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x2b8, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	void OnUnSelectButton_BP();// 0x1d4eb70
	void OnSelectButton_BP();// 0x1d4eb70
	void OnChangeSelectableState_BP(enum State, bool Selected);// 0x1d4eb70

--------------------------------
Class: TitleDescTextGroup
	FText Title;//[Offset: 0x0, Size: 1]
	FText Desc;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x120, Size: 1]
	float WrapWidth;//[Offset: 0x128, Size: 1]
	float WrapSize;//[Offset: 0x12c, Size: 1]
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	byte Orientation;//[Offset: 0x132, Size: 1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x2fb4280
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x2fb2cc0

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2fb46c0
	void SetPadding(Margin InPadding);// 0x2fb44b0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2fb4200
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x2fb3f70
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x2fb3ee0

--------------------------------
Class: TrainingCheatTableRow.TableRowBase
	enum CheatCategory;//[Offset: 0x8, Size: 1]
	enum CheatType;//[Offset: 0x9, Size: 1]
	int CheatValue;//[Offset: 0xc, Size: 1]
	enum UseType;//[Offset: 0x10, Size: 1]
	bool DefaultCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool CheatEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	FString CheatOptionName;//[Offset: 0x18, Size: 1]
	FString CheatOptionActivateDesc;//[Offset: 0x28, Size: 1]
	FString CheatOptionDeActivateDesc;//[Offset: 0x38, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: OPBattleShopWidget.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButton_Common_Tab* BPBind_Button_RecommendItems;//[Offset: 0x288, Size: 1]
	OPButton_Common_Tab* BPBind_Button_AllItems;//[Offset: 0x290, Size: 1]
	WidgetSwitcher* Bind_WS_TabMenu;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_ErrorMessage;//[Offset: 0x2a0, Size: 1]
	OPShopContentWidget_RecommendItem* Bind_ShopWidget_RecommendItem;//[Offset: 0x2a8, Size: 1]
	OPShopContentWidget_AllItem* Bind_ShopWidget_AllItem;//[Offset: 0x2b0, Size: 1]
	OPShopInventoryWidget* Bind_ShopInventory;//[Offset: 0x2b8, Size: 1]
	OPShopItemDetailWidget* Bind_ShopItemDetail;//[Offset: 0x2c0, Size: 1]
	WidgetAnimation* Bind_Open_Anim;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* Bind_Close_Anim;//[Offset: 0x2d0, Size: 1]
	WidgetAnimation* Bind_ErrorMessageAnim;//[Offset: 0x2d8, Size: 1]
	OPBattleShopItemSlotComponent*[] ShopItemSlots;//[Offset: 0x2e0, Size: 1]
	ShopItemBase* SelectedItem;//[Offset: 0x2f0, Size: 1]
	OPItemSlotBaseWidget* SelectedSlot;//[Offset: 0x2f8, Size: 1]
	bool EnableSellBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	FText ERROR_MESSAGE_CAN_NOT_BUY;//[Offset: 0x308, Size: 1]
	FText ERROR_MESSAGE_NOT_ENOUGH_GOLD;//[Offset: 0x320, Size: 1]
	FText ERROR_MESSAGE_NO_EMPTY_SLOT;//[Offset: 0x338, Size: 1]
	FText ERROR_MESSAGE_MAX_ITEM_AMOUNT;//[Offset: 0x350, Size: 1]
	FText ERROR_MESSAGE_EXEPTION_ERROR;//[Offset: 0x368, Size: 1]
	FText ERROR_MESSAGE_ALREADY_HAS_GROUP_ITEM;//[Offset: 0x380, Size: 1]
	void UpdateShopItems_BP();// 0x10d0450
	void UpdateShopItems();// 0x193bef0
	void UpdateInventory();// 0x193bed0
	void Update();// 0x193beb0
	void ShowErrorMessage(FText ErrorMessage);// 0x193bdd0
	void ShowBattleShop();// 0x193bdb0
	void RefreshShopState(bool IsInFountain);// 0x193bb70
	void OnSlotRightClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x193b7e0
	void OnSlotDoubleClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x193b710
	void OnSlotClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x193b570
	void OnSellBuySelectedItem();// 0x193b510
	void OnReturnItem();// 0x193b4f0
	void OnPlayTutorialAnimation(int Index);// 0x1d4eb70
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x193b220
	void OnGoldChanged(float NewGold);// 0x193b1a0
	void OnChangeTabRecommendItem();// 0x193b020
	void OnChangeTabAllItem();// 0x193b000
	void OnBuyItemByDrag(ShopItemBase* InItem, enum InSlotIndex, enum InSlotType);// 0x193aef0
	void OnAddItemUpdateUI_BP(enum SlotIndex);// 0x1d4eb70
	void HideBattleShop(bool InShowMouseCursor);// 0x193ae60

--------------------------------
Class: OPItemSlotBaseWidget.UserWidget.Widget.Visual.Object
	ShopItemBase* Item;//[Offset: 0x260, Size: 1]
	bool bDragDropEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	int DragDropDimension;//[Offset: 0x26c, Size: 1]
	enum SlotIndex;//[Offset: 0x270, Size: 1]
	float ItemPrice;//[Offset: 0x274, Size: 1]
	enum SlotType;//[Offset: 0x278, Size: 1]
	class OPBattleShopInventorySlotDragAndDropIconComponent* DragAndDropIconComponentClass;//[Offset: 0x280, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	void HandleRightClick();// 0x18f7470
	void HandleDoubleClick();// 0x18ebe90
	void HandleClick();// 0x10d0450

--------------------------------
Class: OPBattleShopInventorySlotDragAndDropIconComponent.UserWidget.Widget.Visual.Object
	OPShopItemIconComponent* Bind_ItemIcon;//[Offset: 0x260, Size: 1]

--------------------------------
Class: OPButton_Common_Tab.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Text_Clicked;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_TXT_Text_Selected;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Hover;//[Offset: 0x288, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Clicked;//[Offset: 0x290, Size: 1]
	CanvasPanel* Bind_CanvasPanel_Selected;//[Offset: 0x298, Size: 1]

--------------------------------
Class: OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	SoundBase* ClickDownSound;//[Offset: 0x260, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x268, Size: 1]
	bool bReverseHoverAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]

--------------------------------
Class: OPShopContentWidget_RecommendItem.UserWidget.Widget.Visual.Object
	OPShopItemGridWidget* Bind_ItemGrid_Starter;//[Offset: 0x260, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Core;//[Offset: 0x268, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Situational;//[Offset: 0x270, Size: 1]

--------------------------------
Class: OPShopItemGridWidget.UserWidget.Widget.Visual.Object
	OPShopFoldingButtonWidget* Bind_FoldingButton;//[Offset: 0x260, Size: 1]
	WrapBox* Bind_ItemGridBox;//[Offset: 0x268, Size: 1]
	class OPBattleShopItemSlotComponent* ChildSlotClass;//[Offset: 0x270, Size: 1]
	FText TierName;//[Offset: 0x278, Size: 1]
	Vector2D SlotSize;//[Offset: 0x290, Size: 1]
	Vector2D SlotPadding;//[Offset: 0x298, Size: 1]
	void OnFoldingButtonClicked(bool IsFolding);// 0x193b110
	Widget*[] AddShopItems(ShopItemBase*[] Items);// 0x193ad00
	OPBattleShopItemSlotComponent* AddShopItem(ShopItemBase* ShopItem);// 0x193ac60

--------------------------------
Class: OPBattleShopItemSlotComponent.OPItemSlotBaseWidget.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x298, Size: 1]
	OPShopItemIconComponent* Bind_Widget_ItemIcon;//[Offset: 0x2a0, Size: 1]
	Image* Bind_SlotTint;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_ItemPrice;//[Offset: 0x2b0, Size: 1]
	float SlotIconOpacity_Normal;//[Offset: 0x2b8, Size: 1]
	float SlotIconOpacity_NotEnoughGold;//[Offset: 0x2bc, Size: 1]
	float SlotIconOpacity_Filtered;//[Offset: 0x2c0, Size: 1]
	float SlotIconOpacity_Filtered_NotEnoughGold;//[Offset: 0x2c4, Size: 1]
	Vector2D SlotSize;//[Offset: 0x2c8, Size: 1]
	LinearColor SlotTintColor_Normal;//[Offset: 0x2d0, Size: 1]
	LinearColor SlotTintColor_NotEnoughGold;//[Offset: 0x2e0, Size: 1]
	LinearColor SlotTintColor_Filtered;//[Offset: 0x2f0, Size: 1]
	LinearColor SlotTintColor_Filtered_NotEnoughGold;//[Offset: 0x300, Size: 1]
	SlateColor SlotTextColor_Normal;//[Offset: 0x310, Size: 1]
	SlateColor SlotTextColor_NotEnoughGold;//[Offset: 0x338, Size: 1]
	SlateColor SlotTextColor_Filtered;//[Offset: 0x360, Size: 1]
	SlateColor SlotTextColor_Filtered_NotEnoughGold;//[Offset: 0x388, Size: 1]
	SlateColor SlotTextColor_MaxItemAmount;//[Offset: 0x3b0, Size: 1]
	void UpdateByDelegate(float fNewGold);// 0x1935fe0
	void SetSlotSize(Vector2D NewSlotsize);// 0x1935f40
	void SetItemPrice(float NewPrice);// 0x1935ec0
	void SetItem(ShopItemBase* ShopItem);// 0x1935e30
	void RemoveItem();// 0x1935940
	void OnRecalcSlotItemPrice();// 0x1935ce0
	void OnLocalControllingNewHero(OP_PlayerState* TargetPlayer, OP_Character* HeroCharacter);// 0x1935c10
	void Init();// 0x1935940
	void HasItem_BP(bool bHasItem);// 0x1d4eb70

--------------------------------
Class: OPShopFoldingButtonWidget.UserWidget.Widget.Visual.Object
	Button* Bind_Button;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text;//[Offset: 0x268, Size: 1]
	RichTextBlock* Bind_RichText;//[Offset: 0x270, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x278, Size: 1]
	void SetButtonText(FText InText);// 0x193bc00
	void OnClickFoldingButton();// 0x193b040

--------------------------------
Class: OPShopContentWidget_AllItem.UserWidget.Widget.Visual.Object
	OPBattleShopWidget* ShopWidget;//[Offset: 0x260, Size: 1]
	<int,StatusList> SelectedStats;//[Offset: 0x268, Size: 1]
	bool Filter_ActiveItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool Filter_ConsumeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	enum SelectedRoleType;//[Offset: 0x2ba, Size: 1]
	OPEditableText* Bind_EditText_ItemName;//[Offset: 0x2c0, Size: 1]
	OPBattleShopStatFilterWidget* Bind_StatusCategory;//[Offset: 0x2c8, Size: 1]
	OPTextButtonBase* Bind_CheckBox_ActiveItem;//[Offset: 0x2d0, Size: 1]
	HorizontalBox* Bind_RoleCategory;//[Offset: 0x2d8, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Starter;//[Offset: 0x2e0, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Normal;//[Offset: 0x2e8, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Magic;//[Offset: 0x2f0, Size: 1]
	OPShopItemGridWidget* Bind_ItemGrid_Rare;//[Offset: 0x2f8, Size: 1]
	OPButtonBase* Bind_Button_Sort;//[Offset: 0x300, Size: 1]
	VerticalBox* Bind_ItemGridBox;//[Offset: 0x308, Size: 1]
	OPBattleShopRoleToggleWidget*[] RoleToggleWidgets;//[Offset: 0x310, Size: 1]
	void UpdateShopItems();// 0x193bf10
	void OnToggleClear();// 0x193bac0
	void OnToggleChanged(bool IsSelected, int InToggleIndex, enum InToggleType, byte[] InStatusTypes, bool InBool);// 0x193b8b0
	void OnShow();// 0x193b550
	void OnItemNameCommited(out const FText Text, byte CommitMethod);// 0x193b2b0
	void OnClickedSort();// 0x193b0f0
	void OnClickedFilterActiveItem(bool bShow);// 0x193b060
	void ClearItems();// 0x193ae40
	void AddItemSlot(OPBattleShopItemSlotComponent* NewItemSlot);// 0x193abd0

--------------------------------
Class: StatusList

--------------------------------
Class: OPEditableText.UserWidget.Widget.Visual.Object
	EditableText* Bind_EditText;//[Offset: 0x260, Size: 1]
	Button* Bind_CancelButton;//[Offset: 0x268, Size: 1]
	FText HintText;//[Offset: 0x270, Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x1967e00
	void SetHintText(FText InText);// 0x1967d20
	void HandleTextCommitted(out const FText Text, byte CommitMethod);// 0x1967100
	void HandleTextChanged(out const FText Text);// 0x1967030
	void HandleEditCancel();// 0x1967010
	FText GetText();// 0x1966f70

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 1]
	delegate TextDelegate;//[Offset: 0x120, Size: 1]
	FText HintText;//[Offset: 0x130, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x148, Size: 1]
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 1]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 1]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 1]
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 1]
	SlateFontInfo Font;//[Offset: 0x398, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	byte KeyboardType;//[Offset: 0x426, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 1]
	byte Justification;//[Offset: 0x42a, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x2f8df70
	void SetJustification(byte InJustification);// 0x2f8db70
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x2f8da50
	void SetIsPassword(bool InbIsPassword);// 0x2f8d930
	void SetHintText(FText InHintText);// 0x2f8d650
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1d4eb70
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1d4eb70
	FText GetText();// 0x2f8cfb0

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 1]
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 1]
	SlateBrush CaretImage;//[Offset: 0x198, Size: 1]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: OPBattleShopStatFilterWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox;//[Offset: 0x260, Size: 1]
	OPBattleShopStatusToggleWidget*[] StatusWidgets;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPBattleShopStatusToggleWidget.OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	enum[] StatusTypes;//[Offset: 0x388, Size: 1]
	bool bIsConsumeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]

--------------------------------
Class: OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	Image* Bind_Icon;//[Offset: 0x280, Size: 1]
	class OPTextTooltipComponent* TooltipWidgetClass;//[Offset: 0x288, Size: 1]
	FText ToggleToolTipText;//[Offset: 0x290, Size: 1]
	SlateBrush IconBrush;//[Offset: 0x2a8, Size: 1]
	bool IsToggleClearButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	LinearColor SelectedColor;//[Offset: 0x334, Size: 1]
	LinearColor UnSelectedColor;//[Offset: 0x344, Size: 1]
	WidgetAnimation* Bind_HoverAnim;//[Offset: 0x358, Size: 1]
	int ToggleIndex;//[Offset: 0x380, Size: 1]
	void OnShowToolTip_BP();// 0x1d4eb70
	void OnHideToolTip_BP();// 0x1d4eb70

--------------------------------
Class: OPTextTooltipComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void SetText(out const FText InToolTipText);// 0x19e25b0

--------------------------------
Class: OPBattleShopRoleToggleWidget.OPBattleShopToggleBaseWidget.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	enum RoleType;//[Offset: 0x388, Size: 1]

--------------------------------
Class: OPShopInventoryWidget.UserWidget.Widget.Visual.Object
	OPBattleShopWidget* ShopWidget;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_CurrentGold;//[Offset: 0x268, Size: 1]
	OPTextButtonBase* Bind_Button_Return;//[Offset: 0x270, Size: 1]
	OPTextButtonBase* Bind_Button_SellBuy;//[Offset: 0x278, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x280, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x288, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x290, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x298, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2a0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ShopInventorySlot;//[Offset: 0x2a8, Size: 1]
	OPBattleShopInventorySlotComponent*[] ShopInventoryIcons;//[Offset: 0x2b0, Size: 1]
	void RefreshInventory(bool IsInFountain);// 0x193bae0
	void OnSlotClicked(OPItemSlotBaseWidget* InSelectedSlot, ShopItemBase* InSelectedItem);// 0x193b640
	void OnShopItemHistoryCleared();// 0x193b530
	void OnItemSwitchRequest(enum InSlotType, enum InReceivedSlot, enum InSentSlot);// 0x193b3e0

--------------------------------
Class: OPBattleShopInventorySlotComponent.OPItemSlotBaseWidget.UserWidget.Widget.Visual.Object
	SizeBox* Bind_SizeBox;//[Offset: 0x298, Size: 1]
	Widget* Bind_View_CoolDown;//[Offset: 0x2a0, Size: 1]
	Image* Bind_Image_CoolDown;//[Offset: 0x2a8, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x2b0, Size: 1]
	OPShopItemIconComponent* Bind_Widget_ItemIcon;//[Offset: 0x2b8, Size: 1]
	Widget* Bind_Amount_Item;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_Amount;//[Offset: 0x2c8, Size: 1]
	Vector2D SlotSize;//[Offset: 0x2d0, Size: 1]
	void OnAddItemUpdateUI_BP();// 0x1d4eb70

--------------------------------
Class: OPShopItemDetailWidget.UserWidget.Widget.Visual.Object
	Button* Bind_CloseButton;//[Offset: 0x260, Size: 1]
	OPCombinationUpperItemWidget* Bind_CombinationUpperItem;//[Offset: 0x268, Size: 1]
	ItemInfoHeadComponent* Bind_ItemInfo_Head;//[Offset: 0x270, Size: 1]
	ItemInfoMainComponent* Bind_ItemInfo_Main;//[Offset: 0x278, Size: 1]
	WidgetAnimation* Bind_ShowAnimation;//[Offset: 0x280, Size: 1]
	WidgetAnimation* Bind_HideAnimation;//[Offset: 0x288, Size: 1]
	OPCombinationSlotWidget* Bind_CombinationSlot;//[Offset: 0x290, Size: 1]
	ScrollBox* Bind_ScrollBox;//[Offset: 0x298, Size: 1]
	float RenderOpacityForAnim;//[Offset: 0x2a8, Size: 1]
	void UpdateDetailInfo(ShopItemBase* InItem);// 0x19bd1f0
	void UpdateCombinationTree(ShopItemBase* InItem, bool InIsDoClick);// 0x19bd120
	void UpdateAll(ShopItemBase* InItem, bool InIsDoClick);// 0x19bd050
	void ShowItemDetail(ShopItemBase* InItemTableName, bool InIsDoClick);// 0x19bca60
	void OnInventoryUpdated(PSInventoryManager* InUpdatedInventoryManager);// 0x19bc1f0
	void HideItemDetail();// 0x19bbfb0

--------------------------------
Class: OPCombinationUpperItemWidget.UserWidget.Widget.Visual.Object
	ScrollBox* Bind_ScrollBox;//[Offset: 0x260, Size: 1]
	HorizontalBox* Bind_ItemSlotBox;//[Offset: 0x268, Size: 1]
	class OPBattleShopInventorySlotComponent* SlotClass;//[Offset: 0x280, Size: 1]
	Vector2D SlotSize;//[Offset: 0x288, Size: 1]
	void SetItem(ShopItemBase* InItem);// 0x19bc880
	OPBattleShopInventorySlotComponent* AddNewSlot();// 0x19bb870

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 1]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 1]
	byte Orientation;//[Offset: 0x828, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 1]
	enum NavigationDestination;//[Offset: 0x848, Size: 1]
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 1]
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 1]
	MulticastInlineDelegateProperty OnUserScrolled;//[Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x2f9b500
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x2f9aca0
	void SetScrollOffset(float NewScrollOffset);// 0x2f9ac20
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x2f9aba0
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x2f9adc0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x2f9ad20
	void SetOrientation(byte NewOrientation);// 0x2f9a970
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x2f99e80
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x2f99d60
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x2f99cd0
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x2f99c40
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x2f99ae0
	void ScrollToStart();// 0x2f99ac0
	void ScrollToEnd();// 0x2f99aa0
	float GetViewOffsetFraction();// 0x2f99240
	float GetScrollOffsetOfEnd();// 0x2f99170
	float GetScrollOffset();// 0x2f99140
	void EndInertialScrolling();// 0x2f98c60

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 1]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 1]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 1]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 1]

--------------------------------
Class: ItemInfoHeadComponent.UserWidget.Widget.Visual.Object
	OPShopItemIconComponent* Bind_Icon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Name;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Price;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Grade;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_StackInfo;//[Offset: 0x280, Size: 1]
	Image* Bind_GoldIcon;//[Offset: 0x288, Size: 1]

--------------------------------
Class: ItemInfoMainComponent.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_StatContainer;//[Offset: 0x260, Size: 1]
	RichTextBlock* Bind_Description;//[Offset: 0x268, Size: 1]
	Spacer* Bind_Stat_Spacer;//[Offset: 0x270, Size: 1]
	Spacer* Bind_Desc_Spacer;//[Offset: 0x278, Size: 1]
	class ItemInfoStatComponent* ToolTipStatClass;//[Offset: 0x280, Size: 1]
	ItemInfoStatComponent*[] StatList;//[Offset: 0x290, Size: 1]

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 1]
	void SetSize(Vector2D InSize);// 0x2f9f090

--------------------------------
Class: ItemInfoStatComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_StatText;//[Offset: 0x260, Size: 1]
	Image* Bind_StatIcon;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_StatValue;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_BeforeStat;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_AfterStat;//[Offset: 0x280, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x288, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x290, Size: 1]
	LinearColor DefaultColor;//[Offset: 0x298, Size: 1]
	LinearColor IncreaseColor;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: OPCombinationSlotWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_UpperItemSlotBox;//[Offset: 0x260, Size: 1]
	class OPBattleShopItemSlotComponent* UpperSlotClass;//[Offset: 0x268, Size: 1]
	class OPCombinationSlotWidget* ChildSlotClass;//[Offset: 0x270, Size: 1]
	Vector2D SlotSize;//[Offset: 0x278, Size: 1]
	Margin ItemSlotPadding;//[Offset: 0x280, Size: 1]
	OPShopItemDetailWidget* ShopItemDetailWidget;//[Offset: 0x290, Size: 1]
	bool IsTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool IsLast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool IsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool IsRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	int CurrentIndex;//[Offset: 0x29c, Size: 1]
	int MaxIndex;//[Offset: 0x2a0, Size: 1]
	void SetItem(OPShopItemDetailWidget* InDetailWidget, ShopItemBase* InItem, bool InIsTop, bool InIsDoClickTopSlot, int InCurrentIdx, int InMaxIdx);// 0x19bc6a0
	void ClearSlot();// 0x19bbc40

--------------------------------
Class: MainBattleUIElement_TopHealthInfoComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_UnitName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_MinionsSupporting;//[Offset: 0x268, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Health;//[Offset: 0x278, Size: 1]
	OPHealthProgressBar* Bind_PBar_Health_Enemy;//[Offset: 0x280, Size: 1]
	OPUnitDividerWidget* Bind_Divider_Big;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_EnemyTeam;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_AllyTeam;//[Offset: 0x298, Size: 1]
	Widget* Bind_Text_TowerIsAttackingYou;//[Offset: 0x2a0, Size: 1]
	OPShopItemIconComponent* Bind_ShopItemIcon;//[Offset: 0x2a8, Size: 1]
	Actor* CurrentActor;//[Offset: 0x2d0, Size: 1]
	void UpdateTeamNames(FText InAllyName, FText InEnemyName);// 0x18fae30
	void SetJungleItemBP(MainBattleUIElement_InventoryIconComponent* InItemIcon, int InDamage);// 0x1d4eb70
	void OnUpdatedComponentOverlapEnd(Actor* InOther);// 0x18f98a0
	void OnUpdatedComponentOverlapBegin(Actor* InOther);// 0x18f98a0
	void OnTowerEnemyChanged();// 0x18f9610
	void OnHealthChanged(float InNewHealth);// 0x18f84d0
	void OnChangedPatiensProgressVisible(bool InVisibled);// 0x1d4eb70
	void OnChangedPatiensProgressValue(float InValue, float InMax);// 0x1d4eb70
	void OnChangedPatiensProgressPlay(bool InIsPlaying);// 0x1d4eb70
	void OnActorDestroyed(Actor* DestroyedActor);// 0x18f7df0
	float GetPatiensValue();// 0x18f71a0

--------------------------------
Class: OPChatComponent.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	class OPDropDownButtonGroupComponent* DropDownWidgetClass;//[Offset: 0x288, Size: 1]
	OPChat_WhisperTargetList* Bind_WBP_ChatWhisperTargetList;//[Offset: 0x290, Size: 1]
	ListView* Bind_ListView_ChatMsgList;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_TXT_ChatMode;//[Offset: 0x2a0, Size: 1]
	EditableText* Bind_EditText_Entry;//[Offset: 0x2a8, Size: 1]
	WidgetAnimation* Ani_Open;//[Offset: 0x2f0, Size: 1]
	WidgetAnimation* Ani_Background_Open;//[Offset: 0x2f8, Size: 1]
	WidgetAnimation* Ani_Background_Close;//[Offset: 0x300, Size: 1]
	WidgetAnimation* Ani_Close;//[Offset: 0x308, Size: 1]
	bool bScrollToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	int MaximumChatStringLength;//[Offset: 0x314, Size: 1]
	void UpdateChatMessageList(int InUserData);// 0x194a140
	void ShowChatContextMenu(bool InIsShow, int InMessageIndex);// 0x1949a60
	void SetInputFocus(bool InIsInputFocus);// 0x1949600
	void RequestFocus();// 0x19493b0
	void OnUpdateChatChannel(enum InChatChannel);// 0x1949300
	void OnTextCommitted(out const FText InText, byte CommitInfo);// 0x1949000
	void OnTextChanged(out const FText InText);// 0x1948f30
	void OnShowHintText(bool InHasFocus);// 0x1d4eb70
	void OnRemovedChatMessage(int InMessageIndex);// 0x1948a40
	void OnReceivedChatMesssage(enum InChatType, OPChatMessageInfo InChatMessageInfo);// 0x1948610
	void OnPartyClientDataEventFired(enum InType);// 0x1948590
	EventReply OnMouseButtonDown_WhisperReceiver(Geometry geo, out const PointerEvent fevent);// 0x19483b0
	void OnFinished_Animation(enum InFinishedLineMode);// 0x12124d0
	void OnChatSystem_Error(int InErrorCode, FString InErrorString);// 0x1947a70
	void OnChanged_ChatBoxMode(enum InChatBoxMode, int InLines);// 0x1d4eb70
	void OnChangeChatMode(enum InChatMode);// 0x1947920
	void ClearFocus();// 0x19469b0
	void ChangeTopMenu(enum InTopMenu);// 0x19450d0
	void AddSystemMessage(enum InChatChannel, enum InMessageType, FString InMessage);// 0x1944d80

--------------------------------
Class: OPDropDownButtonGroupComponent.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	class OPDropDownMenuButton* ChildTextButtonClass;//[Offset: 0x2b8, Size: 1]
	OPDropDownButtonBase* OwnerDropDownButton;//[Offset: 0x2c0, Size: 1]
	OPVerticalBox* Bind_VBox_List;//[Offset: 0x2c8, Size: 1]
	SizeBox* Bind_SBox_Main;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: OPDropDownMenuButton.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	Widget* Bind_View_BottomLine;//[Offset: 0xa20, Size: 1]

--------------------------------
Class: OPDropDownButtonBase.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	FText[] OptionsArray;//[Offset: 0x9d8, Size: 1]
	int DefaultIndex;//[Offset: 0x9e8, Size: 1]
	enum DropDownMenuDirection;//[Offset: 0x9ec, Size: 1]
	Vector2D DropDownMenuSpacing;//[Offset: 0x9f0, Size: 1]
	int SelectedIndex;//[Offset: 0x9f8, Size: 1]
	class OPDropDownButtonGroupComponent* DropDownButtonGroupClass;//[Offset: 0xa00, Size: 1]
	MulticastInlineDelegateProperty OnOPDropDownButtonClicked;//[Size: 1]
	OPDropDownButtonGroupComponent* MyDropDownButtonGroup;//[Offset: 0xa60, Size: 1]
	void SelectOption(int InIndex);// 0x19401b0
	static void RemoveDropDownMenuAll(Object* InWorldContextObject);// 0x1940110
	FText GetOptionPrintNameByIndex(int InIndex);// 0x193fc90
	static OPDropDownButtonGroupWithTitleComponent* DropDownMenuWithTitle(class OPDropDownButtonGroupComponent InDropDownWidgetClass, FString InTitle, World* InWorldContext, bool InAddToViewport, enum InDropDownMenuDirection);// 0x193f8f0
	static OPDropDownButtonGroupComponent* DropDownMenu(UserWidget* InMother, enum InDropDownMenuDirection);// 0x193f820
	int AddOption(FText InPrintName);// 0x193f6d0

--------------------------------
Class: OPDropDownButtonGroupWithTitleComponent.OPDropDownButtonGroupComponent.OPModalessWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Title;//[Offset: 0x2d8, Size: 1]
	CanvasPanel* Bind_CanvasPanel_ContextMenu;//[Offset: 0x2e0, Size: 1]
	void OnRemoveFromParent(FName InTag);// 0x1940040

--------------------------------
Class: OPChat_WhisperTargetList.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VerticalBox_ChatTargetList;//[Offset: 0x268, Size: 1]
	class UserWidget* ChatTargetSlotClass;//[Offset: 0x270, Size: 1]
	void OnChangedTargetIndex(UserWidget* InWidget, int InTargetIndex, bool InIsRightOrBottomDirection);// 0x1d4eb70

--------------------------------
Class: OPChatMessageInfo
	int MessageIndex;//[Offset: 0x0, Size: 1]
	enum Channel;//[Offset: 0x4, Size: 1]
	enum ChatType;//[Offset: 0x5, Size: 1]
	enum TeamType;//[Offset: 0x6, Size: 1]
	byte TeamNum;//[Offset: 0x7, Size: 1]
	FString SenderID;//[Offset: 0x8, Size: 1]
	FString SenderName;//[Offset: 0x18, Size: 1]
	FString SenderHeroID;//[Offset: 0x28, Size: 1]
	FString ReceiverID;//[Offset: 0x38, Size: 1]
	FString ReceiverName;//[Offset: 0x48, Size: 1]
	FString Message;//[Offset: 0x58, Size: 1]
	DateTime CreatedAtUTC;//[Offset: 0x68, Size: 1]
	int CreatedTimeSinceGameStated;//[Offset: 0x70, Size: 1]
	enum SystemMessageLevel;//[Offset: 0x74, Size: 1]

--------------------------------
Class: OPMinimapWidgetStyleComponent.UserWidget.Widget.Visual.Object
	bool bIsOnScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bIsHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	FText MapName;//[Offset: 0x268, Size: 1]
	enum HeroIconType;//[Offset: 0x280, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x281, Size: 1]
	class OPMinimapElementPlayer* WIDGET_A_Player;//[Offset: 0x288, Size: 1]
	class OPMinimapElementPlayer* WIDGET_E_Player;//[Offset: 0x290, Size: 1]
	class OPMinimapElementPlayer* WIDGET_S_Player;//[Offset: 0x298, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Core;//[Offset: 0x2a0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Core;//[Offset: 0x2a8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Inhivitor;//[Offset: 0x2b0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Inhivitor;//[Offset: 0x2b8, Size: 1]
	class OPMinimapElementBase* WIDGET_AR_Inhivitor;//[Offset: 0x2c0, Size: 1]
	class OPMinimapElementBase* WIDGET_ER_Inhivitor;//[Offset: 0x2c8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Tower;//[Offset: 0x2d0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Tower;//[Offset: 0x2d8, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Minion;//[Offset: 0x2e0, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Minion;//[Offset: 0x2e8, Size: 1]
	class OPMinimapElementBase* WIDGET_M_Warp;//[Offset: 0x2f0, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Blue;//[Offset: 0x2f8, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Red;//[Offset: 0x300, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Green;//[Offset: 0x308, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Purple;//[Offset: 0x310, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Dino;//[Offset: 0x318, Size: 1]
	class OPMinimapElementBase* WIDGET_J_Prime;//[Offset: 0x320, Size: 1]
	class OPMinimapElementBase* WIDGET_J_PrimeBaby;//[Offset: 0x328, Size: 1]
	class OPMinimapElementBase* WIDGET_A_Ward;//[Offset: 0x330, Size: 1]
	class OPMinimapElementBase* WIDGET_E_Ward;//[Offset: 0x338, Size: 1]
	class OPMinimapElementBase* WIDGET_S_Ward;//[Offset: 0x340, Size: 1]
	class OPMinimapElementBase* WIDGET_J_White;//[Offset: 0x348, Size: 1]
	LinearColor IconColor_White_Ally;//[Offset: 0x350, Size: 1]
	LinearColor IconColor_White_Enemy;//[Offset: 0x360, Size: 1]
	Image* Bind_Map;//[Offset: 0x370, Size: 1]
	Image* Bind_Map_Outline;//[Offset: 0x378, Size: 1]
	CanvasPanel* Bind_WidgetParent;//[Offset: 0x380, Size: 1]
	bool bIsReversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_MINIONS;//[Offset: 0x390, Size: 1]
	<FString,OPMinimapElementBase*> WIDGETS_HEROS;//[Offset: 0x3e0, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_JUNGLES;//[Offset: 0x430, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_PLACEABLES;//[Offset: 0x480, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_INHIBITOR_SPAWNERS;//[Offset: 0x4d0, Size: 1]
	OPMinimapElementPlcaceableCollider*[] WIDGETS_PORTALS;//[Offset: 0x520, Size: 1]
	<uint32,OPMinimapElementBase*> WIDGETS_WARDS;//[Offset: 0x530, Size: 1]
	OPMinimapElementBase*[] WidgetPools;//[Offset: 0x580, Size: 1]
	Actor*[] JungleSpawners;//[Offset: 0x598, Size: 1]
	Actor*[] InhibitorSpawners;//[Offset: 0x5a8, Size: 1]
	Actor*[] Portals;//[Offset: 0x5b8, Size: 1]
	OP_PlayerController* CachedPlayerController_Self;//[Offset: 0x5d0, Size: 1]
	OPRoundHandlerComponent* CachedRoundHandler;//[Offset: 0x5d8, Size: 1]
	Vector2D MinimapOffset;//[Offset: 0x5e0, Size: 1]
	Vector2D MinimapOffset_Invert;//[Offset: 0x5e8, Size: 1]
	float IconSize_Base;//[Offset: 0x5f0, Size: 1]
	float IconSize_Tower;//[Offset: 0x5f4, Size: 1]
	float IconSize_Hero;//[Offset: 0x5f8, Size: 1]
	float IconSize_Minion;//[Offset: 0x5fc, Size: 1]
	float IconSize_Jungle;//[Offset: 0x600, Size: 1]
	float IconSize_Ping;//[Offset: 0x604, Size: 1]
	float IconSize_Base_Big;//[Offset: 0x608, Size: 1]
	float IconSize_Tower_Big;//[Offset: 0x60c, Size: 1]
	float IconSize_Hero_Big;//[Offset: 0x610, Size: 1]
	float IconSize_Minion_Big;//[Offset: 0x614, Size: 1]
	float IconSize_Jungle_Big;//[Offset: 0x618, Size: 1]
	float IconSize_Ping_Big;//[Offset: 0x61c, Size: 1]
	float MinimapWidgetSize;//[Offset: 0x620, Size: 1]
	float COG_Size;//[Offset: 0x624, Size: 1]
	float AOP_Size;//[Offset: 0x628, Size: 1]
	float MNL_Size;//[Offset: 0x62c, Size: 1]
	float Tuto01_Size;//[Offset: 0x630, Size: 1]
	float Tuto02_Size;//[Offset: 0x634, Size: 1]
	Vector2D MinimapOffsetToTuto02;//[Offset: 0x638, Size: 1]
	Vector2D MinimapOffset_InvertToTuto02;//[Offset: 0x640, Size: 1]
	SlateBrush IconBrush_Minion_Ally;//[Offset: 0x650, Size: 1]
	SlateBrush IconBrush_Minion_Enemy;//[Offset: 0x6d8, Size: 1]
	LinearColor IconColor_Minion_Ally;//[Offset: 0x760, Size: 1]
	LinearColor IconColor_Minion_Ally_Hit;//[Offset: 0x770, Size: 1]
	LinearColor IconColor_Minion_Enemy;//[Offset: 0x780, Size: 1]
	LinearColor IconColor_Minion_Enemy_Hit;//[Offset: 0x790, Size: 1]
	Vector2D BrushSize_Minion;//[Offset: 0x7a0, Size: 1]
	Vector2D BrushSize_Minion_Big;//[Offset: 0x7a8, Size: 1]
	Vector2D MinimapOffset_PaintMulti;//[Offset: 0x7b0, Size: 1]
	Vector2D MinimapOffset_PaintAdd;//[Offset: 0x7b8, Size: 1]
	Vector2D MinimapOffset_PaintAdd_Invert;//[Offset: 0x7c0, Size: 1]
	float IntervalTime;//[Offset: 0x7e4, Size: 1]
	void OnLoadedOPLevel();// 0x1d4eb70
	void OnLastHitAttackerChanged(enum InAttackerType, UnitBase* InVictimUB);// 0x19a4f90
	void OnAppearEnemy(byte InMainType, Actor* InActor);// 0x19a4e00
	static OPMinimapWidgetStyleComponent* GetInstance(Object* InWorldContextObject, bool FromHUDOrScoreboard);// 0x19a4ca0

--------------------------------
Class: OPMinimapElementPlayer.OPMinimapElementBase.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Sight;//[Offset: 0x2c0, Size: 1]
	Image* Bind_Image_Hero;//[Offset: 0x2c8, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x2d0, Size: 1]
	class UserWidget* OrbPing_BP;//[Offset: 0x2d8, Size: 1]
	void OnUnHovered();// 0x19a5110
	void OnShowOrb(bool InIsShow);// 0x1d4eb70
	void OnHovered();// 0x19a4f70

--------------------------------
Class: OPMinimapElementBase.UserWidget.Widget.Visual.Object
	float HPClampMin;//[Offset: 0x270, Size: 1]
	float HPClampMax;//[Offset: 0x274, Size: 1]
	Actor* CachedInhibitor;//[Offset: 0x280, Size: 1]
	OPMinimapWidgetStyleComponent* WidgetParent;//[Offset: 0x288, Size: 1]
	Actor* CurrentActor;//[Offset: 0x290, Size: 1]
	CanvasPanelSlot* WidgetSlot;//[Offset: 0x298, Size: 1]
	OPMinimapElementBase* DestroyedWidget;//[Offset: 0x2a0, Size: 1]
	void UpdateRespawn(float InPer);// 0x1d4eb70
	void TryHide();// 0x19a5370
	void SetRespawn(bool InIsRespawning);// 0x1d4eb70
	void SetHP(float InHPPer);// 0x1d4eb70
	void OnStartAlert(float InTime);// 0x19a4ef0
	void OnHit();// 0x1d4eb70
	void OnHeroHealthChanged(float InHP);// 0x19a4ef0
	void OnFinishedDestroy();// 0x19a4ed0
	void OnFinishedAlert();// 0xd8dcf0
	void OnDOA_BP(bool InIsDead);// 0x1d4eb70
	void OnDestroy();// 0x1d4eb70
	void OnChangeTeamColor(LinearColor InColor, bool InIsAlly);// 0x1d4eb70
	void OnAppearEnemy();// 0x1d4eb70
	void OnAppear();// 0x1d4eb70
	void OnActiveStatus(bool InIsActive);// 0x1d4eb70
	bool IsAlertRemain();// 0x1927b70

--------------------------------
Class: OPMinimapElementPlcaceableCollider.OPMinimapElementBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: OPRoundHandlerComponent.ActorComponent.Object
	OPTimerManager* GameStateTimerManager;//[Offset: 0x110, Size: 1]
	MulticastInlineDelegateProperty RequestEnterSequence;//[Size: 1]
	MulticastInlineDelegateProperty OnGameTimeChanged;//[Size: 1]
	int RoundStartTimerCountdown;//[Offset: 0x178, Size: 1]
	enum RoundStatus;//[Offset: 0x1d0, Size: 1]
	bool IsDraftMode_Test;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	byte DesiredPlayersNum;//[Offset: 0x1d2, Size: 1]
	enum ServerNetMode;//[Offset: 0x1d3, Size: 1]
	enum GameServerType;//[Offset: 0x1d4, Size: 1]
	PlayerState* GameMasterPlayer;//[Offset: 0x1d8, Size: 1]
	OPBlackScoreInfo[] BlackScore;//[Offset: 0x1e0, Size: 1]
	int[] TeamScores;//[Offset: 0x1f0, Size: 1]
	BanStateInfo[] BanStateInfos;//[Offset: 0x200, Size: 1]
	BanStateInfo PreBanStateInfo;//[Offset: 0x210, Size: 1]
	FName[] BanList;//[Offset: 0x228, Size: 1]
	FName[] ServerBanItemList;//[Offset: 0x238, Size: 1]
	DraftStateInfo DraftStateInfo;//[Offset: 0x248, Size: 1]
	DraftTradeInfo DraftTradeInfo;//[Offset: 0x298, Size: 1]
	OP_PlayerState*[] SortedTeam1;//[Offset: 0x2a8, Size: 1]
	OP_PlayerState*[] SortedTeam2;//[Offset: 0x2b8, Size: 1]
	void SyncPreBanState(BanStateInfo NewBanStateInfo);// 0x19bced0
	void SyncGameModeType(enum NewType);// 0x19bce50
	void SyncDraftTradeInfo(DraftTradeInfo InDraftTradeInfo);// 0x19bcd40
	void SyncDraftState(DraftStateInfo InNewDraftState);// 0x19bcc30
	void SyncBanStateInfos(const BanStateInfo[] InBanStateInfos);// 0x19bcb30
	int SetTeamScore(byte TeamNum, int score);// 0x19bc910
	void Round_End(byte WinTeamNum, Vector LookAtPos);// 0x19bc5b0
	void RequestDisconnectForAllClients(enum InExitResult);// 0x19bc530
	void ProcessRoundEnd(byte WinTeamNum, Vector LookAtPos);// 0x19bc450
	void OnTimeCountDownChanged();// 0x19bc430
	void OnTeamScoreChangedNotify();// 0x19bc410
	void OnRoundStateChanged_Event();// 0x19bc3f0
	void OnRepBlackScore();// 0x19bc3d0
	void OnDraftStateInfoUpdated();// 0x19bc1d0
	void OnDesiredPlayerNumChanged_Event();// 0x19bc1b0
	bool IsItemServerBanned(FName TargetName);// 0x19bc110
	bool IsDraftingAndMyTurn(PlayerController* InLocalPC);// 0x19bc070
	bool IsBanned(out const FName InHeroID);// 0x19bbfd0
	int GetTeamScore(byte TeamNum);// 0x19bbf20
	static OPRoundHandlerComponent* GetRoundHandler(Object* InWorldContextObject);// 0x19bbd60
	int GetHighestScoreExceptTeam(byte TeamNum);// 0x19bbcd0
	Timespan GetGameTimeSinceRoundStarted();// 0x19bbc90
	int GetDraftBanStep();// 0x19bbc60
	void BroadcastSelectPositionPhaseStart(int phase);// 0x19bbbb0
	void BroadcastBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x19bbae0
	void BroadcastBanPickPhaseEnd(const BanStateInfo InBanStateInfo, const FName[] InBanList, const FName InBanHero);// 0x19bb970
	int AddTeamScore(byte TeamNum, int score);// 0x19bb8a0

--------------------------------
Class: BanStateInfo
	byte TeamNum;//[Offset: 0x0, Size: 1]
	byte BanStep;//[Offset: 0x1, Size: 1]
	BanHeroSetInfo[] BanHeros;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BanHeroSetInfo
	FString UserName;//[Offset: 0x0, Size: 1]
	FName HeroID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DraftTradeInfo
	DraftTradeSetInfo[] DraftTradeSetInfos;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftTradeSetInfo
	FString UserName;//[Offset: 0x0, Size: 1]
	byte TeamNum;//[Offset: 0x10, Size: 1]
	FName[] HeroIDs;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DraftStateInfo
	bool IsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	OP_PlayerState*[] Current_Order;//[Offset: 0x8, Size: 1]
	DraftStatePlayerSetInfo[] Order_Set;//[Offset: 0x18, Size: 1]
	byte DraftStep;//[Offset: 0x28, Size: 1]
	bool IsPreparing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	byte StartTeam;//[Offset: 0x2a, Size: 1]
	OP_PlayerState*[] Captured_T1_Order;//[Offset: 0x30, Size: 1]
	OP_PlayerState*[] Captured_T2_Order;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DraftStatePlayerSetInfo
	OP_PlayerState*[] Players;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OPBlackScoreInfo
	byte TeamNum;//[Offset: 0x0, Size: 1]
	FName[] IDs;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: MainBattleUIElement_LevelUpComponent.UserWidget.Widget.Visual.Object
	void ShowAnimation_BPNE();// 0x10d0450

--------------------------------
Class: MainBattleUIElement_TeamPlayerListComponent.UserWidget.Widget.Visual.Object
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x260, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x268, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x278, Size: 1]
	MainBattleUIElement_TopPlayerInfoComponent* Bind_Icon;//[Offset: 0x280, Size: 1]
	bool IsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	void Update();// 0x18faa60
	void OnPlayerJoinedDisconnected(PlayerState* InPlayer);// 0x18f8be0
	void OnPlayerControlingCharacterChanged(OP_PlayerState* InPlayer, OP_Character* NewHero);// 0x18f8c70
	void OnPlayerChangedTeam(PlayerState* InPlayer);// 0x18f8be0
	void OnPlayerChangedHero(OP_PlayerState* InPlayer, class OP_Character Hero, enum SelectionMethod, bool InIsPreSelectedHero);// 0x18f8a80
	void ObserverSelectPlayer(int InIndex);// 0x18f7790

--------------------------------
Class: MainBattleUIElement_TopPlayerInfoComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_RespawnDelay;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_ObserverViewNum;//[Offset: 0x268, Size: 1]
	Widget* Bind_UltimateMarker;//[Offset: 0x270, Size: 1]
	Image* Bind_UltimateMarkerBack;//[Offset: 0x278, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x280, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIconBorder;//[Offset: 0x288, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIconBorder_Me;//[Offset: 0x290, Size: 1]
	Widget* Bind_View_HeroInfo;//[Offset: 0x2a0, Size: 1]
	OPHealthProgressBar* Bind_HealthProgressBar;//[Offset: 0x2a8, Size: 1]
	OPHealthProgressBar* Bind_HealthProgressBar_Me;//[Offset: 0x2b0, Size: 1]
	OPHealthProgressBar* Bind_ManaProgressBar;//[Offset: 0x2b8, Size: 1]
	OP_Character* CurrentCharacter;//[Offset: 0x2c0, Size: 1]
	OP_PlayerState* CurrentPlayer;//[Offset: 0x2c8, Size: 1]
	bool bIsUltimateReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	enum UltimateFriendState;//[Offset: 0x2d1, Size: 1]
	bool LastDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	enum HeroIconType;//[Offset: 0x2d5, Size: 1]
	enum EnemyHeroIconType;//[Offset: 0x2d6, Size: 1]
	void SetPlayer(OP_PlayerState* InPlayer, bool InIsMyTeam, int ObserverIndex);// 0x18fa080
	void RemovePlayer(bool InIsMyTeam);// 0x18f9a10
	void OnUltimateAvailable_BPNE(enum InFriendlyState, bool InIsAvailable);// 0x18f9650
	void OnSkillReadStatusChanged();// 0x18f90d0
	void OnPlayerDeathStatusChanged_BPNE(bool bIsDead);// 0x10d0aa0
	void OnObserverSelectedPlayer_BPNE(bool bIsSelected);// 0x18f8960
	void OnHealthChanged(float InNewHealth);// 0x18f8550
	void OnChangeDisconnected_BP(bool IsDisconnected);// 0x1d4eb70
	void OnChangeDisconnected(OP_PlayerState* InPlayerState, bool InIsDisconnected);// 0x18f7fe0
	void OnChanged_MP(float InNewMP);// 0x18f8210
	void OnChanged_HP(float InNewHP);// 0x18f8190

--------------------------------
Class: MainBattleUIElement_CoreHealthComponent.UserWidget.Widget.Visual.Object
	OPHealthProgressBar* Bind_PBar_Health;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Percent;//[Offset: 0x268, Size: 1]
	bool bShowMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	SoundBase* Sound_LowHealthAlert;//[Offset: 0x278, Size: 1]
	float LowHealthAlertDelay;//[Offset: 0x280, Size: 1]
	float LowHealthPercent;//[Offset: 0x284, Size: 1]
	UnitBase* Binded_Core_Unit;//[Offset: 0x288, Size: 1]
	void OnUnitHealthChanged(float InNewHealth);// 0x18f9730

--------------------------------
Class: OPSurrenderComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HBox_UserSlots;//[Offset: 0x260, Size: 1]
	OPTextButtonBase* Bind_Button_Accept;//[Offset: 0x268, Size: 1]
	OPTextButtonBase* Bind_Button_Deny;//[Offset: 0x270, Size: 1]
	FText SurrenderAcceptText;//[Offset: 0x278, Size: 1]
	FText SurrenderDenyText;//[Offset: 0x290, Size: 1]
	SoundBase* Sound_Popup;//[Offset: 0x2b0, Size: 1]
	SoundBase* Sound_Agree;//[Offset: 0x2b8, Size: 1]
	SoundBase* Sound_Deny;//[Offset: 0x2c0, Size: 1]
	void VoteByShortCut(bool InIsAccept);// 0x19e28b0
	void OnSurrenderSignal_BPNE(enum InStatus, int InTeamNum);// 0x19e20f0
	void OnClickedDeny();// 0x19e2040
	void OnClickedAccept();// 0x19e2020

--------------------------------
Class: OPDeathscreenComponent.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VBox_History;//[Offset: 0x260, Size: 1]
	void UpdateSpectatingPlayerName(FString InPlayerName, bool bIsShow);// 0x1964090

--------------------------------
Class: OPBattleScoreBoardComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x290, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x298, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2a0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2a8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Left;//[Offset: 0x2b0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2b8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2c0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2c8, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2d0, Size: 1]
	OPBattleScoreBoardElementComponent* ScoreBoard_TeamPlayer_Right;//[Offset: 0x2d8, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left1;//[Offset: 0x2e0, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left2;//[Offset: 0x2e8, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left3;//[Offset: 0x2f0, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left4;//[Offset: 0x2f8, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Left5;//[Offset: 0x300, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right1;//[Offset: 0x308, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right2;//[Offset: 0x310, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right3;//[Offset: 0x318, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right4;//[Offset: 0x320, Size: 1]
	OPBattleScoreBoard_SpiritPropertyElement* SpiritPropertyStack_Right5;//[Offset: 0x328, Size: 1]
	TimerHandle TimerFirstTimeEmptyCheck;//[Offset: 0x330, Size: 1]
	OPMinimapWidgetStyleComponent* Bind_MinimapOnTheScoreboard;//[Offset: 0x338, Size: 1]
	TextBlock* Bind_Text_AutoMoveError;//[Offset: 0x340, Size: 1]
	void Update();// 0x1935fc0
	void ShowWarningMessage_BP(out const FText InMessage);// 0x1d4eb70
	void OnVisible();// 0x1935d00
	void OnShowAutoPilotNotice();// 0x1d4eb70
	void OnHideBP();// 0x1d4eb70
	void OnCollaped();// 0x1935ae0
	void OnAppearBP();// 0x1d4eb70

--------------------------------
Class: OPBattleScoreBoardElementComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Level;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Nick;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_CharacterName;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_K;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_D;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_A;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Minion;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Ping;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_Gold;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_RespawnDelay;//[Offset: 0x2a8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2b0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2b8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2c0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2c8, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2d0, Size: 1]
	OPBattleShopInventorySlotComponent* Bind_ItemIcon;//[Offset: 0x2d8, Size: 1]
	Button* Bind_Button_Chat_Enabled;//[Offset: 0x2e0, Size: 1]
	Button* Bind_Button_Chat_Disabled;//[Offset: 0x2e8, Size: 1]
	Button* Bind_Button_Chat_Enabled;//[Offset: 0x2f0, Size: 1]
	Button* Bind_Button_Chat_Disabled;//[Offset: 0x2f8, Size: 1]
	Button* Bind_Button_Report_Enabled;//[Offset: 0x300, Size: 1]
	OPBattleShopInventorySlotComponent*[] Slots;//[Offset: 0x308, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x318, Size: 1]
	bool bIsMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	enum HeroIconType;//[Offset: 0x340, Size: 1]
	void OnItemSwitchRequest(enum InSlotType, enum InReceivedSlot, enum InSentSlot);// 0x1935b00
	void OnDOA(bool InIsDead);// 0x1d4eb70
	void OnClickMute();// 0x1935a30
	void OnClickedButton(Button* InClickedButton);// 0x1935a50
	void OnChangeTeam(int InTeam);// 0x1d4eb70
	void OnChangeDisconnected_BP(bool IsDisconnected);// 0x1d4eb70
	void OnChangeDisconnected(OP_PlayerState* InPlayerState, bool InIsDisconnected);// 0x1935960

--------------------------------
Class: OPBattleScoreBoard_SpiritPropertyElement.UserWidget.Widget.Visual.Object
	OPBattleScoreBoard_SpiritPropertyTooltip* Bind_Tooltip;//[Offset: 0x260, Size: 1]
	void SetProperty(enum InPropertyType, bool InAlly);// 0x1d4eb70

--------------------------------
Class: OPBattleScoreBoard_SpiritPropertyTooltip.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Buff_Text_001;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Buff_Text_Ally;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Buff_Text_Enemy;//[Offset: 0x270, Size: 1]

--------------------------------
Class: MainBattleUIElement_AbnormalListWidget.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	OPScrollBox* Bind_Scroll_Main;//[Offset: 0x268, Size: 1]
	ListView* Bind_List_Main;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_AbnormalElementWidgetBase*[] AbnormalIcons;//[Offset: 0x278, Size: 1]
	OP_Character* MyCharacter;//[Offset: 0x288, Size: 1]
	OPAbnormalStateComponent* MyAbnormalComponent;//[Offset: 0x290, Size: 1]
	void OnAbnormalStateChanged(bool InAdded, FName InKeywordType, FName InBaseKeywordName, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x18ff180

--------------------------------
Class: MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: OPScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	UserWidget*[] PooledWidgets;//[Offset: 0x880, Size: 1]
	class UserWidget* ChildClass;//[Offset: 0x890, Size: 1]
	Margin DefaultPadding;//[Offset: 0x898, Size: 1]
	Margin Padding;//[Offset: 0x8a8, Size: 1]
	enum PaddingApplyRule;//[Offset: 0x8b8, Size: 1]
	bool EnableWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x8ba, Size: 1]
	byte VerticalAlignment;//[Offset: 0x8bb, Size: 1]
	void SetScrolling_Disable(bool InDisable);// 0x19a52e0
	UserWidget* CreateWidget();// 0x19a4c40
	ScrollBoxSlot* AddChildWidget(UserWidget* InWidget);// 0x19a4850

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2f9b400
	void SetPadding(Margin InPadding);// 0x2f9aa80
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2f9a460

--------------------------------
Class: MainBattleUIElement_AbnormalElementWidgetBase.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	MainBattleUIElement_AbnormalElementWidget* Bind_Widget_Good;//[Offset: 0x268, Size: 1]
	MainBattleUIElement_AbnormalElementWidget* Bind_Widget_Bad;//[Offset: 0x270, Size: 1]
	MainBattleUIElement_AbnormalElementWidget* ActiveWidget;//[Offset: 0x278, Size: 1]
	OPBattleUIAbnormalInfo* InfoObject;//[Offset: 0x280, Size: 1]
	void SetAbnormalStateInfo_BP(OPBattleUIAbnormalInfo* InInfoObject);// 0x18ffa90

--------------------------------
Class: MainBattleUIElement_AbnormalElementWidget.MainBattleUIElement_AbnormalWidgetBase.UserWidget.Widget.Visual.Object
	Image* Bind_Image_BuffImage;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_ProgressBar;//[Offset: 0x280, Size: 1]
	TextBlock* Bind_Text_BuffName;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Stacks;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_Duration;//[Offset: 0x298, Size: 1]
	TextBlock* Bind_Text_Description;//[Offset: 0x2a0, Size: 1]
	LinearColor Color_Good;//[Offset: 0x2a8, Size: 1]
	LinearColor Color_Bad;//[Offset: 0x2b8, Size: 1]
	MainBattleUIElement_AbnormalElementWidgetBase* Mother;//[Offset: 0x2d0, Size: 1]
	OPAbnormalStateComponent* MyAbnormalComponent;//[Offset: 0x2d8, Size: 1]
	void PlayRemoveAnimation_BP();// 0x18f7470
	void PlayAnimation_BP();// 0x10d0450

--------------------------------
Class: OPBattleUIAbnormalInfo.Object
	OPAbnormalStateComponent* InAbnormalComponent;//[Offset: 0x28, Size: 1]
	FName InKeywordType;//[Offset: 0x30, Size: 1]
	FName InKeyName;//[Offset: 0x38, Size: 1]
	float InDuration;//[Offset: 0x40, Size: 1]
	FName InSkillEffectFrom;//[Offset: 0x44, Size: 1]
	byte KeyNameUniqueIndex;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: OPDamageIndicatorBaseComponent.UserWidget.Widget.Visual.Object
	<FName,class OPDamageIndicatorTypeComponent> IndicatorTypes;//[Offset: 0x260, Size: 1]
	<enum,class OPDamageIndicatorTypeComponent> EventIndicatorTypes;//[Offset: 0x2b0, Size: 1]
	class OPDamageIndicatorTypeComponent* BaseAttackCriticalType;//[Offset: 0x300, Size: 1]
	class OPDamageIndicatorTypeComponent* TakingDamageType;//[Offset: 0x308, Size: 1]
	class OPDamageIndicatorTypeComponent* TextIndicatorType;//[Offset: 0x310, Size: 1]
	class OPDamageIndicatorTypeComponent* EffectKeywordIndicatorBaseType;//[Offset: 0x318, Size: 1]
	class OPDamageIndicatorTypeComponent* HealType;//[Offset: 0x320, Size: 1]
	class OPDamageIndicatorTypeComponent* ManaHealType;//[Offset: 0x328, Size: 1]
	class OPDamageIndicatorTypeComponent* GoldType;//[Offset: 0x330, Size: 1]
	OPDamageIndicatorTypeComponent*[] WidgetPoolForGC;//[Offset: 0x338, Size: 1]
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x348, Size: 1]
	OPDamageIndicatorTypeComponent* CreateCCIndicator(FName InKeywordType, Vector InPosition);// 0x194ce20
	void AddTextIndicator(FText InText, Vector InPosition);// 0x194cb90
	void AddTakingDamageIndicator(int InDamage, Vector InPosition);// 0x194cab0
	void AddHealIndicator(float InAmount, enum InHealType);// 0x194c9e0
	void AddGoldIndicator(Vector InPosition, float InGold, bool InIsNotice);// 0x194c8b0
	void AddEventIndicator(enum InEventType, float InNumberValue, Vector InPosition);// 0x194c790
	void AddDamageIndicator(FName InDamageID, int InDamage, Vector InPosition, byte InDamageIndicatorUniqueID);// 0x194c610
	void AddCriticalDamageIndicator(int InDamage, Vector InPosition, byte InDamageIndicatorUniqueID);// 0x194c4f0

--------------------------------
Class: OPDamageIndicatorTypeComponent.UserWidget.Widget.Visual.Object
	WidgetAnimation* Open;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Main;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_EffectKeywordFont;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_EffectKeywordText;//[Offset: 0x278, Size: 1]
	ImageFontBoxComponent* Bind_ImageFont_Indicator;//[Offset: 0x280, Size: 1]
	ImageFontBoxComponent* Bind_ImageFont_Indicator_Emissive;//[Offset: 0x288, Size: 1]
	OPTextBlock* Bind_OPText_Indicator_Gold;//[Offset: 0x290, Size: 1]
	bool bPreventTextSetFromCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	FText DefaultTextIfPrevent;//[Offset: 0x2a0, Size: 1]

--------------------------------
Class: ImageFontBoxComponent.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HBox_ImageContainer;//[Offset: 0x260, Size: 1]
	SlateBrush[] ImageFontList;//[Offset: 0x268, Size: 1]
	FString ImageFontTexts;//[Offset: 0x278, Size: 1]
	Vector2D ImageFontSizeRatio;//[Offset: 0x288, Size: 1]
	Margin ImageFontPadding;//[Offset: 0x290, Size: 1]
	void ShowImageFont_BP(FString InText, Vector2D InFontSize);// 0x18fa4e0

--------------------------------
Class: OPHeadbarManagerComponent.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x260, Size: 1]
	<enum,class OPHeadbarComponent> HeadbarInfo;//[Offset: 0x268, Size: 1]
	void Reload();// 0x1975470

--------------------------------
Class: MainBattleUIElement_NetworkError.UserWidget.Widget.Visual.Object
	void Start_BPNE();// 0x10d0450

--------------------------------
Class: HUD_NotificationWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Bind_ShowAnim;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Bind_HideAnim;//[Offset: 0x268, Size: 1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void ShowNotification();// 0x10d0450
	void SetText_BP();// 0x1d4eb70
	void HideNotification();// 0x18f7470
	void HideAnimationFinished();// 0x18ebe90

--------------------------------
Class: OPVerticalBoxKillStreak.OPVerticalBox.VerticalBox.PanelWidget.Widget.Visual.Object
	enum KillerIconType;//[Offset: 0x160, Size: 1]
	enum VictimIconType;//[Offset: 0x161, Size: 1]

--------------------------------
Class: OPPingSystemOrder_Widget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Danger;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Lost;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Move;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Hovered_Help;//[Offset: 0x480, Size: 1]
	CanvasPanel* Bind_Hovered_Assemble;//[Offset: 0x488, Size: 1]
	CanvasPanel* Bind_Hovered_Fallback;//[Offset: 0x490, Size: 1]
	CanvasPanel* Bind_Hovered_Guard;//[Offset: 0x498, Size: 1]
	CanvasPanel* Bind_Hovered_Ward;//[Offset: 0x4a0, Size: 1]

--------------------------------
Class: OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	class OPPingSystemElement* Widget_PingHelpClass;//[Offset: 0x260, Size: 1]
	class OPPingSystemElement* Widget_PingDangerClass;//[Offset: 0x268, Size: 1]
	class OPPingSystemElement* Widget_PingLostClass;//[Offset: 0x270, Size: 1]
	class OPPingSystemElement* Widget_PingMoveClass;//[Offset: 0x278, Size: 1]
	class OPPingSystemElement* Widget_PingGoodClass;//[Offset: 0x280, Size: 1]
	class OPPingSystemElement* Widget_PingBadClass;//[Offset: 0x288, Size: 1]
	class OPPingSystemElement* Widget_DunkZoneClass;//[Offset: 0x290, Size: 1]
	class OPPingSystemElement* Widget_ImpossibleClass;//[Offset: 0x298, Size: 1]
	class OPPingSystemElement* Widget_Assemble;//[Offset: 0x2a0, Size: 1]
	class OPPingSystemElement* Widget_Guard;//[Offset: 0x2a8, Size: 1]
	class OPPingSystemElement* Widget_Fallback;//[Offset: 0x2b0, Size: 1]
	class OPPingSystemElement* Widget_Ward;//[Offset: 0x2b8, Size: 1]
	class OPPingSystemElement* Widget_BattleClass;//[Offset: 0x2c0, Size: 1]
	class OPPingSystemElement* Widget_DroppedOrbClass;//[Offset: 0x2c8, Size: 1]
	class OPPingSystemElement* Widget_WarningPrimeClass;//[Offset: 0x2d0, Size: 1]
	class OPPingSystemElement* Widget_WarningBlackClass;//[Offset: 0x2d8, Size: 1]
	SlateBrush PrimeFace;//[Offset: 0x2e0, Size: 1]
	SlateBrush BlackFace;//[Offset: 0x368, Size: 1]
	Image* Bind_Cover_Cancel;//[Offset: 0x3f0, Size: 1]
	Image* Bind_Icon_Cancel;//[Offset: 0x3f8, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x400, Size: 1]
	Image* Bind_BG_Cancel;//[Offset: 0x408, Size: 1]
	TextBlock* Bind_Text_Order;//[Offset: 0x410, Size: 1]
	Vector2D CachedMouseStartPosition;//[Offset: 0x418, Size: 1]
	Vector2D CachedMouseCurrentPosition;//[Offset: 0x420, Size: 1]
	Vector CachedTraceStart;//[Offset: 0x428, Size: 1]
	Vector CachedTraceEnd;//[Offset: 0x434, Size: 1]
	float WorldScale;//[Offset: 0x440, Size: 1]
	float MinimapScale;//[Offset: 0x444, Size: 1]
	CanvasPanel*[] HoverImages;//[Offset: 0x448, Size: 1]
	OPPingSystemComponent* PingSystem;//[Offset: 0x458, Size: 1]
	void OnVisible();// 0x1d4eb70
	void OnCollapsed();// 0x1d4eb70
	void OnChangeOrder(out const enum InOrderType);// 0x1d4eb70
	class OPPingSystemElement GetWidgetClass(out const enum Order);// 0x19accc0

--------------------------------
Class: OPPingSystemElement.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Meter;//[Offset: 0x280, Size: 1]
	CanvasPanel* Bind_Arrow_Parent;//[Offset: 0x288, Size: 1]
	UserWidget* Bind_Mouse_Hover;//[Offset: 0x290, Size: 1]
	SoundBase* AppearSound;//[Offset: 0x298, Size: 1]
	float LifeTime;//[Offset: 0x2a0, Size: 1]
	TimerHandle DestroyTimerHandle;//[Offset: 0x2a8, Size: 1]
	OPPingSystemComponent* CurrentPingSystem;//[Offset: 0x2b0, Size: 1]
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x2d0, Size: 1]
	OP_PlayerController* SelfPlayerController;//[Offset: 0x2d8, Size: 1]
	enum HeroIconType;//[Offset: 0x2f8, Size: 1]
	void SetPingIconType_BP(bool InIsSelf);// 0x1d4eb70
	void OnStartHovered();// 0x18f8420
	void OnEndtHovered();// 0x18f8420
	void OnContinueAnimation3D();// 0x1d4eb70
	void OnClicked();// 0xd8dcf0
	void OnAppear3D();// 0x1d4eb70
	void OnAppear2D();// 0x1d4eb70

--------------------------------
Class: OPPingSystemComponent.ActorComponent.Object
	uint32 TraceDistance;//[Offset: 0xb0, Size: 1]
	enum SelectedOrderType;//[Offset: 0xb5, Size: 1]
	TimerHandle PressTimer;//[Offset: 0xb8, Size: 1]
	OPPingSystemBase_Widget* CurrentMenu_Widget;//[Offset: 0xc0, Size: 1]
	OPPingSystemBase_Widget* OrderMenu_Widget;//[Offset: 0xc8, Size: 1]
	OPPingSystemBase_Widget* AnswerMenu_Widget;//[Offset: 0xd0, Size: 1]
	OPPingSystemBase_Widget* EMotionMenu_Widget;//[Offset: 0xd8, Size: 1]
	bool bIsWorldPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	TimerHandle EmotionCooldownTimerHandle;//[Offset: 0x110, Size: 1]
	OPPingSystemElement* AnswerElement;//[Offset: 0x120, Size: 1]
	OPPingSystemElement*[] Widgets_Scoreboard;//[Offset: 0x128, Size: 1]
	OPPingSystemElement*[] Widgets_Minimap;//[Offset: 0x138, Size: 1]
	OPPingSystemElement*[] Widgets_World;//[Offset: 0x148, Size: 1]
	OPMinimapWidgetStyleComponent* MinimapOnTheScoreboard;//[Offset: 0x158, Size: 1]
	OPMinimapWidgetStyleComponent* MinimapOnTheMainHUD;//[Offset: 0x160, Size: 1]
	void ShowPing_World(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType, out const Vector WorldPosition, FString MessageKey, float InHideTime, bool InUseAssetTime);// 0x19ae180
	void ShowPing_Minimap(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType, Vector2D ScreenPosition, bool InIsScoreboardbool, float InHideTime, bool InUseAssetTime);// 0x19adf20
	void ShowOrderSystem();// 0x19adf00
	void ShowEmotion(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x19addc0
	void SetMousePositionCenter();// 0x19add80
	void RemoveLocalPing(byte OrderType);// 0x19adab0
	void OnShowAlert(Vector InWorldLocation);// 0x19ad820
	bool OnReleasedKey();// 0x19ad770
	void OnReceiveRemovePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder);// 0x19ad640
	void OnReceivePingSystemMessage(uint32 InPlayerID, FString InClientLoginID, byte InOrder, out const Vector2D InPosByMinimap, out const Vector InPosByWorld, byte InPingSystemMsg);// 0x19ad430
	void OnPressedKey_Escape();// 0x19ad410
	void OnPressedKey(bool InIsGoodOrBad, bool InIsWorldPing, bool InIsEmotionKey);// 0x19ad2e0
	void OnPressedIcon(out const enum InActorType, uint32 InPlayerID);// 0x19ad210
	bool IsShowMenuWidget();// 0x19ad000
	void HidePing_World(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x19acea0
	void HidePing_Minimap(uint32 InPlayerID, FString InClientLoginID, out const enum OrderType);// 0x19acd60
	bool GetTraceWorldDown(out Vector InResult, Vector InWorldLocstion);// 0x19acbc0
	bool GetTracePointWorld(out Vector InResult);// 0x19acb20
	Vector2D GetOffsetScreenSpaceOver();// 0x19acae0
	void AddLocalPing(byte InOrderType, out const Vector InPosByWorld);// 0x19ac630

--------------------------------
Class: OPPingSystemAnswer_Widget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Good;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Bad;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Impossible;//[Offset: 0x478, Size: 1]

--------------------------------
Class: OPPingSystemEmotion_Widget.OPPingSystemBase_Widget.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Hovered_Good;//[Offset: 0x468, Size: 1]
	CanvasPanel* Bind_Hovered_Sorry;//[Offset: 0x470, Size: 1]
	CanvasPanel* Bind_Hovered_Hello;//[Offset: 0x478, Size: 1]
	CanvasPanel* Bind_Hovered_Provoke;//[Offset: 0x480, Size: 1]
	CanvasPanel* Bind_Hovered_Love;//[Offset: 0x488, Size: 1]
	CanvasPanel* Bind_Hovered_Angry;//[Offset: 0x490, Size: 1]
	CanvasPanel* Bind_Hovered_Question;//[Offset: 0x498, Size: 1]
	CanvasPanel* Bind_Hovered_Exclamation;//[Offset: 0x4a0, Size: 1]

--------------------------------
Class: OPStatAndSkillInfoComponent.UserWidget.Widget.Visual.Object
	OP_Character* ControllingCharacter;//[Offset: 0x260, Size: 1]
	OPStatViewerWidget* Bind_Widget_StatViewer;//[Offset: 0x268, Size: 1]
	OPSkillInfoWidget* Bind_Widget_SkillInfo;//[Offset: 0x270, Size: 1]
	WidgetAnimation* OpenAnimation;//[Offset: 0x278, Size: 1]
	WidgetAnimation* CloseAnimation;//[Offset: 0x280, Size: 1]
	void OnControlingCharacterEXPChanged(float InNewEXP);// 0x19dba10
	void Deactivate();// 0x19da900
	void CloseAnimationFinished();// 0x10cfdf0
	void Activate();// 0x19da8a0

--------------------------------
Class: OPStatViewerWidget.UserWidget.Widget.Visual.Object
	class OPStatSlotWidget* StatSlotWidgetClass;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_RoleIcon;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_Role;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x280, Size: 1]
	ProgressBar* Bind_PBar_Exp;//[Offset: 0x288, Size: 1]
	TextBlock* Bind_Text_Exp;//[Offset: 0x290, Size: 1]
	VerticalBox* Bind_VBox_Offensive;//[Offset: 0x298, Size: 1]
	VerticalBox* Bind_VBox_Defensive;//[Offset: 0x2a0, Size: 1]
	VerticalBox* Bind_VBox_Utility;//[Offset: 0x2a8, Size: 1]
	Object* RoleIcon_Tank;//[Offset: 0x2b0, Size: 1]
	Object* RoleIcon_Bruiser;//[Offset: 0x2b8, Size: 1]
	Object* RoleIcon_Assassin;//[Offset: 0x2c0, Size: 1]
	Object* RoleIcon_Caster;//[Offset: 0x2c8, Size: 1]
	Object* RoleIcon_Marksman;//[Offset: 0x2d0, Size: 1]
	Object* RoleIcon_Support;//[Offset: 0x2d8, Size: 1]
	FText RoleText_Tank;//[Offset: 0x2e0, Size: 1]
	FText RoleText_Bruiser;//[Offset: 0x2f8, Size: 1]
	FText RoleText_Assassin;//[Offset: 0x310, Size: 1]
	FText RoleText_Caster;//[Offset: 0x328, Size: 1]
	FText RoleText_Marksman;//[Offset: 0x340, Size: 1]
	FText RoleText_Support;//[Offset: 0x358, Size: 1]
	UnitStatComponent* SubscribedStatComponent;//[Offset: 0x3c0, Size: 1]
	void Update(float InExp);// 0x19dcce0
	void OnPlayerStatChanged();// 0x19dbc10
	void BindLocalCharacterOnStatChanged();// 0x19da8e0

--------------------------------
Class: OPStatSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_StatIcon;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Up;//[Offset: 0x268, Size: 1]
	Image* Bind_Image_Down;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_StatName;//[Offset: 0x278, Size: 1]
	TextBlock* Bind_Text_StatValue;//[Offset: 0x280, Size: 1]
	SlateColor ValueTextColor_Default;//[Offset: 0x288, Size: 1]
	SlateColor NameTextColor_Default;//[Offset: 0x2b0, Size: 1]
	SlateColor ValueTextColor_Up;//[Offset: 0x2d8, Size: 1]
	SlateColor NameTextColor_Up;//[Offset: 0x300, Size: 1]
	SlateColor ValueTextColor_Down;//[Offset: 0x328, Size: 1]
	SlateColor NameTextColor_Down;//[Offset: 0x350, Size: 1]

--------------------------------
Class: OPSkillInfoWidget.UserWidget.Widget.Visual.Object
	OP_Character* CurrentCharacter;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_SkillPoint;//[Offset: 0x268, Size: 1]
	OPSkillSlotWidget* Bind_Widget_Slot_LM;//[Offset: 0x270, Size: 1]
	OPSkillSlotWidget* Bind_Widget_Slot_RM;//[Offset: 0x278, Size: 1]
	OPSkillSlotWidget* Bind_Widget_Slot_Q;//[Offset: 0x280, Size: 1]
	OPSkillSlotWidget* Bind_Widget_Slot_E;//[Offset: 0x288, Size: 1]
	OPSkillSlotWidget* Bind_Widget_Slot_R;//[Offset: 0x290, Size: 1]
	bool IsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	void Update();// 0x19d7200
	void SetPlayerSkillPoint(byte InNewPoint);// 0x19d5f70
	void OnPlayerSkillPointChanged(byte InNewPoint);// 0x19d4e10
	void OnGlobalSkillInventoryUpdated(PSInventoryManager* InInventoryManager);// 0x19d4860
	void OnControllingCharacterChanged();// 0x19d4820

--------------------------------
Class: OPSkillSlotWidget.UserWidget.Widget.Visual.Object
	Widget* Bind_View_Skill;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Name;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Mana;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_CoolTime;//[Offset: 0x278, Size: 1]
	Image* Bind_Image_Mana;//[Offset: 0x280, Size: 1]
	Image* Bind_Image_CoolTime;//[Offset: 0x288, Size: 1]
	Image* Bind_Image_Icon;//[Offset: 0x290, Size: 1]
	Image* Bind_Image_KeyBack;//[Offset: 0x298, Size: 1]
	Widget* Bind_View_Key;//[Offset: 0x2a0, Size: 1]
	TextBlock* Bind_Text_Key;//[Offset: 0x2a8, Size: 1]
	Image* Bind_Image_Key;//[Offset: 0x2b0, Size: 1]
	OPSkillLevelWidget* Bind_Skill_Level;//[Offset: 0x2b8, Size: 1]
	CanvasPanel* Bind_Canvas_Ultimate;//[Offset: 0x2c0, Size: 1]
	TextBlock* Bind_Text_Level;//[Offset: 0x2c8, Size: 1]
	RichTextBlock* Bind_Text_Description;//[Offset: 0x2d0, Size: 1]
	WidgetSwitcher* Bind_WS_Info;//[Offset: 0x2d8, Size: 1]
	OPSkillVarsWidget* Bind_Widget_SkillVars;//[Offset: 0x2e0, Size: 1]
	Widget* Bind_Lock;//[Offset: 0x2e8, Size: 1]
	WidgetAnimation* Bind_Active_LevelUp;//[Offset: 0x2f0, Size: 1]
	WidgetAnimation* Bind_SkillUp;//[Offset: 0x2f8, Size: 1]
	FName DynamicMaterialIconSlot;//[Offset: 0x300, Size: 1]
	float ActivateOpacity;//[Offset: 0x308, Size: 1]
	float DeactivateOpacity;//[Offset: 0x30c, Size: 1]
	Margin VarsPadding;//[Offset: 0x310, Size: 1]
	enum SkillSlot;//[Offset: 0x320, Size: 1]
	FName HeroID;//[Offset: 0x324, Size: 1]
	void SetSkillInfo(enum InSkillSlot, FName InSkillGroupID, FName InSkillID, FName InHeroID);// 0x19d5ff0
	void OnSetSkillInfo_BP(enum InSkillSlot, FName InSkillGroupID, FName InSkillID, FName InHeroID);// 0x1d4eb70
	void DeactivateLevelUp();// 0x1d4eb70
	void ActivateLevelUp();// 0x1d4eb70

--------------------------------
Class: OPSkillVarsWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_VB;//[Offset: 0x260, Size: 1]
	class OPSkillVarsSlotWidget* SlotWidgetClass;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPSkillVarsSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Icon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_BeforeValue;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_AfterValue;//[Offset: 0x270, Size: 1]

--------------------------------
Class: MainBattleUIElement_AutoSkillUpgradeNotice.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_SkillName;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_SkillIcon;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_Notice;//[Offset: 0x270, Size: 1]
	void Reset(FName InSkillIndex, byte InLevel);// 0x18f9aa0
	void OnShow();// 0x1d4eb70
	void OnHide();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_AutoSkillButton.UserWidget.Widget.Visual.Object
	Button* Bind_Btn_Close;//[Offset: 0x260, Size: 1]
	void Set(bool InIsVisible);// 0x18f9cf0
	void OnShow();// 0x1d4eb70
	void OnHide();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_TrainingGuideComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x260, Size: 1]
	VerticalBox* Bind_Vertical;//[Offset: 0x268, Size: 1]
	class MainBattleUIElement_TrainingGuideItem* ItemClassObject;//[Offset: 0x270, Size: 1]
	void Show();// 0x1d4eb70
	void Hide();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_TrainingGuideItem.UserWidget.Widget.Visual.Object
	RichTextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void SetText(out const FText InText);// 0x1d4eb70
	void OnCheck(bool bIsChecked);// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_TrainingToastComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text;//[Offset: 0x260, Size: 1]
	void Show();// 0x1d4eb70
	void Hide();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_TutorialToastComponent.UserWidget.Widget.Visual.Object
	RichTextBlock* Bind_Description;//[Offset: 0x260, Size: 1]
	void Show();// 0x1d4eb70
	void OnClickAnimation();// 0x1d4eb70
	void OffClickAnimation();// 0x1d4eb70
	void Hide();// 0x1d4eb70

--------------------------------
Class: OP_CheatTerminalComponent.ActorComponent.Object
	Actor* TargetForInfo;//[Offset: 0xe0, Size: 1]
	void SwitchToObserver(OP_PlayerController* InPC, bool InbIsPureObserver, FString InClientLoginID);// 0x1949eb0
	void SpawnActorFromCheat(const FString[] InArgs, Transform InSpawnTransform, FString InClientLoginID);// 0x1949cd0
	void DebugCrashServer(const FString[] InArgs, FString InClientLoginID);// 0x1946f50
	void DebugCrashClient(out const FString[] InArgs, FString InClientLoginID);// 0x1946e10
	void Cheat_Win(int InWinTeam, FString InClientLoginID);// 0x19468c0
	void Cheat_ToggleLog(bool InOn, FString InClientLoginID);// 0x19467c0
	void Cheat_StopMinions(bool InIsStop, FString InClientLoginID);// 0x19466c0
	void Cheat_StopAction(bool InShouldStop, FString InClientLoginID);// 0x19465c0
	void Cheat_StatStartFile(bool OnOff, FString InClientLoginID);// 0x19464c0
	void Cheat_SetDamage(int InNewValue, FString InClientLoginID);// 0x19463d0
	void Cheat_SendRoundEndResult(FString InClientLoginID);// 0x1946320
	void Cheat_RemoveItem(int InSlow, FString InClientLoginID);// 0x1946230
	void Cheat_RegenMP(bool OnOff, FString InClientLoginID);// 0x1946130
	void Cheat_RegenHP(bool OnOff, FString InClientLoginID);// 0x1946030
	void Cheat_NetProfile(bool OnOff, FString InClientLoginID);// 0x1945f30
	void Cheat_MoveSpeed(bool OnOff, FString InClientLoginID);// 0x1945e30
	void Cheat_LevelUp(int InNewLevel, FString InClientLoginID);// 0x1945d40
	void Cheat_KillTarget(int InTargetActorID, FString InClientLoginID);// 0x1945c50
	void Cheat_KillLaneMinions(FString InClientLoginID);// 0x1945ba0
	void Cheat_Hide(bool InIsSet, FString InClientLoginID);// 0x1945aa0
	void Cheat_Gold(int InNewValue, FString InClientLoginID);// 0x19459b0
	void Cheat_God(int InGodType, FString InClientLoginID);// 0x19458c0
	void Cheat_GetDamage(int InNewValue, FString InClientLoginID);// 0x19457d0
	void Cheat_ForceRespawn(FString InClientLoginID);// 0x1945720
	void Cheat_ExpUp(int InNewEXP, FString InClientLoginID);// 0x1945630
	void Cheat_Dunk(int InTeamNum, FString InClientLoginID);// 0x1945540
	void Cheat_CoolDown(bool OnOff, FString InClientLoginID);// 0x1945440
	void Cheat_BreakLaneSpawners(bool InIsStop, FString InClientLoginID);// 0x1945340
	void Cheat_BotPossessAll(bool InIsPossessAll, FString InClientLoginID);// 0x1945240
	void Cheat_AddItem(int InNewValue, FString InClientLoginID);// 0x1945150
	void ChangeTeam(const FString[] InArgs, Transform InSpawnTransform, FString InClientLoginID);// 0x1944f10

--------------------------------
Class: OPSkillSystemReplicationTerminal.ActorComponent.Object
	void SyncUnitbaseExp_S2C_Reliable(UnitBase* InUnitBase, float InExp);// 0x19d7120
	void SyncStats_S2C_Reliable(UnitStatComponent* InStatComponent, const OPSyncStatData[] Values);// 0x19d7030
	void SyncSlotModification_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, const OPSkillSlotData[] InSlotModification);// 0x19d6f10
	void SyncSkillStateCreation_S2C_Unreliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlot, float InSkillAcceleration);// 0x19d6bb0
	void SyncSkillStateCreation_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlot, float InSkillAcceleration);// 0x19d6a70
	void SyncSkillState_Unreliable(OPSkillComponent* InTargetSkillComponent, SyncSkillStateArgument InSyncSkillStateArgument);// 0x19d6e00
	void SyncSkillState_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, SyncSkillStateArgument InSyncSkillStateArgument);// 0x19d6cf0
	void SyncSkillSlotID_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, FName InSkillSlotID);// 0x19d69a0
	void SyncSkillPoint_S2C_Reliable(PSInventoryManager* InInventoryManager, byte InSkillPoint);// 0x19d68d0
	void SyncSkillLevels_S2C_Reliable(PSInventoryManager* InInventoryManager, const int[] InSkillLevels);// 0x19d67e0
	void SyncSkillLevel_S2C_Reliable(PSInventoryManager* InInventoryManager, enum InSkillSlot, int NewAmount);// 0x19d66d0
	void SyncPlaySoundTableID_S2C_Reliable(FName InSoundTableID, FName InSkinID, Vector_NetQuantize InOrigin);// 0x19d65b0
	void SyncItemCharges_S2C_Reliable(PSInventoryManager* InInventoryManager, const FName[] InSlotIDs, const int[] InSkillLevels);// 0x19d6470
	void SyncItemCharge_S2C_Reliable(PSInventoryManager* InInventoryManager, FName InSlotID, int InAmount);// 0x19d6360
	void SyncImportedCoolTime_S2C_Reliable(PSCoolTimeManager* InCoolTimeManager, const CoolTimeSyncInfo[] InImportedData);// 0x19d6270
	void SyncCoolTime_S2C_Reliable(PSCoolTimeManager* InCoolTimeManager, FName Key, Vector_NetQuantize100 CoolDownInfo);// 0x19d6150
	void OnSpawnSkillCollider_S2AC_WithPreviousColliderLocation_UnReliable(Actor* InProjectileOwner, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, Vector_NetQuantize InPreviousColliderLocation, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x19d5950
	void OnSpawnSkillCollider_S2AC_WithPreviousColliderLocation_Reliable(Actor* InProjectileOwner, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, Vector_NetQuantize InPreviousColliderLocation, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x19d56b0
	void OnSpawnSkillCollider_S2AC_UnReliable(Actor* InProjectileOwner, Actor* InCreateTarget, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x19d5420
	void OnSpawnSkillCollider_S2AC_Reliable(Actor* InProjectileOwner, Actor* InCreateTarget, int InColliderTableUniqueIndex, SkillColliderClientSyncData InSyncData, SpawnSkillColliderClientSyncData InAdditionalSyncData);// 0x19d5190
	void OnSkillPreparationStateChanged_S2C_UnReliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlotData, bool InState, bool InIsCasted);// 0x19d5010
	void OnSkillPreparationStateChanged_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, SlotData InSlotData, bool InState, bool InIsCasted);// 0x19d4e90
	void OnKeywordStateChanged_S2C_UnReliable(OPAbnormalStateComponent* InAbnormalHolder, int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x19d4b80
	void OnKeywordStateChanged_S2C_Reliable(OPAbnormalStateComponent* InAbnormalHolder, int InEffectKeywordTableUniqueIndex, FName InKeyName, int InStack, AbnormalStateChangedEventPayload InPayload, Actor* InCausedFrom);// 0x19d48f0
	void OnColliderReplicateData_S2C_Reliable(int InColliderUniqueID, ItemModeDataSet InReplicatedData);// 0x19d4640
	void OnColliderDimensionChanged_S2C_UnReliable(int InColliderUniqueID, byte InNewDimension);// 0x19d4570
	void OnColliderDimensionChanged_S2C_Reliable(int InColliderUniqueID, byte InNewDimension);// 0x19d44a0
	void BroadcastStopSkillAnimation_S2C_Reliable(OPSkillComponent* InTargetSkillComponent, FName InSkillGroupID);// 0x19d4140

--------------------------------
Class: OPSkillSlotData
	enum SkillSlot;//[Offset: 0x0, Size: 1]
	FName SkillTableID;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SyncSkillStateArgument
	SlotData Slot;//[Offset: 0x0, Size: 1]
	enum SkillState;//[Offset: 0x1c, Size: 1]
	float TimeSinceCasted;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CoolTimeSyncInfo
	FName Name;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ItemModeDataSet
	Actor*[] ActorParameter;//[Offset: 0x0, Size: 1]
	Vector[] VectorParameter;//[Offset: 0x10, Size: 1]
	int[] ModeParameter;//[Offset: 0x20, Size: 1]

--------------------------------
Class: OPSkillCrosshairManager.ActorComponent.Object
	MulticastInlineDelegateProperty OnOutlinedTargetChanged;//[Size: 1]
	UnitBase* LastOutlinedUnit;//[Offset: 0xe0, Size: 1]
	OPSkillCrosshairManager* GetLocalSkillCrosshairComponent(Object* InWorldContextObject);// 0x19d4240

--------------------------------
Class: OPBattleDraftMenuComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_RoundStatus;//[Offset: 0x290, Size: 1]
	TextBlock* Bind_Text_CoolDown;//[Offset: 0x298, Size: 1]
	OPDraftSkinSelectWidget* Bind_View_SkinSelector;//[Offset: 0x2a0, Size: 1]
	Widget* Bind_View_HeroSelection;//[Offset: 0x2a8, Size: 1]
	OPBattleDraftMenuHeroListComponent* Bind_Panel_HeroList_Left;//[Offset: 0x2b0, Size: 1]
	OPBattleDraftMenuHeroListComponent* Bind_Panel_HeroList_Right;//[Offset: 0x2b8, Size: 1]
	OPHeroHexagonButton*[] HeroHexIcons;//[Offset: 0x2c0, Size: 1]
	OPButtonBase* Bind_Button_Select;//[Offset: 0x2d0, Size: 1]
	OPButtonBase* Bind_Button_Select_Disable;//[Offset: 0x2d8, Size: 1]
	OPButtonBase* Bind_Button_ForceStart;//[Offset: 0x2e0, Size: 1]
	OPButtonBase* Bind_Button_ForceStart_With_Bot;//[Offset: 0x2e8, Size: 1]
	OPButtonBase* Bind_Button_ForceStart_With_Bot_Draft;//[Offset: 0x2f0, Size: 1]
	OPButtonBase* Bind_Button_JoinBattle;//[Offset: 0x2f8, Size: 1]
	OPButtonBase* Bind_Button_BanHero;//[Offset: 0x300, Size: 1]
	OPButtonBase* Bind_Button_BanHeroTest;//[Offset: 0x308, Size: 1]
	OPLobbyShop_Slot_Filter_CheckBox* Bind_AutoSkillCheck;//[Offset: 0x310, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x318, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x320, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x328, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x330, Size: 1]
	OPPositionFilterWidget* Bind_PositionIcon;//[Offset: 0x338, Size: 1]
	class OP_Character* PreSelectedHeroClass;//[Offset: 0x340, Size: 1]
	class OP_Character* SelectedHeroClass;//[Offset: 0x348, Size: 1]
	class OPDraftSplashScreenWidget* DraftSplashScreenWidgetClass;//[Offset: 0x350, Size: 1]
	OPHealthProgressBar* Bind_TimeBar_L;//[Offset: 0x358, Size: 1]
	OPHealthProgressBar* Bind_TimeBar_R;//[Offset: 0x360, Size: 1]
	EditableText* Bind_EditText_Search;//[Offset: 0x368, Size: 1]
	OPDraftPositionSelectWidget* Bind_PositionSelect;//[Offset: 0x370, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x378, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x380, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x388, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x390, Size: 1]
	OPDraftUserSlotWidget_Ally* Bind_PlayerSlot_Team;//[Offset: 0x398, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3a0, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3a8, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3b0, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3b8, Size: 1]
	OPDraftUserSlotWidget_Enemy* Bind_PlayerSlot_Enemy;//[Offset: 0x3c0, Size: 1]
	Widget* Bind_Panel_Top;//[Offset: 0x3c8, Size: 1]
	Widget* Bind_Panel_PositionFilter;//[Offset: 0x3d0, Size: 1]
	Widget* Bind_Panel_MyTeam;//[Offset: 0x3d8, Size: 1]
	Widget* Bind_Panel_EnemyTeam;//[Offset: 0x3e0, Size: 1]
	OPDraftHeroInfoWidget* Bind_View_HeroInfo;//[Offset: 0x3e8, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x3f0, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x3f8, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x400, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x408, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Ally;//[Offset: 0x410, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x418, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x420, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x428, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x430, Size: 1]
	OPDraftBannedHeroSlot* Bind_BannedHeroSlot_Enemy;//[Offset: 0x438, Size: 1]
	WidgetAnimation* Bind_SceneCloseAni;//[Offset: 0x440, Size: 1]
	WidgetAnimation* Bind_SkinSelectorOpenAni;//[Offset: 0x448, Size: 1]
	WidgetAnimation* Bind_SkinSelectorCloseAni;//[Offset: 0x450, Size: 1]
	WidgetAnimation* Bind_TimeBarOnAni;//[Offset: 0x458, Size: 1]
	WidgetAnimation* Bind_TimeBarOffAni;//[Offset: 0x460, Size: 1]
	int PlayTickSoundWhenTimerBelow;//[Offset: 0x46c, Size: 1]
	int PlayTickSoundWhenTimerBelowClose;//[Offset: 0x470, Size: 1]
	SoundBase* TickSound;//[Offset: 0x478, Size: 1]
	SoundBase* TickSoundClose;//[Offset: 0x480, Size: 1]
	SoundBase* TickSound2;//[Offset: 0x488, Size: 1]
	SoundBase* TickSoundClose2;//[Offset: 0x490, Size: 1]
	SoundBase* TickSound3;//[Offset: 0x498, Size: 1]
	SoundBase* TickSoundClose3;//[Offset: 0x4a0, Size: 1]
	SoundBase* Sound_SelfLockIn;//[Offset: 0x4a8, Size: 1]
	SoundBase* Sound_RoundStatusChanged;//[Offset: 0x4b0, Size: 1]
	SoundBase* Sound_TeamPlayerLockIn;//[Offset: 0x4b8, Size: 1]
	SoundBase* Sound_EnemyPlayerLockIn;//[Offset: 0x4c0, Size: 1]
	enum LatestRoundState;//[Offset: 0x508, Size: 1]
	enum DraftBanPickHeroIconType;//[Offset: 0x509, Size: 1]
	byte CurrentPhaseTeam;//[Offset: 0x50a, Size: 1]
	float HeroTradeTimer;//[Offset: 0x50c, Size: 1]
	FText MESSAGE_TRADE_NOTICE;//[Offset: 0x510, Size: 1]
	FText MESSAGE_TRADE_ERROR;//[Offset: 0x528, Size: 1]
	FText MESSAGE_TRADE_REFUSAL;//[Offset: 0x540, Size: 1]
	<enum,FText> RoundStatusTitles;//[Offset: 0x558, Size: 1]
	<enum,FText> RoundStatusDescriptions;//[Offset: 0x5a8, Size: 1]
	MulticastInlineDelegateProperty OnDraftStateChangedDelegate;//[Size: 1]
	float CurrentRoundTime;//[Offset: 0x608, Size: 1]
	float CurrentRoundEndTime;//[Offset: 0x60c, Size: 1]
	bool IsShowSkinSelector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	int CurrentDraftPhase;//[Offset: 0x614, Size: 1]
	OP_InteractionPopup_Base* InteractionPopup;//[Offset: 0x628, Size: 1]
	void UpdatePlayerList_BP(out const OP_PlayerState*[] MyTeams, out const OP_PlayerState*[] EnemyTeams);// 0x1d4eb70
	void UpdatePlayerList();// 0x1931550
	void UpdateHeroList();// 0x1931530
	void Update_AutoSkill();// 0x1931570
	void ShowSkinSelector();// 0x19314f0
	void PlayCloseAnimation_BPNE(bool CloseUIOnly);// 0x10d0aa0
	void OnUpdateTimer_BP(bool IsAllyTurn);// 0x1d4eb70
	void OnSyncDraftTradeInfo();// 0x1930d90
	void OnSkinSelected(FName InSkinID);// 0x1930d00
	void OnRoundTimerChanged_BPNE(int RoundTime);// 0x1930c90
	void OnRoundTimerChanged(int InCoolDown);// 0x1930c00
	void OnRoundStateChanged_Observer_BP(enum RoundState);// 0x1d4eb70
	void OnRoundStateChanged_BPNE(enum RoundState);// 0x1930b90
	void OnRoundStateChanged(enum InNewRoundState);// 0x1930b10
	void OnRoundDesiredPlayersNumChanged();// 0x1930af0
	void OnResponseHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever, bool InIsTradeSuccess);// 0x19309e0
	void OnRequestHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever);// 0x1930910
	void OnPlayPickSound(class OP_Character InSelectedHero);// 0x19305a0
	void OnPlayerChangedTeam(PlayerState* InPlayer);// 0x1930880
	void OnPlayerChangedName(PlayerState* InPlayer, FString InNewName);// 0x1930790
	void OnPlayerChangedHero(OP_PlayerState* TargetPlayer, class OP_Character Hero, enum SelectionMethod, bool InIsPreSelectedHero);// 0x1930630
	void OnNotifyNextIsMyDraftTurn_BPNE();// 0x10d0450
	void OnHeroSelectedFromHexList(FName InHeroID);// 0x1930510
	void OnDraftStateChanged();// 0x19304f0
	void OnDraftSelectPositionPhaseStart_BP(bool IsMyTurn);// 0x1d4eb70
	void OnDraftingStart_BP(bool IsAllyTeam, bool IsMyTurn);// 0x1d4eb70
	void OnDraftingChangeTurn_BP(bool IsMyTurn);// 0x1d4eb70
	void OnDraftBanPickSelected_BP(bool IsAllyPick, out const FText HeroName, Texture2D* HeroPortrait);// 0x1d4eb70
	void OnDraftBanPickPhaseStart_BP(int InPhase, byte InTeamNum);// 0x1d4eb70
	void OnDraftBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x1930420
	void OnDraftBanPickPhaseEnd_BP(int InPhase, byte InTeamNum, FName InHeroID);// 0x1d4eb70
	void OnDraftBanPickPhaseEnd(int InPhase, byte InTeamNum, FName InHeroID);// 0x1930310
	void OnDraftBanPickNonSelected_BP(bool IsAllyPick);// 0x1d4eb70
	void OnDraftBanPickAllPhaseEnd_BP(byte EndTeamNum);// 0x1d4eb70
	void OnBanPickStart_BP(bool IsAllyTeam);// 0x1d4eb70
	void OnBanPickChangeTurn_BP(bool IsAllyTeam, int phase);// 0x1d4eb70
	bool IsWaitingState();// 0x19302a0
	void HideSelectButton();// 0x19300e0
	FText GetRoundStatusTitle();// 0x192fdc0
	FText GetRoundStatusDescription();// 0x192fd20
	void CloseMenuHandle(bool bSkipEnteringScreen);// 0x192f6e0
	void CheckForDuplicatedErrors();// 0xd8dcf0

--------------------------------
Class: OPDraftSkinSelectWidget.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_Button_Left;//[Offset: 0x260, Size: 1]
	OPButtonBase* Bind_Button_Right;//[Offset: 0x268, Size: 1]
	OPHorizontalIndicatorWidget* Bind_SlotIndicator;//[Offset: 0x270, Size: 1]
	CanvasPanel* Bind_HB_SkinList;//[Offset: 0x278, Size: 1]
	FName HeroID;//[Offset: 0x280, Size: 1]
	FName[] SkinList;//[Offset: 0x288, Size: 1]
	byte SelectedSkinIndex;//[Offset: 0x298, Size: 1]
	float ButtonSpacing;//[Offset: 0x29c, Size: 1]
	byte PreviewSlotNum;//[Offset: 0x2b0, Size: 1]
	class OPDraftSkinSelectButton* DraftSkinSelectButtonClass;//[Offset: 0x2b8, Size: 1]
	OPDraftSkinSelectButton*[] ButtonList;//[Offset: 0x2c0, Size: 1]
	void SelectSkinID(FName InSkinID);// 0x1967c90
	void OnSkinButtonClicked(OPDraftSkinSelectButton* InButton);// 0x1967b70
	void OnClickedRight();// 0x1967320
	void OnClickedLeft();// 0x1967300
	void MoveButtonArray(int InDirection);// 0x1967270
	void CheckSlotPosition(int InDirection);// 0x1966ee0

--------------------------------
Class: OPDraftSkinSelectButton.UserWidget.Widget.Visual.Object
	OPIconImageWidget* Bind_SkinIcon;//[Offset: 0x260, Size: 1]
	CanvasPanel* Bind_Hover;//[Offset: 0x268, Size: 1]
	CanvasPanel* Bind_Selected;//[Offset: 0x270, Size: 1]
	SoundBase* ClickUpSound;//[Offset: 0x288, Size: 1]
	SoundBase* HoverSound;//[Offset: 0x290, Size: 1]
	byte MaxSkinNum;//[Offset: 0x298, Size: 1]
	FName SkinID;//[Offset: 0x29c, Size: 1]
	bool HasSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool IsBanned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	byte ArrayIndex;//[Offset: 0x2a7, Size: 1]
	float ButtonSpacing;//[Offset: 0x2a8, Size: 1]
	float ScrollSpeed;//[Offset: 0x2ac, Size: 1]
	float SlotScale_Normal;//[Offset: 0x2b0, Size: 1]
	float SlotScale_Selected;//[Offset: 0x2b4, Size: 1]
	float TargetPosition;//[Offset: 0x2b8, Size: 1]
	bool IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	float MoveDirection;//[Offset: 0x2c0, Size: 1]
	OPDraftSkinSelectWidget* SkinSelectWidget;//[Offset: 0x2c8, Size: 1]
	enum HeroIconType;//[Offset: 0x2d0, Size: 1]
	void SetDisabledIcon(bool InIsBanned);// 0x1d4eb70

--------------------------------
Class: OPHorizontalIndicatorWidget.UserWidget.Widget.Visual.Object
	HorizontalBox* Bind_HorizontalBox;//[Offset: 0x260, Size: 1]
	class OPIndicatorSlotWidget* IndicatorSlotWidgetClass;//[Offset: 0x268, Size: 1]
	Margin SlotMargin;//[Offset: 0x270, Size: 1]
	byte PreviewSoltNum;//[Offset: 0x280, Size: 1]
	byte MaxSlotNum;//[Offset: 0x281, Size: 1]
	void SetSelected(byte InIndex);// 0x197ccd0
	void SetMaxSlot(byte InMaxSlotNum);// 0x197cb30

--------------------------------
Class: OPIndicatorSlotWidget.UserWidget.Widget.Visual.Object
	Widget* Bind_View_Selected;//[Offset: 0x260, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	void SetSelected_BP();// 0x1d4eb70
	void SetSelected(bool InIsSelected);// 0x197cd50

--------------------------------
Class: OPBattleDraftMenuHeroListComponent.UserWidget.Widget.Visual.Object
	CanvasPanel* Bind_Canvas_Main;//[Offset: 0x260, Size: 1]

--------------------------------
Class: OPHeroHexagonButton.UserWidget.Widget.Visual.Object
	int HeroButtonOrder;//[Offset: 0x260, Size: 1]
	OPIconImageWidget* Bind_Image_HeroIcon;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_BanCount;//[Offset: 0x270, Size: 1]
	Widget* Bind_Image_Rotate;//[Offset: 0x278, Size: 1]
	FName HeroID;//[Offset: 0x280, Size: 1]
	bool IsRotationHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool IsStandBy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	enum IconState;//[Offset: 0x28a, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	SoundBase* PressedSound;//[Offset: 0x2a0, Size: 1]
	SoundBase* HoveredSound;//[Offset: 0x2a8, Size: 1]
	class OPHeroHexButtonToolTipComponent* ToolTipClass;//[Offset: 0x2b0, Size: 1]
	enum HeroIconType;//[Offset: 0x2b8, Size: 1]
	void SetZOrder(int Order);// 0x197d160
	void OnMouseLeave_BP(enum CurrentStat);// 0x1d4eb70
	void OnMouseEnter_BP(enum CurrentStat);// 0x1d4eb70
	void OnMouseClick_BP(enum CurrentStat);// 0x1d4eb70
	void OnIconStateChanged_BPNE(enum NewState);// 0x18f88e0
	void OnChangeState_ServerBanned(bool HasHero);// 0x1d4eb70
	void OnChangeState_Selected_Me();// 0x1d4eb70
	void OnChangeState_Selected_Enemy(bool HasHero);// 0x1d4eb70
	void OnChangeState_Selected_Ally(bool HasHero);// 0x1d4eb70
	void OnChangeState_Normal(bool HasHero);// 0x1d4eb70
	void OnChangeState_Empty();// 0x1d4eb70
	void OnChangeState_CantPick(bool HasHero);// 0x1d4eb70
	void OnChangeState_BanPick_Me();// 0x1d4eb70
	void OnChangeState_BanPick_Ally();// 0x1d4eb70
	void OnChangeState_Banned(bool HasHero);// 0x1d4eb70
	void OnBanCountChanged_BP(int BanCount);// 0x1d4eb70
	bool IsMyTeamBanPick();// 0x197bea0
	int GetBanCount();// 0x197bc50

--------------------------------
Class: OPHeroHexButtonToolTipComponent.UserWidget.Widget.Visual.Object
	<enum,FText> RoleText;//[Offset: 0x260, Size: 1]
	<enum,FText> PositionText;//[Offset: 0x2b0, Size: 1]
	<enum,FText> DifficultyText;//[Offset: 0x300, Size: 1]
	<enum,FText> AttackCategoryText;//[Offset: 0x350, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x3a0, Size: 1]
	TextBlock* Bind_Text_Type;//[Offset: 0x3a8, Size: 1]
	TextBlock* Bind_Text_Role;//[Offset: 0x3b0, Size: 1]
	TextBlock* Bind_Text_Position;//[Offset: 0x3b8, Size: 1]
	TextBlock* Bind_Text_Difficult;//[Offset: 0x3c0, Size: 1]
	void SetCharacterID(FName InCharacterID);// 0x197c8f0

--------------------------------
Class: OPLobbyShop_Slot_Filter_CheckBox.OPUserWidgetWithSound.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_FilterName;//[Offset: 0x2d0, Size: 1]
	Image* Bind_IMG_Check;//[Offset: 0x2d8, Size: 1]
	Image* Bind_IMG_Hover;//[Offset: 0x2e0, Size: 1]
	float OpacityValue_forCheck;//[Offset: 0x2e8, Size: 1]
	float OpacityValue_forUncheck;//[Offset: 0x2ec, Size: 1]
	void OnSelectChanged_BPNE(bool InIsSelected);// 0x18f8960

--------------------------------
Class: OPPositionFilterWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	<enum,TitleDescTextGroup> PositionDescription;//[Offset: 0x2c8, Size: 1]
	<enum,Texture2D*> PositionIcon;//[Offset: 0x318, Size: 1]
	enum PositionType;//[Offset: 0x368, Size: 1]

--------------------------------
Class: OPDraftSplashScreenWidget.UserWidget.Widget.Visual.Object
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x260, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x268, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x270, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x278, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Ally;//[Offset: 0x280, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x288, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x290, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x298, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x2a0, Size: 1]
	OPDraftSplashScreenSlotWidget* Bind_UserSlot_Enemy;//[Offset: 0x2a8, Size: 1]
	void PlayAnimation_BP();// 0x1d4eb70
	void OnShow();// 0x1967b50
	void OnHide();// 0x19674c0

--------------------------------
Class: OPDraftSplashScreenSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_Hero;//[Offset: 0x260, Size: 1]
	Image* Bind_Image_Tier;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_Text_UserName;//[Offset: 0x270, Size: 1]
	TextBlock* Bind_Text_HeroName;//[Offset: 0x278, Size: 1]
	enum HeroIconType;//[Offset: 0x280, Size: 1]
	void OnSetPlayerState_BP(bool IsAlly, bool IsMe);// 0x1d4eb70

--------------------------------
Class: OPDraftPositionSelectWidget.UserWidget.Widget.Visual.Object
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x260, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x268, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x270, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x278, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon;//[Offset: 0x280, Size: 1]
	bool bShowDraftPositionByTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	enum[] Team1PositionSlots;//[Offset: 0x290, Size: 1]
	enum[] Team2PositionSlots;//[Offset: 0x2a0, Size: 1]
	enum[] CommonPositionSlots;//[Offset: 0x2b0, Size: 1]
	byte TeamNum;//[Offset: 0x2d0, Size: 1]
	enum RoundState;//[Offset: 0x2d1, Size: 1]
	void ShowWidget();// 0x1967f70
	void OnShowWidget_BP();// 0x1d4eb70
	void OnRoundStateChanged_BP(enum NewRoundState);// 0x1d4eb70
	void OnRoundStateChanged(enum NewRoundState);// 0x19679c0
	void OnPositionSelected(enum NewPositionType, int InIndex);// 0x1967710
	void OnPlayerLanePositionChanged(OP_PlayerState* APS, enum position, bool IsFixed);// 0x19674e0
	void OnHideWidget_BP();// 0x1d4eb70
	void OnEnableSelect_BP(bool IsEnable);// 0x1d4eb70
	void HideWidget();// 0x1967250

--------------------------------
Class: OPDraftPositionIconWidget.OPSelectableButton.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_OPTextBlock_LaneName;//[Offset: 0x2c8, Size: 1]
	VerticalBox* Bind_VB_UserName;//[Offset: 0x2d0, Size: 1]
	<enum,Texture2D*> RoleMap;//[Offset: 0x2d8, Size: 1]
	byte TeamNum;//[Offset: 0x328, Size: 1]
	enum PositionType;//[Offset: 0x329, Size: 1]
	int ButtonIndex;//[Offset: 0x32c, Size: 1]
	bool IsFixedPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	<enum,TitleDescTextGroup> RoleDescription;//[Offset: 0x338, Size: 1]
	Texture2D* Center;//[Offset: 0x388, Size: 1]
	Texture2D* Jungle;//[Offset: 0x390, Size: 1]
	Texture2D* LeftGaurdian;//[Offset: 0x398, Size: 1]
	Texture2D* LeftSpirit;//[Offset: 0x3a0, Size: 1]
	Texture2D* RightGuardian;//[Offset: 0x3a8, Size: 1]
	Texture2D* RightSpirit;//[Offset: 0x3b0, Size: 1]
	void OnSelectFixed();// 0x1d4eb70
	OPDraftPositionUserNameWidget* AddUserNameWidget_BP();// 0x1d4eb70

--------------------------------
Class: OPDraftPositionUserNameWidget.UserWidget.Widget.Visual.Object
	OPTextBlock* Bind_UserName;//[Offset: 0x260, Size: 1]
	FString UserName;//[Offset: 0x268, Size: 1]

--------------------------------
Class: OPDraftUserSlotWidget_Ally.OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_BG;//[Offset: 0x740, Size: 1]
	Image* Bind_Image_TeamBar;//[Offset: 0x748, Size: 1]
	Image* Bind_Image_TeamBar_Add;//[Offset: 0x750, Size: 1]
	Image* Bind_Image_Fx_Picking;//[Offset: 0x758, Size: 1]
	TextBlock* Bind_Text_UserHeroName;//[Offset: 0x760, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x768, Size: 1]
	OPButtonBase* Bind_Button_Trade;//[Offset: 0x770, Size: 1]
	WidgetAnimation* Bind_Picking_Anim;//[Offset: 0x778, Size: 1]
	SoundBase* PickSound_MySelf;//[Offset: 0x780, Size: 1]
	SoundBase* PickSound_Team;//[Offset: 0x788, Size: 1]
	bool IsTradeClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	void OnRoundTimerChanged(int InCoolDown);// 0x1967ac0
	void OnResponseHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever, bool InIsTradeSuccess);// 0x19678b0
	void OnRequestHeroTrade(OP_PlayerState* InSender, OP_PlayerState* InReciever);// 0x19677e0

--------------------------------
Class: OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_UserName;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_State;//[Offset: 0x268, Size: 1]
	OPDraftPositionIconWidget* Bind_PositionIcon_Main;//[Offset: 0x270, Size: 1]
	Widget* Bind_Image_PositionIconEmpty;//[Offset: 0x278, Size: 1]
	bool bUsePredefinedSlateBrushes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	FName HeroIconMaterialSlotName;//[Offset: 0x284, Size: 1]
	MaterialInstanceDynamic* Bind_Image_HeroIcon_Mat;//[Offset: 0x290, Size: 1]
	OP_PlayerState* CurrentPlayerState;//[Offset: 0x298, Size: 1]
	SlateBrush TeamBar_MySelf;//[Offset: 0x2a0, Size: 1]
	SlateBrush TeamBar_Others;//[Offset: 0x328, Size: 1]
	SlateBrush TeamBar_Disabled;//[Offset: 0x3b0, Size: 1]
	SlateBrush TeamBar_Add_MySelf;//[Offset: 0x438, Size: 1]
	SlateBrush TeamBar_Add_Others;//[Offset: 0x4c0, Size: 1]
	SlateBrush TeamBar_Add_Disabled;//[Offset: 0x548, Size: 1]
	LinearColor Color_Name_MySelf;//[Offset: 0x5d0, Size: 1]
	LinearColor Color_Name_Others;//[Offset: 0x5e0, Size: 1]
	LinearColor Color_Name_Disabled;//[Offset: 0x5f0, Size: 1]
	LinearColor Color_Fx_Picking_MySelf;//[Offset: 0x600, Size: 1]
	LinearColor Color_Fx_Picking_Others;//[Offset: 0x610, Size: 1]
	LinearColor Color_Fx_Picking_Disabled;//[Offset: 0x620, Size: 1]
	LinearColor Color_BG_MySelf;//[Offset: 0x630, Size: 1]
	LinearColor Color_BG_Others;//[Offset: 0x640, Size: 1]
	LinearColor Color_BG_Disabled;//[Offset: 0x650, Size: 1]
	byte TeamNum;//[Offset: 0x660, Size: 1]
	int SlotIndex;//[Offset: 0x664, Size: 1]
	FName CurrentHeroID;//[Offset: 0x668, Size: 1]
	FName CurrentHeroSkinID;//[Offset: 0x670, Size: 1]
	bool IsSlotEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool IsSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	enum HeroIconType;//[Offset: 0x67a, Size: 1]
	int CurrentSelectPositionPhase;//[Offset: 0x67c, Size: 1]
	FText TXT_POSITION_01;//[Offset: 0x680, Size: 1]
	FText TXT_POSITION_02;//[Offset: 0x698, Size: 1]
	FText TXT_POSITION_03;//[Offset: 0x6b0, Size: 1]
	FText TXT_POSITION_04;//[Offset: 0x6c8, Size: 1]
	FText TXT_POSITION_05;//[Offset: 0x6e0, Size: 1]
	FText TXT_SELECTING;//[Offset: 0x6f8, Size: 1]
	FText TXT_WAITING;//[Offset: 0x710, Size: 1]
	FText TXT_NEXTTURN;//[Offset: 0x728, Size: 1]
	void ONUpdateSlot_BP(bool bIsMySelf);// 0x1d4eb70
	void OnSlotUpdated_BPNE(bool bIsVisible);// 0x1967c00
	void OnSlotEnable_BP();// 0x1d4eb70
	void OnSlotDisable_BP();// 0x1d4eb70
	void OnSelectingStateStart_BP();// 0x1d4eb70
	void OnSelectingStateEnd_BP();// 0x1d4eb70
	void OnRoundStateChanged(enum InNewRoundState);// 0x1967a40
	void OnPlayerLanePositionChanged(OP_PlayerState* APS, enum position, bool IsFixed);// 0x1967600
	void OnDraftStateChanged();// 0x19674a0
	void OnDraftSelectPositionPhaseStart(int InPhase);// 0x1967410
	void OnDraftBanPickPhaseStart(int InPhase, byte InTeamNum);// 0x1967340

--------------------------------
Class: OPDraftUserSlotWidget_Enemy.OPDraftUserSlotBaseWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_UserHeroName;//[Offset: 0x740, Size: 1]
	Image* Bind_Image_HeroIcon;//[Offset: 0x748, Size: 1]
	WidgetAnimation* Bind_Picking_Anim;//[Offset: 0x750, Size: 1]
	SoundBase* PickSound_Enemy;//[Offset: 0x758, Size: 1]

--------------------------------
Class: OPDraftHeroInfoWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Name;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Type;//[Offset: 0x268, Size: 1]
	WidgetAnimation* Bind_Show_Anim;//[Offset: 0x270, Size: 1]
	<enum,FText> RoleText;//[Offset: 0x278, Size: 1]

--------------------------------
Class: OPDraftBannedHeroSlot.UserWidget.Widget.Visual.Object
	void SetHero(FName DefaultSkinID);// 0x1d4eb70
	void Init();// 0x1d4eb70

--------------------------------
Class: MainBattleUIElement_RoundEndResultComponent.UserWidget.Widget.Visual.Object
	void ShowAnimationThenLobby();// 0x1d4eb70
	void ShowAnimation_BPNE(bool InIsWin, Vector InLookAtPos);// 0x18fa3f0
	void OnTravelToLobby();// 0x18f9630

--------------------------------
Class: OPESCMenuComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPButtonBase* Bind_Button_Return;//[Offset: 0x290, Size: 1]
	OPButtonBase* Bind_Button_Settings;//[Offset: 0x298, Size: 1]
	OPButtonBase* Bind_Button_Surrender;//[Offset: 0x2a0, Size: 1]
	OPButtonBase* Bind_Button_Lobby;//[Offset: 0x2a8, Size: 1]
	OPDisconnectWidget* Bind_DisconnectWidget;//[Offset: 0x2b0, Size: 1]
	Widget* Bind_FastGameSettings;//[Offset: 0x2b8, Size: 1]
	OPTextBlock* Bind_Text_HeroName;//[Offset: 0x2c0, Size: 1]
	void Update_BP();// 0x1d4eb70
	void OnRoundStateChanged(enum InRoundState);// 0x196ba70

--------------------------------
Class: OPDisconnectWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Title;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_Description;//[Offset: 0x268, Size: 1]
	OPTextButtonBase* Bind_Button_Stay;//[Offset: 0x270, Size: 1]
	OPTextButtonBase* Bind_Button_Disconnect;//[Offset: 0x278, Size: 1]
	Widget* Bind_Frame_Normal;//[Offset: 0x280, Size: 1]
	Widget* Bind_Frame_Warning;//[Offset: 0x288, Size: 1]
	PopupTextSet Text_Normal_Draft;//[Offset: 0x290, Size: 1]
	PopupTextSet Text_Normal_InGame;//[Offset: 0x2c0, Size: 1]
	PopupTextSet Text_Single_Draft;//[Offset: 0x2f0, Size: 1]
	PopupTextSet Text_Single_InGame;//[Offset: 0x320, Size: 1]
	PopupTextSet Text_AI_Draft;//[Offset: 0x350, Size: 1]
	PopupTextSet Text_AI_InGame;//[Offset: 0x380, Size: 1]
	PopupTextSet Text_Custom_Draft;//[Offset: 0x3b0, Size: 1]
	PopupTextSet Text_Custom_InGame;//[Offset: 0x3e0, Size: 1]
	PopupTextSet Text_Training_InGame;//[Offset: 0x410, Size: 1]
	PopupTextSet Text_Tutorial_InGame;//[Offset: 0x440, Size: 1]
	SlateColor FontColor_Title_Normal;//[Offset: 0x470, Size: 1]
	SlateColor FontColor_Title_Warning;//[Offset: 0x498, Size: 1]
	SlateColor FontColor_Desc_Normal;//[Offset: 0x4c0, Size: 1]
	SlateColor FontColor_Desc_Warning;//[Offset: 0x4e8, Size: 1]
	UserWidget* PrevWidget;//[Offset: 0x510, Size: 1]
	void ShowWidget(UserWidget* InPrevWidget);// 0x1967ee0
	void HideWidget();// 0x1967230

--------------------------------
Class: PopupTextSet
	FText Title;//[Offset: 0x0, Size: 1]
	FText Description;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LaserPointer.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x220, Size: 1]
	FString NIAGARASYSTEM_VISIBILITY_PARAM_NAME;//[Offset: 0x228, Size: 1]
	void OnOtherDestroyed(Actor* OtherActor);// 0x18f89f0
	void ExecDestroy();// 0x18f6a00

--------------------------------
Class: SkillFunction

--------------------------------
Class: Point_LaneGuide.Actor.Object
	byte TeamNum;//[Offset: 0x220, Size: 1]
	enum[] PositionTypes;//[Offset: 0x228, Size: 1]
	class Point_LaneGuide_GoalActor* GoalActorClass;//[Offset: 0x238, Size: 1]
	Actor*[] ActorGoals;//[Offset: 0x240, Size: 1]
	void ShowPositionGuideSpline_BPNE(SplineComponent* InSplineCurve);// 0x1a06980
	void ShowPositionGuide_BPNE(Vector Finish, out const Vector[] PathList, float InDuration, int InPositionType);// 0x1a06a10
	void ActiveForDuration_BPNE(float InDuration);// 0x1a05090

--------------------------------
Class: Point_LaneGuide_GoalActor.Actor.Object
	Actor* ParentActor;//[Offset: 0x220, Size: 1]
	enum PositionType;//[Offset: 0x228, Size: 1]
	void InitLaneGuideGoal_BPNE(enum InPositionType, bool InIsMainGoal);// 0x1a05f80

--------------------------------
Class: OPAutoPilotComponent.ActorComponent.Object
	OPMinimapWidgetStyleComponent* Minimap_SB;//[Offset: 0xf8, Size: 1]
	OPMinimapWidgetStyleComponent* Minimap_HUD;//[Offset: 0x100, Size: 1]
	OP_Character* Character;//[Offset: 0x108, Size: 1]
	OP_PlayerController* PlayerController;//[Offset: 0x110, Size: 1]
	void OnClickMinimap();// 0x19302f0
	void OnBlockingEvent();// 0x19302d0

--------------------------------
Class: ScreenSpaceEffect.Object
	ScreenSpaceParticles[] ScreenSpaceEffects;//[Offset: 0x28, Size: 1]
	OP_PlayerController* OwnerPlayer;//[Offset: 0x38, Size: 1]
	MyHUD* HUD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ScreenSpaceParticles
	Vector2D Velocity;//[Offset: 0x0, Size: 1]
	Vector2D Pos;//[Offset: 0x8, Size: 1]
	Vector2D Size;//[Offset: 0x10, Size: 1]
	Texture2D* Particles;//[Offset: 0x18, Size: 1]
	MaterialInterface* MATParticles;//[Offset: 0x20, Size: 1]
	LinearColor Color;//[Offset: 0x28, Size: 1]
	float DeadTime;//[Offset: 0x38, Size: 1]
	float LifeTime;//[Offset: 0x3c, Size: 1]
	int TextureUWidth;//[Offset: 0x40, Size: 1]
	int TextureVHeight;//[Offset: 0x44, Size: 1]

--------------------------------
Class: MyHUD.HUD.Actor.Object
	<class ScreenSpaceEffect,ScreenSpaceEffect*> ScreenSpaceEffectsArray;//[Offset: 0x320, Size: 1]
	SoundBase* PointSound;//[Offset: 0x370, Size: 1]
	HUDPointDataSet[] PointHUDElementList;//[Offset: 0x378, Size: 1]
	void SetDisableDrawing(bool boo);// 0x1905490
	int GetWidth();// 0x1904de0
	int GetHeight();// 0x1904c70
	void AddPointHUD(FText Name, FText Point, LinearColor NameColor, LinearColor ValueColor);// 0x19049a0

--------------------------------
Class: HUDPointDataSet
	float LerpPer;//[Offset: 0x0, Size: 1]
	float LerperY;//[Offset: 0x4, Size: 1]
	FText Name;//[Offset: 0x8, Size: 1]
	FText Value;//[Offset: 0x20, Size: 1]
	float DieTime;//[Offset: 0x38, Size: 1]
	LinearColor NameColor;//[Offset: 0x3c, Size: 1]
	LinearColor ValueColor;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: Point_InhibitorSpawn.Actor.Object
	CapsuleComponent* RootSphereBorder;//[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* SkeletalMeshToShow;//[Offset: 0x230, Size: 1]
	class TowerBaseCPP* InhibitorClass;//[Offset: 0x238, Size: 1]
	FName TowerCharacterID;//[Offset: 0x240, Size: 1]
	FName PostTowerCharacterID;//[Offset: 0x248, Size: 1]
	TowerBaseCPP* FrontTower;//[Offset: 0x250, Size: 1]
	enum BuildingType;//[Offset: 0x258, Size: 1]
	enum LaneType;//[Offset: 0x259, Size: 1]
	TowerBaseCPP* CurrentTower;//[Offset: 0x260, Size: 1]
	int TeamNum;//[Offset: 0x268, Size: 1]
	float RespawnDelay;//[Offset: 0x26c, Size: 1]
	Vector WaypointOffset;//[Offset: 0x270, Size: 1]
	Vector SpawnPointOffset;//[Offset: 0x27c, Size: 1]
	bool IsFirstSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	JungleSpawnerHeadbarComponent* RespawnHeadbarComponent;//[Offset: 0x290, Size: 1]
	bool bSpawnedAtStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	TowerBaseCPP* SpawnInhibitor_ByCustom();// 0x1a0deb0
	void SpawnInhibitor();// 0x1a0de90
	void OnTowerSpawned_BPNE(TowerBaseCPP* InTower, float InRespawnTime);// 0x1a0d3e0
	void NotifyTowerDestroyed(Actor* InActor);// 0x1a0c8b0
	void BroadcastTowerSpawnEvent(TowerBaseCPP* InTower, float InRespawnTime);// 0x1a0bac0

--------------------------------
Class: TowerBaseCPP.Placeable_Object.TeamActorBase.Actor.Object
	SkeletalMeshComponent* TowerMesh;//[Offset: 0x2f8, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x300, Size: 1]
	MulticastInlineDelegateProperty OnCurrentEnemyChanged;//[Size: 1]
	TowerBaseCPP* FrontTower;//[Offset: 0x320, Size: 1]
	enum BuildingType;//[Offset: 0x328, Size: 1]
	enum LaneType;//[Offset: 0x329, Size: 1]
	float TimesPoweredPerPeriods;//[Offset: 0x32c, Size: 1]
	int PeriodsNum;//[Offset: 0x330, Size: 1]
	int PeriodsCount;//[Offset: 0x334, Size: 1]
	Actor* LastHitEnemy;//[Offset: 0x338, Size: 1]
	Actor* CurrentEnemy;//[Offset: 0x340, Size: 1]
	bool IsProtected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool IsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	SoundData AttackHitSound;//[Offset: 0x350, Size: 1]
	float AttackHitSoundVolumeOverrride;//[Offset: 0x3b0, Size: 1]
	SoundBase* DeathSound;//[Offset: 0x3b8, Size: 1]
	float DeathSoundVolumeOverride;//[Offset: 0x3c0, Size: 1]
	Point_InhibitorSpawn* CachedSpawner;//[Offset: 0x3c8, Size: 1]
	void SetRespawed(bool InIsRespawned);// 0x1a0ca60
	bool SetCurrentEnemy(Actor* Target);// 0x1a0dd70
	void OnSomethingOverlappedInVision(Actor* Target);// 0x1a0d350
	void OnSomethingEndOverlappedInVision(Actor* Target);// 0x1a0d230
	void OnRepActivated();// 0x1a0d010
	void OnCurrentEnemyChangedDelegate();// 0x1a0cf00
	void OnActivated(bool NewState);// 0x1a0c940
	void HandleTowerShootEffectBP(Vector Pos);// 0x1a0c750
	void BroadcastHitEffect(Vector_NetQuantize HitPos, Actor* InTarget);// 0x1a0b9e0

--------------------------------
Class: JungleSpawnerHeadbarComponent.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DamageHistorySync
	Actor* Attacker;//[Offset: 0x0, Size: 1]
	PlayerBase* AttackerPlayerUnit;//[Offset: 0x8, Size: 1]
	DateTime LastUpdateAt;//[Offset: 0x10, Size: 1]
	enum DamageCategory;//[Offset: 0x18, Size: 1]
	float DamageAmount;//[Offset: 0x1c, Size: 1]
	byte AttackerTeam;//[Offset: 0x20, Size: 1]
	FName AttackerHeroID;//[Offset: 0x24, Size: 1]
	FName AttackerSkinID;//[Offset: 0x2c, Size: 1]
	FString AttackerNameOverride;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ResponseClientHello
	UnitRespawnTimeInfo[] RespawnTimers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: UnitRespawnTimeInfo
	UnitBase* UnitBase;//[Offset: 0x0, Size: 1]
	float RespawnRemainTimeSecond;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 1]
	float Priority;//[Offset: 0x760, Size: 1]
	float BlendRadius;//[Offset: 0x764, Size: 1]
	float BlendWeight;//[Offset: 0x768, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x398c390

--------------------------------
Class: PawnDeadBody.Actor.Object
	ParticleSystem* Particle_DeadBats;//[Offset: 0x220, Size: 1]
	float Particle_DeadBats_Playtime;//[Offset: 0x228, Size: 1]
	Material* DeathMaterial;//[Offset: 0x230, Size: 1]
	SkeletalMeshComponent* Mesh;//[Offset: 0x238, Size: 1]
	OPUROComponent* OPUROComponent;//[Offset: 0x240, Size: 1]
	AnimSequence* DeathAnimation;//[Offset: 0x248, Size: 1]
	bool bHasPhysicsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	byte TeamNum;//[Offset: 0x251, Size: 1]
	void DoPlayDead(Vector InDirection, float InStrengthScale);// 0x19ff600

--------------------------------
Class: SkillStatInfo
	Texture2D* StatIcon;//[Offset: 0x0, Size: 1]
	FText StatName;//[Offset: 0x8, Size: 1]
	bool IsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float[] StatValues;//[Offset: 0x28, Size: 1]

--------------------------------
Class: OPSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	UnitBase* UnitBase;//[Offset: 0x280, Size: 1]
	OPDirectionComponent* DirectionComponent;//[Offset: 0x288, Size: 1]
	OPSkillComponent* SkillComponent;//[Offset: 0x290, Size: 1]
	OPAbnormalStateComponent* AbnormalStateComponent;//[Offset: 0x298, Size: 1]
	Vector CameraOffset;//[Offset: 0x2a0, Size: 1]
	void OnSkillStateChanged(SlotData InSlotFrom, FName InSkillGroupID, enum InNewState);// 0x19dbdc0
	void OnSkillPreparationStateChanged(SlotData InSlotFrom, FName InSkillGroupID, bool InActivated, bool InCasted);// 0x19dbc30
	void OnAbnormalStateChanged(bool InIsAdded, FName InKeywordType, FName InBaseKeyword, FName InKeyName, AbnormalStateChangedEventPayload InPayload, Actor* InCausedBy);// 0x19db6e0

--------------------------------
Class: OPEnemyNotifyActorComponent.ActorComponent.Object
	float MaxDistance;//[Offset: 0xb0, Size: 1]
	int MaxIndicatorNum;//[Offset: 0xb4, Size: 1]
	FName AttachToBoneName;//[Offset: 0xb8, Size: 1]
	float EnemyCheckInterval;//[Offset: 0xc0, Size: 1]
	float IndicatorAlphaUpdateThreshold;//[Offset: 0xc4, Size: 1]
	float RearDotThresholdValue;//[Offset: 0xc8, Size: 1]
	float SizeClampFrom;//[Offset: 0xcc, Size: 1]
	float SizeClampTo;//[Offset: 0xd0, Size: 1]
	Transform InitialTransform;//[Offset: 0xe0, Size: 1]
	float ZDiffPerIndicator;//[Offset: 0x110, Size: 1]
	int BlinkMaterialIndex;//[Offset: 0x114, Size: 1]
	StaticMesh* IndicatorMeshType;//[Offset: 0x158, Size: 1]

--------------------------------
Class: HeroHealthbar.HUDHeadbarComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	float LightFalloffExponent;//[Offset: 0x344, Size: 1]
	float SourceRadius;//[Offset: 0x348, Size: 1]
	float SoftSourceRadius;//[Offset: 0x34c, Size: 1]
	float SourceLength;//[Offset: 0x350, Size: 1]
	void SetSourceRadius(float bNewValue);// 0x398d4a0
	void SetSourceLength(float NewValue);// 0x398d420
	void SetSoftSourceRadius(float bNewValue);// 0x398d3a0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x398d210

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x328, Size: 1]
	float Radius;//[Offset: 0x32c, Size: 1]
	float AttenuationRadius;//[Offset: 0x330, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x334, Size: 1]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x39460c0
	void SetAttenuationRadius(float NewRadius);// 0x3946040
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x3945f30

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 1]
	float ShadowExponent;//[Offset: 0x4, Size: 1]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: ShopItemHistory
	ItemInventoryInfoSync[] Inventory;//[Offset: 0x0, Size: 1]
	float Price;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KillStreakData
	FName KillerUnitSkinID;//[Offset: 0x0, Size: 1]
	FName VictimUnitSkinID;//[Offset: 0x8, Size: 1]
	byte KillerTeamNum;//[Offset: 0x10, Size: 1]
	byte VictimTeamNum;//[Offset: 0x11, Size: 1]
	FText KillerNameOverride;//[Offset: 0x18, Size: 1]
	FText VictimNameOverride;//[Offset: 0x30, Size: 1]
	byte KillStreakNumber;//[Offset: 0x48, Size: 1]
	byte KillStreakContinuousNumber;//[Offset: 0x49, Size: 1]
	PlayerState* LocalTarget;//[Offset: 0x50, Size: 1]

--------------------------------
Class: OPGameEventDispatcher.ActorComponent.Object
	MulticastInlineDelegateProperty OnPlayerUseSkill;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamBlackScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundTimerChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDisconnected;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedTeam;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedName;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedHero;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerBoughtItem;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftPreBanPickChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftSelectPositionPhaseStart;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftBanPickPhaseStart;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftBanPickPhaseEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnSyncDraftTradeInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundDesiredPlayersNumChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnUnitExposedStateChangedGlobal;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalUnitDimensionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLanePositionChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerControllingNewHero;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty PreAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAbnormalStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnChangeDisconnected;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnGlobalSkillInventoryUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillPointChanged;//[Size: 1]
	static OPGameEventDispatcher* GetGameEventDispatcher(Object* InWorldContextObject);// 0x196fb60

--------------------------------
Class: OPUnitManager.ActorComponent.Object
	OPTimerManager* GameStateTimerManager;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitCreated;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitDestroyed;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitDeath;//[Size: 1]
	MulticastInlineDelegateProperty Delegate_OnUnitRespawn;//[Size: 1]
	float WorldBoundMinXY;//[Offset: 0x220, Size: 1]
	float WorldBoundMaxXY;//[Offset: 0x224, Size: 1]
	MaterialParameterCollection* MPC_FoliageInteraction;//[Offset: 0x228, Size: 1]
	TextureRenderTarget2D* RT_FoliageInteration;//[Offset: 0x230, Size: 1]
	Texture* T_FoliageInteration_Brush;//[Offset: 0x238, Size: 1]
	float FoliageRenderTargetDrawSize;//[Offset: 0x240, Size: 1]
	Actor*[] VisionBlockingIgnoreable;//[Offset: 0x248, Size: 1]
	OPDirectionComponent*[] DirectionComponentArray;//[Offset: 0x258, Size: 1]
	UnitBase*[] UnitArray;//[Offset: 0x268, Size: 1]
	PlayerBase*[] UnitArray_Type_PlayerBase;//[Offset: 0x278, Size: 1]
	OP_Character*[] UnitArray_Type_Character;//[Offset: 0x288, Size: 1]
	UnitVisionComponent*[] UnitArray_Type_UnitVisions;//[Offset: 0x298, Size: 1]
	float UnitVisionCheckInterval;//[Offset: 0x2ac, Size: 1]
	float LocationSnapshotInterval;//[Offset: 0x2b0, Size: 1]
	static void StopAllSoundsForRoundEnd(Object* InWorldContextObject);// 0x19ec630
	static Actor* SpawnUnit(Object* InWorldContextObject, FName InHeroSkinID, Transform InSpawnTransform, OPSpawnUnitArgument InSpawnArgument);// 0x19ec3f0
	static UnitBase*[] GetAllUnit(Object* InWorldContextObject);// 0x19eb390
	static PlayerBase*[] GetAllPlayerBaseInCircleRange(Object* InWorldContextObject, Vector InCenterLocation, float InRadius);// 0x19eb220
	static PlayerBase*[] GetAllPlayerBase(Object* InWorldContextObject);// 0x19eb150

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 1]
	int SizeY;//[Offset: 0x184, Size: 1]
	LinearColor ClearColor;//[Offset: 0x188, Size: 1]
	byte AddressX;//[Offset: 0x198, Size: 1]
	byte AddressY;//[Offset: 0x199, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 1]
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 1]
	byte MipsAddressU;//[Offset: 0x19e, Size: 1]
	byte MipsAddressV;//[Offset: 0x19f, Size: 1]
	byte OverrideFormat;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: OPSpawnUnitArgument
	byte TeamNum;//[Offset: 0x0, Size: 1]
	byte UnitLevel;//[Offset: 0x1, Size: 1]
	Actor* IsSummonsOf;//[Offset: 0x8, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x10, Size: 1]
	bool bSpawnLocationAsFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: OPSkillColliderManager.ActorComponent.Object
	MulticastInlineDelegateProperty Delegate_OnColliderDestroyed;//[Size: 1]
	OPSkillColliderActor*[] ColliderEnemyBlockable;//[Offset: 0x168, Size: 1]
	OPSkillColliderActor*[] ServerColliders;//[Offset: 0x178, Size: 1]
	OPSkillColliderActor*[] SyncedColliders;//[Offset: 0x188, Size: 1]
	void OnDestroySkillCollider_S2AC(int InColliderUniqueID, OPSkillColliderDestroyArgument InDestroyReason);// 0x19cdbe0
	void OnColliderBounce_S2AC(int InColliderUniqueID, Vector InStartLocation, Vector InReflectedDirection, int InBounceCounter);// 0x19cda50
	static OPSkillColliderManager* GetSkillColliderManager(Object* InWorldContextObject);// 0x19cc4c0
	OPSkillColliderActor*[] GetSkillColliderByOwnerAndGroupID(Actor* InColliderOwner, FName InColliderTableGroupID);// 0x19cc3b0
	OPSkillColliderActor*[] GetSkillColliderByOwner(Actor* InColliderOwner);// 0x19cc2d0
	OPSkillColliderActor*[] GetSkillColliderByGroupID(Object* InWorldContextObject, FName InColliderTableGroupID);// 0x19cc1c0
	static Transform GetRandomWalkableTransformOnNavigation(Actor* InPivotActor, float InRandomRadiusMin, float InRandomRadiusMax, int InIteration);// 0x19cbe30
	static Transform GetRandomAroundTransformInCylinder(Actor* InPivotActor, Vector2D InRandomRadiusMinMax, Vector2D InRandomHeightMinMax, float InProbeRadius, out bool OutIsValid, GetRandomAroundTransformInCylinderArgument InIterationArgument, bool InAllowSky);// 0x19cbab0
	int GetNumSkillColliderByOwnerAndGroupID(Actor* InColliderOwner, FName InColliderTableGroupID);// 0x19cb9e0
	OPSkillColliderActor*[] GetAllColliders(Object* InWorldContextObject);// 0x19cb2d0

--------------------------------
Class: OPSkillColliderDestroyArgument
	enum[] DestroyReasons;//[Offset: 0x0, Size: 1]
	int NextColliderUniqueID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GetRandomAroundTransformInCylinderArgument
	int MaxIterations;//[Offset: 0x28, Size: 1]
	enum RandomType;//[Offset: 0x2c, Size: 1]
	enum FindInLineType;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: SurrenderInfo
	OP_PlayerController*[] VotedPlayers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: OPLobbySelectGameModeWidget.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_SelectMap;//[Offset: 0x260, Size: 1]
	Button* Bind_BTN_SelectMap;//[Offset: 0x268, Size: 1]
	TextBlock* Bind_TXT_SelectedMap;//[Offset: 0x270, Size: 1]
	Image* Bind_IMG_Hover;//[Offset: 0x278, Size: 1]
	Image* Bind_IMG_Pressed;//[Offset: 0x280, Size: 1]
	void OnPressedSelectMap();// 0x1993650
	void OnPressed();// 0x1993650
	void OnChangedSelectedGameModeType(enum InSelectedGameModeType);// 0x19930d0

--------------------------------
Class: OPLobbyMailPopupWidget.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPDropDownListButtonWidget* Bind_DropdownList;//[Offset: 0x2a0, Size: 1]
	OPTextButtonBase* Bind_TextButton_ReadAll;//[Offset: 0x2a8, Size: 1]
	OPTextButtonBase* Bind_TextButton_DeleteAll;//[Offset: 0x2b0, Size: 1]
	class OPLobbyMailContentPopupWidget* MailContentPopupWidgetClass;//[Offset: 0x2b8, Size: 1]
	void ShowNoticeMessage_BP(FName InKey, out const FText InText);// 0x1d4eb70
	void SetMailNoticeMessage_BP(FString InMessage);// 0x1d4eb70
	void SetMailNoticeMessage(FString InStringKey);// 0x198ef60
	void RequestNextPage();// 0x198edc0
	void ReadAll();// 0x198ed10
	void OnTimer();// 0x198ecd0
	void OnShow_BP(bool InIsShow);// 0x1d4eb70
	void OnMailHeaderListReceived();// 0x198ea30
	void OnMailBodyInfoReceived(int InMailType, int64 InMailID);// 0x198e960
	void OnChangedMailStatus(int InMailType, int64 InMailID, enum InMailStatus);// 0x198e0d0
	void DeleteAll();// 0x198df60
	OPLobbyMailContentPopupWidget* BuildPopup_MailBody(Object* InWorldContextObject, int InMailType, int64 InMailID, Widget* InParentwidget, FName InOpKey);// 0x198db50

--------------------------------
Class: OPDropDownListButtonWidget.OPTextButtonBase.OPButtonBase.UserWidget.Widget.Visual.Object
	FText[] OptionsArray;//[Offset: 0x9d8, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e8, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e8, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e8, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e8, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e8, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e8, Size: 1]
	float WidthOverride;//[Offset: 0x9ec, Size: 1]
	float HeightOverride;//[Offset: 0x9f0, Size: 1]
	float MinDesiredWidth;//[Offset: 0x9f4, Size: 1]
	float MinDesiredHeight;//[Offset: 0x9f8, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x9fc, Size: 1]
	float MaxDesiredHeight;//[Offset: 0xa00, Size: 1]
	int DefaultIndex;//[Offset: 0xa04, Size: 1]
	enum DropDownMenuDirection;//[Offset: 0xa08, Size: 1]
	CanvasPanel* Bind_CanvasPanel;//[Offset: 0xa10, Size: 1]
	VerticalBox* Bind_VerticalBox;//[Offset: 0xa18, Size: 1]
	SizeBox* Bind_SizeBox;//[Offset: 0xa20, Size: 1]
	Image* Bind_Image_Arrow;//[Offset: 0xa28, Size: 1]
	int SelectedIndex;//[Offset: 0xa34, Size: 1]
	bool IsDropDownListOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	class OPDropDownListItemWidget* DropDownListItemClass;//[Offset: 0xa40, Size: 1]
	MulticastInlineDelegateProperty OnDropDownMenuClicked;//[Size: 1]
	void SetIsEnabledArrowIcon_BPIE(bool InIsEnabled);// 0x1d4eb70
	void SelectOptionByString(FString InOptionName);// 0x19402d0
	void SelectOption(int InIndex);// 0x1940240
	void OpenDropDownList();// 0x19400d0
	void CloseDropDownList();// 0x193f7e0

--------------------------------
Class: OPLobbyMailContentPopupWidget.OP_InteractionPopup_AlertAsker.OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	int CachedMailType;//[Offset: 0x3e8, Size: 1]
	int CachedMailID;//[Offset: 0x3ec, Size: 1]
	class UserWidget* WebViewClass;//[Offset: 0x3f0, Size: 1]
	void RemoveFromParentForPartyContextmenu(bool InIsShow);// 0x198ed30
	void OnShow_BP(bool InIsShow);// 0x1d4eb70
	void OnSetInfo_BP(int64 InMailID, int InMailType);// 0x1d4eb70
	void OnESCPressed_BP();// 0x1d4eb70
	void OnClicked_HyperLink();// 0x198e560
	void OnButtonClicked_Ok_BP(bool IsGetItemMode);// 0x1d4eb70

--------------------------------
Class: OP_InteractionPopup_AlertAsker.OP_InteractionPopup_Base.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnClickYes;//[Size: 1]
	MulticastInlineDelegateProperty OnClickNo;//[Size: 1]
	OPTextButtonBase* Bind_BTN_Yes;//[Offset: 0x340, Size: 1]
	OPTextButtonBase* Bind_BTN_No;//[Offset: 0x348, Size: 1]
	bool IsOutsideAreaClickPressYes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	void SetOutsideAreaClickPressYes(bool InIsYes);// 0x197cbb0
	void HandleTimeout();// 0x197bdd0
	void HandleReaction_Yes();// 0x197bd90
	void HandleReaction_No();// 0x197bd10
	static OP_InteractionPopup_AlertAsker* BuildPopup_AlertAsker_ButtonNameChange_BP(Object* InWorldContextObject, FText InYesText, FText InNoText, FText InMessage, Widget* InParentwidget, FName InOpKey);// 0x197a580
	static OP_InteractionPopup_AlertAsker* BuildPopup_AlertAsker_BP(Object* InWorldContextObject, FText InMessage, Widget* InParentwidget, FName InOpKey);// 0x197a3d0

--------------------------------
Class: FriendMenuComponent.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	OPEditableText* Bind_EditText_FriendName;//[Offset: 0x290, Size: 1]
	OPDropDownListButtonWidget* Bind_Button_Filter;//[Offset: 0x298, Size: 1]
	FriendListWidget* Bind_List_Recv;//[Offset: 0x2a0, Size: 1]
	FriendListWidget* Bind_List_Game_Friend;//[Offset: 0x2a8, Size: 1]
	FriendListWidget* Bind_List_Steam_Friend;//[Offset: 0x2b0, Size: 1]
	Button* Bind_Button_FriendSelectMode;//[Offset: 0x2b8, Size: 1]
	Button* Bind_Button_DeleteFriend;//[Offset: 0x2c0, Size: 1]
	OPTextButtonBase* Bind_Button_RequestDeny;//[Offset: 0x2c8, Size: 1]
	TextBlock* Bind_Text_FriendNum;//[Offset: 0x2d0, Size: 1]
	FText FilterText_Login;//[Offset: 0x2f0, Size: 1]
	FText FilterText_Name;//[Offset: 0x308, Size: 1]
	FText FilterText_Online;//[Offset: 0x320, Size: 1]
	FText FilterText_Offline;//[Offset: 0x338, Size: 1]
	void UpdateFromClientData();// 0x18ed8a0
	void SetVisibilityToCollapsed();// 0x18ed610
	void ReserveVisibilityToCollapsed(float InTime);// 0x18ed2c0
	void OnTimerForFriendState();// 0x18ed1a0
	void OnShow_BP(bool InIsShow);// 0x1d4eb70
	void OnRequestDenyButtonClicked();// 0x18ed160
	void OnPartyClientDataUpdated_BP();// 0x1d4eb70
	void OnPartyClientDataUpdated();// 0x18ec990
	void OnFriendSelectModeButtonClicked();// 0x18ecc30
	void OnFriendSelected(bool bIsSelected, FString MyID, FString FriendID);// 0x18ecc50
	void OnFriendNameCommited(out const FText Text, byte CommitMethod);// 0x18ec9d0
	void OnFriendClientDataUpdated();// 0x18ec990
	void OnFilterFriendList(enum FriendFilterType);// 0x18ec880
	void OnDeleteSelectedFriendPopup_Yes();// 0x18ec860
	void OnDeleteFriendButtonClicked();// 0x18ec740

--------------------------------
Class: FriendListWidget.UserWidget.Widget.Visual.Object
	OPTextButtonBase* Bind_Button_Request;//[Offset: 0x260, Size: 1]
	OPShopFoldingButtonWidget* Bind_Folding_Title;//[Offset: 0x268, Size: 1]
	ListView* Bind_ListView;//[Offset: 0x270, Size: 1]
	FText TitleText;//[Offset: 0x278, Size: 1]
	bool bHideRequestButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	void OnRequestButtonClicked_BP();// 0x1d4eb70
	void OnRequestButtonClicked();// 0x18ed140
	void OnFoldingButtonClicked(bool IsFolding);// 0x18ec900

--------------------------------
Class: OPLobbyMissionPopupWidget.OP_PopupWidgetBase.OPUserWidget.OPUserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* Bind_TXT_Title;//[Offset: 0x298, Size: 1]
	OPLobbyMission_Slot_Group* Bind_MissionGroup_Daily;//[Offset: 0x2a0, Size: 1]
	OPLobbyMission_Slot_Group* Bind_MissionGroup_Weekly;//[Offset: 0x2a8, Size: 1]
	void OnShow_BP(bool InIsShow);// 0x1d4eb70

--------------------------------
Class: OPLobbyMission_Slot_Group.UserWidget.Widget.Visual.Object
	OPLobbyMission_Slot_FoldingButton* Bind_Mission_Folding_Button;//[Offset: 0x268, Size: 1]
	ListView* Bind_ListView;//[Offset: 0x270, Size: 1]
	void OnPressed_FoldingBar();// 0x1993670

--------------------------------
Class: OPLobbyMission_Slot_FoldingButton.OPButtonBase.UserWidget.Widget.Visual.Object
	Button* Bind_BTN_MissonGroup;//[Offset: 0x830, Size: 1]
	TextBlock* Bind_TXT_MissionGroupInfo;//[Offset: 0x838, Size: 1]
	TextBlock* Bind_TXT_ExpireKey;//[Offset: 0x840, Size: 1]
	Image* Bind_Arrow;//[Offset: 0x848, Size: 1]
	void UpdateExpireDateTime();// 0x19939d0
	void OnRefreshMissionInfo();// 0x1993690

--------------------------------
Class: OPPartyRequestWidget.UserWidget.Widget.Visual.Object
	VerticalBox* Bind_Widget_PartyRequestGroup;//[Offset: 0x260, Size: 1]
	class OPPartyRequestSlotWidget* SlotWidgetClass;//[Offset: 0x268, Size: 1]
	void OnPartyClientDataEventFired(enum InEventType);// 0x19a8ee0

--------------------------------
Class: OPPartyRequestSlotWidget.UserWidget.Widget.Visual.Object
	Image* Bind_Image_HeroIcon;//[Offset: 0x260, Size: 1]
	TextBlock* Bind_Text_UserNickName;//[Offset: 0x268, Size: 1]
	OPButtonBase* Bind_Button_Accept;//[Offset: 0x270, Size: 1]
	OPButtonBase* Bind_Button_Deny;//[Offset: 0x278, Size: 1]
	ProgressBar* Bind_PB_Timer;//[Offset: 0x280, Size: 1]
	FString PartyMasterID;//[Offset: 0x288, Size: 1]
	void SortSlot();// 0xd8dcf0
	void ShowSlot();// 0x19a9ec0
	void SetPartyMasterID(FString InPartyMasterID);// 0x19a9be0
	void OnShow_BP(bool bIsShow);// 0x1d4eb70
	void OnDenyPartyRequest();// 0x19a8bc0
	void OnAcceptPartyRequest();// 0x19a8ba0
	void HideSlot();// 0x19a8a60

--------------------------------
Class: MainLobbySideMessageComponent.UserWidget.Widget.Visual.Object
	TextBlock* Bind_Text_Main;//[Offset: 0x260, Size: 1]
	void StartAnimation_BPNE();// 0x10d0450

--------------------------------
Class: OP_Shutter_ServerResponseWait.UserWidget.Widget.Visual.Object
	WidgetAnimation* WA_ShowShutter;//[Offset: 0x280, Size: 1]
	WidgetAnimation* WA_HideShutter;//[Offset: 0x288, Size: 1]
	void UpdateShutterVisibility(bool InbVisible);// 0x199a0a0
	void ShowShutter();// 0x19876c0
	void HideShutter();// 0x10cfdf0

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 1]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3bd8310
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3bd80c0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3bd7bb0
	void SetMoveBlockDetection(bool bEnable);// 0x3bd7b20
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3bd7930
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1d4eb70
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3bd75f0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3bd7360
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3bd7120
	void K2_SetFocus(Actor* NewFocus);// 0x3bd6f80
	void K2_SetFocalPoint(Vector FP);// 0x3bd6ef0
	void K2_ClearFocus();// 0x3bd6ed0
	bool HasPartialPath();// 0x3bd6cf0
	PathFollowingComponent* GetPathFollowingComponent();// 0x3bd6a40
	byte GetMoveStatus();// 0x3bd6980
	Vector GetImmediateMoveDestination();// 0x3bd6850
	Actor* GetFocusActor();// 0x3bd6820
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3bd6770
	Vector GetFocalPoint();// 0x3bd6730
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3bd6290
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3bd5f70

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3be1c90
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x3be1b50
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x3be1a60
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3be1990
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3be18c0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3be17f0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x3be1710
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x3be1630
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3be1560
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3be1480
	bool IsVectorValueSet(out const FName KeyName);// 0x3be1310
	Vector GetValueAsVector(out const FName KeyName);// 0x3be11a0
	FString GetValueAsString(out const FName KeyName);// 0x3be10c0
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3be1010
	Object* GetValueAsObject(out const FName KeyName);// 0x3be0f70
	FName GetValueAsName(out const FName KeyName);// 0x3be0ed0
	int GetValueAsInt(out const FName KeyName);// 0x3be0e30
	float GetValueAsFloat(out const FName KeyName);// 0x3be0d90
	byte GetValueAsEnum(out const FName KeyName);// 0x3be0cf0
	class Object GetValueAsClass(out const FName KeyName);// 0x3be0c50
	bool GetValueAsBool(out const FName KeyName);// 0x3be0bb0
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x3be0a20
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x3be0930
	void ClearValue(out const FName KeyName);// 0x3be0870

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString Reason);// 0x3be1d80
	void StartLogic();// 0x1a13110
	void RestartLogic();// 0x38a0460
	bool IsRunning();// 0x3be12e0
	bool IsPaused();// 0x3be12b0

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3bf0ba0
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3bf0a00
	Vector GetPathDestination();// 0x3bf05f0
	byte GetPathActionType();// 0x3bf05c0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2ac, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b0, Size: 1]
	uint32 DataVersion;//[Offset: 0x2b4, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionInfoUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3bd7c40
	void RequestStimuliListenerUpdate();// 0x3bd7910
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3bd7790
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x3bd6c00
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3bd6b50
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3bd6a60
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3bd6890
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3bd6640
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3bd62b0
	void ForgetAll();// 0x3bd61e0

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 1]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x3bdcb70
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x3bdc900
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x3bdc5c0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x3bdc4f0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x3bdc3b0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x2a58630
	void AIIgnorePlayers();// 0x38a0520

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3be13b0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x3be0b10
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x3be0750

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x3bed3b0

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x3bed540
	Vector[] GetResultsAsLocations();// 0x3bed330
	Actor*[] GetResultsAsActors();// 0x3bed2b0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x3bed1f0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x3bed130
	float GetItemScore(int ItemIndex);// 0x3bed090
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x1d4eb70

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x3bd76c0

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x3bf0dc0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x3bf0c30
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x3bf0390
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3bf00e0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3beff20
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3befd00
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3befac0

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x3bf08f0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x3bf07f0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3bf0750
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x3bf06b0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x3bf05a0
	void Finish(byte WithResult);// 0x3bf0520
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3bf02c0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x3ae6fa0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x3ae6d50

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x3ae6fc0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1d4eb70
	void EndTask();// 0x3ae6c60

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: Pawn_LobbyPawnViewer_C.OPPawnViewer_Common.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f8, Size: 1]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x300, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 1]
	Vector EmitterSpawnPosition;//[Offset: 0x310, Size: 1]
	Vector EmitterScale;//[Offset: 0x31c, Size: 1]
	SkeletalMeshComponent*[] SkeletalMeshes;//[Offset: 0x328, Size: 1]
	FXSystemComponent*[] FXSystemComponents;//[Offset: 0x338, Size: 1]
	float Hero Yaw;//[Offset: 0x348, Size: 1]
	void SetCharacterSeeFront(FName Socket, bool foundHead, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_ComponentHasTag_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_DoesSocketExist_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_MakeRotFromX_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x1d4eb70
	void MimicClass(class Actor TargetClass, class AnimInstance DefaultSkeletalMeshAB, bool bForceCharacterSeeForward, HeroSelectStudioData HeroSelectStudioData);// 0x1d4eb70
	void CleanSelf();// 0x1d4eb70
	void ShowSkeletalMeshes();// 0x1d4eb70
	void UpdateLocationAndScale(Vector Scale, Vector RelativeLocation, Vector AbsoluteLocation);// 0x1d4eb70
	void ExecuteUbergraph_Pawn_LobbyPawnViewer(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, class Actor K2Node_CustomEvent_TargetClass, class AnimInstance K2Node_CustomEvent_DefaultSkeletalMeshAB, bool K2Node_CustomEvent_bForceCharacterSeeForward, HeroSelectStudioData K2Node_CustomEvent_HeroSelectStudioData, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SceneComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, MimicedFXComponentInfo[] CallFunc_GetMimicedFXComponentsInfo_ReturnValue, Actor* CallFunc_GetCDOFromActorClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, OP_Character* K2Node_DynamicCast_AsOP_Character, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, int ___int_Array_Index_Variable, MimicedFXComponentInfo CallFunc_Array_Get_Item, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, NiagaraComponent* K2Node_DynamicCast_AsNiagara_Particle_System, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, Transform CallFunc_GetRelativeTransform_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, NiagaraComponent* CallFunc_AddComponent_ReturnValue, NiagaraSystem* CallFunc_GetAsset_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_GetRelativeTransform_ReturnValue, ParticleSystemComponent* CallFunc_AddComponent_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_RelativeLocation, Vector K2Node_CustomEvent_AbsoluteLocation, int ___int_Loop_Counter_Variable, bool CallFunc_Vector_IsNearlyZero_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int ___int_Loop_Counter_Variable, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_Array_Get_Item, FString CallFunc_GetObjectName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_ComponentHasTag_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte CallFunc_GetAnimationMode_ReturnValue, class Object CallFunc_SelectClass_ReturnValue, Transform CallFunc_GetRelativeTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Transform CallFunc_MakeTransform_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_FindComponentByName_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool ___bool_Variable, float CallFunc_Add_FloatFloat_ReturnValue, SceneComponent* K2Node_Select_Default, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x1d4eb70

--------------------------------
Class: OPPawnViewer_Common.Pawn.Actor.Object
	HeroSelectStudioData CharacterData;//[Offset: 0x298, Size: 1]
	float CharacterRotateSpeedLimit;//[Offset: 0x2f0, Size: 1]
	void SetAnimInstance(SkeletalMeshComponent* InSKMC);// 0x19adb30
	void OnSkinSelected(FName InHeroID);// 0x19ad8b0
	void OnRoundStateChanged(enum InNewRoundState);// 0x19ad7a0
	void OnPlayerChangedHero(OP_PlayerState* TargetPlayer, class OP_Character Hero, enum SelectionMethod, bool InIsPreSelectedHero);// 0x19ad0b0

--------------------------------
Class: HeroSelectStudioData.TableRowBase
	float ManualFocalLength;//[Offset: 0x8, Size: 1]
	Vector CameraDistance;//[Offset: 0xc, Size: 1]
	float CameraPitch;//[Offset: 0x18, Size: 1]
	Vector HeroScale;//[Offset: 0x1c, Size: 1]
	bool ForceFront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float HeroYaw;//[Offset: 0x2c, Size: 1]
	Vector HeroRelativeLocation;//[Offset: 0x30, Size: 1]
	class AnimInstance* WBPCharacterLobby;//[Offset: 0x40, Size: 1]
	AnimMontage* AMCharacterSelected;//[Offset: 0x48, Size: 1]
	AnimMontage* AMSkinSelected;//[Offset: 0x50, Size: 1]

--------------------------------
Class: MimicedFXComponentInfo
	FXSystemComponent* FXSystemComponent;//[Offset: 0x0, Size: 1]
	FName AttachParentName;//[Offset: 0x8, Size: 1]
	FName AttachSocketName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: lobby_p_C.OPLevelScriptActor_Lobby.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b0, Size: 1]
	float _____0_NewTrack_0_60B76B8748ED77D4099251B9E21ACA8A;//[Offset: 0x3b8, Size: 1]
	byte _____0__Direction_60B76B8748ED77D4099251B9E21ACA8A;//[Offset: 0x3bc, Size: 1]
